
COTS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002362  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011c  00800060  00002362  000023f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  0080017c  0080017c  00002512  2**0
                  ALLOC
  3 .stab         000037bc  00000000  00000000  00002514  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001874  00000000  00000000  00005cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00007544  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001b6  00000000  00000000  000076a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001f0d  00000000  00000000  0000785a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000010d2  00000000  00000000  00009767  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001030  00000000  00000000  0000a839  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000b86c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002e6  00000000  00000000  0000b9ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008f6  00000000  00000000  0000bcd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c5c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 54 09 	jmp	0x12a8	; 0x12a8 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 74 07 	jmp	0xee8	; 0xee8 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 a0 07 	jmp	0xf40	; 0xf40 <__vector_9>
      28:	0c 94 10 08 	jmp	0x1020	; 0x1020 <__vector_10>
      2c:	0c 94 e4 07 	jmp	0xfc8	; 0xfc8 <__vector_11>
      30:	0c 94 5f 08 	jmp	0x10be	; 0x10be <__vector_12>
      34:	0c 94 de 06 	jmp	0xdbc	; 0xdbc <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 e9 06 	jmp	0xdd2	; 0xdd2 <__vector_15>
      40:	0c 94 a1 0b 	jmp	0x1742	; 0x1742 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e6       	ldi	r30, 0x62	; 98
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e7       	ldi	r26, 0x7C	; 124
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 38       	cpi	r26, 0x8F	; 143
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d5 10 	call	0x21aa	; 0x21aa <main>
      8a:	0c 94 af 11 	jmp	0x235e	; 0x235e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 78 11 	jmp	0x22f0	; 0x22f0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 e7       	ldi	r26, 0x74	; 116
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 94 11 	jmp	0x2328	; 0x2328 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 84 11 	jmp	0x2308	; 0x2308 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a0 11 	jmp	0x2340	; 0x2340 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 84 11 	jmp	0x2308	; 0x2308 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a0 11 	jmp	0x2340	; 0x2340 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 78 11 	jmp	0x22f0	; 0x22f0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	84 e7       	ldi	r24, 0x74	; 116
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 94 11 	jmp	0x2328	; 0x2328 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 80 11 	jmp	0x2300	; 0x2300 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	64 e7       	ldi	r22, 0x74	; 116
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 9c 11 	jmp	0x2338	; 0x2338 <__epilogue_restores__+0x10>

0000078a <__gesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 84 11 	jmp	0x2308	; 0x2308 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gesf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 a0 11 	jmp	0x2340	; 0x2340 <__epilogue_restores__+0x18>

000007ea <__fixsfsi>:
     7ea:	ac e0       	ldi	r26, 0x0C	; 12
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 88 11 	jmp	0x2310	; 0x2310 <__prologue_saves__+0x20>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	be 01       	movw	r22, r28
     804:	6b 5f       	subi	r22, 0xFB	; 251
     806:	7f 4f       	sbci	r23, 0xFF	; 255
     808:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     80c:	8d 81       	ldd	r24, Y+5	; 0x05
     80e:	82 30       	cpi	r24, 0x02	; 2
     810:	61 f1       	breq	.+88     	; 0x86a <__stack+0xb>
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	50 f1       	brcs	.+84     	; 0x86a <__stack+0xb>
     816:	84 30       	cpi	r24, 0x04	; 4
     818:	21 f4       	brne	.+8      	; 0x822 <__fixsfsi+0x38>
     81a:	8e 81       	ldd	r24, Y+6	; 0x06
     81c:	88 23       	and	r24, r24
     81e:	51 f1       	breq	.+84     	; 0x874 <__stack+0x15>
     820:	2e c0       	rjmp	.+92     	; 0x87e <__stack+0x1f>
     822:	2f 81       	ldd	r18, Y+7	; 0x07
     824:	38 85       	ldd	r19, Y+8	; 0x08
     826:	37 fd       	sbrc	r19, 7
     828:	20 c0       	rjmp	.+64     	; 0x86a <__stack+0xb>
     82a:	6e 81       	ldd	r22, Y+6	; 0x06
     82c:	2f 31       	cpi	r18, 0x1F	; 31
     82e:	31 05       	cpc	r19, r1
     830:	1c f0       	brlt	.+6      	; 0x838 <__fixsfsi+0x4e>
     832:	66 23       	and	r22, r22
     834:	f9 f0       	breq	.+62     	; 0x874 <__stack+0x15>
     836:	23 c0       	rjmp	.+70     	; 0x87e <__stack+0x1f>
     838:	8e e1       	ldi	r24, 0x1E	; 30
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	82 1b       	sub	r24, r18
     83e:	93 0b       	sbc	r25, r19
     840:	29 85       	ldd	r18, Y+9	; 0x09
     842:	3a 85       	ldd	r19, Y+10	; 0x0a
     844:	4b 85       	ldd	r20, Y+11	; 0x0b
     846:	5c 85       	ldd	r21, Y+12	; 0x0c
     848:	04 c0       	rjmp	.+8      	; 0x852 <__fixsfsi+0x68>
     84a:	56 95       	lsr	r21
     84c:	47 95       	ror	r20
     84e:	37 95       	ror	r19
     850:	27 95       	ror	r18
     852:	8a 95       	dec	r24
     854:	d2 f7       	brpl	.-12     	; 0x84a <__fixsfsi+0x60>
     856:	66 23       	and	r22, r22
     858:	b1 f0       	breq	.+44     	; 0x886 <__stack+0x27>
     85a:	50 95       	com	r21
     85c:	40 95       	com	r20
     85e:	30 95       	com	r19
     860:	21 95       	neg	r18
     862:	3f 4f       	sbci	r19, 0xFF	; 255
     864:	4f 4f       	sbci	r20, 0xFF	; 255
     866:	5f 4f       	sbci	r21, 0xFF	; 255
     868:	0e c0       	rjmp	.+28     	; 0x886 <__stack+0x27>
     86a:	20 e0       	ldi	r18, 0x00	; 0
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	40 e0       	ldi	r20, 0x00	; 0
     870:	50 e0       	ldi	r21, 0x00	; 0
     872:	09 c0       	rjmp	.+18     	; 0x886 <__stack+0x27>
     874:	2f ef       	ldi	r18, 0xFF	; 255
     876:	3f ef       	ldi	r19, 0xFF	; 255
     878:	4f ef       	ldi	r20, 0xFF	; 255
     87a:	5f e7       	ldi	r21, 0x7F	; 127
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	20 e0       	ldi	r18, 0x00	; 0
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	40 e0       	ldi	r20, 0x00	; 0
     884:	50 e8       	ldi	r21, 0x80	; 128
     886:	b9 01       	movw	r22, r18
     888:	ca 01       	movw	r24, r20
     88a:	2c 96       	adiw	r28, 0x0c	; 12
     88c:	e2 e0       	ldi	r30, 0x02	; 2
     88e:	0c 94 a4 11 	jmp	0x2348	; 0x2348 <__epilogue_restores__+0x20>

00000892 <__floatunsisf>:
     892:	a8 e0       	ldi	r26, 0x08	; 8
     894:	b0 e0       	ldi	r27, 0x00	; 0
     896:	ef e4       	ldi	r30, 0x4F	; 79
     898:	f4 e0       	ldi	r31, 0x04	; 4
     89a:	0c 94 80 11 	jmp	0x2300	; 0x2300 <__prologue_saves__+0x10>
     89e:	7b 01       	movw	r14, r22
     8a0:	8c 01       	movw	r16, r24
     8a2:	61 15       	cp	r22, r1
     8a4:	71 05       	cpc	r23, r1
     8a6:	81 05       	cpc	r24, r1
     8a8:	91 05       	cpc	r25, r1
     8aa:	19 f4       	brne	.+6      	; 0x8b2 <__floatunsisf+0x20>
     8ac:	82 e0       	ldi	r24, 0x02	; 2
     8ae:	89 83       	std	Y+1, r24	; 0x01
     8b0:	60 c0       	rjmp	.+192    	; 0x972 <__floatunsisf+0xe0>
     8b2:	83 e0       	ldi	r24, 0x03	; 3
     8b4:	89 83       	std	Y+1, r24	; 0x01
     8b6:	8e e1       	ldi	r24, 0x1E	; 30
     8b8:	c8 2e       	mov	r12, r24
     8ba:	d1 2c       	mov	r13, r1
     8bc:	dc 82       	std	Y+4, r13	; 0x04
     8be:	cb 82       	std	Y+3, r12	; 0x03
     8c0:	ed 82       	std	Y+5, r14	; 0x05
     8c2:	fe 82       	std	Y+6, r15	; 0x06
     8c4:	0f 83       	std	Y+7, r16	; 0x07
     8c6:	18 87       	std	Y+8, r17	; 0x08
     8c8:	c8 01       	movw	r24, r16
     8ca:	b7 01       	movw	r22, r14
     8cc:	0e 94 c2 04 	call	0x984	; 0x984 <__clzsi2>
     8d0:	fc 01       	movw	r30, r24
     8d2:	31 97       	sbiw	r30, 0x01	; 1
     8d4:	f7 ff       	sbrs	r31, 7
     8d6:	3b c0       	rjmp	.+118    	; 0x94e <__floatunsisf+0xbc>
     8d8:	22 27       	eor	r18, r18
     8da:	33 27       	eor	r19, r19
     8dc:	2e 1b       	sub	r18, r30
     8de:	3f 0b       	sbc	r19, r31
     8e0:	57 01       	movw	r10, r14
     8e2:	68 01       	movw	r12, r16
     8e4:	02 2e       	mov	r0, r18
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__floatunsisf+0x5e>
     8e8:	d6 94       	lsr	r13
     8ea:	c7 94       	ror	r12
     8ec:	b7 94       	ror	r11
     8ee:	a7 94       	ror	r10
     8f0:	0a 94       	dec	r0
     8f2:	d2 f7       	brpl	.-12     	; 0x8e8 <__floatunsisf+0x56>
     8f4:	40 e0       	ldi	r20, 0x00	; 0
     8f6:	50 e0       	ldi	r21, 0x00	; 0
     8f8:	60 e0       	ldi	r22, 0x00	; 0
     8fa:	70 e0       	ldi	r23, 0x00	; 0
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	a0 e0       	ldi	r26, 0x00	; 0
     902:	b0 e0       	ldi	r27, 0x00	; 0
     904:	04 c0       	rjmp	.+8      	; 0x90e <__floatunsisf+0x7c>
     906:	88 0f       	add	r24, r24
     908:	99 1f       	adc	r25, r25
     90a:	aa 1f       	adc	r26, r26
     90c:	bb 1f       	adc	r27, r27
     90e:	2a 95       	dec	r18
     910:	d2 f7       	brpl	.-12     	; 0x906 <__floatunsisf+0x74>
     912:	01 97       	sbiw	r24, 0x01	; 1
     914:	a1 09       	sbc	r26, r1
     916:	b1 09       	sbc	r27, r1
     918:	8e 21       	and	r24, r14
     91a:	9f 21       	and	r25, r15
     91c:	a0 23       	and	r26, r16
     91e:	b1 23       	and	r27, r17
     920:	00 97       	sbiw	r24, 0x00	; 0
     922:	a1 05       	cpc	r26, r1
     924:	b1 05       	cpc	r27, r1
     926:	21 f0       	breq	.+8      	; 0x930 <__floatunsisf+0x9e>
     928:	41 e0       	ldi	r20, 0x01	; 1
     92a:	50 e0       	ldi	r21, 0x00	; 0
     92c:	60 e0       	ldi	r22, 0x00	; 0
     92e:	70 e0       	ldi	r23, 0x00	; 0
     930:	4a 29       	or	r20, r10
     932:	5b 29       	or	r21, r11
     934:	6c 29       	or	r22, r12
     936:	7d 29       	or	r23, r13
     938:	4d 83       	std	Y+5, r20	; 0x05
     93a:	5e 83       	std	Y+6, r21	; 0x06
     93c:	6f 83       	std	Y+7, r22	; 0x07
     93e:	78 87       	std	Y+8, r23	; 0x08
     940:	8e e1       	ldi	r24, 0x1E	; 30
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	8e 1b       	sub	r24, r30
     946:	9f 0b       	sbc	r25, r31
     948:	9c 83       	std	Y+4, r25	; 0x04
     94a:	8b 83       	std	Y+3, r24	; 0x03
     94c:	12 c0       	rjmp	.+36     	; 0x972 <__floatunsisf+0xe0>
     94e:	30 97       	sbiw	r30, 0x00	; 0
     950:	81 f0       	breq	.+32     	; 0x972 <__floatunsisf+0xe0>
     952:	0e 2e       	mov	r0, r30
     954:	04 c0       	rjmp	.+8      	; 0x95e <__floatunsisf+0xcc>
     956:	ee 0c       	add	r14, r14
     958:	ff 1c       	adc	r15, r15
     95a:	00 1f       	adc	r16, r16
     95c:	11 1f       	adc	r17, r17
     95e:	0a 94       	dec	r0
     960:	d2 f7       	brpl	.-12     	; 0x956 <__floatunsisf+0xc4>
     962:	ed 82       	std	Y+5, r14	; 0x05
     964:	fe 82       	std	Y+6, r15	; 0x06
     966:	0f 83       	std	Y+7, r16	; 0x07
     968:	18 87       	std	Y+8, r17	; 0x08
     96a:	ce 1a       	sub	r12, r30
     96c:	df 0a       	sbc	r13, r31
     96e:	dc 82       	std	Y+4, r13	; 0x04
     970:	cb 82       	std	Y+3, r12	; 0x03
     972:	1a 82       	std	Y+2, r1	; 0x02
     974:	ce 01       	movw	r24, r28
     976:	01 96       	adiw	r24, 0x01	; 1
     978:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     97c:	28 96       	adiw	r28, 0x08	; 8
     97e:	ea e0       	ldi	r30, 0x0A	; 10
     980:	0c 94 9c 11 	jmp	0x2338	; 0x2338 <__epilogue_restores__+0x10>

00000984 <__clzsi2>:
     984:	ef 92       	push	r14
     986:	ff 92       	push	r15
     988:	0f 93       	push	r16
     98a:	1f 93       	push	r17
     98c:	7b 01       	movw	r14, r22
     98e:	8c 01       	movw	r16, r24
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	e8 16       	cp	r14, r24
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	f8 06       	cpc	r15, r24
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	08 07       	cpc	r16, r24
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	18 07       	cpc	r17, r24
     9a0:	88 f4       	brcc	.+34     	; 0x9c4 <__clzsi2+0x40>
     9a2:	8f ef       	ldi	r24, 0xFF	; 255
     9a4:	e8 16       	cp	r14, r24
     9a6:	f1 04       	cpc	r15, r1
     9a8:	01 05       	cpc	r16, r1
     9aa:	11 05       	cpc	r17, r1
     9ac:	31 f0       	breq	.+12     	; 0x9ba <__clzsi2+0x36>
     9ae:	28 f0       	brcs	.+10     	; 0x9ba <__clzsi2+0x36>
     9b0:	88 e0       	ldi	r24, 0x08	; 8
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	a0 e0       	ldi	r26, 0x00	; 0
     9b6:	b0 e0       	ldi	r27, 0x00	; 0
     9b8:	17 c0       	rjmp	.+46     	; 0x9e8 <__clzsi2+0x64>
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	a0 e0       	ldi	r26, 0x00	; 0
     9c0:	b0 e0       	ldi	r27, 0x00	; 0
     9c2:	12 c0       	rjmp	.+36     	; 0x9e8 <__clzsi2+0x64>
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	e8 16       	cp	r14, r24
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	f8 06       	cpc	r15, r24
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	08 07       	cpc	r16, r24
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	18 07       	cpc	r17, r24
     9d4:	28 f0       	brcs	.+10     	; 0x9e0 <__clzsi2+0x5c>
     9d6:	88 e1       	ldi	r24, 0x18	; 24
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	a0 e0       	ldi	r26, 0x00	; 0
     9dc:	b0 e0       	ldi	r27, 0x00	; 0
     9de:	04 c0       	rjmp	.+8      	; 0x9e8 <__clzsi2+0x64>
     9e0:	80 e1       	ldi	r24, 0x10	; 16
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	a0 e0       	ldi	r26, 0x00	; 0
     9e6:	b0 e0       	ldi	r27, 0x00	; 0
     9e8:	20 e2       	ldi	r18, 0x20	; 32
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	40 e0       	ldi	r20, 0x00	; 0
     9ee:	50 e0       	ldi	r21, 0x00	; 0
     9f0:	28 1b       	sub	r18, r24
     9f2:	39 0b       	sbc	r19, r25
     9f4:	4a 0b       	sbc	r20, r26
     9f6:	5b 0b       	sbc	r21, r27
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__clzsi2+0x7e>
     9fa:	16 95       	lsr	r17
     9fc:	07 95       	ror	r16
     9fe:	f7 94       	ror	r15
     a00:	e7 94       	ror	r14
     a02:	8a 95       	dec	r24
     a04:	d2 f7       	brpl	.-12     	; 0x9fa <__clzsi2+0x76>
     a06:	f7 01       	movw	r30, r14
     a08:	e4 58       	subi	r30, 0x84	; 132
     a0a:	ff 4f       	sbci	r31, 0xFF	; 255
     a0c:	80 81       	ld	r24, Z
     a0e:	28 1b       	sub	r18, r24
     a10:	31 09       	sbc	r19, r1
     a12:	41 09       	sbc	r20, r1
     a14:	51 09       	sbc	r21, r1
     a16:	c9 01       	movw	r24, r18
     a18:	1f 91       	pop	r17
     a1a:	0f 91       	pop	r16
     a1c:	ff 90       	pop	r15
     a1e:	ef 90       	pop	r14
     a20:	08 95       	ret

00000a22 <__pack_f>:
     a22:	df 92       	push	r13
     a24:	ef 92       	push	r14
     a26:	ff 92       	push	r15
     a28:	0f 93       	push	r16
     a2a:	1f 93       	push	r17
     a2c:	fc 01       	movw	r30, r24
     a2e:	e4 80       	ldd	r14, Z+4	; 0x04
     a30:	f5 80       	ldd	r15, Z+5	; 0x05
     a32:	06 81       	ldd	r16, Z+6	; 0x06
     a34:	17 81       	ldd	r17, Z+7	; 0x07
     a36:	d1 80       	ldd	r13, Z+1	; 0x01
     a38:	80 81       	ld	r24, Z
     a3a:	82 30       	cpi	r24, 0x02	; 2
     a3c:	48 f4       	brcc	.+18     	; 0xa50 <__pack_f+0x2e>
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	a0 e1       	ldi	r26, 0x10	; 16
     a44:	b0 e0       	ldi	r27, 0x00	; 0
     a46:	e8 2a       	or	r14, r24
     a48:	f9 2a       	or	r15, r25
     a4a:	0a 2b       	or	r16, r26
     a4c:	1b 2b       	or	r17, r27
     a4e:	a5 c0       	rjmp	.+330    	; 0xb9a <__pack_f+0x178>
     a50:	84 30       	cpi	r24, 0x04	; 4
     a52:	09 f4       	brne	.+2      	; 0xa56 <__pack_f+0x34>
     a54:	9f c0       	rjmp	.+318    	; 0xb94 <__pack_f+0x172>
     a56:	82 30       	cpi	r24, 0x02	; 2
     a58:	21 f4       	brne	.+8      	; 0xa62 <__pack_f+0x40>
     a5a:	ee 24       	eor	r14, r14
     a5c:	ff 24       	eor	r15, r15
     a5e:	87 01       	movw	r16, r14
     a60:	05 c0       	rjmp	.+10     	; 0xa6c <__pack_f+0x4a>
     a62:	e1 14       	cp	r14, r1
     a64:	f1 04       	cpc	r15, r1
     a66:	01 05       	cpc	r16, r1
     a68:	11 05       	cpc	r17, r1
     a6a:	19 f4       	brne	.+6      	; 0xa72 <__pack_f+0x50>
     a6c:	e0 e0       	ldi	r30, 0x00	; 0
     a6e:	f0 e0       	ldi	r31, 0x00	; 0
     a70:	96 c0       	rjmp	.+300    	; 0xb9e <__pack_f+0x17c>
     a72:	62 81       	ldd	r22, Z+2	; 0x02
     a74:	73 81       	ldd	r23, Z+3	; 0x03
     a76:	9f ef       	ldi	r25, 0xFF	; 255
     a78:	62 38       	cpi	r22, 0x82	; 130
     a7a:	79 07       	cpc	r23, r25
     a7c:	0c f0       	brlt	.+2      	; 0xa80 <__pack_f+0x5e>
     a7e:	5b c0       	rjmp	.+182    	; 0xb36 <__pack_f+0x114>
     a80:	22 e8       	ldi	r18, 0x82	; 130
     a82:	3f ef       	ldi	r19, 0xFF	; 255
     a84:	26 1b       	sub	r18, r22
     a86:	37 0b       	sbc	r19, r23
     a88:	2a 31       	cpi	r18, 0x1A	; 26
     a8a:	31 05       	cpc	r19, r1
     a8c:	2c f0       	brlt	.+10     	; 0xa98 <__pack_f+0x76>
     a8e:	20 e0       	ldi	r18, 0x00	; 0
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	40 e0       	ldi	r20, 0x00	; 0
     a94:	50 e0       	ldi	r21, 0x00	; 0
     a96:	2a c0       	rjmp	.+84     	; 0xaec <__pack_f+0xca>
     a98:	b8 01       	movw	r22, r16
     a9a:	a7 01       	movw	r20, r14
     a9c:	02 2e       	mov	r0, r18
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__pack_f+0x86>
     aa0:	76 95       	lsr	r23
     aa2:	67 95       	ror	r22
     aa4:	57 95       	ror	r21
     aa6:	47 95       	ror	r20
     aa8:	0a 94       	dec	r0
     aaa:	d2 f7       	brpl	.-12     	; 0xaa0 <__pack_f+0x7e>
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	a0 e0       	ldi	r26, 0x00	; 0
     ab2:	b0 e0       	ldi	r27, 0x00	; 0
     ab4:	04 c0       	rjmp	.+8      	; 0xabe <__pack_f+0x9c>
     ab6:	88 0f       	add	r24, r24
     ab8:	99 1f       	adc	r25, r25
     aba:	aa 1f       	adc	r26, r26
     abc:	bb 1f       	adc	r27, r27
     abe:	2a 95       	dec	r18
     ac0:	d2 f7       	brpl	.-12     	; 0xab6 <__pack_f+0x94>
     ac2:	01 97       	sbiw	r24, 0x01	; 1
     ac4:	a1 09       	sbc	r26, r1
     ac6:	b1 09       	sbc	r27, r1
     ac8:	8e 21       	and	r24, r14
     aca:	9f 21       	and	r25, r15
     acc:	a0 23       	and	r26, r16
     ace:	b1 23       	and	r27, r17
     ad0:	00 97       	sbiw	r24, 0x00	; 0
     ad2:	a1 05       	cpc	r26, r1
     ad4:	b1 05       	cpc	r27, r1
     ad6:	21 f0       	breq	.+8      	; 0xae0 <__pack_f+0xbe>
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	9a 01       	movw	r18, r20
     ae2:	ab 01       	movw	r20, r22
     ae4:	28 2b       	or	r18, r24
     ae6:	39 2b       	or	r19, r25
     ae8:	4a 2b       	or	r20, r26
     aea:	5b 2b       	or	r21, r27
     aec:	da 01       	movw	r26, r20
     aee:	c9 01       	movw	r24, r18
     af0:	8f 77       	andi	r24, 0x7F	; 127
     af2:	90 70       	andi	r25, 0x00	; 0
     af4:	a0 70       	andi	r26, 0x00	; 0
     af6:	b0 70       	andi	r27, 0x00	; 0
     af8:	80 34       	cpi	r24, 0x40	; 64
     afa:	91 05       	cpc	r25, r1
     afc:	a1 05       	cpc	r26, r1
     afe:	b1 05       	cpc	r27, r1
     b00:	39 f4       	brne	.+14     	; 0xb10 <__pack_f+0xee>
     b02:	27 ff       	sbrs	r18, 7
     b04:	09 c0       	rjmp	.+18     	; 0xb18 <__pack_f+0xf6>
     b06:	20 5c       	subi	r18, 0xC0	; 192
     b08:	3f 4f       	sbci	r19, 0xFF	; 255
     b0a:	4f 4f       	sbci	r20, 0xFF	; 255
     b0c:	5f 4f       	sbci	r21, 0xFF	; 255
     b0e:	04 c0       	rjmp	.+8      	; 0xb18 <__pack_f+0xf6>
     b10:	21 5c       	subi	r18, 0xC1	; 193
     b12:	3f 4f       	sbci	r19, 0xFF	; 255
     b14:	4f 4f       	sbci	r20, 0xFF	; 255
     b16:	5f 4f       	sbci	r21, 0xFF	; 255
     b18:	e0 e0       	ldi	r30, 0x00	; 0
     b1a:	f0 e0       	ldi	r31, 0x00	; 0
     b1c:	20 30       	cpi	r18, 0x00	; 0
     b1e:	a0 e0       	ldi	r26, 0x00	; 0
     b20:	3a 07       	cpc	r19, r26
     b22:	a0 e0       	ldi	r26, 0x00	; 0
     b24:	4a 07       	cpc	r20, r26
     b26:	a0 e4       	ldi	r26, 0x40	; 64
     b28:	5a 07       	cpc	r21, r26
     b2a:	10 f0       	brcs	.+4      	; 0xb30 <__pack_f+0x10e>
     b2c:	e1 e0       	ldi	r30, 0x01	; 1
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	79 01       	movw	r14, r18
     b32:	8a 01       	movw	r16, r20
     b34:	27 c0       	rjmp	.+78     	; 0xb84 <__pack_f+0x162>
     b36:	60 38       	cpi	r22, 0x80	; 128
     b38:	71 05       	cpc	r23, r1
     b3a:	64 f5       	brge	.+88     	; 0xb94 <__pack_f+0x172>
     b3c:	fb 01       	movw	r30, r22
     b3e:	e1 58       	subi	r30, 0x81	; 129
     b40:	ff 4f       	sbci	r31, 0xFF	; 255
     b42:	d8 01       	movw	r26, r16
     b44:	c7 01       	movw	r24, r14
     b46:	8f 77       	andi	r24, 0x7F	; 127
     b48:	90 70       	andi	r25, 0x00	; 0
     b4a:	a0 70       	andi	r26, 0x00	; 0
     b4c:	b0 70       	andi	r27, 0x00	; 0
     b4e:	80 34       	cpi	r24, 0x40	; 64
     b50:	91 05       	cpc	r25, r1
     b52:	a1 05       	cpc	r26, r1
     b54:	b1 05       	cpc	r27, r1
     b56:	39 f4       	brne	.+14     	; 0xb66 <__pack_f+0x144>
     b58:	e7 fe       	sbrs	r14, 7
     b5a:	0d c0       	rjmp	.+26     	; 0xb76 <__pack_f+0x154>
     b5c:	80 e4       	ldi	r24, 0x40	; 64
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x14c>
     b66:	8f e3       	ldi	r24, 0x3F	; 63
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	a0 e0       	ldi	r26, 0x00	; 0
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e8 0e       	add	r14, r24
     b70:	f9 1e       	adc	r15, r25
     b72:	0a 1f       	adc	r16, r26
     b74:	1b 1f       	adc	r17, r27
     b76:	17 ff       	sbrs	r17, 7
     b78:	05 c0       	rjmp	.+10     	; 0xb84 <__pack_f+0x162>
     b7a:	16 95       	lsr	r17
     b7c:	07 95       	ror	r16
     b7e:	f7 94       	ror	r15
     b80:	e7 94       	ror	r14
     b82:	31 96       	adiw	r30, 0x01	; 1
     b84:	87 e0       	ldi	r24, 0x07	; 7
     b86:	16 95       	lsr	r17
     b88:	07 95       	ror	r16
     b8a:	f7 94       	ror	r15
     b8c:	e7 94       	ror	r14
     b8e:	8a 95       	dec	r24
     b90:	d1 f7       	brne	.-12     	; 0xb86 <__pack_f+0x164>
     b92:	05 c0       	rjmp	.+10     	; 0xb9e <__pack_f+0x17c>
     b94:	ee 24       	eor	r14, r14
     b96:	ff 24       	eor	r15, r15
     b98:	87 01       	movw	r16, r14
     b9a:	ef ef       	ldi	r30, 0xFF	; 255
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	6e 2f       	mov	r22, r30
     ba0:	67 95       	ror	r22
     ba2:	66 27       	eor	r22, r22
     ba4:	67 95       	ror	r22
     ba6:	90 2f       	mov	r25, r16
     ba8:	9f 77       	andi	r25, 0x7F	; 127
     baa:	d7 94       	ror	r13
     bac:	dd 24       	eor	r13, r13
     bae:	d7 94       	ror	r13
     bb0:	8e 2f       	mov	r24, r30
     bb2:	86 95       	lsr	r24
     bb4:	49 2f       	mov	r20, r25
     bb6:	46 2b       	or	r20, r22
     bb8:	58 2f       	mov	r21, r24
     bba:	5d 29       	or	r21, r13
     bbc:	b7 01       	movw	r22, r14
     bbe:	ca 01       	movw	r24, r20
     bc0:	1f 91       	pop	r17
     bc2:	0f 91       	pop	r16
     bc4:	ff 90       	pop	r15
     bc6:	ef 90       	pop	r14
     bc8:	df 90       	pop	r13
     bca:	08 95       	ret

00000bcc <__unpack_f>:
     bcc:	fc 01       	movw	r30, r24
     bce:	db 01       	movw	r26, r22
     bd0:	40 81       	ld	r20, Z
     bd2:	51 81       	ldd	r21, Z+1	; 0x01
     bd4:	22 81       	ldd	r18, Z+2	; 0x02
     bd6:	62 2f       	mov	r22, r18
     bd8:	6f 77       	andi	r22, 0x7F	; 127
     bda:	70 e0       	ldi	r23, 0x00	; 0
     bdc:	22 1f       	adc	r18, r18
     bde:	22 27       	eor	r18, r18
     be0:	22 1f       	adc	r18, r18
     be2:	93 81       	ldd	r25, Z+3	; 0x03
     be4:	89 2f       	mov	r24, r25
     be6:	88 0f       	add	r24, r24
     be8:	82 2b       	or	r24, r18
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	99 1f       	adc	r25, r25
     bf0:	99 27       	eor	r25, r25
     bf2:	99 1f       	adc	r25, r25
     bf4:	11 96       	adiw	r26, 0x01	; 1
     bf6:	9c 93       	st	X, r25
     bf8:	11 97       	sbiw	r26, 0x01	; 1
     bfa:	21 15       	cp	r18, r1
     bfc:	31 05       	cpc	r19, r1
     bfe:	a9 f5       	brne	.+106    	; 0xc6a <__unpack_f+0x9e>
     c00:	41 15       	cp	r20, r1
     c02:	51 05       	cpc	r21, r1
     c04:	61 05       	cpc	r22, r1
     c06:	71 05       	cpc	r23, r1
     c08:	11 f4       	brne	.+4      	; 0xc0e <__unpack_f+0x42>
     c0a:	82 e0       	ldi	r24, 0x02	; 2
     c0c:	37 c0       	rjmp	.+110    	; 0xc7c <__unpack_f+0xb0>
     c0e:	82 e8       	ldi	r24, 0x82	; 130
     c10:	9f ef       	ldi	r25, 0xFF	; 255
     c12:	13 96       	adiw	r26, 0x03	; 3
     c14:	9c 93       	st	X, r25
     c16:	8e 93       	st	-X, r24
     c18:	12 97       	sbiw	r26, 0x02	; 2
     c1a:	9a 01       	movw	r18, r20
     c1c:	ab 01       	movw	r20, r22
     c1e:	67 e0       	ldi	r22, 0x07	; 7
     c20:	22 0f       	add	r18, r18
     c22:	33 1f       	adc	r19, r19
     c24:	44 1f       	adc	r20, r20
     c26:	55 1f       	adc	r21, r21
     c28:	6a 95       	dec	r22
     c2a:	d1 f7       	brne	.-12     	; 0xc20 <__unpack_f+0x54>
     c2c:	83 e0       	ldi	r24, 0x03	; 3
     c2e:	8c 93       	st	X, r24
     c30:	0d c0       	rjmp	.+26     	; 0xc4c <__unpack_f+0x80>
     c32:	22 0f       	add	r18, r18
     c34:	33 1f       	adc	r19, r19
     c36:	44 1f       	adc	r20, r20
     c38:	55 1f       	adc	r21, r21
     c3a:	12 96       	adiw	r26, 0x02	; 2
     c3c:	8d 91       	ld	r24, X+
     c3e:	9c 91       	ld	r25, X
     c40:	13 97       	sbiw	r26, 0x03	; 3
     c42:	01 97       	sbiw	r24, 0x01	; 1
     c44:	13 96       	adiw	r26, 0x03	; 3
     c46:	9c 93       	st	X, r25
     c48:	8e 93       	st	-X, r24
     c4a:	12 97       	sbiw	r26, 0x02	; 2
     c4c:	20 30       	cpi	r18, 0x00	; 0
     c4e:	80 e0       	ldi	r24, 0x00	; 0
     c50:	38 07       	cpc	r19, r24
     c52:	80 e0       	ldi	r24, 0x00	; 0
     c54:	48 07       	cpc	r20, r24
     c56:	80 e4       	ldi	r24, 0x40	; 64
     c58:	58 07       	cpc	r21, r24
     c5a:	58 f3       	brcs	.-42     	; 0xc32 <__unpack_f+0x66>
     c5c:	14 96       	adiw	r26, 0x04	; 4
     c5e:	2d 93       	st	X+, r18
     c60:	3d 93       	st	X+, r19
     c62:	4d 93       	st	X+, r20
     c64:	5c 93       	st	X, r21
     c66:	17 97       	sbiw	r26, 0x07	; 7
     c68:	08 95       	ret
     c6a:	2f 3f       	cpi	r18, 0xFF	; 255
     c6c:	31 05       	cpc	r19, r1
     c6e:	79 f4       	brne	.+30     	; 0xc8e <__unpack_f+0xc2>
     c70:	41 15       	cp	r20, r1
     c72:	51 05       	cpc	r21, r1
     c74:	61 05       	cpc	r22, r1
     c76:	71 05       	cpc	r23, r1
     c78:	19 f4       	brne	.+6      	; 0xc80 <__unpack_f+0xb4>
     c7a:	84 e0       	ldi	r24, 0x04	; 4
     c7c:	8c 93       	st	X, r24
     c7e:	08 95       	ret
     c80:	64 ff       	sbrs	r22, 4
     c82:	03 c0       	rjmp	.+6      	; 0xc8a <__unpack_f+0xbe>
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	8c 93       	st	X, r24
     c88:	12 c0       	rjmp	.+36     	; 0xcae <__unpack_f+0xe2>
     c8a:	1c 92       	st	X, r1
     c8c:	10 c0       	rjmp	.+32     	; 0xcae <__unpack_f+0xe2>
     c8e:	2f 57       	subi	r18, 0x7F	; 127
     c90:	30 40       	sbci	r19, 0x00	; 0
     c92:	13 96       	adiw	r26, 0x03	; 3
     c94:	3c 93       	st	X, r19
     c96:	2e 93       	st	-X, r18
     c98:	12 97       	sbiw	r26, 0x02	; 2
     c9a:	83 e0       	ldi	r24, 0x03	; 3
     c9c:	8c 93       	st	X, r24
     c9e:	87 e0       	ldi	r24, 0x07	; 7
     ca0:	44 0f       	add	r20, r20
     ca2:	55 1f       	adc	r21, r21
     ca4:	66 1f       	adc	r22, r22
     ca6:	77 1f       	adc	r23, r23
     ca8:	8a 95       	dec	r24
     caa:	d1 f7       	brne	.-12     	; 0xca0 <__unpack_f+0xd4>
     cac:	70 64       	ori	r23, 0x40	; 64
     cae:	14 96       	adiw	r26, 0x04	; 4
     cb0:	4d 93       	st	X+, r20
     cb2:	5d 93       	st	X+, r21
     cb4:	6d 93       	st	X+, r22
     cb6:	7c 93       	st	X, r23
     cb8:	17 97       	sbiw	r26, 0x07	; 7
     cba:	08 95       	ret

00000cbc <__fpcmp_parts_f>:
     cbc:	1f 93       	push	r17
     cbe:	dc 01       	movw	r26, r24
     cc0:	fb 01       	movw	r30, r22
     cc2:	9c 91       	ld	r25, X
     cc4:	92 30       	cpi	r25, 0x02	; 2
     cc6:	08 f4       	brcc	.+2      	; 0xcca <__fpcmp_parts_f+0xe>
     cc8:	47 c0       	rjmp	.+142    	; 0xd58 <__fpcmp_parts_f+0x9c>
     cca:	80 81       	ld	r24, Z
     ccc:	82 30       	cpi	r24, 0x02	; 2
     cce:	08 f4       	brcc	.+2      	; 0xcd2 <__fpcmp_parts_f+0x16>
     cd0:	43 c0       	rjmp	.+134    	; 0xd58 <__fpcmp_parts_f+0x9c>
     cd2:	94 30       	cpi	r25, 0x04	; 4
     cd4:	51 f4       	brne	.+20     	; 0xcea <__fpcmp_parts_f+0x2e>
     cd6:	11 96       	adiw	r26, 0x01	; 1
     cd8:	1c 91       	ld	r17, X
     cda:	84 30       	cpi	r24, 0x04	; 4
     cdc:	99 f5       	brne	.+102    	; 0xd44 <__fpcmp_parts_f+0x88>
     cde:	81 81       	ldd	r24, Z+1	; 0x01
     ce0:	68 2f       	mov	r22, r24
     ce2:	70 e0       	ldi	r23, 0x00	; 0
     ce4:	61 1b       	sub	r22, r17
     ce6:	71 09       	sbc	r23, r1
     ce8:	3f c0       	rjmp	.+126    	; 0xd68 <__fpcmp_parts_f+0xac>
     cea:	84 30       	cpi	r24, 0x04	; 4
     cec:	21 f0       	breq	.+8      	; 0xcf6 <__fpcmp_parts_f+0x3a>
     cee:	92 30       	cpi	r25, 0x02	; 2
     cf0:	31 f4       	brne	.+12     	; 0xcfe <__fpcmp_parts_f+0x42>
     cf2:	82 30       	cpi	r24, 0x02	; 2
     cf4:	b9 f1       	breq	.+110    	; 0xd64 <__fpcmp_parts_f+0xa8>
     cf6:	81 81       	ldd	r24, Z+1	; 0x01
     cf8:	88 23       	and	r24, r24
     cfa:	89 f1       	breq	.+98     	; 0xd5e <__fpcmp_parts_f+0xa2>
     cfc:	2d c0       	rjmp	.+90     	; 0xd58 <__fpcmp_parts_f+0x9c>
     cfe:	11 96       	adiw	r26, 0x01	; 1
     d00:	1c 91       	ld	r17, X
     d02:	11 97       	sbiw	r26, 0x01	; 1
     d04:	82 30       	cpi	r24, 0x02	; 2
     d06:	f1 f0       	breq	.+60     	; 0xd44 <__fpcmp_parts_f+0x88>
     d08:	81 81       	ldd	r24, Z+1	; 0x01
     d0a:	18 17       	cp	r17, r24
     d0c:	d9 f4       	brne	.+54     	; 0xd44 <__fpcmp_parts_f+0x88>
     d0e:	12 96       	adiw	r26, 0x02	; 2
     d10:	2d 91       	ld	r18, X+
     d12:	3c 91       	ld	r19, X
     d14:	13 97       	sbiw	r26, 0x03	; 3
     d16:	82 81       	ldd	r24, Z+2	; 0x02
     d18:	93 81       	ldd	r25, Z+3	; 0x03
     d1a:	82 17       	cp	r24, r18
     d1c:	93 07       	cpc	r25, r19
     d1e:	94 f0       	brlt	.+36     	; 0xd44 <__fpcmp_parts_f+0x88>
     d20:	28 17       	cp	r18, r24
     d22:	39 07       	cpc	r19, r25
     d24:	bc f0       	brlt	.+46     	; 0xd54 <__fpcmp_parts_f+0x98>
     d26:	14 96       	adiw	r26, 0x04	; 4
     d28:	8d 91       	ld	r24, X+
     d2a:	9d 91       	ld	r25, X+
     d2c:	0d 90       	ld	r0, X+
     d2e:	bc 91       	ld	r27, X
     d30:	a0 2d       	mov	r26, r0
     d32:	24 81       	ldd	r18, Z+4	; 0x04
     d34:	35 81       	ldd	r19, Z+5	; 0x05
     d36:	46 81       	ldd	r20, Z+6	; 0x06
     d38:	57 81       	ldd	r21, Z+7	; 0x07
     d3a:	28 17       	cp	r18, r24
     d3c:	39 07       	cpc	r19, r25
     d3e:	4a 07       	cpc	r20, r26
     d40:	5b 07       	cpc	r21, r27
     d42:	18 f4       	brcc	.+6      	; 0xd4a <__fpcmp_parts_f+0x8e>
     d44:	11 23       	and	r17, r17
     d46:	41 f0       	breq	.+16     	; 0xd58 <__fpcmp_parts_f+0x9c>
     d48:	0a c0       	rjmp	.+20     	; 0xd5e <__fpcmp_parts_f+0xa2>
     d4a:	82 17       	cp	r24, r18
     d4c:	93 07       	cpc	r25, r19
     d4e:	a4 07       	cpc	r26, r20
     d50:	b5 07       	cpc	r27, r21
     d52:	40 f4       	brcc	.+16     	; 0xd64 <__fpcmp_parts_f+0xa8>
     d54:	11 23       	and	r17, r17
     d56:	19 f0       	breq	.+6      	; 0xd5e <__fpcmp_parts_f+0xa2>
     d58:	61 e0       	ldi	r22, 0x01	; 1
     d5a:	70 e0       	ldi	r23, 0x00	; 0
     d5c:	05 c0       	rjmp	.+10     	; 0xd68 <__fpcmp_parts_f+0xac>
     d5e:	6f ef       	ldi	r22, 0xFF	; 255
     d60:	7f ef       	ldi	r23, 0xFF	; 255
     d62:	02 c0       	rjmp	.+4      	; 0xd68 <__fpcmp_parts_f+0xac>
     d64:	60 e0       	ldi	r22, 0x00	; 0
     d66:	70 e0       	ldi	r23, 0x00	; 0
     d68:	cb 01       	movw	r24, r22
     d6a:	1f 91       	pop	r17
     d6c:	08 95       	ret

00000d6e <USART_voidInitialization>:
void USART_voidInitialization(void)
{
	u8 UCSRC_Value = 0x80;

	// No double speed
	CLR_BIT(UCSRA,U2X);
     d6e:	59 98       	cbi	0x0b, 1	; 11

	// Disable Multi-processor Communication Mode
	CLR_BIT(UCSRA,MPCM);
     d70:	58 98       	cbi	0x0b, 0	; 11

	// 1 Stop Bit
	CLR_BIT(UCSRC_Value,USBS);

	// 8 Bit Data
	CLR_BIT(UCSRB,UCSZ2);
     d72:	52 98       	cbi	0x0a, 2	; 10
	SET_BIT(UCSRC_Value,UCSZ0);

	// 0--> for Asynchronous mode
	CLR_BIT(UCSRC_Value,UCPOL);

	UCSRC = UCSRC_Value;
     d74:	86 e8       	ldi	r24, 0x86	; 134
     d76:	80 bd       	out	0x20, r24	; 32

	// Baud Rate = 9600
	UBRRL=103;
     d78:	87 e6       	ldi	r24, 0x67	; 103
     d7a:	89 b9       	out	0x09, r24	; 9

	// Enabling Receiver & Transmitter
	SET_BIT(UCSRB,RXEN);
     d7c:	54 9a       	sbi	0x0a, 4	; 10
	SET_BIT(UCSRB,TXEN);
     d7e:	53 9a       	sbi	0x0a, 3	; 10

	return;
}
     d80:	08 95       	ret

00000d82 <USART_voidSendData_Polling>:

void USART_voidSendData_Polling(u8 Character)
{
	while(!GET_BIT(UCSRA,UDRE));
     d82:	5d 9b       	sbis	0x0b, 5	; 11
     d84:	fe cf       	rjmp	.-4      	; 0xd82 <USART_voidSendData_Polling>

	UDR=Character;
     d86:	8c b9       	out	0x0c, r24	; 12

	//while(GET_BIT(UCSRA,UDRE));

	return;
}
     d88:	08 95       	ret

00000d8a <USART_voidSendString_Polling>:

void USART_voidSendString_Polling(u8* STR_Ptr)
{
     d8a:	20 e0       	ldi	r18, 0x00	; 0
     d8c:	04 c0       	rjmp	.+8      	; 0xd96 <USART_voidSendString_Polling+0xc>
	return;
}

void USART_voidSendData_Polling(u8 Character)
{
	while(!GET_BIT(UCSRA,UDRE));
     d8e:	5d 9b       	sbis	0x0b, 5	; 11
     d90:	fe cf       	rjmp	.-4      	; 0xd8e <USART_voidSendString_Polling+0x4>

	UDR=Character;
     d92:	ec b9       	out	0x0c, r30	; 12
	return;
}

void USART_voidSendString_Polling(u8* STR_Ptr)
{
	for(u8 i=0;STR_Ptr[i];i++)
     d94:	2f 5f       	subi	r18, 0xFF	; 255
     d96:	fc 01       	movw	r30, r24
     d98:	e2 0f       	add	r30, r18
     d9a:	f1 1d       	adc	r31, r1
     d9c:	e0 81       	ld	r30, Z
     d9e:	ee 23       	and	r30, r30
     da0:	b1 f7       	brne	.-20     	; 0xd8e <USART_voidSendString_Polling+0x4>
		USART_voidSendData_Polling(STR_Ptr[i]);
		//_delay_ms(500);
	}

	return;
}
     da2:	08 95       	ret

00000da4 <USART_u8RecieveData_Polling>:

u8 USART_u8RecieveData_Polling(void)
{
	while(!GET_BIT(UCSRA,RXC));
     da4:	5f 9b       	sbis	0x0b, 7	; 11
     da6:	fe cf       	rjmp	.-4      	; 0xda4 <USART_u8RecieveData_Polling>

	return UDR;
     da8:	8c b1       	in	r24, 0x0c	; 12
}
     daa:	08 95       	ret

00000dac <USART_voidEnableReceiverInterrupt>:

void USART_voidEnableReceiverInterrupt(void)
{
	SET_BIT(UCSRB,RXCIE);
     dac:	57 9a       	sbi	0x0a, 7	; 10
}
     dae:	08 95       	ret

00000db0 <USART_voidDisableReceiverInterrupt>:
void USART_voidDisableReceiverInterrupt(void)
{
	CLR_BIT(UCSRB,RXCIE);
     db0:	57 98       	cbi	0x0a, 7	; 10
}
     db2:	08 95       	ret

00000db4 <USART_voidEnableTransmitterInterrupt>:
void USART_voidEnableTransmitterInterrupt(void)
{
	SET_BIT(UCSRB,TXCIE);
     db4:	56 9a       	sbi	0x0a, 6	; 10
}
     db6:	08 95       	ret

00000db8 <USART_voidDisableTransmitterInterrupt>:
void USART_voidDisableTransmitterInterrupt(void)
{
	CLR_BIT(UCSRB,TXCIE);
     db8:	56 98       	cbi	0x0a, 6	; 10
}
     dba:	08 95       	ret

00000dbc <__vector_13>:


void (*USART_Recieve_ISR)(void)=NULL;
void __vector_13(void)
{
	USART_Recieve_ISR();
     dbc:	e0 91 7c 01 	lds	r30, 0x017C
     dc0:	f0 91 7d 01 	lds	r31, 0x017D
     dc4:	09 95       	icall
}
     dc6:	08 95       	ret

00000dc8 <USART_RecieveCallBack>:
void USART_RecieveCallBack(void (*PF_USART_Recieve)(void))
{
	USART_Recieve_ISR=PF_USART_Recieve;
     dc8:	90 93 7d 01 	sts	0x017D, r25
     dcc:	80 93 7c 01 	sts	0x017C, r24
}
     dd0:	08 95       	ret

00000dd2 <__vector_15>:

void (*USART_Send_ISR)(void)=NULL;
void __vector_15(void)
{
	USART_Send_ISR();
     dd2:	e0 91 7e 01 	lds	r30, 0x017E
     dd6:	f0 91 7f 01 	lds	r31, 0x017F
     dda:	09 95       	icall
}
     ddc:	08 95       	ret

00000dde <USART_SendCallBack>:
void USART_SendCallBack(void (*PF_USART_Send)(void))
{
	USART_Send_ISR=PF_USART_Send;
     dde:	90 93 7f 01 	sts	0x017F, r25
     de2:	80 93 7e 01 	sts	0x017E, r24
}
     de6:	08 95       	ret

00000de8 <Timer1_voidInitialization>:

	#endif

#ifdef ICU
	// Set Normal Mode
	CLR_BIT(TCCR1B,TCCR1B_WGM13);
     de8:	8e b5       	in	r24, 0x2e	; 46
     dea:	8f 7e       	andi	r24, 0xEF	; 239
     dec:	8e bd       	out	0x2e, r24	; 46
	CLR_BIT(TCCR1A,TCCR1A_WGM10);
     dee:	8f b5       	in	r24, 0x2f	; 47
     df0:	8e 7f       	andi	r24, 0xFE	; 254
     df2:	8f bd       	out	0x2f, r24	; 47
	CLR_BIT(TCCR1A,TCCR1A_WGM11);
     df4:	8f b5       	in	r24, 0x2f	; 47
     df6:	8d 7f       	andi	r24, 0xFD	; 253
     df8:	8f bd       	out	0x2f, r24	; 47
	CLR_BIT(TCCR1B,TCCR1B_WGM12);
     dfa:	8e b5       	in	r24, 0x2e	; 46
     dfc:	87 7f       	andi	r24, 0xF7	; 247
     dfe:	8e bd       	out	0x2e, r24	; 46

	// Setting Prescaler
	SET_BIT(TCCR1B,TCCR1B_CS10);
     e00:	8e b5       	in	r24, 0x2e	; 46
     e02:	81 60       	ori	r24, 0x01	; 1
     e04:	8e bd       	out	0x2e, r24	; 46
	CLR_BIT(TCCR1B,TCCR1B_CS11);
     e06:	8e b5       	in	r24, 0x2e	; 46
     e08:	8d 7f       	andi	r24, 0xFD	; 253
     e0a:	8e bd       	out	0x2e, r24	; 46
	CLR_BIT(TCCR1B,TCCR1B_CS12);
     e0c:	8e b5       	in	r24, 0x2e	; 46
     e0e:	8b 7f       	andi	r24, 0xFB	; 251
     e10:	8e bd       	out	0x2e, r24	; 46

	//SET_BIT(TIMSK,TOIE1);

	TCNT1 = 0;
     e12:	1d bc       	out	0x2d, r1	; 45
     e14:	1c bc       	out	0x2c, r1	; 44
	ICR1=0;
     e16:	17 bc       	out	0x27, r1	; 39
     e18:	16 bc       	out	0x26, r1	; 38
#endif
}
     e1a:	08 95       	ret

00000e1c <Timer1_voidSetFrequency>:


void Timer1_voidSetFrequency(u8 Freq)
{
	ICR1=1000000/(2*Freq);
     e1c:	28 2f       	mov	r18, r24
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	22 0f       	add	r18, r18
     e22:	33 1f       	adc	r19, r19
     e24:	44 27       	eor	r20, r20
     e26:	37 fd       	sbrc	r19, 7
     e28:	40 95       	com	r20
     e2a:	54 2f       	mov	r21, r20
     e2c:	60 e4       	ldi	r22, 0x40	; 64
     e2e:	72 e4       	ldi	r23, 0x42	; 66
     e30:	8f e0       	ldi	r24, 0x0F	; 15
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	0e 94 5d 11 	call	0x22ba	; 0x22ba <__divmodsi4>
     e38:	37 bd       	out	0x27, r19	; 39
     e3a:	26 bd       	out	0x26, r18	; 38

	//ICR1=1000000/2*(float)((float)20/1000);
}
     e3c:	08 95       	ret

00000e3e <Timer1_voidSetDutyCycle>:
void Timer1_voidSetDutyCycle(u8 Duty)
{
     e3e:	af 92       	push	r10
     e40:	bf 92       	push	r11
     e42:	cf 92       	push	r12
     e44:	df 92       	push	r13
     e46:	ef 92       	push	r14
     e48:	ff 92       	push	r15
     e4a:	0f 93       	push	r16
     e4c:	1f 93       	push	r17
     e4e:	e8 2e       	mov	r14, r24
	OCR1A=ICR1*(float)((float)Duty/1000);
     e50:	66 b5       	in	r22, 0x26	; 38
     e52:	77 b5       	in	r23, 0x27	; 39
     e54:	80 e0       	ldi	r24, 0x00	; 0
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	0e 94 49 04 	call	0x892	; 0x892 <__floatunsisf>
     e5c:	5b 01       	movw	r10, r22
     e5e:	6c 01       	movw	r12, r24
     e60:	ff 24       	eor	r15, r15
     e62:	00 e0       	ldi	r16, 0x00	; 0
     e64:	10 e0       	ldi	r17, 0x00	; 0
     e66:	c8 01       	movw	r24, r16
     e68:	b7 01       	movw	r22, r14
     e6a:	0e 94 49 04 	call	0x892	; 0x892 <__floatunsisf>
     e6e:	20 e0       	ldi	r18, 0x00	; 0
     e70:	30 e0       	ldi	r19, 0x00	; 0
     e72:	4a e7       	ldi	r20, 0x7A	; 122
     e74:	54 e4       	ldi	r21, 0x44	; 68
     e76:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     e7a:	9b 01       	movw	r18, r22
     e7c:	ac 01       	movw	r20, r24
     e7e:	c6 01       	movw	r24, r12
     e80:	b5 01       	movw	r22, r10
     e82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e8a:	7b bd       	out	0x2b, r23	; 43
     e8c:	6a bd       	out	0x2a, r22	; 42

	//OCR1A=ICR1*(float)((float)Duty/100);
}
     e8e:	1f 91       	pop	r17
     e90:	0f 91       	pop	r16
     e92:	ff 90       	pop	r15
     e94:	ef 90       	pop	r14
     e96:	df 90       	pop	r13
     e98:	cf 90       	pop	r12
     e9a:	bf 90       	pop	r11
     e9c:	af 90       	pop	r10
     e9e:	08 95       	ret

00000ea0 <Timer1_voidCaptureEdgeSelect>:


void Timer1_voidCaptureEdgeSelect(u8 Edge_Select)
{
	switch(Edge_Select)
     ea0:	88 23       	and	r24, r24
     ea2:	19 f0       	breq	.+6      	; 0xeaa <Timer1_voidCaptureEdgeSelect+0xa>
     ea4:	81 30       	cpi	r24, 0x01	; 1
     ea6:	41 f4       	brne	.+16     	; 0xeb8 <Timer1_voidCaptureEdgeSelect+0x18>
     ea8:	04 c0       	rjmp	.+8      	; 0xeb2 <Timer1_voidCaptureEdgeSelect+0x12>
	{
	case 0: CLR_BIT(TCCR1B,TCCR1B_ICES1);break;
     eaa:	8e b5       	in	r24, 0x2e	; 46
     eac:	8f 7b       	andi	r24, 0xBF	; 191
     eae:	8e bd       	out	0x2e, r24	; 46
     eb0:	08 95       	ret
	case 1: SET_BIT(TCCR1B,TCCR1B_ICES1);break;
     eb2:	8e b5       	in	r24, 0x2e	; 46
     eb4:	80 64       	ori	r24, 0x40	; 64
     eb6:	8e bd       	out	0x2e, r24	; 46
     eb8:	08 95       	ret

00000eba <Timer1_voidSetTimervalue>:
	}
}
void Timer1_voidSetTimervalue(u16 Value)
{
	ICR1=0;
     eba:	17 bc       	out	0x27, r1	; 39
     ebc:	16 bc       	out	0x26, r1	; 38
}
     ebe:	08 95       	ret

00000ec0 <Timer1_voidGetTimervalue>:
u16 Timer1_voidGetTimervalue(void)
{
	return ICR1;
     ec0:	26 b5       	in	r18, 0x26	; 38
     ec2:	37 b5       	in	r19, 0x27	; 39
}
     ec4:	c9 01       	movw	r24, r18
     ec6:	08 95       	ret

00000ec8 <Timer1_voidICRInterruptEnable>:
void Timer1_voidICRInterruptEnable(void)
{
	SET_BIT(TIMSK,TICIE1);
     ec8:	89 b7       	in	r24, 0x39	; 57
     eca:	80 62       	ori	r24, 0x20	; 32
     ecc:	89 bf       	out	0x39, r24	; 57
}
     ece:	08 95       	ret

00000ed0 <Timer1_voidICRInterruptDisable>:
void Timer1_voidICRInterruptDisable(void)
{
	CLR_BIT(TIMSK,TICIE1);
     ed0:	89 b7       	in	r24, 0x39	; 57
     ed2:	8f 7d       	andi	r24, 0xDF	; 223
     ed4:	89 bf       	out	0x39, r24	; 57
}
     ed6:	08 95       	ret

00000ed8 <Timer1_voidOVFInterruptEnable>:

void Timer1_voidOVFInterruptEnable(void)
{
	SET_BIT(TIMSK,TOIE1);
     ed8:	89 b7       	in	r24, 0x39	; 57
     eda:	84 60       	ori	r24, 0x04	; 4
     edc:	89 bf       	out	0x39, r24	; 57
}
     ede:	08 95       	ret

00000ee0 <Timer1_voidOVFInterruptDisable>:
void Timer1_voidOVFInterruptDisable(void)
{
	CLR_BIT(TIMSK,TOIE1);
     ee0:	89 b7       	in	r24, 0x39	; 57
     ee2:	8b 7f       	andi	r24, 0xFB	; 251
     ee4:	89 bf       	out	0x39, r24	; 57
}
     ee6:	08 95       	ret

00000ee8 <__vector_6>:

void (*Timer1ICR_ISR)(void)=NULL;
void __vector_6(void)
{
     ee8:	1f 92       	push	r1
     eea:	0f 92       	push	r0
     eec:	0f b6       	in	r0, 0x3f	; 63
     eee:	0f 92       	push	r0
     ef0:	11 24       	eor	r1, r1
     ef2:	2f 93       	push	r18
     ef4:	3f 93       	push	r19
     ef6:	4f 93       	push	r20
     ef8:	5f 93       	push	r21
     efa:	6f 93       	push	r22
     efc:	7f 93       	push	r23
     efe:	8f 93       	push	r24
     f00:	9f 93       	push	r25
     f02:	af 93       	push	r26
     f04:	bf 93       	push	r27
     f06:	ef 93       	push	r30
     f08:	ff 93       	push	r31
	Timer1ICR_ISR();
     f0a:	e0 91 80 01 	lds	r30, 0x0180
     f0e:	f0 91 81 01 	lds	r31, 0x0181
     f12:	09 95       	icall
}
     f14:	ff 91       	pop	r31
     f16:	ef 91       	pop	r30
     f18:	bf 91       	pop	r27
     f1a:	af 91       	pop	r26
     f1c:	9f 91       	pop	r25
     f1e:	8f 91       	pop	r24
     f20:	7f 91       	pop	r23
     f22:	6f 91       	pop	r22
     f24:	5f 91       	pop	r21
     f26:	4f 91       	pop	r20
     f28:	3f 91       	pop	r19
     f2a:	2f 91       	pop	r18
     f2c:	0f 90       	pop	r0
     f2e:	0f be       	out	0x3f, r0	; 63
     f30:	0f 90       	pop	r0
     f32:	1f 90       	pop	r1
     f34:	18 95       	reti

00000f36 <Timer1ICR_CallBack>:
void Timer1ICR_CallBack(void (*PF_Timer1ICR)(void))
{
	Timer1ICR_ISR=PF_Timer1ICR;
     f36:	90 93 81 01 	sts	0x0181, r25
     f3a:	80 93 80 01 	sts	0x0180, r24
}
     f3e:	08 95       	ret

00000f40 <__vector_9>:

void (*Timer1OVF_ISR)(void)=NULL;
void __vector_9(void)
{
     f40:	1f 92       	push	r1
     f42:	0f 92       	push	r0
     f44:	0f b6       	in	r0, 0x3f	; 63
     f46:	0f 92       	push	r0
     f48:	11 24       	eor	r1, r1
     f4a:	2f 93       	push	r18
     f4c:	3f 93       	push	r19
     f4e:	4f 93       	push	r20
     f50:	5f 93       	push	r21
     f52:	6f 93       	push	r22
     f54:	7f 93       	push	r23
     f56:	8f 93       	push	r24
     f58:	9f 93       	push	r25
     f5a:	af 93       	push	r26
     f5c:	bf 93       	push	r27
     f5e:	ef 93       	push	r30
     f60:	ff 93       	push	r31
	Timer1OVF_ISR();
     f62:	e0 91 82 01 	lds	r30, 0x0182
     f66:	f0 91 83 01 	lds	r31, 0x0183
     f6a:	09 95       	icall
}
     f6c:	ff 91       	pop	r31
     f6e:	ef 91       	pop	r30
     f70:	bf 91       	pop	r27
     f72:	af 91       	pop	r26
     f74:	9f 91       	pop	r25
     f76:	8f 91       	pop	r24
     f78:	7f 91       	pop	r23
     f7a:	6f 91       	pop	r22
     f7c:	5f 91       	pop	r21
     f7e:	4f 91       	pop	r20
     f80:	3f 91       	pop	r19
     f82:	2f 91       	pop	r18
     f84:	0f 90       	pop	r0
     f86:	0f be       	out	0x3f, r0	; 63
     f88:	0f 90       	pop	r0
     f8a:	1f 90       	pop	r1
     f8c:	18 95       	reti

00000f8e <Timer1OVF_CallBack>:
void Timer1OVF_CallBack(void (*PF_Timer1OVF)(void))
{
	Timer1OVF_ISR=PF_Timer1OVF;
     f8e:	90 93 83 01 	sts	0x0183, r25
     f92:	80 93 82 01 	sts	0x0182, r24
}
     f96:	08 95       	ret

00000f98 <Timer0_voidInitialization>:

		OCR0=249;
	#endif

	#ifdef PWM_PhasaCorrect
		SET_BIT(TCCR0,WGM00);
     f98:	83 b7       	in	r24, 0x33	; 51
     f9a:	80 64       	ori	r24, 0x40	; 64
     f9c:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0,WGM01);
     f9e:	83 b7       	in	r24, 0x33	; 51
     fa0:	88 60       	ori	r24, 0x08	; 8
     fa2:	83 bf       	out	0x33, r24	; 51

		// NonInverted PWM
		SET_BIT(TCCR0,COM01);
     fa4:	83 b7       	in	r24, 0x33	; 51
     fa6:	80 62       	ori	r24, 0x20	; 32
     fa8:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0,COM00);
     faa:	83 b7       	in	r24, 0x33	; 51
     fac:	8f 7e       	andi	r24, 0xEF	; 239
     fae:	83 bf       	out	0x33, r24	; 51

		// Setting Prescaler
		SET_BIT(TCCR0,CS00);
     fb0:	83 b7       	in	r24, 0x33	; 51
     fb2:	81 60       	ori	r24, 0x01	; 1
     fb4:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0,CS01);
     fb6:	83 b7       	in	r24, 0x33	; 51
     fb8:	82 60       	ori	r24, 0x02	; 2
     fba:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0,CS02);
     fbc:	83 b7       	in	r24, 0x33	; 51
     fbe:	8b 7f       	andi	r24, 0xFB	; 251
     fc0:	83 bf       	out	0x33, r24	; 51

		OCR0=63;
     fc2:	8f e3       	ldi	r24, 0x3F	; 63
     fc4:	8c bf       	out	0x3c, r24	; 60

	#endif

#endif

}
     fc6:	08 95       	ret

00000fc8 <__vector_11>:

void (*Timer0OVF_ISR)(void)=NULL;
void __vector_11(void)
{
     fc8:	1f 92       	push	r1
     fca:	0f 92       	push	r0
     fcc:	0f b6       	in	r0, 0x3f	; 63
     fce:	0f 92       	push	r0
     fd0:	11 24       	eor	r1, r1
     fd2:	2f 93       	push	r18
     fd4:	3f 93       	push	r19
     fd6:	4f 93       	push	r20
     fd8:	5f 93       	push	r21
     fda:	6f 93       	push	r22
     fdc:	7f 93       	push	r23
     fde:	8f 93       	push	r24
     fe0:	9f 93       	push	r25
     fe2:	af 93       	push	r26
     fe4:	bf 93       	push	r27
     fe6:	ef 93       	push	r30
     fe8:	ff 93       	push	r31
	Timer0OVF_ISR();
     fea:	e0 91 84 01 	lds	r30, 0x0184
     fee:	f0 91 85 01 	lds	r31, 0x0185
     ff2:	09 95       	icall
}
     ff4:	ff 91       	pop	r31
     ff6:	ef 91       	pop	r30
     ff8:	bf 91       	pop	r27
     ffa:	af 91       	pop	r26
     ffc:	9f 91       	pop	r25
     ffe:	8f 91       	pop	r24
    1000:	7f 91       	pop	r23
    1002:	6f 91       	pop	r22
    1004:	5f 91       	pop	r21
    1006:	4f 91       	pop	r20
    1008:	3f 91       	pop	r19
    100a:	2f 91       	pop	r18
    100c:	0f 90       	pop	r0
    100e:	0f be       	out	0x3f, r0	; 63
    1010:	0f 90       	pop	r0
    1012:	1f 90       	pop	r1
    1014:	18 95       	reti

00001016 <Timer0OVF_CallBack>:

void Timer0OVF_CallBack(void (*PF_Timer0OVF)(void))
{
	Timer0OVF_ISR=PF_Timer0OVF;
    1016:	90 93 85 01 	sts	0x0185, r25
    101a:	80 93 84 01 	sts	0x0184, r24
}
    101e:	08 95       	ret

00001020 <__vector_10>:


void (*Timer0CTC_ISR)(void)=NULL;
void __vector_10(void)
{
    1020:	1f 92       	push	r1
    1022:	0f 92       	push	r0
    1024:	0f b6       	in	r0, 0x3f	; 63
    1026:	0f 92       	push	r0
    1028:	11 24       	eor	r1, r1
    102a:	2f 93       	push	r18
    102c:	3f 93       	push	r19
    102e:	4f 93       	push	r20
    1030:	5f 93       	push	r21
    1032:	6f 93       	push	r22
    1034:	7f 93       	push	r23
    1036:	8f 93       	push	r24
    1038:	9f 93       	push	r25
    103a:	af 93       	push	r26
    103c:	bf 93       	push	r27
    103e:	ef 93       	push	r30
    1040:	ff 93       	push	r31
	Timer0CTC_ISR();
    1042:	e0 91 86 01 	lds	r30, 0x0186
    1046:	f0 91 87 01 	lds	r31, 0x0187
    104a:	09 95       	icall
}
    104c:	ff 91       	pop	r31
    104e:	ef 91       	pop	r30
    1050:	bf 91       	pop	r27
    1052:	af 91       	pop	r26
    1054:	9f 91       	pop	r25
    1056:	8f 91       	pop	r24
    1058:	7f 91       	pop	r23
    105a:	6f 91       	pop	r22
    105c:	5f 91       	pop	r21
    105e:	4f 91       	pop	r20
    1060:	3f 91       	pop	r19
    1062:	2f 91       	pop	r18
    1064:	0f 90       	pop	r0
    1066:	0f be       	out	0x3f, r0	; 63
    1068:	0f 90       	pop	r0
    106a:	1f 90       	pop	r1
    106c:	18 95       	reti

0000106e <Timer0CTC_CallBack>:

void Timer0CTC_CallBack(void (*PF_Timer0CTC)(void))
{
	Timer0CTC_ISR=PF_Timer0CTC;
    106e:	90 93 87 01 	sts	0x0187, r25
    1072:	80 93 86 01 	sts	0x0186, r24
}
    1076:	08 95       	ret

00001078 <SPI_MasterRecieve>:

u8	 SPI_MasterRecieve(void)
{
	//SPI_SPDR = Dummy_Data;

	while(!GET_BIT(SPI_SPSR,SPI_SPSR_SPIF));
    1078:	77 9b       	sbis	0x0e, 7	; 14
    107a:	fe cf       	rjmp	.-4      	; 0x1078 <SPI_MasterRecieve>

	//Data = SPI_SPSR;
	return SPI_SPDR;
    107c:	8f b1       	in	r24, 0x0f	; 15
}
    107e:	08 95       	ret

00001080 <SPI_MasterTransive>:

u8	 SPI_MasterTransive(u8 Data)
{
	SPI_SPDR = Data;
    1080:	8f b9       	out	0x0f, r24	; 15

	while(!GET_BIT(SPI_SPSR,SPI_SPSR_SPIF));
    1082:	77 9b       	sbis	0x0e, 7	; 14
    1084:	fe cf       	rjmp	.-4      	; 0x1082 <SPI_MasterTransive+0x2>

	Data = SPI_SPSR;
    1086:	8e b1       	in	r24, 0x0e	; 14
	return SPI_SPDR;
    1088:	8f b1       	in	r24, 0x0f	; 15
}
    108a:	08 95       	ret

0000108c <SPI_SlaveTransmit>:



void SPI_SlaveTransmit(u8 Data)
{
	SPI_SPDR = Data;
    108c:	8f b9       	out	0x0f, r24	; 15

	while(!GET_BIT(SPI_SPSR,SPI_SPSR_SPIF));
    108e:	77 9b       	sbis	0x0e, 7	; 14
    1090:	fe cf       	rjmp	.-4      	; 0x108e <SPI_SlaveTransmit+0x2>

	Data = SPI_SPSR;
    1092:	8e b1       	in	r24, 0x0e	; 14
	Data = SPI_SPDR;
    1094:	8f b1       	in	r24, 0x0f	; 15
}
    1096:	08 95       	ret

00001098 <SPI_SlaveRecieve>:

u8	 SPI_SlaveRecieve(void)
{
	while(!GET_BIT(SPI_SPSR,SPI_SPSR_SPIF));
    1098:	77 9b       	sbis	0x0e, 7	; 14
    109a:	fe cf       	rjmp	.-4      	; 0x1098 <SPI_SlaveRecieve>

	//Data = SPI_SPSR;
	return SPI_SPDR;
    109c:	8f b1       	in	r24, 0x0f	; 15
}
    109e:	08 95       	ret

000010a0 <SPI_SlaveTransive>:

u8	 SPI_SlaveTransive(u8 Data)
{
	SPI_SPDR = Data;
    10a0:	8f b9       	out	0x0f, r24	; 15

	while(!GET_BIT(SPI_SPSR,SPI_SPSR_SPIF));
    10a2:	77 9b       	sbis	0x0e, 7	; 14
    10a4:	fe cf       	rjmp	.-4      	; 0x10a2 <SPI_SlaveTransive+0x2>

	Data = SPI_SPSR;
    10a6:	8e b1       	in	r24, 0x0e	; 14
	return SPI_SPDR;
    10a8:	8f b1       	in	r24, 0x0f	; 15
}
    10aa:	08 95       	ret

000010ac <SPI_voidInterruptEnable>:

void SPI_voidInterruptEnable(void)
{
	SET_BIT(SPI_SPCR,SPI_SPCR_SPIE);
    10ac:	6f 9a       	sbi	0x0d, 7	; 13
}
    10ae:	08 95       	ret

000010b0 <SPI_voidInterruptDisable>:
void SPI_voidInterruptDisable(void)
{
	CLR_BIT(SPI_SPCR,SPI_SPCR_SPIE);
    10b0:	6f 98       	cbi	0x0d, 7	; 13
}
    10b2:	08 95       	ret

000010b4 <SPI_CallBack>:

void (* SPI_PTR)(void)=NULL;
void SPI_CallBack(void (* SPI_CallBack_PTR)(void))
{
	SPI_PTR = SPI_CallBack_PTR;
    10b4:	90 93 89 01 	sts	0x0189, r25
    10b8:	80 93 88 01 	sts	0x0188, r24
}
    10bc:	08 95       	ret

000010be <__vector_12>:

void __vector_12(void)
{
	SPI_PTR();
    10be:	e0 91 88 01 	lds	r30, 0x0188
    10c2:	f0 91 89 01 	lds	r31, 0x0189
    10c6:	09 95       	icall
}
    10c8:	08 95       	ret

000010ca <SPI_MasterTransmit>:
	SET_BIT(SPI_SPCR,SPI_SPCR_SPE);
	CLR_BIT(SPI_SPCR,SPI_SPCR_DORD);
}

void SPI_MasterTransmit(u8 Data)
{
    10ca:	1f 93       	push	r17
    10cc:	18 2f       	mov	r17, r24
	DIO_voidSetPinValue(SPI_PORT,SPI_CS,Low);
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	64 e0       	ldi	r22, 0x04	; 4
    10d2:	40 e0       	ldi	r20, 0x00	; 0
    10d4:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_voidSetPinValue>

	//LCD_KIT_voidDisplayCharacter(SPI_SPDR);
	SPI_SPDR = Data;
    10d8:	1f b9       	out	0x0f, r17	; 15
	//LCD_KIT_voidDisplayCharacter(SPI_SPDR);
	while(!GET_BIT(SPI_SPSR,SPI_SPSR_SPIF));
    10da:	77 9b       	sbis	0x0e, 7	; 14
    10dc:	fe cf       	rjmp	.-4      	; 0x10da <SPI_MasterTransmit+0x10>
	//LCD_KIT_voidDisplayCharacter(SPI_SPDR);
	//Data = SPI_SPSR;
	//Data = SPI_SPDR;

	DIO_voidSetPinValue(SPI_PORT,SPI_CS,Low);
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	64 e0       	ldi	r22, 0x04	; 4
    10e2:	40 e0       	ldi	r20, 0x00	; 0
    10e4:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_voidSetPinValue>
}
    10e8:	1f 91       	pop	r17
    10ea:	08 95       	ret

000010ec <SPI_voidInitialization>:

void SPI_voidInitialization(void)
{
#if		(Mode==Master_Mode)

	DIO_voidSetPinDirection(SPI_PORT,SPI_MOSI,Output);
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	65 e0       	ldi	r22, 0x05	; 5
    10f0:	41 e0       	ldi	r20, 0x01	; 1
    10f2:	0e 94 81 09 	call	0x1302	; 0x1302 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(SPI_PORT,SPI_MISO,Input);
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	66 e0       	ldi	r22, 0x06	; 6
    10fa:	40 e0       	ldi	r20, 0x00	; 0
    10fc:	0e 94 81 09 	call	0x1302	; 0x1302 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(SPI_PORT,SPI_CS,Output);
    1100:	81 e0       	ldi	r24, 0x01	; 1
    1102:	64 e0       	ldi	r22, 0x04	; 4
    1104:	41 e0       	ldi	r20, 0x01	; 1
    1106:	0e 94 81 09 	call	0x1302	; 0x1302 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(SPI_PORT,SPI_SCK,Output);
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	67 e0       	ldi	r22, 0x07	; 7
    110e:	41 e0       	ldi	r20, 0x01	; 1
    1110:	0e 94 81 09 	call	0x1302	; 0x1302 <DIO_voidSetPinDirection>

	//DIO_voidSetPinValue(SPI_PORT,SPI_MOSI,High);
	//DIO_voidSetPinValue(SPI_PORT,SPI_MISO,High);
	DIO_voidSetPinValue(SPI_PORT,SPI_CS,High);
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	64 e0       	ldi	r22, 0x04	; 4
    1118:	41 e0       	ldi	r20, 0x01	; 1
    111a:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_voidSetPinValue>
	//DIO_voidSetPinValue(SPI_PORT,SPI_SCK,High);

	SET_BIT(SPI_SPCR,SPI_SPCR_MSTR);
    111e:	6c 9a       	sbi	0x0d, 4	; 13

		SET_BIT(SPI_SPCR,SPI_SPCR_CPOL);

	#elif 	(IDLE_State==LOW_IDle_State)

		CLR_BIT(SPI_SPCR,SPI_SPCR_CPOL);
    1120:	6b 98       	cbi	0x0d, 3	; 13

		CLR_BIT(SPI_SPCR,SPI_SPCR_CPHA);

	#elif 	(Sampling_mode==Sampling_At_Last)

		SET_BIT(SPI_SPCR,SPI_SPCR_CPHA);
    1122:	6a 9a       	sbi	0x0d, 2	; 13

	#endif

	#if		(SPI_SCK_FREQ==SPI_SCK_FREQ_DIVI_4)

		CLR_BIT(SPI_SPCR,SPI_SPCR_SPR0);
    1124:	68 98       	cbi	0x0d, 0	; 13
		CLR_BIT(SPI_SPCR,SPI_SPCR_SPR01);
    1126:	69 98       	cbi	0x0d, 1	; 13
		CLR_BIT(SPI_SPSR,SPI_SPSR_SPI2X);
    1128:	70 98       	cbi	0x0e, 0	; 14

		CLR_BIT(SPI_SPCR,SPI_SPCR_MSTR);

#endif

	SET_BIT(SPI_SPCR,SPI_SPCR_SPE);
    112a:	6e 9a       	sbi	0x0d, 6	; 13
	CLR_BIT(SPI_SPCR,SPI_SPCR_DORD);
    112c:	6d 98       	cbi	0x0d, 5	; 13
}
    112e:	08 95       	ret

00001130 <I2C_voidInitializtion>:
#include "I2C_confg.h"


void I2C_voidInitializtion(void)
{
	SET_BIT(TWCR,TWCR_TWEN);
    1130:	86 b7       	in	r24, 0x36	; 54
    1132:	84 60       	ori	r24, 0x04	; 4
    1134:	86 bf       	out	0x36, r24	; 54
	CLR_BIT(TWSR,TWSR_TWPS1);
    1136:	09 98       	cbi	0x01, 1	; 1
	CLR_BIT(TWSR,TWSR_TWPS0);
    1138:	08 98       	cbi	0x01, 0	; 1

	SET_BIT(TWCR,TWCR_TWEA);
    113a:	86 b7       	in	r24, 0x36	; 54
    113c:	80 64       	ori	r24, 0x40	; 64
    113e:	86 bf       	out	0x36, r24	; 54

	TWBR = TWBR_Prescaler;
    1140:	80 e2       	ldi	r24, 0x20	; 32
    1142:	80 b9       	out	0x00, r24	; 0

	TWAR = (MCU_Address<<1);
    1144:	82 b9       	out	0x02, r24	; 2

}
    1146:	08 95       	ret

00001148 <I2C_Master_SendStopCondition>:
	return (TWSR)&(0xF8);
}

void I2C_Master_SendStopCondition(void)
{
	SET_BIT(TWCR,TWCR_TWSTO);
    1148:	86 b7       	in	r24, 0x36	; 54
    114a:	80 61       	ori	r24, 0x10	; 16
    114c:	86 bf       	out	0x36, r24	; 54

	SET_BIT(TWCR,TWCR_TWINT);
    114e:	86 b7       	in	r24, 0x36	; 54
    1150:	80 68       	ori	r24, 0x80	; 128
    1152:	86 bf       	out	0x36, r24	; 54
}
    1154:	08 95       	ret

00001156 <I2C_voidInterruptEnable>:
	return (TWSR)&(0xF8);
}

void I2C_voidInterruptEnable(void)
{
	SET_BIT(TWCR,TWCR_TWIE);
    1156:	86 b7       	in	r24, 0x36	; 54
    1158:	81 60       	ori	r24, 0x01	; 1
    115a:	86 bf       	out	0x36, r24	; 54
}
    115c:	08 95       	ret

0000115e <I2C_voidInterruptDisable>:
void I2C_voidInterruptDisable(void)
{
	CLR_BIT(TWCR,TWCR_TWIE);
    115e:	86 b7       	in	r24, 0x36	; 54
    1160:	8e 7f       	andi	r24, 0xFE	; 254
    1162:	86 bf       	out	0x36, r24	; 54

}
    1164:	08 95       	ret

00001166 <I2C_Slave_ReadData>:

u8   I2C_Slave_ReadData(u8 * Data)
{
    1166:	cf 93       	push	r28
    1168:	df 93       	push	r29
    116a:	ec 01       	movw	r28, r24
	SET_BIT(TWCR,TWCR_TWINT);
    116c:	86 b7       	in	r24, 0x36	; 54
    116e:	80 68       	ori	r24, 0x80	; 128
    1170:	86 bf       	out	0x36, r24	; 54

	while(!DIO_u8GetPinValue(TWCR,TWCR_TWINT));
    1172:	86 b7       	in	r24, 0x36	; 54
    1174:	67 e0       	ldi	r22, 0x07	; 7
    1176:	0e 94 0b 0b 	call	0x1616	; 0x1616 <DIO_u8GetPinValue>
    117a:	88 23       	and	r24, r24
    117c:	d1 f3       	breq	.-12     	; 0x1172 <I2C_Slave_ReadData+0xc>

	if((((TWSR)&(0xF8))==Slave_Data_Rcieved_ACK_Returned_OWN_Adsress)||((TWSR)&(0xF8))==Slave_Data_Rcieved_ACK_Returned_GeneralCall)
    117e:	81 b1       	in	r24, 0x01	; 1
    1180:	88 7f       	andi	r24, 0xF8	; 248
    1182:	80 38       	cpi	r24, 0x80	; 128
    1184:	21 f0       	breq	.+8      	; 0x118e <I2C_Slave_ReadData+0x28>
    1186:	81 b1       	in	r24, 0x01	; 1
    1188:	88 7f       	andi	r24, 0xF8	; 248
    118a:	80 39       	cpi	r24, 0x90	; 144
    118c:	29 f4       	brne	.+10     	; 0x1198 <I2C_Slave_ReadData+0x32>
	{
		SET_BIT(TWCR,TWCR_TWEA);
    118e:	86 b7       	in	r24, 0x36	; 54
    1190:	80 64       	ori	r24, 0x40	; 64
    1192:	86 bf       	out	0x36, r24	; 54
		*Data = TWDR;
    1194:	83 b1       	in	r24, 0x03	; 3
    1196:	88 83       	st	Y, r24
	}

	return (TWSR)&(0xF8);
    1198:	81 b1       	in	r24, 0x01	; 1
}
    119a:	88 7f       	andi	r24, 0xF8	; 248
    119c:	df 91       	pop	r29
    119e:	cf 91       	pop	r28
    11a0:	08 95       	ret

000011a2 <I2C_Master_ReadData>:

	return (TWSR)&(0xF8);
}

u8 	 I2C_Master_ReadData(u8 * Data)
{
    11a2:	cf 93       	push	r28
    11a4:	df 93       	push	r29
    11a6:	ec 01       	movw	r28, r24
	SET_BIT(TWCR,TWCR_TWINT);
    11a8:	86 b7       	in	r24, 0x36	; 54
    11aa:	80 68       	ori	r24, 0x80	; 128
    11ac:	86 bf       	out	0x36, r24	; 54

	while(!DIO_u8GetPinValue(TWCR,TWCR_TWINT));
    11ae:	86 b7       	in	r24, 0x36	; 54
    11b0:	67 e0       	ldi	r22, 0x07	; 7
    11b2:	0e 94 0b 0b 	call	0x1616	; 0x1616 <DIO_u8GetPinValue>
    11b6:	88 23       	and	r24, r24
    11b8:	d1 f3       	breq	.-12     	; 0x11ae <I2C_Master_ReadData+0xc>

	if(((TWSR)&(0xF8))==Data_Rcieved_ACK_Returned)
    11ba:	81 b1       	in	r24, 0x01	; 1
    11bc:	88 7f       	andi	r24, 0xF8	; 248
    11be:	80 35       	cpi	r24, 0x50	; 80
    11c0:	11 f4       	brne	.+4      	; 0x11c6 <I2C_Master_ReadData+0x24>
	{
		*Data = TWDR;
    11c2:	83 b1       	in	r24, 0x03	; 3
    11c4:	88 83       	st	Y, r24
	}

	return (TWSR)&(0xF8);
    11c6:	81 b1       	in	r24, 0x01	; 1
}
    11c8:	88 7f       	andi	r24, 0xF8	; 248
    11ca:	df 91       	pop	r29
    11cc:	cf 91       	pop	r28
    11ce:	08 95       	ret

000011d0 <I2C_Master_SendData>:
	return (TWSR)&(0xF8);
}

u8 	 I2C_Master_SendData(u8 Data)
{
	TWDR = Data;
    11d0:	83 b9       	out	0x03, r24	; 3

	SET_BIT(TWCR,TWCR_TWINT);
    11d2:	86 b7       	in	r24, 0x36	; 54
    11d4:	80 68       	ori	r24, 0x80	; 128
    11d6:	86 bf       	out	0x36, r24	; 54

	while(!DIO_u8GetPinValue(TWCR,TWCR_TWINT));
    11d8:	86 b7       	in	r24, 0x36	; 54
    11da:	67 e0       	ldi	r22, 0x07	; 7
    11dc:	0e 94 0b 0b 	call	0x1616	; 0x1616 <DIO_u8GetPinValue>
    11e0:	88 23       	and	r24, r24
    11e2:	d1 f3       	breq	.-12     	; 0x11d8 <I2C_Master_SendData+0x8>

	return (TWSR)&(0xF8);
    11e4:	81 b1       	in	r24, 0x01	; 1
}
    11e6:	88 7f       	andi	r24, 0xF8	; 248
    11e8:	08 95       	ret

000011ea <I2C_Master_SendSlaveAddress_Read>:
	return (TWSR)&(0xF8);
}

u8 	 I2C_Master_SendSlaveAddress_Read(u8 Address)
{
	TWDR=(Address<<1);
    11ea:	88 0f       	add	r24, r24
    11ec:	83 b9       	out	0x03, r24	; 3

	SET_BIT(TWDR,0);
    11ee:	18 9a       	sbi	0x03, 0	; 3

	CLR_BIT(TWCR,TWCR_TWSTA);
    11f0:	86 b7       	in	r24, 0x36	; 54
    11f2:	8f 7d       	andi	r24, 0xDF	; 223
    11f4:	86 bf       	out	0x36, r24	; 54
	SET_BIT(TWCR,TWCR_TWINT);
    11f6:	86 b7       	in	r24, 0x36	; 54
    11f8:	80 68       	ori	r24, 0x80	; 128
    11fa:	86 bf       	out	0x36, r24	; 54

	while(!DIO_u8GetPinValue(TWCR,TWCR_TWINT));
    11fc:	86 b7       	in	r24, 0x36	; 54
    11fe:	67 e0       	ldi	r22, 0x07	; 7
    1200:	0e 94 0b 0b 	call	0x1616	; 0x1616 <DIO_u8GetPinValue>
    1204:	88 23       	and	r24, r24
    1206:	d1 f3       	breq	.-12     	; 0x11fc <I2C_Master_SendSlaveAddress_Read+0x12>

	return (TWSR)&(0xF8);
    1208:	81 b1       	in	r24, 0x01	; 1
}
    120a:	88 7f       	andi	r24, 0xF8	; 248
    120c:	08 95       	ret

0000120e <I2C_Master_SendSlaveAddress_Write>:
	SET_BIT(TWCR,TWCR_TWINT);
}

u8 	 I2C_Master_SendSlaveAddress_Write(u8 Address)
{
	TWDR=(Address<<1);
    120e:	88 0f       	add	r24, r24
    1210:	83 b9       	out	0x03, r24	; 3

	CLR_BIT(TWDR,0);
    1212:	18 98       	cbi	0x03, 0	; 3

	CLR_BIT(TWCR,TWCR_TWSTA);
    1214:	86 b7       	in	r24, 0x36	; 54
    1216:	8f 7d       	andi	r24, 0xDF	; 223
    1218:	86 bf       	out	0x36, r24	; 54
	SET_BIT(TWCR,TWCR_TWINT);
    121a:	86 b7       	in	r24, 0x36	; 54
    121c:	80 68       	ori	r24, 0x80	; 128
    121e:	86 bf       	out	0x36, r24	; 54

	while(!DIO_u8GetPinValue(TWCR,TWCR_TWINT));
    1220:	86 b7       	in	r24, 0x36	; 54
    1222:	67 e0       	ldi	r22, 0x07	; 7
    1224:	0e 94 0b 0b 	call	0x1616	; 0x1616 <DIO_u8GetPinValue>
    1228:	88 23       	and	r24, r24
    122a:	d1 f3       	breq	.-12     	; 0x1220 <I2C_Master_SendSlaveAddress_Write+0x12>

	return (TWSR)&(0xF8);
    122c:	81 b1       	in	r24, 0x01	; 1
}
    122e:	88 7f       	andi	r24, 0xF8	; 248
    1230:	08 95       	ret

00001232 <I2C_Master_SendRepeatedStartCondition>:
	return (TWSR)&(0xF8);
}

u8 I2C_Master_SendRepeatedStartCondition(void)
{
	SET_BIT(TWCR,TWCR_TWSTA);
    1232:	86 b7       	in	r24, 0x36	; 54
    1234:	80 62       	ori	r24, 0x20	; 32
    1236:	86 bf       	out	0x36, r24	; 54
	SET_BIT(TWCR,TWCR_TWINT);
    1238:	86 b7       	in	r24, 0x36	; 54
    123a:	80 68       	ori	r24, 0x80	; 128
    123c:	86 bf       	out	0x36, r24	; 54

	while(!DIO_u8GetPinValue(TWCR,TWCR_TWINT));
    123e:	86 b7       	in	r24, 0x36	; 54
    1240:	67 e0       	ldi	r22, 0x07	; 7
    1242:	0e 94 0b 0b 	call	0x1616	; 0x1616 <DIO_u8GetPinValue>
    1246:	88 23       	and	r24, r24
    1248:	d1 f3       	breq	.-12     	; 0x123e <I2C_Master_SendRepeatedStartCondition+0xc>

	return (TWSR)&(0xF8);
    124a:	81 b1       	in	r24, 0x01	; 1
}
    124c:	88 7f       	andi	r24, 0xF8	; 248
    124e:	08 95       	ret

00001250 <I2C_Master_SendStartCondition>:

}

u8 I2C_Master_SendStartCondition(void)
{
	SET_BIT(TWCR,TWCR_TWSTA);
    1250:	86 b7       	in	r24, 0x36	; 54
    1252:	80 62       	ori	r24, 0x20	; 32
    1254:	86 bf       	out	0x36, r24	; 54
	SET_BIT(TWCR,TWCR_TWINT);
    1256:	86 b7       	in	r24, 0x36	; 54
    1258:	80 68       	ori	r24, 0x80	; 128
    125a:	86 bf       	out	0x36, r24	; 54

	while(!DIO_u8GetPinValue(TWCR,TWCR_TWINT));
    125c:	86 b7       	in	r24, 0x36	; 54
    125e:	67 e0       	ldi	r22, 0x07	; 7
    1260:	0e 94 0b 0b 	call	0x1616	; 0x1616 <DIO_u8GetPinValue>
    1264:	88 23       	and	r24, r24
    1266:	d1 f3       	breq	.-12     	; 0x125c <I2C_Master_SendStartCondition+0xc>

	return (TWSR)&(0xF8);
    1268:	81 b1       	in	r24, 0x01	; 1
}
    126a:	88 7f       	andi	r24, 0xF8	; 248
    126c:	08 95       	ret

0000126e <GIE_Enable>:
#include "GIE_int.h"
#include "GIE_priv.h"

void GIE_Enable (void)
{
	SET_BIT(SREG,GIE);
    126e:	8f b7       	in	r24, 0x3f	; 63
    1270:	80 68       	ori	r24, 0x80	; 128
    1272:	8f bf       	out	0x3f, r24	; 63
}
    1274:	08 95       	ret

00001276 <GIE_Disable>:

void GIE_Disable(void)
{
	CLR_BIT(SREG,GIE);
    1276:	8f b7       	in	r24, 0x3f	; 63
    1278:	8f 77       	andi	r24, 0x7F	; 127
    127a:	8f bf       	out	0x3f, r24	; 63
}
    127c:	08 95       	ret

0000127e <EXT_INT_voidInitialization>:
		CLR_BIT(GICR,INTE1);
		SET_BIT(GIFR,INTF1);
	#endif

	#ifdef EXTI1_Falling_Edge
		CLR_BIT(MCUCR,MCUCR_ISC10);
    127e:	85 b7       	in	r24, 0x35	; 53
    1280:	8b 7f       	andi	r24, 0xFB	; 251
    1282:	85 bf       	out	0x35, r24	; 53
		SET_BIT(MCUCR,MCUCR_ISC11);
    1284:	85 b7       	in	r24, 0x35	; 53
    1286:	88 60       	ori	r24, 0x08	; 8
    1288:	85 bf       	out	0x35, r24	; 53

		CLR_BIT(GICR,INTE1);
    128a:	8b b7       	in	r24, 0x3b	; 59
    128c:	8f 77       	andi	r24, 0x7F	; 127
    128e:	8b bf       	out	0x3b, r24	; 59
		SET_BIT(GIFR,INTF1);
    1290:	8a b7       	in	r24, 0x3a	; 58
    1292:	80 68       	ori	r24, 0x80	; 128
    1294:	8a bf       	out	0x3a, r24	; 58
		CLR_BIT(GICR,INTE2);
		SET_BIT(GIFR,INTF2);
	#endif
#endif

}
    1296:	08 95       	ret

00001298 <EXTI1_Enable>:
#endif

#ifdef EXTI1
void EXTI1_Enable(void)
{
	SET_BIT(GICR,INTE1);
    1298:	8b b7       	in	r24, 0x3b	; 59
    129a:	80 68       	ori	r24, 0x80	; 128
    129c:	8b bf       	out	0x3b, r24	; 59
}
    129e:	08 95       	ret

000012a0 <EXTI1_Disable>:

void EXTI1_Disable(void)
{
	CLR_BIT(GICR,INTE1);
    12a0:	8b b7       	in	r24, 0x3b	; 59
    12a2:	8f 77       	andi	r24, 0x7F	; 127
    12a4:	8b bf       	out	0x3b, r24	; 59
}
    12a6:	08 95       	ret

000012a8 <__vector_2>:
#endif


void (*EXTI1_ISR)(void)=NULL;
void __vector_2(void)
{
    12a8:	1f 92       	push	r1
    12aa:	0f 92       	push	r0
    12ac:	0f b6       	in	r0, 0x3f	; 63
    12ae:	0f 92       	push	r0
    12b0:	11 24       	eor	r1, r1
    12b2:	2f 93       	push	r18
    12b4:	3f 93       	push	r19
    12b6:	4f 93       	push	r20
    12b8:	5f 93       	push	r21
    12ba:	6f 93       	push	r22
    12bc:	7f 93       	push	r23
    12be:	8f 93       	push	r24
    12c0:	9f 93       	push	r25
    12c2:	af 93       	push	r26
    12c4:	bf 93       	push	r27
    12c6:	ef 93       	push	r30
    12c8:	ff 93       	push	r31
	EXTI1_ISR();
    12ca:	e0 91 8a 01 	lds	r30, 0x018A
    12ce:	f0 91 8b 01 	lds	r31, 0x018B
    12d2:	09 95       	icall
}
    12d4:	ff 91       	pop	r31
    12d6:	ef 91       	pop	r30
    12d8:	bf 91       	pop	r27
    12da:	af 91       	pop	r26
    12dc:	9f 91       	pop	r25
    12de:	8f 91       	pop	r24
    12e0:	7f 91       	pop	r23
    12e2:	6f 91       	pop	r22
    12e4:	5f 91       	pop	r21
    12e6:	4f 91       	pop	r20
    12e8:	3f 91       	pop	r19
    12ea:	2f 91       	pop	r18
    12ec:	0f 90       	pop	r0
    12ee:	0f be       	out	0x3f, r0	; 63
    12f0:	0f 90       	pop	r0
    12f2:	1f 90       	pop	r1
    12f4:	18 95       	reti

000012f6 <EXTI1_CallBack>:
void EXTI1_CallBack(void (*PF_EXTI1)(void))
{
	EXTI1_ISR=PF_EXTI1;
    12f6:	90 93 8b 01 	sts	0x018B, r25
    12fa:	80 93 8a 01 	sts	0x018A, r24
}
    12fe:	08 95       	ret

00001300 <DIO_voidInitialization>:
//	DIO_voidSetPinDirection(PortD,Pin5,Output);
//
//	DIO_voidSetPinDirection(PortB,Pin3,Output);
//	DIO_voidSetPinDirection(PortD,Pin6,Input);

}
    1300:	08 95       	ret

00001302 <DIO_voidSetPinDirection>:

void 	DIO_voidSetPinDirection (u8 PortId,u8 PinId,u8 Direction)
{
	if(Direction==Output)
    1302:	41 30       	cpi	r20, 0x01	; 1
    1304:	b1 f5       	brne	.+108    	; 0x1372 <DIO_voidSetPinDirection+0x70>
	{
		switch(PortId)
    1306:	81 30       	cpi	r24, 0x01	; 1
    1308:	99 f0       	breq	.+38     	; 0x1330 <DIO_voidSetPinDirection+0x2e>
    130a:	81 30       	cpi	r24, 0x01	; 1
    130c:	30 f0       	brcs	.+12     	; 0x131a <DIO_voidSetPinDirection+0x18>
    130e:	82 30       	cpi	r24, 0x02	; 2
    1310:	d1 f0       	breq	.+52     	; 0x1346 <DIO_voidSetPinDirection+0x44>
    1312:	83 30       	cpi	r24, 0x03	; 3
    1314:	09 f0       	breq	.+2      	; 0x1318 <DIO_voidSetPinDirection+0x16>
    1316:	65 c0       	rjmp	.+202    	; 0x13e2 <DIO_voidSetPinDirection+0xe0>
    1318:	21 c0       	rjmp	.+66     	; 0x135c <DIO_voidSetPinDirection+0x5a>
		{
			case 0: SET_BIT(DDRA,PinId); break;
    131a:	2a b3       	in	r18, 0x1a	; 26
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	02 c0       	rjmp	.+4      	; 0x1326 <DIO_voidSetPinDirection+0x24>
    1322:	88 0f       	add	r24, r24
    1324:	99 1f       	adc	r25, r25
    1326:	6a 95       	dec	r22
    1328:	e2 f7       	brpl	.-8      	; 0x1322 <DIO_voidSetPinDirection+0x20>
    132a:	28 2b       	or	r18, r24
    132c:	2a bb       	out	0x1a, r18	; 26
    132e:	08 95       	ret
			case 1: SET_BIT(DDRB,PinId); break;
    1330:	27 b3       	in	r18, 0x17	; 23
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	02 c0       	rjmp	.+4      	; 0x133c <DIO_voidSetPinDirection+0x3a>
    1338:	88 0f       	add	r24, r24
    133a:	99 1f       	adc	r25, r25
    133c:	6a 95       	dec	r22
    133e:	e2 f7       	brpl	.-8      	; 0x1338 <DIO_voidSetPinDirection+0x36>
    1340:	28 2b       	or	r18, r24
    1342:	27 bb       	out	0x17, r18	; 23
    1344:	08 95       	ret
			case 2: SET_BIT(DDRC,PinId); break;
    1346:	24 b3       	in	r18, 0x14	; 20
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	02 c0       	rjmp	.+4      	; 0x1352 <DIO_voidSetPinDirection+0x50>
    134e:	88 0f       	add	r24, r24
    1350:	99 1f       	adc	r25, r25
    1352:	6a 95       	dec	r22
    1354:	e2 f7       	brpl	.-8      	; 0x134e <DIO_voidSetPinDirection+0x4c>
    1356:	28 2b       	or	r18, r24
    1358:	24 bb       	out	0x14, r18	; 20
    135a:	08 95       	ret
			case 3: SET_BIT(DDRD,PinId); break;
    135c:	21 b3       	in	r18, 0x11	; 17
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	02 c0       	rjmp	.+4      	; 0x1368 <DIO_voidSetPinDirection+0x66>
    1364:	88 0f       	add	r24, r24
    1366:	99 1f       	adc	r25, r25
    1368:	6a 95       	dec	r22
    136a:	e2 f7       	brpl	.-8      	; 0x1364 <DIO_voidSetPinDirection+0x62>
    136c:	28 2b       	or	r18, r24
    136e:	21 bb       	out	0x11, r18	; 17
    1370:	08 95       	ret
		}
	}
	else
	{
		switch(PortId)
    1372:	81 30       	cpi	r24, 0x01	; 1
    1374:	99 f0       	breq	.+38     	; 0x139c <DIO_voidSetPinDirection+0x9a>
    1376:	81 30       	cpi	r24, 0x01	; 1
    1378:	28 f0       	brcs	.+10     	; 0x1384 <DIO_voidSetPinDirection+0x82>
    137a:	82 30       	cpi	r24, 0x02	; 2
    137c:	d9 f0       	breq	.+54     	; 0x13b4 <DIO_voidSetPinDirection+0xb2>
    137e:	83 30       	cpi	r24, 0x03	; 3
    1380:	81 f5       	brne	.+96     	; 0x13e2 <DIO_voidSetPinDirection+0xe0>
    1382:	24 c0       	rjmp	.+72     	; 0x13cc <DIO_voidSetPinDirection+0xca>
		{
			case 0: CLR_BIT(DDRA,PinId); break;
    1384:	2a b3       	in	r18, 0x1a	; 26
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	02 c0       	rjmp	.+4      	; 0x1390 <DIO_voidSetPinDirection+0x8e>
    138c:	88 0f       	add	r24, r24
    138e:	99 1f       	adc	r25, r25
    1390:	6a 95       	dec	r22
    1392:	e2 f7       	brpl	.-8      	; 0x138c <DIO_voidSetPinDirection+0x8a>
    1394:	80 95       	com	r24
    1396:	82 23       	and	r24, r18
    1398:	8a bb       	out	0x1a, r24	; 26
    139a:	08 95       	ret
			case 1: CLR_BIT(DDRB,PinId); break;
    139c:	27 b3       	in	r18, 0x17	; 23
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	02 c0       	rjmp	.+4      	; 0x13a8 <DIO_voidSetPinDirection+0xa6>
    13a4:	88 0f       	add	r24, r24
    13a6:	99 1f       	adc	r25, r25
    13a8:	6a 95       	dec	r22
    13aa:	e2 f7       	brpl	.-8      	; 0x13a4 <DIO_voidSetPinDirection+0xa2>
    13ac:	80 95       	com	r24
    13ae:	82 23       	and	r24, r18
    13b0:	87 bb       	out	0x17, r24	; 23
    13b2:	08 95       	ret
			case 2: CLR_BIT(DDRC,PinId); break;
    13b4:	24 b3       	in	r18, 0x14	; 20
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	02 c0       	rjmp	.+4      	; 0x13c0 <DIO_voidSetPinDirection+0xbe>
    13bc:	88 0f       	add	r24, r24
    13be:	99 1f       	adc	r25, r25
    13c0:	6a 95       	dec	r22
    13c2:	e2 f7       	brpl	.-8      	; 0x13bc <DIO_voidSetPinDirection+0xba>
    13c4:	80 95       	com	r24
    13c6:	82 23       	and	r24, r18
    13c8:	84 bb       	out	0x14, r24	; 20
    13ca:	08 95       	ret
			case 3: CLR_BIT(DDRD,PinId); break;
    13cc:	21 b3       	in	r18, 0x11	; 17
    13ce:	81 e0       	ldi	r24, 0x01	; 1
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	02 c0       	rjmp	.+4      	; 0x13d8 <DIO_voidSetPinDirection+0xd6>
    13d4:	88 0f       	add	r24, r24
    13d6:	99 1f       	adc	r25, r25
    13d8:	6a 95       	dec	r22
    13da:	e2 f7       	brpl	.-8      	; 0x13d4 <DIO_voidSetPinDirection+0xd2>
    13dc:	80 95       	com	r24
    13de:	82 23       	and	r24, r18
    13e0:	81 bb       	out	0x11, r24	; 17
    13e2:	08 95       	ret

000013e4 <DIO_voidSetPinValue>:
	}
}

void DIO_voidSetPinValue(u8 PortId,u8 PinId,u8 Value)
{
	if(Value==High)
    13e4:	41 30       	cpi	r20, 0x01	; 1
    13e6:	b1 f5       	brne	.+108    	; 0x1454 <DIO_voidSetPinValue+0x70>
	{
		switch(PortId)
    13e8:	81 30       	cpi	r24, 0x01	; 1
    13ea:	99 f0       	breq	.+38     	; 0x1412 <DIO_voidSetPinValue+0x2e>
    13ec:	81 30       	cpi	r24, 0x01	; 1
    13ee:	30 f0       	brcs	.+12     	; 0x13fc <DIO_voidSetPinValue+0x18>
    13f0:	82 30       	cpi	r24, 0x02	; 2
    13f2:	d1 f0       	breq	.+52     	; 0x1428 <DIO_voidSetPinValue+0x44>
    13f4:	83 30       	cpi	r24, 0x03	; 3
    13f6:	09 f0       	breq	.+2      	; 0x13fa <DIO_voidSetPinValue+0x16>
    13f8:	65 c0       	rjmp	.+202    	; 0x14c4 <DIO_voidSetPinValue+0xe0>
    13fa:	21 c0       	rjmp	.+66     	; 0x143e <DIO_voidSetPinValue+0x5a>
		{
			case 0: SET_BIT(PORTA,PinId); break;
    13fc:	2b b3       	in	r18, 0x1b	; 27
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	02 c0       	rjmp	.+4      	; 0x1408 <DIO_voidSetPinValue+0x24>
    1404:	88 0f       	add	r24, r24
    1406:	99 1f       	adc	r25, r25
    1408:	6a 95       	dec	r22
    140a:	e2 f7       	brpl	.-8      	; 0x1404 <DIO_voidSetPinValue+0x20>
    140c:	28 2b       	or	r18, r24
    140e:	2b bb       	out	0x1b, r18	; 27
    1410:	08 95       	ret
			case 1: SET_BIT(PORTB,PinId); break;
    1412:	28 b3       	in	r18, 0x18	; 24
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	02 c0       	rjmp	.+4      	; 0x141e <DIO_voidSetPinValue+0x3a>
    141a:	88 0f       	add	r24, r24
    141c:	99 1f       	adc	r25, r25
    141e:	6a 95       	dec	r22
    1420:	e2 f7       	brpl	.-8      	; 0x141a <DIO_voidSetPinValue+0x36>
    1422:	28 2b       	or	r18, r24
    1424:	28 bb       	out	0x18, r18	; 24
    1426:	08 95       	ret
			case 2: SET_BIT(PORTC,PinId); break;
    1428:	25 b3       	in	r18, 0x15	; 21
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	02 c0       	rjmp	.+4      	; 0x1434 <DIO_voidSetPinValue+0x50>
    1430:	88 0f       	add	r24, r24
    1432:	99 1f       	adc	r25, r25
    1434:	6a 95       	dec	r22
    1436:	e2 f7       	brpl	.-8      	; 0x1430 <DIO_voidSetPinValue+0x4c>
    1438:	28 2b       	or	r18, r24
    143a:	25 bb       	out	0x15, r18	; 21
    143c:	08 95       	ret
			case 3: SET_BIT(PORTD,PinId); break;
    143e:	22 b3       	in	r18, 0x12	; 18
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	02 c0       	rjmp	.+4      	; 0x144a <DIO_voidSetPinValue+0x66>
    1446:	88 0f       	add	r24, r24
    1448:	99 1f       	adc	r25, r25
    144a:	6a 95       	dec	r22
    144c:	e2 f7       	brpl	.-8      	; 0x1446 <DIO_voidSetPinValue+0x62>
    144e:	28 2b       	or	r18, r24
    1450:	22 bb       	out	0x12, r18	; 18
    1452:	08 95       	ret
		}
	}
	else
	{
		switch(PortId)
    1454:	81 30       	cpi	r24, 0x01	; 1
    1456:	99 f0       	breq	.+38     	; 0x147e <DIO_voidSetPinValue+0x9a>
    1458:	81 30       	cpi	r24, 0x01	; 1
    145a:	28 f0       	brcs	.+10     	; 0x1466 <DIO_voidSetPinValue+0x82>
    145c:	82 30       	cpi	r24, 0x02	; 2
    145e:	d9 f0       	breq	.+54     	; 0x1496 <DIO_voidSetPinValue+0xb2>
    1460:	83 30       	cpi	r24, 0x03	; 3
    1462:	81 f5       	brne	.+96     	; 0x14c4 <DIO_voidSetPinValue+0xe0>
    1464:	24 c0       	rjmp	.+72     	; 0x14ae <DIO_voidSetPinValue+0xca>
		{
			case 0: CLR_BIT(PORTA,PinId); break;
    1466:	2b b3       	in	r18, 0x1b	; 27
    1468:	81 e0       	ldi	r24, 0x01	; 1
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	02 c0       	rjmp	.+4      	; 0x1472 <DIO_voidSetPinValue+0x8e>
    146e:	88 0f       	add	r24, r24
    1470:	99 1f       	adc	r25, r25
    1472:	6a 95       	dec	r22
    1474:	e2 f7       	brpl	.-8      	; 0x146e <DIO_voidSetPinValue+0x8a>
    1476:	80 95       	com	r24
    1478:	82 23       	and	r24, r18
    147a:	8b bb       	out	0x1b, r24	; 27
    147c:	08 95       	ret
			case 1: CLR_BIT(PORTB,PinId); break;
    147e:	28 b3       	in	r18, 0x18	; 24
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	02 c0       	rjmp	.+4      	; 0x148a <DIO_voidSetPinValue+0xa6>
    1486:	88 0f       	add	r24, r24
    1488:	99 1f       	adc	r25, r25
    148a:	6a 95       	dec	r22
    148c:	e2 f7       	brpl	.-8      	; 0x1486 <DIO_voidSetPinValue+0xa2>
    148e:	80 95       	com	r24
    1490:	82 23       	and	r24, r18
    1492:	88 bb       	out	0x18, r24	; 24
    1494:	08 95       	ret
			case 2: CLR_BIT(PORTC,PinId); break;
    1496:	25 b3       	in	r18, 0x15	; 21
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	02 c0       	rjmp	.+4      	; 0x14a2 <DIO_voidSetPinValue+0xbe>
    149e:	88 0f       	add	r24, r24
    14a0:	99 1f       	adc	r25, r25
    14a2:	6a 95       	dec	r22
    14a4:	e2 f7       	brpl	.-8      	; 0x149e <DIO_voidSetPinValue+0xba>
    14a6:	80 95       	com	r24
    14a8:	82 23       	and	r24, r18
    14aa:	85 bb       	out	0x15, r24	; 21
    14ac:	08 95       	ret
			case 3: CLR_BIT(PORTD,PinId); break;
    14ae:	22 b3       	in	r18, 0x12	; 18
    14b0:	81 e0       	ldi	r24, 0x01	; 1
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	02 c0       	rjmp	.+4      	; 0x14ba <DIO_voidSetPinValue+0xd6>
    14b6:	88 0f       	add	r24, r24
    14b8:	99 1f       	adc	r25, r25
    14ba:	6a 95       	dec	r22
    14bc:	e2 f7       	brpl	.-8      	; 0x14b6 <DIO_voidSetPinValue+0xd2>
    14be:	80 95       	com	r24
    14c0:	82 23       	and	r24, r18
    14c2:	82 bb       	out	0x12, r24	; 18
    14c4:	08 95       	ret

000014c6 <DIO_voidTogglePin>:
	}
}

void DIO_voidTogglePin (u8 PortId,u8 PinId)
{
	switch(PortId)
    14c6:	81 30       	cpi	r24, 0x01	; 1
    14c8:	91 f0       	breq	.+36     	; 0x14ee <DIO_voidTogglePin+0x28>
    14ca:	81 30       	cpi	r24, 0x01	; 1
    14cc:	28 f0       	brcs	.+10     	; 0x14d8 <DIO_voidTogglePin+0x12>
    14ce:	82 30       	cpi	r24, 0x02	; 2
    14d0:	c9 f0       	breq	.+50     	; 0x1504 <DIO_voidTogglePin+0x3e>
    14d2:	83 30       	cpi	r24, 0x03	; 3
    14d4:	61 f5       	brne	.+88     	; 0x152e <DIO_voidTogglePin+0x68>
    14d6:	21 c0       	rjmp	.+66     	; 0x151a <DIO_voidTogglePin+0x54>
	{
		case 0: TOG_BIT(PORTA,PinId); break;
    14d8:	2b b3       	in	r18, 0x1b	; 27
    14da:	81 e0       	ldi	r24, 0x01	; 1
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	02 c0       	rjmp	.+4      	; 0x14e4 <DIO_voidTogglePin+0x1e>
    14e0:	88 0f       	add	r24, r24
    14e2:	99 1f       	adc	r25, r25
    14e4:	6a 95       	dec	r22
    14e6:	e2 f7       	brpl	.-8      	; 0x14e0 <DIO_voidTogglePin+0x1a>
    14e8:	28 27       	eor	r18, r24
    14ea:	2b bb       	out	0x1b, r18	; 27
    14ec:	08 95       	ret
		case 1: TOG_BIT(PORTB,PinId); break;
    14ee:	28 b3       	in	r18, 0x18	; 24
    14f0:	81 e0       	ldi	r24, 0x01	; 1
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	02 c0       	rjmp	.+4      	; 0x14fa <DIO_voidTogglePin+0x34>
    14f6:	88 0f       	add	r24, r24
    14f8:	99 1f       	adc	r25, r25
    14fa:	6a 95       	dec	r22
    14fc:	e2 f7       	brpl	.-8      	; 0x14f6 <DIO_voidTogglePin+0x30>
    14fe:	28 27       	eor	r18, r24
    1500:	28 bb       	out	0x18, r18	; 24
    1502:	08 95       	ret
		case 2: TOG_BIT(PORTC,PinId); break;
    1504:	25 b3       	in	r18, 0x15	; 21
    1506:	81 e0       	ldi	r24, 0x01	; 1
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	02 c0       	rjmp	.+4      	; 0x1510 <DIO_voidTogglePin+0x4a>
    150c:	88 0f       	add	r24, r24
    150e:	99 1f       	adc	r25, r25
    1510:	6a 95       	dec	r22
    1512:	e2 f7       	brpl	.-8      	; 0x150c <DIO_voidTogglePin+0x46>
    1514:	28 27       	eor	r18, r24
    1516:	25 bb       	out	0x15, r18	; 21
    1518:	08 95       	ret
		case 3: TOG_BIT(PORTD,PinId); break;
    151a:	22 b3       	in	r18, 0x12	; 18
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	02 c0       	rjmp	.+4      	; 0x1526 <DIO_voidTogglePin+0x60>
    1522:	88 0f       	add	r24, r24
    1524:	99 1f       	adc	r25, r25
    1526:	6a 95       	dec	r22
    1528:	e2 f7       	brpl	.-8      	; 0x1522 <DIO_voidTogglePin+0x5c>
    152a:	28 27       	eor	r18, r24
    152c:	22 bb       	out	0x12, r18	; 18
    152e:	08 95       	ret

00001530 <DIO_voidSetPortDirection>:
	}
}

void DIO_voidSetPortDirection (u8 PortId,u8 Direction)
{
	if(Direction==Output)
    1530:	61 30       	cpi	r22, 0x01	; 1
    1532:	a9 f4       	brne	.+42     	; 0x155e <DIO_voidSetPortDirection+0x2e>
	{
		switch(PortId)
    1534:	81 30       	cpi	r24, 0x01	; 1
    1536:	51 f0       	breq	.+20     	; 0x154c <DIO_voidSetPortDirection+0x1c>
    1538:	81 30       	cpi	r24, 0x01	; 1
    153a:	28 f0       	brcs	.+10     	; 0x1546 <DIO_voidSetPortDirection+0x16>
    153c:	82 30       	cpi	r24, 0x02	; 2
    153e:	49 f0       	breq	.+18     	; 0x1552 <DIO_voidSetPortDirection+0x22>
    1540:	83 30       	cpi	r24, 0x03	; 3
    1542:	e9 f4       	brne	.+58     	; 0x157e <DIO_voidSetPortDirection+0x4e>
    1544:	09 c0       	rjmp	.+18     	; 0x1558 <DIO_voidSetPortDirection+0x28>
		{
			case 0: SET_BYTE(DDRA,0xFF); break;
    1546:	8f ef       	ldi	r24, 0xFF	; 255
    1548:	8a bb       	out	0x1a, r24	; 26
    154a:	08 95       	ret
			case 1: SET_BYTE(DDRB,0xFF); break;
    154c:	8f ef       	ldi	r24, 0xFF	; 255
    154e:	87 bb       	out	0x17, r24	; 23
    1550:	08 95       	ret
			case 2: SET_BYTE(DDRC,0xFF); break;
    1552:	8f ef       	ldi	r24, 0xFF	; 255
    1554:	84 bb       	out	0x14, r24	; 20
    1556:	08 95       	ret
			case 3: SET_BYTE(DDRD,0xFF); break;
    1558:	8f ef       	ldi	r24, 0xFF	; 255
    155a:	81 bb       	out	0x11, r24	; 17
    155c:	08 95       	ret
		}
	}
	else
	{
		switch(PortId)
    155e:	81 30       	cpi	r24, 0x01	; 1
    1560:	49 f0       	breq	.+18     	; 0x1574 <DIO_voidSetPortDirection+0x44>
    1562:	81 30       	cpi	r24, 0x01	; 1
    1564:	28 f0       	brcs	.+10     	; 0x1570 <DIO_voidSetPortDirection+0x40>
    1566:	82 30       	cpi	r24, 0x02	; 2
    1568:	39 f0       	breq	.+14     	; 0x1578 <DIO_voidSetPortDirection+0x48>
    156a:	83 30       	cpi	r24, 0x03	; 3
    156c:	41 f4       	brne	.+16     	; 0x157e <DIO_voidSetPortDirection+0x4e>
    156e:	06 c0       	rjmp	.+12     	; 0x157c <DIO_voidSetPortDirection+0x4c>
		{
			case 0: SET_BYTE(DDRA,0x00); break;
    1570:	1a ba       	out	0x1a, r1	; 26
    1572:	08 95       	ret
			case 1: SET_BYTE(DDRB,0x00); break;
    1574:	17 ba       	out	0x17, r1	; 23
    1576:	08 95       	ret
			case 2: SET_BYTE(DDRC,0x00); break;
    1578:	14 ba       	out	0x14, r1	; 20
    157a:	08 95       	ret
			case 3: SET_BYTE(DDRD,0x00); break;
    157c:	11 ba       	out	0x11, r1	; 17
    157e:	08 95       	ret

00001580 <DIO_voidSetPortValue>:
	}
}

void DIO_voidSetPortValue (u8 PortId,u8 Value)
{
	switch(PortId)
    1580:	81 30       	cpi	r24, 0x01	; 1
    1582:	49 f0       	breq	.+18     	; 0x1596 <DIO_voidSetPortValue+0x16>
    1584:	81 30       	cpi	r24, 0x01	; 1
    1586:	28 f0       	brcs	.+10     	; 0x1592 <DIO_voidSetPortValue+0x12>
    1588:	82 30       	cpi	r24, 0x02	; 2
    158a:	39 f0       	breq	.+14     	; 0x159a <DIO_voidSetPortValue+0x1a>
    158c:	83 30       	cpi	r24, 0x03	; 3
    158e:	41 f4       	brne	.+16     	; 0x15a0 <DIO_voidSetPortValue+0x20>
    1590:	06 c0       	rjmp	.+12     	; 0x159e <DIO_voidSetPortValue+0x1e>
	{
		case 0: SET_BYTE(PORTA,Value); break;
    1592:	6b bb       	out	0x1b, r22	; 27
    1594:	08 95       	ret
		case 1: SET_BYTE(PORTB,Value); break;
    1596:	68 bb       	out	0x18, r22	; 24
    1598:	08 95       	ret
		case 2: SET_BYTE(PORTC,Value); break;
    159a:	65 bb       	out	0x15, r22	; 21
    159c:	08 95       	ret
		case 3: SET_BYTE(PORTD,Value); break;
    159e:	62 bb       	out	0x12, r22	; 18
    15a0:	08 95       	ret

000015a2 <DIO_voidSetPortValueMask>:
	}
}

void	DIO_voidSetPortValueMask		(u8 PortId,u8 Value,u8 Mask)
{
	switch(PortId)
    15a2:	81 30       	cpi	r24, 0x01	; 1
    15a4:	61 f0       	breq	.+24     	; 0x15be <DIO_voidSetPortValueMask+0x1c>
    15a6:	81 30       	cpi	r24, 0x01	; 1
    15a8:	28 f0       	brcs	.+10     	; 0x15b4 <DIO_voidSetPortValueMask+0x12>
    15aa:	82 30       	cpi	r24, 0x02	; 2
    15ac:	69 f0       	breq	.+26     	; 0x15c8 <DIO_voidSetPortValueMask+0x26>
    15ae:	83 30       	cpi	r24, 0x03	; 3
    15b0:	a1 f4       	brne	.+40     	; 0x15da <DIO_voidSetPortValueMask+0x38>
    15b2:	0f c0       	rjmp	.+30     	; 0x15d2 <DIO_voidSetPortValueMask+0x30>
	{
		case 0: PORTA=((Value)|(PORTA & Mask)); break;
    15b4:	8b b3       	in	r24, 0x1b	; 27
    15b6:	48 23       	and	r20, r24
    15b8:	46 2b       	or	r20, r22
    15ba:	4b bb       	out	0x1b, r20	; 27
    15bc:	08 95       	ret
		case 1: PORTB=((Value)|(PORTB & Mask)); break;
    15be:	88 b3       	in	r24, 0x18	; 24
    15c0:	48 23       	and	r20, r24
    15c2:	46 2b       	or	r20, r22
    15c4:	48 bb       	out	0x18, r20	; 24
    15c6:	08 95       	ret
		case 2: PORTC=((Value)|(PORTC & Mask)); break;
    15c8:	85 b3       	in	r24, 0x15	; 21
    15ca:	48 23       	and	r20, r24
    15cc:	46 2b       	or	r20, r22
    15ce:	45 bb       	out	0x15, r20	; 21
    15d0:	08 95       	ret
		case 3: PORTD=((Value)|(PORTD & Mask)); break;
    15d2:	82 b3       	in	r24, 0x12	; 18
    15d4:	48 23       	and	r20, r24
    15d6:	46 2b       	or	r20, r22
    15d8:	42 bb       	out	0x12, r20	; 18
    15da:	08 95       	ret

000015dc <DIO_voidSetPortDirectionMask>:
	}
}

void	DIO_voidSetPortDirectionMask	(u8 PortId,u8 Direction,u8 Mask)
{
	switch(PortId)
    15dc:	81 30       	cpi	r24, 0x01	; 1
    15de:	61 f0       	breq	.+24     	; 0x15f8 <DIO_voidSetPortDirectionMask+0x1c>
    15e0:	81 30       	cpi	r24, 0x01	; 1
    15e2:	28 f0       	brcs	.+10     	; 0x15ee <DIO_voidSetPortDirectionMask+0x12>
    15e4:	82 30       	cpi	r24, 0x02	; 2
    15e6:	69 f0       	breq	.+26     	; 0x1602 <DIO_voidSetPortDirectionMask+0x26>
    15e8:	83 30       	cpi	r24, 0x03	; 3
    15ea:	a1 f4       	brne	.+40     	; 0x1614 <DIO_voidSetPortDirectionMask+0x38>
    15ec:	0f c0       	rjmp	.+30     	; 0x160c <DIO_voidSetPortDirectionMask+0x30>
	{
		case 0: PORTA=((Direction)|(DDRA & Mask)); break;
    15ee:	8a b3       	in	r24, 0x1a	; 26
    15f0:	48 23       	and	r20, r24
    15f2:	46 2b       	or	r20, r22
    15f4:	4b bb       	out	0x1b, r20	; 27
    15f6:	08 95       	ret
		case 1: PORTB=((Direction)|(DDRB & Mask)); break;
    15f8:	87 b3       	in	r24, 0x17	; 23
    15fa:	48 23       	and	r20, r24
    15fc:	46 2b       	or	r20, r22
    15fe:	48 bb       	out	0x18, r20	; 24
    1600:	08 95       	ret
		case 2: PORTC=((Direction)|(DDRC & Mask)); break;
    1602:	84 b3       	in	r24, 0x14	; 20
    1604:	48 23       	and	r20, r24
    1606:	46 2b       	or	r20, r22
    1608:	45 bb       	out	0x15, r20	; 21
    160a:	08 95       	ret
		case 3: PORTD=((Direction)|(DDRD & Mask)); break;
    160c:	81 b3       	in	r24, 0x11	; 17
    160e:	48 23       	and	r20, r24
    1610:	46 2b       	or	r20, r22
    1612:	42 bb       	out	0x12, r20	; 18
    1614:	08 95       	ret

00001616 <DIO_u8GetPinValue>:
	}
}

u8 DIO_u8GetPinValue (u8 PortId,u8 PinId)
{
    1616:	28 2f       	mov	r18, r24
	u8 DIO_u8ReturnPinValue;
	switch(PortId)
    1618:	81 30       	cpi	r24, 0x01	; 1
    161a:	49 f0       	breq	.+18     	; 0x162e <DIO_u8GetPinValue+0x18>
    161c:	81 30       	cpi	r24, 0x01	; 1
    161e:	28 f0       	brcs	.+10     	; 0x162a <DIO_u8GetPinValue+0x14>
    1620:	82 30       	cpi	r24, 0x02	; 2
    1622:	39 f0       	breq	.+14     	; 0x1632 <DIO_u8GetPinValue+0x1c>
    1624:	83 30       	cpi	r24, 0x03	; 3
    1626:	c9 f4       	brne	.+50     	; 0x165a <DIO_u8GetPinValue+0x44>
    1628:	06 c0       	rjmp	.+12     	; 0x1636 <DIO_u8GetPinValue+0x20>
	{
	case 0: DIO_u8ReturnPinValue = GET_BIT(PINA,PinId); break;
    162a:	29 b3       	in	r18, 0x19	; 25
    162c:	05 c0       	rjmp	.+10     	; 0x1638 <DIO_u8GetPinValue+0x22>
	case 1: DIO_u8ReturnPinValue = GET_BIT(PINB,PinId); break;
    162e:	26 b3       	in	r18, 0x16	; 22
    1630:	03 c0       	rjmp	.+6      	; 0x1638 <DIO_u8GetPinValue+0x22>
	case 2: DIO_u8ReturnPinValue = GET_BIT(PINC,PinId); break;
    1632:	23 b3       	in	r18, 0x13	; 19
    1634:	01 c0       	rjmp	.+2      	; 0x1638 <DIO_u8GetPinValue+0x22>
	case 3: DIO_u8ReturnPinValue = GET_BIT(PIND,PinId); break;
    1636:	20 b3       	in	r18, 0x10	; 16
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	06 2e       	mov	r0, r22
    163e:	02 c0       	rjmp	.+4      	; 0x1644 <DIO_u8GetPinValue+0x2e>
    1640:	88 0f       	add	r24, r24
    1642:	99 1f       	adc	r25, r25
    1644:	0a 94       	dec	r0
    1646:	e2 f7       	brpl	.-8      	; 0x1640 <DIO_u8GetPinValue+0x2a>
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	82 23       	and	r24, r18
    164c:	93 23       	and	r25, r19
    164e:	02 c0       	rjmp	.+4      	; 0x1654 <DIO_u8GetPinValue+0x3e>
    1650:	95 95       	asr	r25
    1652:	87 95       	ror	r24
    1654:	6a 95       	dec	r22
    1656:	e2 f7       	brpl	.-8      	; 0x1650 <DIO_u8GetPinValue+0x3a>
    1658:	08 95       	ret
	default : DIO_u8ReturnPinValue = GET_BIT(PortId,PinId); break;
    165a:	81 e0       	ldi	r24, 0x01	; 1
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	06 2e       	mov	r0, r22
    1660:	02 c0       	rjmp	.+4      	; 0x1666 <DIO_u8GetPinValue+0x50>
    1662:	88 0f       	add	r24, r24
    1664:	99 1f       	adc	r25, r25
    1666:	0a 94       	dec	r0
    1668:	e2 f7       	brpl	.-8      	; 0x1662 <DIO_u8GetPinValue+0x4c>
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	82 23       	and	r24, r18
    166e:	93 23       	and	r25, r19
    1670:	02 c0       	rjmp	.+4      	; 0x1676 <DIO_u8GetPinValue+0x60>
    1672:	95 95       	asr	r25
    1674:	87 95       	ror	r24
    1676:	6a 95       	dec	r22
    1678:	e2 f7       	brpl	.-8      	; 0x1672 <DIO_u8GetPinValue+0x5c>
	}
	return DIO_u8ReturnPinValue;
}
    167a:	08 95       	ret

0000167c <DIO_voidGetPinValue>:

void DIO_voidGetPinValue (u8 PortId,u8 PinId, u8 * ptr)
{
    167c:	fa 01       	movw	r30, r20
	switch(PortId)
    167e:	81 30       	cpi	r24, 0x01	; 1
    1680:	49 f0       	breq	.+18     	; 0x1694 <DIO_voidGetPinValue+0x18>
    1682:	81 30       	cpi	r24, 0x01	; 1
    1684:	28 f0       	brcs	.+10     	; 0x1690 <DIO_voidGetPinValue+0x14>
    1686:	82 30       	cpi	r24, 0x02	; 2
    1688:	39 f0       	breq	.+14     	; 0x1698 <DIO_voidGetPinValue+0x1c>
    168a:	83 30       	cpi	r24, 0x03	; 3
    168c:	51 f5       	brne	.+84     	; 0x16e2 <DIO_voidGetPinValue+0x66>
    168e:	17 c0       	rjmp	.+46     	; 0x16be <DIO_voidGetPinValue+0x42>
	{
	case 0: *ptr = GET_BIT(DDRA,PinId); break;
    1690:	2a b3       	in	r18, 0x1a	; 26
    1692:	03 c0       	rjmp	.+6      	; 0x169a <DIO_voidGetPinValue+0x1e>
	case 1: *ptr = GET_BIT(DDRB,PinId); break;
    1694:	27 b3       	in	r18, 0x17	; 23
    1696:	01 c0       	rjmp	.+2      	; 0x169a <DIO_voidGetPinValue+0x1e>
	case 2: *ptr = GET_BIT(DDRC,PinId); break;
    1698:	24 b3       	in	r18, 0x14	; 20
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	06 2e       	mov	r0, r22
    16a0:	02 c0       	rjmp	.+4      	; 0x16a6 <DIO_voidGetPinValue+0x2a>
    16a2:	88 0f       	add	r24, r24
    16a4:	99 1f       	adc	r25, r25
    16a6:	0a 94       	dec	r0
    16a8:	e2 f7       	brpl	.-8      	; 0x16a2 <DIO_voidGetPinValue+0x26>
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	82 23       	and	r24, r18
    16ae:	93 23       	and	r25, r19
    16b0:	02 c0       	rjmp	.+4      	; 0x16b6 <DIO_voidGetPinValue+0x3a>
    16b2:	95 95       	asr	r25
    16b4:	87 95       	ror	r24
    16b6:	6a 95       	dec	r22
    16b8:	e2 f7       	brpl	.-8      	; 0x16b2 <DIO_voidGetPinValue+0x36>
    16ba:	80 83       	st	Z, r24
    16bc:	08 95       	ret
	case 3: *ptr = GET_BIT(DDRD,PinId); break;
    16be:	21 b3       	in	r18, 0x11	; 17
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	06 2e       	mov	r0, r22
    16c6:	02 c0       	rjmp	.+4      	; 0x16cc <DIO_voidGetPinValue+0x50>
    16c8:	88 0f       	add	r24, r24
    16ca:	99 1f       	adc	r25, r25
    16cc:	0a 94       	dec	r0
    16ce:	e2 f7       	brpl	.-8      	; 0x16c8 <DIO_voidGetPinValue+0x4c>
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	82 23       	and	r24, r18
    16d4:	93 23       	and	r25, r19
    16d6:	02 c0       	rjmp	.+4      	; 0x16dc <DIO_voidGetPinValue+0x60>
    16d8:	95 95       	asr	r25
    16da:	87 95       	ror	r24
    16dc:	6a 95       	dec	r22
    16de:	e2 f7       	brpl	.-8      	; 0x16d8 <DIO_voidGetPinValue+0x5c>
    16e0:	80 83       	st	Z, r24
    16e2:	08 95       	ret

000016e4 <ADC_voidInterruptEnable>:
	SET_BIT(ADCSRA,ADIF);
}

void ADC_voidInterruptEnable(void)
{
	SET_BIT(ADCSRA,ADIE);
    16e4:	33 9a       	sbi	0x06, 3	; 6
}
    16e6:	08 95       	ret

000016e8 <ADC_voidInterruptDisable>:

void ADC_voidInterruptDisable(void)
{
	CLR_BIT(ADCSRA,ADIE);
    16e8:	33 98       	cbi	0x06, 3	; 6
}
    16ea:	08 95       	ret

000016ec <ADC_voidStartConversion>:

void ADC_voidStartConversion(u8 Channel)
{
	CLR_BIT(ADMUX,MUX4);
    16ec:	3c 98       	cbi	0x07, 4	; 7
	CLR_BIT(ADMUX,MUX3);
    16ee:	3b 98       	cbi	0x07, 3	; 7

	switch(Channel)
    16f0:	83 30       	cpi	r24, 0x03	; 3
    16f2:	c1 f0       	breq	.+48     	; 0x1724 <ADC_voidStartConversion+0x38>
    16f4:	84 30       	cpi	r24, 0x04	; 4
    16f6:	28 f4       	brcc	.+10     	; 0x1702 <ADC_voidStartConversion+0x16>
    16f8:	81 30       	cpi	r24, 0x01	; 1
    16fa:	71 f0       	breq	.+28     	; 0x1718 <ADC_voidStartConversion+0x2c>
    16fc:	82 30       	cpi	r24, 0x02	; 2
    16fe:	70 f4       	brcc	.+28     	; 0x171c <ADC_voidStartConversion+0x30>
    1700:	09 c0       	rjmp	.+18     	; 0x1714 <ADC_voidStartConversion+0x28>
    1702:	85 30       	cpi	r24, 0x05	; 5
    1704:	a1 f0       	breq	.+40     	; 0x172e <ADC_voidStartConversion+0x42>
    1706:	85 30       	cpi	r24, 0x05	; 5
    1708:	78 f0       	brcs	.+30     	; 0x1728 <ADC_voidStartConversion+0x3c>
    170a:	86 30       	cpi	r24, 0x06	; 6
    170c:	99 f0       	breq	.+38     	; 0x1734 <ADC_voidStartConversion+0x48>
    170e:	87 30       	cpi	r24, 0x07	; 7
    1710:	b1 f4       	brne	.+44     	; 0x173e <ADC_voidStartConversion+0x52>
    1712:	12 c0       	rjmp	.+36     	; 0x1738 <ADC_voidStartConversion+0x4c>
	{
		case 0 : CLR_BIT(ADMUX,MUX2);CLR_BIT(ADMUX,MUX1);CLR_BIT(ADMUX,MUX0);break;
    1714:	3a 98       	cbi	0x07, 2	; 7
    1716:	09 c0       	rjmp	.+18     	; 0x172a <ADC_voidStartConversion+0x3e>
		case 1 : CLR_BIT(ADMUX,MUX2);CLR_BIT(ADMUX,MUX1);SET_BIT(ADMUX,MUX0);break;
    1718:	3a 98       	cbi	0x07, 2	; 7
    171a:	0a c0       	rjmp	.+20     	; 0x1730 <ADC_voidStartConversion+0x44>
		case 2 : CLR_BIT(ADMUX,MUX2);SET_BIT(ADMUX,MUX1);CLR_BIT(ADMUX,MUX0);break;
    171c:	3a 98       	cbi	0x07, 2	; 7
    171e:	39 9a       	sbi	0x07, 1	; 7
    1720:	38 98       	cbi	0x07, 0	; 7
    1722:	0d c0       	rjmp	.+26     	; 0x173e <ADC_voidStartConversion+0x52>
		case 3 : CLR_BIT(ADMUX,MUX2);SET_BIT(ADMUX,MUX1);SET_BIT(ADMUX,MUX0);break;
    1724:	3a 98       	cbi	0x07, 2	; 7
    1726:	09 c0       	rjmp	.+18     	; 0x173a <ADC_voidStartConversion+0x4e>
		case 4 : SET_BIT(ADMUX,MUX2);CLR_BIT(ADMUX,MUX1);CLR_BIT(ADMUX,MUX0);break;
    1728:	3a 9a       	sbi	0x07, 2	; 7
    172a:	39 98       	cbi	0x07, 1	; 7
    172c:	f9 cf       	rjmp	.-14     	; 0x1720 <ADC_voidStartConversion+0x34>
		case 5 : SET_BIT(ADMUX,MUX2);CLR_BIT(ADMUX,MUX1);SET_BIT(ADMUX,MUX0);break;
    172e:	3a 9a       	sbi	0x07, 2	; 7
    1730:	39 98       	cbi	0x07, 1	; 7
    1732:	04 c0       	rjmp	.+8      	; 0x173c <ADC_voidStartConversion+0x50>
		case 6 : SET_BIT(ADMUX,MUX2);SET_BIT(ADMUX,MUX1);CLR_BIT(ADMUX,MUX0);break;
    1734:	3a 9a       	sbi	0x07, 2	; 7
    1736:	f3 cf       	rjmp	.-26     	; 0x171e <ADC_voidStartConversion+0x32>
		case 7 : SET_BIT(ADMUX,MUX2);SET_BIT(ADMUX,MUX1);SET_BIT(ADMUX,MUX0);break;
    1738:	3a 9a       	sbi	0x07, 2	; 7
    173a:	39 9a       	sbi	0x07, 1	; 7
    173c:	38 9a       	sbi	0x07, 0	; 7
	}

	SET_BIT(ADCSRA,ADSC);
    173e:	36 9a       	sbi	0x06, 6	; 6
}
    1740:	08 95       	ret

00001742 <__vector_16>:
	LCD_KIT_voidDisplayBigNumber((u16)(ADCL|(ADCH<<8)));
}

void (*ADC_ISR)(void)=NULL;
void __vector_16(void)
{
    1742:	1f 92       	push	r1
    1744:	0f 92       	push	r0
    1746:	0f b6       	in	r0, 0x3f	; 63
    1748:	0f 92       	push	r0
    174a:	11 24       	eor	r1, r1
    174c:	2f 93       	push	r18
    174e:	3f 93       	push	r19
    1750:	4f 93       	push	r20
    1752:	5f 93       	push	r21
    1754:	6f 93       	push	r22
    1756:	7f 93       	push	r23
    1758:	8f 93       	push	r24
    175a:	9f 93       	push	r25
    175c:	af 93       	push	r26
    175e:	bf 93       	push	r27
    1760:	ef 93       	push	r30
    1762:	ff 93       	push	r31
	ADC_ISR();
    1764:	e0 91 8c 01 	lds	r30, 0x018C
    1768:	f0 91 8d 01 	lds	r31, 0x018D
    176c:	09 95       	icall
}
    176e:	ff 91       	pop	r31
    1770:	ef 91       	pop	r30
    1772:	bf 91       	pop	r27
    1774:	af 91       	pop	r26
    1776:	9f 91       	pop	r25
    1778:	8f 91       	pop	r24
    177a:	7f 91       	pop	r23
    177c:	6f 91       	pop	r22
    177e:	5f 91       	pop	r21
    1780:	4f 91       	pop	r20
    1782:	3f 91       	pop	r19
    1784:	2f 91       	pop	r18
    1786:	0f 90       	pop	r0
    1788:	0f be       	out	0x3f, r0	; 63
    178a:	0f 90       	pop	r0
    178c:	1f 90       	pop	r1
    178e:	18 95       	reti

00001790 <ADC_CallBack>:
void ADC_CallBack(void (*PF_ADC)(void))
{
	ADC_ISR=PF_ADC;
    1790:	90 93 8d 01 	sts	0x018D, r25
    1794:	80 93 8c 01 	sts	0x018C, r24
}
    1798:	08 95       	ret

0000179a <ADC_voidReadConversionValue_Polling>:
	SET_BIT(ADCSRA,ADSC);
}

void ADC_voidReadConversionValue_Polling(void)
{
	while(!GET_BIT(ADCSRA,ADIF));
    179a:	34 9b       	sbis	0x06, 4	; 6
    179c:	fe cf       	rjmp	.-4      	; 0x179a <ADC_voidReadConversionValue_Polling>
	LCD_KIT_voidRunCommand(0x01);
    179e:	81 e0       	ldi	r24, 0x01	; 1
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <LCD_KIT_voidRunCommand>
	LCD_KIT_voidDisplayBigNumber((u16)(ADCL|(ADCH<<8)));
    17a6:	24 b1       	in	r18, 0x04	; 4
    17a8:	45 b1       	in	r20, 0x05	; 5
    17aa:	94 2f       	mov	r25, r20
    17ac:	80 e0       	ldi	r24, 0x00	; 0
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	82 2b       	or	r24, r18
    17b2:	93 2b       	or	r25, r19
    17b4:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <LCD_KIT_voidDisplayBigNumber>
}
    17b8:	08 95       	ret

000017ba <ADC_voidInitialization>:
#include "ADC_priv.h"

void ADC_voidInitialization(void)
{
	// AVCC as a REF
	CLR_BIT(ADMUX,REFS1);
    17ba:	3f 98       	cbi	0x07, 7	; 7
	SET_BIT(ADMUX,REFS0);
    17bc:	3e 9a       	sbi	0x07, 6	; 7

	// Right Adjusting
	DIO_voidSetPinValue(ADMUX,ADLAR,Low);
    17be:	87 b1       	in	r24, 0x07	; 7
    17c0:	65 e0       	ldi	r22, 0x05	; 5
    17c2:	40 e0       	ldi	r20, 0x00	; 0
    17c4:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_voidSetPinValue>
//	CLR_BIT(ADMUX,MUX2);
//	CLR_BIT(ADMUX,MUX1);
//	CLR_BIT(ADMUX,MUX0);

	// Enabling ADC
	SET_BIT(ADCSRA,ADEN);
    17c8:	37 9a       	sbi	0x06, 7	; 6

	// Auto Trigger Disable
	SET_BIT(ADCSRA,ADATE);
    17ca:	35 9a       	sbi	0x06, 5	; 6

	// ADC Prescaler is 64
	SET_BIT(ADCSRA,ADPS2);
    17cc:	32 9a       	sbi	0x06, 2	; 6
	SET_BIT(ADCSRA,ADPS1);
    17ce:	31 9a       	sbi	0x06, 1	; 6
	CLR_BIT(ADCSRA,ADPS0);
    17d0:	30 98       	cbi	0x06, 0	; 6

	CLR_BIT(ADCSRA,ADIE);
    17d2:	33 98       	cbi	0x06, 3	; 6
	SET_BIT(ADCSRA,ADIF);
    17d4:	34 9a       	sbi	0x06, 4	; 6
}
    17d6:	08 95       	ret

000017d8 <SEG_KIT_voidDisplayNumber>:
	DIO_voidSetPinValue(PortB,Pin2,Low);
	DIO_voidSetPinValue(PortB,Pin4,Low);
}

void SEG_KIT_voidDisplayNumber(u8 Number,u8 SEGNumber)
{
    17d8:	1f 93       	push	r17
    17da:	16 2f       	mov	r17, r22
	switch(Number)
    17dc:	84 30       	cpi	r24, 0x04	; 4
    17de:	29 f1       	breq	.+74     	; 0x182a <SEG_KIT_voidDisplayNumber+0x52>
    17e0:	85 30       	cpi	r24, 0x05	; 5
    17e2:	48 f4       	brcc	.+18     	; 0x17f6 <SEG_KIT_voidDisplayNumber+0x1e>
    17e4:	81 30       	cpi	r24, 0x01	; 1
    17e6:	c1 f0       	breq	.+48     	; 0x1818 <SEG_KIT_voidDisplayNumber+0x40>
    17e8:	81 30       	cpi	r24, 0x01	; 1
    17ea:	98 f0       	brcs	.+38     	; 0x1812 <SEG_KIT_voidDisplayNumber+0x3a>
    17ec:	82 30       	cpi	r24, 0x02	; 2
    17ee:	b9 f0       	breq	.+46     	; 0x181e <SEG_KIT_voidDisplayNumber+0x46>
    17f0:	83 30       	cpi	r24, 0x03	; 3
    17f2:	79 f5       	brne	.+94     	; 0x1852 <SEG_KIT_voidDisplayNumber+0x7a>
    17f4:	17 c0       	rjmp	.+46     	; 0x1824 <SEG_KIT_voidDisplayNumber+0x4c>
    17f6:	87 30       	cpi	r24, 0x07	; 7
    17f8:	09 f1       	breq	.+66     	; 0x183c <SEG_KIT_voidDisplayNumber+0x64>
    17fa:	88 30       	cpi	r24, 0x08	; 8
    17fc:	28 f4       	brcc	.+10     	; 0x1808 <SEG_KIT_voidDisplayNumber+0x30>
    17fe:	85 30       	cpi	r24, 0x05	; 5
    1800:	b9 f0       	breq	.+46     	; 0x1830 <SEG_KIT_voidDisplayNumber+0x58>
    1802:	86 30       	cpi	r24, 0x06	; 6
    1804:	31 f5       	brne	.+76     	; 0x1852 <SEG_KIT_voidDisplayNumber+0x7a>
    1806:	17 c0       	rjmp	.+46     	; 0x1836 <SEG_KIT_voidDisplayNumber+0x5e>
    1808:	88 30       	cpi	r24, 0x08	; 8
    180a:	d9 f0       	breq	.+54     	; 0x1842 <SEG_KIT_voidDisplayNumber+0x6a>
    180c:	89 30       	cpi	r24, 0x09	; 9
    180e:	09 f5       	brne	.+66     	; 0x1852 <SEG_KIT_voidDisplayNumber+0x7a>
    1810:	1b c0       	rjmp	.+54     	; 0x1848 <SEG_KIT_voidDisplayNumber+0x70>
	{
	case 0: DIO_voidSetPortValueMask(PortB,0,0xE8); break;
    1812:	81 e0       	ldi	r24, 0x01	; 1
    1814:	60 e0       	ldi	r22, 0x00	; 0
    1816:	1a c0       	rjmp	.+52     	; 0x184c <SEG_KIT_voidDisplayNumber+0x74>
	case 1: DIO_voidSetPortValueMask(PortB,1,0xE8); break;
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	61 e0       	ldi	r22, 0x01	; 1
    181c:	17 c0       	rjmp	.+46     	; 0x184c <SEG_KIT_voidDisplayNumber+0x74>
	case 2: DIO_voidSetPortValueMask(PortB,2,0xE8); break;
    181e:	81 e0       	ldi	r24, 0x01	; 1
    1820:	62 e0       	ldi	r22, 0x02	; 2
    1822:	14 c0       	rjmp	.+40     	; 0x184c <SEG_KIT_voidDisplayNumber+0x74>
	case 3: DIO_voidSetPortValueMask(PortB,3,0xE8); break;
    1824:	81 e0       	ldi	r24, 0x01	; 1
    1826:	63 e0       	ldi	r22, 0x03	; 3
    1828:	11 c0       	rjmp	.+34     	; 0x184c <SEG_KIT_voidDisplayNumber+0x74>
	case 4: DIO_voidSetPortValueMask(PortB,4,0xE8); break;
    182a:	81 e0       	ldi	r24, 0x01	; 1
    182c:	64 e0       	ldi	r22, 0x04	; 4
    182e:	0e c0       	rjmp	.+28     	; 0x184c <SEG_KIT_voidDisplayNumber+0x74>
	case 5: DIO_voidSetPortValueMask(PortB,5,0xE8); break;
    1830:	81 e0       	ldi	r24, 0x01	; 1
    1832:	65 e0       	ldi	r22, 0x05	; 5
    1834:	0b c0       	rjmp	.+22     	; 0x184c <SEG_KIT_voidDisplayNumber+0x74>
	case 6: DIO_voidSetPortValueMask(PortB,6,0xE8); break;
    1836:	81 e0       	ldi	r24, 0x01	; 1
    1838:	66 e0       	ldi	r22, 0x06	; 6
    183a:	08 c0       	rjmp	.+16     	; 0x184c <SEG_KIT_voidDisplayNumber+0x74>
	case 7: DIO_voidSetPortValueMask(PortB,7,0xE8); break;
    183c:	81 e0       	ldi	r24, 0x01	; 1
    183e:	67 e0       	ldi	r22, 0x07	; 7
    1840:	05 c0       	rjmp	.+10     	; 0x184c <SEG_KIT_voidDisplayNumber+0x74>
	case 8: DIO_voidSetPortValueMask(PortB,8+8,0xE8); break;
    1842:	81 e0       	ldi	r24, 0x01	; 1
    1844:	60 e1       	ldi	r22, 0x10	; 16
    1846:	02 c0       	rjmp	.+4      	; 0x184c <SEG_KIT_voidDisplayNumber+0x74>
	case 9: DIO_voidSetPortValueMask(PortB,9+8,0xE8); break;
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	61 e1       	ldi	r22, 0x11	; 17
    184c:	48 ee       	ldi	r20, 0xE8	; 232
    184e:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <DIO_voidSetPortValueMask>
	}
	switch(SEGNumber)
    1852:	12 30       	cpi	r17, 0x02	; 2
    1854:	69 f0       	breq	.+26     	; 0x1870 <SEG_KIT_voidDisplayNumber+0x98>
    1856:	13 30       	cpi	r17, 0x03	; 3
    1858:	18 f4       	brcc	.+6      	; 0x1860 <SEG_KIT_voidDisplayNumber+0x88>
    185a:	11 30       	cpi	r17, 0x01	; 1
    185c:	19 f5       	brne	.+70     	; 0x18a4 <SEG_KIT_voidDisplayNumber+0xcc>
    185e:	05 c0       	rjmp	.+10     	; 0x186a <SEG_KIT_voidDisplayNumber+0x92>
    1860:	13 30       	cpi	r17, 0x03	; 3
    1862:	71 f0       	breq	.+28     	; 0x1880 <SEG_KIT_voidDisplayNumber+0xa8>
    1864:	14 30       	cpi	r17, 0x04	; 4
    1866:	f1 f4       	brne	.+60     	; 0x18a4 <SEG_KIT_voidDisplayNumber+0xcc>
    1868:	13 c0       	rjmp	.+38     	; 0x1890 <SEG_KIT_voidDisplayNumber+0xb8>
	{
	case 1: DIO_voidSetPortValueMask(PortA,0x04,0xF3);DIO_voidSetPortValueMask(PortB,0x60,0x9F);break;
    186a:	80 e0       	ldi	r24, 0x00	; 0
    186c:	64 e0       	ldi	r22, 0x04	; 4
    186e:	02 c0       	rjmp	.+4      	; 0x1874 <SEG_KIT_voidDisplayNumber+0x9c>
	case 2: DIO_voidSetPortValueMask(PortA,0x08,0xF3);DIO_voidSetPortValueMask(PortB,0x60,0x9F);break;
    1870:	80 e0       	ldi	r24, 0x00	; 0
    1872:	68 e0       	ldi	r22, 0x08	; 8
    1874:	43 ef       	ldi	r20, 0xF3	; 243
    1876:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <DIO_voidSetPortValueMask>
    187a:	81 e0       	ldi	r24, 0x01	; 1
    187c:	60 e6       	ldi	r22, 0x60	; 96
    187e:	0f c0       	rjmp	.+30     	; 0x189e <SEG_KIT_voidDisplayNumber+0xc6>
	case 3: DIO_voidSetPortValueMask(PortA,0x0C,0xF3);DIO_voidSetPortValueMask(PortB,0x40,0x9F);break;
    1880:	80 e0       	ldi	r24, 0x00	; 0
    1882:	6c e0       	ldi	r22, 0x0C	; 12
    1884:	43 ef       	ldi	r20, 0xF3	; 243
    1886:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <DIO_voidSetPortValueMask>
    188a:	81 e0       	ldi	r24, 0x01	; 1
    188c:	60 e4       	ldi	r22, 0x40	; 64
    188e:	07 c0       	rjmp	.+14     	; 0x189e <SEG_KIT_voidDisplayNumber+0xc6>
	case 4: DIO_voidSetPortValueMask(PortA,0x0C,0xF3);DIO_voidSetPortValueMask(PortB,0x20,0x9F);break;
    1890:	80 e0       	ldi	r24, 0x00	; 0
    1892:	6c e0       	ldi	r22, 0x0C	; 12
    1894:	43 ef       	ldi	r20, 0xF3	; 243
    1896:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <DIO_voidSetPortValueMask>
    189a:	81 e0       	ldi	r24, 0x01	; 1
    189c:	60 e2       	ldi	r22, 0x20	; 32
    189e:	4f e9       	ldi	r20, 0x9F	; 159
    18a0:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <DIO_voidSetPortValueMask>
	}
}
    18a4:	1f 91       	pop	r17
    18a6:	08 95       	ret

000018a8 <SEG_KIT_voidDisplayBigNumber>:

void SEG_KIT_voidDisplayBigNumber(u16 Number)
{
    18a8:	0f 93       	push	r16
    18aa:	1f 93       	push	r17
    18ac:	cf 93       	push	r28
    18ae:	df 93       	push	r29
    18b0:	ec 01       	movw	r28, r24
	if(Number<=9)
    18b2:	8a 30       	cpi	r24, 0x0A	; 10
    18b4:	91 05       	cpc	r25, r1
    18b6:	20 f4       	brcc	.+8      	; 0x18c0 <SEG_KIT_voidDisplayBigNumber+0x18>
	{
		SEG_KIT_voidDisplayNumber(Number,SEG1);
    18b8:	61 e0       	ldi	r22, 0x01	; 1
    18ba:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <SEG_KIT_voidDisplayNumber>
    18be:	79 c0       	rjmp	.+242    	; 0x19b2 <SEG_KIT_voidDisplayBigNumber+0x10a>
	}
	else if(Number<=99)
    18c0:	84 36       	cpi	r24, 0x64	; 100
    18c2:	91 05       	cpc	r25, r1
    18c4:	a0 f4       	brcc	.+40     	; 0x18ee <SEG_KIT_voidDisplayBigNumber+0x46>
	{
		SEG_KIT_voidDisplayNumber(Number%10,SEG1);
    18c6:	6a e0       	ldi	r22, 0x0A	; 10
    18c8:	70 e0       	ldi	r23, 0x00	; 0
    18ca:	0e 94 27 11 	call	0x224e	; 0x224e <__udivmodhi4>
    18ce:	61 e0       	ldi	r22, 0x01	; 1
    18d0:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <SEG_KIT_voidDisplayNumber>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18d4:	00 e4       	ldi	r16, 0x40	; 64
    18d6:	1f e1       	ldi	r17, 0x1F	; 31
    18d8:	c8 01       	movw	r24, r16
    18da:	01 97       	sbiw	r24, 0x01	; 1
    18dc:	f1 f7       	brne	.-4      	; 0x18da <SEG_KIT_voidDisplayBigNumber+0x32>
		_delay_ms(2);
		SEG_KIT_voidDisplayNumber(Number/10,SEG2);
    18de:	ce 01       	movw	r24, r28
    18e0:	6a e0       	ldi	r22, 0x0A	; 10
    18e2:	70 e0       	ldi	r23, 0x00	; 0
    18e4:	0e 94 27 11 	call	0x224e	; 0x224e <__udivmodhi4>
    18e8:	86 2f       	mov	r24, r22
    18ea:	62 e0       	ldi	r22, 0x02	; 2
    18ec:	5d c0       	rjmp	.+186    	; 0x19a8 <SEG_KIT_voidDisplayBigNumber+0x100>
		_delay_ms(2);
	}
	else if(Number<=999)
    18ee:	83 e0       	ldi	r24, 0x03	; 3
    18f0:	c8 3e       	cpi	r28, 0xE8	; 232
    18f2:	d8 07       	cpc	r29, r24
    18f4:	28 f5       	brcc	.+74     	; 0x1940 <SEG_KIT_voidDisplayBigNumber+0x98>
		{
			SEG_KIT_voidDisplayNumber(Number%10,SEG1);
    18f6:	ce 01       	movw	r24, r28
    18f8:	6a e0       	ldi	r22, 0x0A	; 10
    18fa:	70 e0       	ldi	r23, 0x00	; 0
    18fc:	0e 94 27 11 	call	0x224e	; 0x224e <__udivmodhi4>
    1900:	61 e0       	ldi	r22, 0x01	; 1
    1902:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <SEG_KIT_voidDisplayNumber>
    1906:	00 e4       	ldi	r16, 0x40	; 64
    1908:	1f e1       	ldi	r17, 0x1F	; 31
    190a:	c8 01       	movw	r24, r16
    190c:	01 97       	sbiw	r24, 0x01	; 1
    190e:	f1 f7       	brne	.-4      	; 0x190c <SEG_KIT_voidDisplayBigNumber+0x64>
			_delay_ms(2);
			SEG_KIT_voidDisplayNumber((Number/10)%10,SEG2);
    1910:	ce 01       	movw	r24, r28
    1912:	6a e0       	ldi	r22, 0x0A	; 10
    1914:	70 e0       	ldi	r23, 0x00	; 0
    1916:	0e 94 27 11 	call	0x224e	; 0x224e <__udivmodhi4>
    191a:	cb 01       	movw	r24, r22
    191c:	6a e0       	ldi	r22, 0x0A	; 10
    191e:	70 e0       	ldi	r23, 0x00	; 0
    1920:	0e 94 27 11 	call	0x224e	; 0x224e <__udivmodhi4>
    1924:	62 e0       	ldi	r22, 0x02	; 2
    1926:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <SEG_KIT_voidDisplayNumber>
    192a:	c8 01       	movw	r24, r16
    192c:	01 97       	sbiw	r24, 0x01	; 1
    192e:	f1 f7       	brne	.-4      	; 0x192c <SEG_KIT_voidDisplayBigNumber+0x84>
			_delay_ms(2);
			SEG_KIT_voidDisplayNumber(Number/100,SEG3);
    1930:	ce 01       	movw	r24, r28
    1932:	64 e6       	ldi	r22, 0x64	; 100
    1934:	70 e0       	ldi	r23, 0x00	; 0
    1936:	0e 94 27 11 	call	0x224e	; 0x224e <__udivmodhi4>
    193a:	86 2f       	mov	r24, r22
    193c:	63 e0       	ldi	r22, 0x03	; 3
    193e:	34 c0       	rjmp	.+104    	; 0x19a8 <SEG_KIT_voidDisplayBigNumber+0x100>
			_delay_ms(2);
		}
	else
		{
			SEG_KIT_voidDisplayNumber(Number%10,SEG1);
    1940:	ce 01       	movw	r24, r28
    1942:	6a e0       	ldi	r22, 0x0A	; 10
    1944:	70 e0       	ldi	r23, 0x00	; 0
    1946:	0e 94 27 11 	call	0x224e	; 0x224e <__udivmodhi4>
    194a:	61 e0       	ldi	r22, 0x01	; 1
    194c:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <SEG_KIT_voidDisplayNumber>
    1950:	00 e4       	ldi	r16, 0x40	; 64
    1952:	1f e1       	ldi	r17, 0x1F	; 31
    1954:	c8 01       	movw	r24, r16
    1956:	01 97       	sbiw	r24, 0x01	; 1
    1958:	f1 f7       	brne	.-4      	; 0x1956 <SEG_KIT_voidDisplayBigNumber+0xae>
			_delay_ms(2);
			SEG_KIT_voidDisplayNumber((Number/10)%10,SEG2);
    195a:	ce 01       	movw	r24, r28
    195c:	6a e0       	ldi	r22, 0x0A	; 10
    195e:	70 e0       	ldi	r23, 0x00	; 0
    1960:	0e 94 27 11 	call	0x224e	; 0x224e <__udivmodhi4>
    1964:	cb 01       	movw	r24, r22
    1966:	6a e0       	ldi	r22, 0x0A	; 10
    1968:	70 e0       	ldi	r23, 0x00	; 0
    196a:	0e 94 27 11 	call	0x224e	; 0x224e <__udivmodhi4>
    196e:	62 e0       	ldi	r22, 0x02	; 2
    1970:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <SEG_KIT_voidDisplayNumber>
    1974:	c8 01       	movw	r24, r16
    1976:	01 97       	sbiw	r24, 0x01	; 1
    1978:	f1 f7       	brne	.-4      	; 0x1976 <SEG_KIT_voidDisplayBigNumber+0xce>
			_delay_ms(2);
			SEG_KIT_voidDisplayNumber((Number/100)%10,SEG3);
    197a:	ce 01       	movw	r24, r28
    197c:	64 e6       	ldi	r22, 0x64	; 100
    197e:	70 e0       	ldi	r23, 0x00	; 0
    1980:	0e 94 27 11 	call	0x224e	; 0x224e <__udivmodhi4>
    1984:	cb 01       	movw	r24, r22
    1986:	6a e0       	ldi	r22, 0x0A	; 10
    1988:	70 e0       	ldi	r23, 0x00	; 0
    198a:	0e 94 27 11 	call	0x224e	; 0x224e <__udivmodhi4>
    198e:	63 e0       	ldi	r22, 0x03	; 3
    1990:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <SEG_KIT_voidDisplayNumber>
    1994:	c8 01       	movw	r24, r16
    1996:	01 97       	sbiw	r24, 0x01	; 1
    1998:	f1 f7       	brne	.-4      	; 0x1996 <SEG_KIT_voidDisplayBigNumber+0xee>
			_delay_ms(2);
			SEG_KIT_voidDisplayNumber(Number/1000,SEG4);
    199a:	ce 01       	movw	r24, r28
    199c:	68 ee       	ldi	r22, 0xE8	; 232
    199e:	73 e0       	ldi	r23, 0x03	; 3
    19a0:	0e 94 27 11 	call	0x224e	; 0x224e <__udivmodhi4>
    19a4:	86 2f       	mov	r24, r22
    19a6:	64 e0       	ldi	r22, 0x04	; 4
    19a8:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <SEG_KIT_voidDisplayNumber>
    19ac:	c8 01       	movw	r24, r16
    19ae:	01 97       	sbiw	r24, 0x01	; 1
    19b0:	f1 f7       	brne	.-4      	; 0x19ae <SEG_KIT_voidDisplayBigNumber+0x106>
			_delay_ms(2);
		}
}
    19b2:	df 91       	pop	r29
    19b4:	cf 91       	pop	r28
    19b6:	1f 91       	pop	r17
    19b8:	0f 91       	pop	r16
    19ba:	08 95       	ret

000019bc <SEG_KIT_voidInitialization>:

#include <util/delay.h>

void SEG_KIT_voidInitialization(void)
{
	DIO_voidSetPinDirection(PortA,Pin3,Output);
    19bc:	80 e0       	ldi	r24, 0x00	; 0
    19be:	63 e0       	ldi	r22, 0x03	; 3
    19c0:	41 e0       	ldi	r20, 0x01	; 1
    19c2:	0e 94 81 09 	call	0x1302	; 0x1302 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PortA,Pin2,Output);
    19c6:	80 e0       	ldi	r24, 0x00	; 0
    19c8:	62 e0       	ldi	r22, 0x02	; 2
    19ca:	41 e0       	ldi	r20, 0x01	; 1
    19cc:	0e 94 81 09 	call	0x1302	; 0x1302 <DIO_voidSetPinDirection>

	DIO_voidSetPinDirection(PortB,Pin5,Output);
    19d0:	81 e0       	ldi	r24, 0x01	; 1
    19d2:	65 e0       	ldi	r22, 0x05	; 5
    19d4:	41 e0       	ldi	r20, 0x01	; 1
    19d6:	0e 94 81 09 	call	0x1302	; 0x1302 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PortB,Pin6,Output);
    19da:	81 e0       	ldi	r24, 0x01	; 1
    19dc:	66 e0       	ldi	r22, 0x06	; 6
    19de:	41 e0       	ldi	r20, 0x01	; 1
    19e0:	0e 94 81 09 	call	0x1302	; 0x1302 <DIO_voidSetPinDirection>

	DIO_voidSetPinDirection(PortB,Pin0,Output);
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	60 e0       	ldi	r22, 0x00	; 0
    19e8:	41 e0       	ldi	r20, 0x01	; 1
    19ea:	0e 94 81 09 	call	0x1302	; 0x1302 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PortB,Pin1,Output);
    19ee:	81 e0       	ldi	r24, 0x01	; 1
    19f0:	61 e0       	ldi	r22, 0x01	; 1
    19f2:	41 e0       	ldi	r20, 0x01	; 1
    19f4:	0e 94 81 09 	call	0x1302	; 0x1302 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PortB,Pin2,Output);
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	62 e0       	ldi	r22, 0x02	; 2
    19fc:	41 e0       	ldi	r20, 0x01	; 1
    19fe:	0e 94 81 09 	call	0x1302	; 0x1302 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PortB,Pin4,Output);
    1a02:	81 e0       	ldi	r24, 0x01	; 1
    1a04:	64 e0       	ldi	r22, 0x04	; 4
    1a06:	41 e0       	ldi	r20, 0x01	; 1
    1a08:	0e 94 81 09 	call	0x1302	; 0x1302 <DIO_voidSetPinDirection>


	DIO_voidSetPinValue(PortA,Pin3,High);
    1a0c:	80 e0       	ldi	r24, 0x00	; 0
    1a0e:	63 e0       	ldi	r22, 0x03	; 3
    1a10:	41 e0       	ldi	r20, 0x01	; 1
    1a12:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PortA,Pin2,High);
    1a16:	80 e0       	ldi	r24, 0x00	; 0
    1a18:	62 e0       	ldi	r22, 0x02	; 2
    1a1a:	41 e0       	ldi	r20, 0x01	; 1
    1a1c:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_voidSetPinValue>

	DIO_voidSetPinValue(PortB,Pin5,High);
    1a20:	81 e0       	ldi	r24, 0x01	; 1
    1a22:	65 e0       	ldi	r22, 0x05	; 5
    1a24:	41 e0       	ldi	r20, 0x01	; 1
    1a26:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PortB,Pin6,High);
    1a2a:	81 e0       	ldi	r24, 0x01	; 1
    1a2c:	66 e0       	ldi	r22, 0x06	; 6
    1a2e:	41 e0       	ldi	r20, 0x01	; 1
    1a30:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_voidSetPinValue>

	DIO_voidSetPinValue(PortB,Pin0,Low);
    1a34:	81 e0       	ldi	r24, 0x01	; 1
    1a36:	60 e0       	ldi	r22, 0x00	; 0
    1a38:	40 e0       	ldi	r20, 0x00	; 0
    1a3a:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PortB,Pin1,Low);
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	61 e0       	ldi	r22, 0x01	; 1
    1a42:	40 e0       	ldi	r20, 0x00	; 0
    1a44:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PortB,Pin2,Low);
    1a48:	81 e0       	ldi	r24, 0x01	; 1
    1a4a:	62 e0       	ldi	r22, 0x02	; 2
    1a4c:	40 e0       	ldi	r20, 0x00	; 0
    1a4e:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PortB,Pin4,Low);
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	64 e0       	ldi	r22, 0x04	; 4
    1a56:	40 e0       	ldi	r20, 0x00	; 0
    1a58:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_voidSetPinValue>
}
    1a5c:	08 95       	ret

00001a5e <LCD_KIT_voidRunCommand>:

	return;
}

void LCD_KIT_voidRunCommand(u8 command)
{
    1a5e:	df 92       	push	r13
    1a60:	ef 92       	push	r14
    1a62:	ff 92       	push	r15
    1a64:	0f 93       	push	r16
    1a66:	1f 93       	push	r17
    1a68:	d8 2e       	mov	r13, r24
	DIO_voidSetPinValue(LCD_ADDRESS_PORT,LCD_ADDRESS_RS,Low);
    1a6a:	80 e0       	ldi	r24, 0x00	; 0
    1a6c:	63 e0       	ldi	r22, 0x03	; 3
    1a6e:	40 e0       	ldi	r20, 0x00	; 0
    1a70:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_voidSetPinValue>

	DIO_voidSetPinValue(LCD_DATA_PORT,LCD_DATA_PinD7,GET_BIT(command,Pin7));
    1a74:	4d 2d       	mov	r20, r13
    1a76:	44 1f       	adc	r20, r20
    1a78:	44 27       	eor	r20, r20
    1a7a:	44 1f       	adc	r20, r20
    1a7c:	81 e0       	ldi	r24, 0x01	; 1
    1a7e:	64 e0       	ldi	r22, 0x04	; 4
    1a80:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT,LCD_DATA_PinD6,GET_BIT(command,Pin6));
    1a84:	0d 2d       	mov	r16, r13
    1a86:	10 e0       	ldi	r17, 0x00	; 0
    1a88:	a8 01       	movw	r20, r16
    1a8a:	40 74       	andi	r20, 0x40	; 64
    1a8c:	50 70       	andi	r21, 0x00	; 0
    1a8e:	e6 e0       	ldi	r30, 0x06	; 6
    1a90:	55 95       	asr	r21
    1a92:	47 95       	ror	r20
    1a94:	ea 95       	dec	r30
    1a96:	e1 f7       	brne	.-8      	; 0x1a90 <LCD_KIT_voidRunCommand+0x32>
    1a98:	81 e0       	ldi	r24, 0x01	; 1
    1a9a:	62 e0       	ldi	r22, 0x02	; 2
    1a9c:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT,LCD_DATA_PinD5,GET_BIT(command,Pin5));
    1aa0:	a8 01       	movw	r20, r16
    1aa2:	40 72       	andi	r20, 0x20	; 32
    1aa4:	50 70       	andi	r21, 0x00	; 0
    1aa6:	75 e0       	ldi	r23, 0x05	; 5
    1aa8:	55 95       	asr	r21
    1aaa:	47 95       	ror	r20
    1aac:	7a 95       	dec	r23
    1aae:	e1 f7       	brne	.-8      	; 0x1aa8 <LCD_KIT_voidRunCommand+0x4a>
    1ab0:	81 e0       	ldi	r24, 0x01	; 1
    1ab2:	61 e0       	ldi	r22, 0x01	; 1
    1ab4:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT,LCD_DATA_PinD4,GET_BIT(command,Pin4));
    1ab8:	a8 01       	movw	r20, r16
    1aba:	40 71       	andi	r20, 0x10	; 16
    1abc:	50 70       	andi	r21, 0x00	; 0
    1abe:	64 e0       	ldi	r22, 0x04	; 4
    1ac0:	55 95       	asr	r21
    1ac2:	47 95       	ror	r20
    1ac4:	6a 95       	dec	r22
    1ac6:	e1 f7       	brne	.-8      	; 0x1ac0 <LCD_KIT_voidRunCommand+0x62>
    1ac8:	81 e0       	ldi	r24, 0x01	; 1
    1aca:	60 e0       	ldi	r22, 0x00	; 0
    1acc:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_voidSetPinValue>

	DIO_voidSetPinValue(LCD_ADDRESS_PORT,LCD_ADDRESS_E,High);
    1ad0:	80 e0       	ldi	r24, 0x00	; 0
    1ad2:	62 e0       	ldi	r22, 0x02	; 2
    1ad4:	41 e0       	ldi	r20, 0x01	; 1
    1ad6:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_voidSetPinValue>
    1ada:	30 e4       	ldi	r19, 0x40	; 64
    1adc:	e3 2e       	mov	r14, r19
    1ade:	3f e1       	ldi	r19, 0x1F	; 31
    1ae0:	f3 2e       	mov	r15, r19
    1ae2:	c7 01       	movw	r24, r14
    1ae4:	01 97       	sbiw	r24, 0x01	; 1
    1ae6:	f1 f7       	brne	.-4      	; 0x1ae4 <LCD_KIT_voidRunCommand+0x86>
	_delay_ms(2);
	DIO_voidSetPinValue(LCD_ADDRESS_PORT,LCD_ADDRESS_E,Low);
    1ae8:	80 e0       	ldi	r24, 0x00	; 0
    1aea:	62 e0       	ldi	r22, 0x02	; 2
    1aec:	40 e0       	ldi	r20, 0x00	; 0
    1aee:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_voidSetPinValue>
    1af2:	c7 01       	movw	r24, r14
    1af4:	01 97       	sbiw	r24, 0x01	; 1
    1af6:	f1 f7       	brne	.-4      	; 0x1af4 <LCD_KIT_voidRunCommand+0x96>
	_delay_ms(2);

	DIO_voidSetPinValue(LCD_DATA_PORT,LCD_DATA_PinD7,GET_BIT(command,Pin3));
    1af8:	a8 01       	movw	r20, r16
    1afa:	48 70       	andi	r20, 0x08	; 8
    1afc:	50 70       	andi	r21, 0x00	; 0
    1afe:	23 e0       	ldi	r18, 0x03	; 3
    1b00:	55 95       	asr	r21
    1b02:	47 95       	ror	r20
    1b04:	2a 95       	dec	r18
    1b06:	e1 f7       	brne	.-8      	; 0x1b00 <LCD_KIT_voidRunCommand+0xa2>
    1b08:	81 e0       	ldi	r24, 0x01	; 1
    1b0a:	64 e0       	ldi	r22, 0x04	; 4
    1b0c:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT,LCD_DATA_PinD6,GET_BIT(command,Pin2));
    1b10:	a8 01       	movw	r20, r16
    1b12:	44 70       	andi	r20, 0x04	; 4
    1b14:	50 70       	andi	r21, 0x00	; 0
    1b16:	55 95       	asr	r21
    1b18:	47 95       	ror	r20
    1b1a:	55 95       	asr	r21
    1b1c:	47 95       	ror	r20
    1b1e:	81 e0       	ldi	r24, 0x01	; 1
    1b20:	62 e0       	ldi	r22, 0x02	; 2
    1b22:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT,LCD_DATA_PinD5,GET_BIT(command,Pin1));
    1b26:	02 70       	andi	r16, 0x02	; 2
    1b28:	10 70       	andi	r17, 0x00	; 0
    1b2a:	15 95       	asr	r17
    1b2c:	07 95       	ror	r16
    1b2e:	81 e0       	ldi	r24, 0x01	; 1
    1b30:	61 e0       	ldi	r22, 0x01	; 1
    1b32:	40 2f       	mov	r20, r16
    1b34:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT,LCD_DATA_PinD4,GET_BIT(command,Pin0));
    1b38:	81 e0       	ldi	r24, 0x01	; 1
    1b3a:	d8 22       	and	r13, r24
    1b3c:	60 e0       	ldi	r22, 0x00	; 0
    1b3e:	4d 2d       	mov	r20, r13
    1b40:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_voidSetPinValue>
	//DIO_voidSetPinValue(PortB,Pin7,GET_BIT(command,Pin0));

	DIO_voidSetPinValue(LCD_ADDRESS_PORT,LCD_ADDRESS_E,High);
    1b44:	80 e0       	ldi	r24, 0x00	; 0
    1b46:	62 e0       	ldi	r22, 0x02	; 2
    1b48:	41 e0       	ldi	r20, 0x01	; 1
    1b4a:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_voidSetPinValue>
    1b4e:	c7 01       	movw	r24, r14
    1b50:	01 97       	sbiw	r24, 0x01	; 1
    1b52:	f1 f7       	brne	.-4      	; 0x1b50 <LCD_KIT_voidRunCommand+0xf2>
	_delay_ms(2);
	DIO_voidSetPinValue(LCD_ADDRESS_PORT,LCD_ADDRESS_E,Low);
    1b54:	80 e0       	ldi	r24, 0x00	; 0
    1b56:	62 e0       	ldi	r22, 0x02	; 2
    1b58:	40 e0       	ldi	r20, 0x00	; 0
    1b5a:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_voidSetPinValue>
    1b5e:	c7 01       	movw	r24, r14
    1b60:	01 97       	sbiw	r24, 0x01	; 1
    1b62:	f1 f7       	brne	.-4      	; 0x1b60 <LCD_KIT_voidRunCommand+0x102>
	_delay_ms(2);

	return;
}
    1b64:	1f 91       	pop	r17
    1b66:	0f 91       	pop	r16
    1b68:	ff 90       	pop	r15
    1b6a:	ef 90       	pop	r14
    1b6c:	df 90       	pop	r13
    1b6e:	08 95       	ret

00001b70 <LCD_KIT_voidSetCurser>:

void LCD_KIT_voidSetCurser(u8 Line , u8 Col)
{
	LCD_KIT_voidRunCommand(Line+Col);
    1b70:	86 0f       	add	r24, r22
    1b72:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <LCD_KIT_voidRunCommand>

	return;
}
    1b76:	08 95       	ret

00001b78 <LCD_KIT_voidDisplayCharacter>:

	return;
}

void LCD_KIT_voidDisplayCharacter(u8 character)
{
    1b78:	df 92       	push	r13
    1b7a:	ef 92       	push	r14
    1b7c:	ff 92       	push	r15
    1b7e:	0f 93       	push	r16
    1b80:	1f 93       	push	r17
    1b82:	d8 2e       	mov	r13, r24
	DIO_voidSetPinValue(LCD_ADDRESS_PORT,LCD_ADDRESS_RS,High);
    1b84:	80 e0       	ldi	r24, 0x00	; 0
    1b86:	63 e0       	ldi	r22, 0x03	; 3
    1b88:	41 e0       	ldi	r20, 0x01	; 1
    1b8a:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_voidSetPinValue>

	DIO_voidSetPinValue(LCD_DATA_PORT,LCD_DATA_PinD7,GET_BIT(character,Pin7));
    1b8e:	4d 2d       	mov	r20, r13
    1b90:	44 1f       	adc	r20, r20
    1b92:	44 27       	eor	r20, r20
    1b94:	44 1f       	adc	r20, r20
    1b96:	81 e0       	ldi	r24, 0x01	; 1
    1b98:	64 e0       	ldi	r22, 0x04	; 4
    1b9a:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT,LCD_DATA_PinD6,GET_BIT(character,Pin6));
    1b9e:	0d 2d       	mov	r16, r13
    1ba0:	10 e0       	ldi	r17, 0x00	; 0
    1ba2:	a8 01       	movw	r20, r16
    1ba4:	40 74       	andi	r20, 0x40	; 64
    1ba6:	50 70       	andi	r21, 0x00	; 0
    1ba8:	36 e0       	ldi	r19, 0x06	; 6
    1baa:	55 95       	asr	r21
    1bac:	47 95       	ror	r20
    1bae:	3a 95       	dec	r19
    1bb0:	e1 f7       	brne	.-8      	; 0x1baa <LCD_KIT_voidDisplayCharacter+0x32>
    1bb2:	81 e0       	ldi	r24, 0x01	; 1
    1bb4:	62 e0       	ldi	r22, 0x02	; 2
    1bb6:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT,LCD_DATA_PinD5,GET_BIT(character,Pin5));
    1bba:	a8 01       	movw	r20, r16
    1bbc:	40 72       	andi	r20, 0x20	; 32
    1bbe:	50 70       	andi	r21, 0x00	; 0
    1bc0:	25 e0       	ldi	r18, 0x05	; 5
    1bc2:	55 95       	asr	r21
    1bc4:	47 95       	ror	r20
    1bc6:	2a 95       	dec	r18
    1bc8:	e1 f7       	brne	.-8      	; 0x1bc2 <LCD_KIT_voidDisplayCharacter+0x4a>
    1bca:	81 e0       	ldi	r24, 0x01	; 1
    1bcc:	61 e0       	ldi	r22, 0x01	; 1
    1bce:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT,LCD_DATA_PinD4,GET_BIT(character,Pin4));
    1bd2:	a8 01       	movw	r20, r16
    1bd4:	40 71       	andi	r20, 0x10	; 16
    1bd6:	50 70       	andi	r21, 0x00	; 0
    1bd8:	94 e0       	ldi	r25, 0x04	; 4
    1bda:	55 95       	asr	r21
    1bdc:	47 95       	ror	r20
    1bde:	9a 95       	dec	r25
    1be0:	e1 f7       	brne	.-8      	; 0x1bda <LCD_KIT_voidDisplayCharacter+0x62>
    1be2:	81 e0       	ldi	r24, 0x01	; 1
    1be4:	60 e0       	ldi	r22, 0x00	; 0
    1be6:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_voidSetPinValue>

	DIO_voidSetPinValue(LCD_ADDRESS_PORT,LCD_ADDRESS_E,High);
    1bea:	80 e0       	ldi	r24, 0x00	; 0
    1bec:	62 e0       	ldi	r22, 0x02	; 2
    1bee:	41 e0       	ldi	r20, 0x01	; 1
    1bf0:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_voidSetPinValue>
    1bf4:	80 e4       	ldi	r24, 0x40	; 64
    1bf6:	e8 2e       	mov	r14, r24
    1bf8:	8f e1       	ldi	r24, 0x1F	; 31
    1bfa:	f8 2e       	mov	r15, r24
    1bfc:	c7 01       	movw	r24, r14
    1bfe:	01 97       	sbiw	r24, 0x01	; 1
    1c00:	f1 f7       	brne	.-4      	; 0x1bfe <LCD_KIT_voidDisplayCharacter+0x86>
	_delay_ms(2);
	DIO_voidSetPinValue(LCD_ADDRESS_PORT,LCD_ADDRESS_E,Low);
    1c02:	80 e0       	ldi	r24, 0x00	; 0
    1c04:	62 e0       	ldi	r22, 0x02	; 2
    1c06:	40 e0       	ldi	r20, 0x00	; 0
    1c08:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_voidSetPinValue>
    1c0c:	c7 01       	movw	r24, r14
    1c0e:	01 97       	sbiw	r24, 0x01	; 1
    1c10:	f1 f7       	brne	.-4      	; 0x1c0e <LCD_KIT_voidDisplayCharacter+0x96>
	_delay_ms(2);

	DIO_voidSetPinValue(LCD_DATA_PORT,LCD_DATA_PinD7,GET_BIT(character,Pin3));
    1c12:	a8 01       	movw	r20, r16
    1c14:	48 70       	andi	r20, 0x08	; 8
    1c16:	50 70       	andi	r21, 0x00	; 0
    1c18:	b3 e0       	ldi	r27, 0x03	; 3
    1c1a:	55 95       	asr	r21
    1c1c:	47 95       	ror	r20
    1c1e:	ba 95       	dec	r27
    1c20:	e1 f7       	brne	.-8      	; 0x1c1a <LCD_KIT_voidDisplayCharacter+0xa2>
    1c22:	81 e0       	ldi	r24, 0x01	; 1
    1c24:	64 e0       	ldi	r22, 0x04	; 4
    1c26:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT,LCD_DATA_PinD6,GET_BIT(character,Pin2));
    1c2a:	a8 01       	movw	r20, r16
    1c2c:	44 70       	andi	r20, 0x04	; 4
    1c2e:	50 70       	andi	r21, 0x00	; 0
    1c30:	55 95       	asr	r21
    1c32:	47 95       	ror	r20
    1c34:	55 95       	asr	r21
    1c36:	47 95       	ror	r20
    1c38:	81 e0       	ldi	r24, 0x01	; 1
    1c3a:	62 e0       	ldi	r22, 0x02	; 2
    1c3c:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT,LCD_DATA_PinD5,GET_BIT(character,Pin1));
    1c40:	02 70       	andi	r16, 0x02	; 2
    1c42:	10 70       	andi	r17, 0x00	; 0
    1c44:	15 95       	asr	r17
    1c46:	07 95       	ror	r16
    1c48:	81 e0       	ldi	r24, 0x01	; 1
    1c4a:	61 e0       	ldi	r22, 0x01	; 1
    1c4c:	40 2f       	mov	r20, r16
    1c4e:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT,LCD_DATA_PinD4,GET_BIT(character,Pin0));
    1c52:	81 e0       	ldi	r24, 0x01	; 1
    1c54:	d8 22       	and	r13, r24
    1c56:	60 e0       	ldi	r22, 0x00	; 0
    1c58:	4d 2d       	mov	r20, r13
    1c5a:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_voidSetPinValue>

	DIO_voidSetPinValue(LCD_ADDRESS_PORT,LCD_ADDRESS_E,High);
    1c5e:	80 e0       	ldi	r24, 0x00	; 0
    1c60:	62 e0       	ldi	r22, 0x02	; 2
    1c62:	41 e0       	ldi	r20, 0x01	; 1
    1c64:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_voidSetPinValue>
    1c68:	c7 01       	movw	r24, r14
    1c6a:	01 97       	sbiw	r24, 0x01	; 1
    1c6c:	f1 f7       	brne	.-4      	; 0x1c6a <LCD_KIT_voidDisplayCharacter+0xf2>
	_delay_ms(2);
	DIO_voidSetPinValue(LCD_ADDRESS_PORT,LCD_ADDRESS_E,Low);
    1c6e:	80 e0       	ldi	r24, 0x00	; 0
    1c70:	62 e0       	ldi	r22, 0x02	; 2
    1c72:	40 e0       	ldi	r20, 0x00	; 0
    1c74:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_voidSetPinValue>
    1c78:	c7 01       	movw	r24, r14
    1c7a:	01 97       	sbiw	r24, 0x01	; 1
    1c7c:	f1 f7       	brne	.-4      	; 0x1c7a <LCD_KIT_voidDisplayCharacter+0x102>
	_delay_ms(2);

	return;
}
    1c7e:	1f 91       	pop	r17
    1c80:	0f 91       	pop	r16
    1c82:	ff 90       	pop	r15
    1c84:	ef 90       	pop	r14
    1c86:	df 90       	pop	r13
    1c88:	08 95       	ret

00001c8a <LCD_KIT_voidStoreCustomCharacter>:

	return;
}

void LCD_KIT_voidStoreCustomCharacter(u8 *Character, u8 Address)
{
    1c8a:	0f 93       	push	r16
    1c8c:	1f 93       	push	r17
    1c8e:	cf 93       	push	r28
    1c90:	df 93       	push	r29
    1c92:	8c 01       	movw	r16, r24
    1c94:	86 2f       	mov	r24, r22
	LCD_KIT_voidRunCommand(Address);
    1c96:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <LCD_KIT_voidRunCommand>
    1c9a:	c0 e0       	ldi	r28, 0x00	; 0
    1c9c:	d0 e0       	ldi	r29, 0x00	; 0

	for(u8 j=0;j<8;j++)
	{
		LCD_KIT_voidDisplayCharacter(Character[j]);
    1c9e:	f8 01       	movw	r30, r16
    1ca0:	ec 0f       	add	r30, r28
    1ca2:	fd 1f       	adc	r31, r29
    1ca4:	80 81       	ld	r24, Z
    1ca6:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <LCD_KIT_voidDisplayCharacter>
    1caa:	21 96       	adiw	r28, 0x01	; 1

void LCD_KIT_voidStoreCustomCharacter(u8 *Character, u8 Address)
{
	LCD_KIT_voidRunCommand(Address);

	for(u8 j=0;j<8;j++)
    1cac:	c8 30       	cpi	r28, 0x08	; 8
    1cae:	d1 05       	cpc	r29, r1
    1cb0:	b1 f7       	brne	.-20     	; 0x1c9e <LCD_KIT_voidStoreCustomCharacter+0x14>
	{
		LCD_KIT_voidDisplayCharacter(Character[j]);
	}

	return;
}
    1cb2:	df 91       	pop	r29
    1cb4:	cf 91       	pop	r28
    1cb6:	1f 91       	pop	r17
    1cb8:	0f 91       	pop	r16
    1cba:	08 95       	ret

00001cbc <LCD_KIT_voidDisplayBigNumber>:
	}
}
*/

void LCD_KIT_voidDisplayBigNumber(u32 Number)
{
    1cbc:	ef 92       	push	r14
    1cbe:	ff 92       	push	r15
    1cc0:	0f 93       	push	r16
    1cc2:	1f 93       	push	r17
    1cc4:	7b 01       	movw	r14, r22
    1cc6:	8c 01       	movw	r16, r24
	if(Number<=9)
    1cc8:	8a e0       	ldi	r24, 0x0A	; 10
    1cca:	e8 16       	cp	r14, r24
    1ccc:	f1 04       	cpc	r15, r1
    1cce:	01 05       	cpc	r16, r1
    1cd0:	11 05       	cpc	r17, r1
    1cd2:	10 f4       	brcc	.+4      	; 0x1cd8 <LCD_KIT_voidDisplayBigNumber+0x1c>
	{
		LCD_KIT_voidDisplayCharacter(Number+48);
    1cd4:	8e 2d       	mov	r24, r14
    1cd6:	df c0       	rjmp	.+446    	; 0x1e96 <LCD_KIT_voidDisplayBigNumber+0x1da>
	}
	else if(Number<=99)
    1cd8:	84 e6       	ldi	r24, 0x64	; 100
    1cda:	e8 16       	cp	r14, r24
    1cdc:	f1 04       	cpc	r15, r1
    1cde:	01 05       	cpc	r16, r1
    1ce0:	11 05       	cpc	r17, r1
    1ce2:	50 f4       	brcc	.+20     	; 0x1cf8 <LCD_KIT_voidDisplayBigNumber+0x3c>
	{
		LCD_KIT_voidDisplayCharacter(Number/10+48);
    1ce4:	c8 01       	movw	r24, r16
    1ce6:	b7 01       	movw	r22, r14
    1ce8:	2a e0       	ldi	r18, 0x0A	; 10
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	40 e0       	ldi	r20, 0x00	; 0
    1cee:	50 e0       	ldi	r21, 0x00	; 0
    1cf0:	0e 94 3b 11 	call	0x2276	; 0x2276 <__udivmodsi4>
    1cf4:	82 2f       	mov	r24, r18
    1cf6:	c3 c0       	rjmp	.+390    	; 0x1e7e <LCD_KIT_voidDisplayBigNumber+0x1c2>
		LCD_KIT_voidDisplayCharacter(Number%10+48);
	}
	else if(Number<=999)
    1cf8:	88 ee       	ldi	r24, 0xE8	; 232
    1cfa:	e8 16       	cp	r14, r24
    1cfc:	83 e0       	ldi	r24, 0x03	; 3
    1cfe:	f8 06       	cpc	r15, r24
    1d00:	80 e0       	ldi	r24, 0x00	; 0
    1d02:	08 07       	cpc	r16, r24
    1d04:	80 e0       	ldi	r24, 0x00	; 0
    1d06:	18 07       	cpc	r17, r24
    1d08:	50 f4       	brcc	.+20     	; 0x1d1e <LCD_KIT_voidDisplayBigNumber+0x62>
	{
		LCD_KIT_voidDisplayCharacter(Number/100+48);
    1d0a:	c8 01       	movw	r24, r16
    1d0c:	b7 01       	movw	r22, r14
    1d0e:	24 e6       	ldi	r18, 0x64	; 100
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	40 e0       	ldi	r20, 0x00	; 0
    1d14:	50 e0       	ldi	r21, 0x00	; 0
    1d16:	0e 94 3b 11 	call	0x2276	; 0x2276 <__udivmodsi4>
    1d1a:	82 2f       	mov	r24, r18
    1d1c:	9c c0       	rjmp	.+312    	; 0x1e56 <LCD_KIT_voidDisplayBigNumber+0x19a>
		LCD_KIT_voidDisplayCharacter((Number/10)%10+48);
		LCD_KIT_voidDisplayCharacter(Number%10+48);
	}
	else if(Number<=9999)
    1d1e:	80 e1       	ldi	r24, 0x10	; 16
    1d20:	e8 16       	cp	r14, r24
    1d22:	87 e2       	ldi	r24, 0x27	; 39
    1d24:	f8 06       	cpc	r15, r24
    1d26:	80 e0       	ldi	r24, 0x00	; 0
    1d28:	08 07       	cpc	r16, r24
    1d2a:	80 e0       	ldi	r24, 0x00	; 0
    1d2c:	18 07       	cpc	r17, r24
    1d2e:	50 f4       	brcc	.+20     	; 0x1d44 <LCD_KIT_voidDisplayBigNumber+0x88>
	{
		LCD_KIT_voidDisplayCharacter(Number/1000+48);
    1d30:	c8 01       	movw	r24, r16
    1d32:	b7 01       	movw	r22, r14
    1d34:	28 ee       	ldi	r18, 0xE8	; 232
    1d36:	33 e0       	ldi	r19, 0x03	; 3
    1d38:	40 e0       	ldi	r20, 0x00	; 0
    1d3a:	50 e0       	ldi	r21, 0x00	; 0
    1d3c:	0e 94 3b 11 	call	0x2276	; 0x2276 <__udivmodsi4>
    1d40:	82 2f       	mov	r24, r18
    1d42:	75 c0       	rjmp	.+234    	; 0x1e2e <LCD_KIT_voidDisplayBigNumber+0x172>
		LCD_KIT_voidDisplayCharacter((Number/100)%10+48);
		LCD_KIT_voidDisplayCharacter((Number/10)%10+48);
		LCD_KIT_voidDisplayCharacter(Number%10+48);
	}
	else if(Number<=99999)
    1d44:	80 ea       	ldi	r24, 0xA0	; 160
    1d46:	e8 16       	cp	r14, r24
    1d48:	86 e8       	ldi	r24, 0x86	; 134
    1d4a:	f8 06       	cpc	r15, r24
    1d4c:	81 e0       	ldi	r24, 0x01	; 1
    1d4e:	08 07       	cpc	r16, r24
    1d50:	80 e0       	ldi	r24, 0x00	; 0
    1d52:	18 07       	cpc	r17, r24
    1d54:	50 f4       	brcc	.+20     	; 0x1d6a <LCD_KIT_voidDisplayBigNumber+0xae>
	{
		LCD_KIT_voidDisplayCharacter(Number/10000+48);
    1d56:	c8 01       	movw	r24, r16
    1d58:	b7 01       	movw	r22, r14
    1d5a:	20 e1       	ldi	r18, 0x10	; 16
    1d5c:	37 e2       	ldi	r19, 0x27	; 39
    1d5e:	40 e0       	ldi	r20, 0x00	; 0
    1d60:	50 e0       	ldi	r21, 0x00	; 0
    1d62:	0e 94 3b 11 	call	0x2276	; 0x2276 <__udivmodsi4>
    1d66:	82 2f       	mov	r24, r18
    1d68:	4e c0       	rjmp	.+156    	; 0x1e06 <LCD_KIT_voidDisplayBigNumber+0x14a>
		LCD_KIT_voidDisplayCharacter((Number/1000)%10+48);
		LCD_KIT_voidDisplayCharacter((Number/100)%10+48);
		LCD_KIT_voidDisplayCharacter((Number/10)%10+48);
		LCD_KIT_voidDisplayCharacter(Number%10+48);
	}
	else if(Number<=999999)
    1d6a:	80 e4       	ldi	r24, 0x40	; 64
    1d6c:	e8 16       	cp	r14, r24
    1d6e:	82 e4       	ldi	r24, 0x42	; 66
    1d70:	f8 06       	cpc	r15, r24
    1d72:	8f e0       	ldi	r24, 0x0F	; 15
    1d74:	08 07       	cpc	r16, r24
    1d76:	80 e0       	ldi	r24, 0x00	; 0
    1d78:	18 07       	cpc	r17, r24
    1d7a:	50 f4       	brcc	.+20     	; 0x1d90 <LCD_KIT_voidDisplayBigNumber+0xd4>
		{
			LCD_KIT_voidDisplayCharacter(Number/100000+48);
    1d7c:	c8 01       	movw	r24, r16
    1d7e:	b7 01       	movw	r22, r14
    1d80:	20 ea       	ldi	r18, 0xA0	; 160
    1d82:	36 e8       	ldi	r19, 0x86	; 134
    1d84:	41 e0       	ldi	r20, 0x01	; 1
    1d86:	50 e0       	ldi	r21, 0x00	; 0
    1d88:	0e 94 3b 11 	call	0x2276	; 0x2276 <__udivmodsi4>
    1d8c:	82 2f       	mov	r24, r18
    1d8e:	27 c0       	rjmp	.+78     	; 0x1dde <LCD_KIT_voidDisplayBigNumber+0x122>
			LCD_KIT_voidDisplayCharacter((Number/1000)%10+48);
			LCD_KIT_voidDisplayCharacter((Number/100)%10+48);
			LCD_KIT_voidDisplayCharacter((Number/10)%10+48);
			LCD_KIT_voidDisplayCharacter(Number%10+48);
		}
	else if(Number<=9999999)
    1d90:	80 e8       	ldi	r24, 0x80	; 128
    1d92:	e8 16       	cp	r14, r24
    1d94:	86 e9       	ldi	r24, 0x96	; 150
    1d96:	f8 06       	cpc	r15, r24
    1d98:	88 e9       	ldi	r24, 0x98	; 152
    1d9a:	08 07       	cpc	r16, r24
    1d9c:	80 e0       	ldi	r24, 0x00	; 0
    1d9e:	18 07       	cpc	r17, r24
    1da0:	08 f0       	brcs	.+2      	; 0x1da4 <LCD_KIT_voidDisplayBigNumber+0xe8>
    1da2:	7c c0       	rjmp	.+248    	; 0x1e9c <LCD_KIT_voidDisplayBigNumber+0x1e0>
			{
				LCD_KIT_voidDisplayCharacter(Number/1000000+48);
    1da4:	c8 01       	movw	r24, r16
    1da6:	b7 01       	movw	r22, r14
    1da8:	20 e4       	ldi	r18, 0x40	; 64
    1daa:	32 e4       	ldi	r19, 0x42	; 66
    1dac:	4f e0       	ldi	r20, 0x0F	; 15
    1dae:	50 e0       	ldi	r21, 0x00	; 0
    1db0:	0e 94 3b 11 	call	0x2276	; 0x2276 <__udivmodsi4>
    1db4:	82 2f       	mov	r24, r18
    1db6:	80 5d       	subi	r24, 0xD0	; 208
    1db8:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <LCD_KIT_voidDisplayCharacter>
				LCD_KIT_voidDisplayCharacter((Number/100000)%10+48);
    1dbc:	c8 01       	movw	r24, r16
    1dbe:	b7 01       	movw	r22, r14
    1dc0:	20 ea       	ldi	r18, 0xA0	; 160
    1dc2:	36 e8       	ldi	r19, 0x86	; 134
    1dc4:	41 e0       	ldi	r20, 0x01	; 1
    1dc6:	50 e0       	ldi	r21, 0x00	; 0
    1dc8:	0e 94 3b 11 	call	0x2276	; 0x2276 <__udivmodsi4>
    1dcc:	ca 01       	movw	r24, r20
    1dce:	b9 01       	movw	r22, r18
    1dd0:	2a e0       	ldi	r18, 0x0A	; 10
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	40 e0       	ldi	r20, 0x00	; 0
    1dd6:	50 e0       	ldi	r21, 0x00	; 0
    1dd8:	0e 94 3b 11 	call	0x2276	; 0x2276 <__udivmodsi4>
    1ddc:	86 2f       	mov	r24, r22
    1dde:	80 5d       	subi	r24, 0xD0	; 208
    1de0:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <LCD_KIT_voidDisplayCharacter>
				LCD_KIT_voidDisplayCharacter((Number/10000)%10+48);
    1de4:	c8 01       	movw	r24, r16
    1de6:	b7 01       	movw	r22, r14
    1de8:	20 e1       	ldi	r18, 0x10	; 16
    1dea:	37 e2       	ldi	r19, 0x27	; 39
    1dec:	40 e0       	ldi	r20, 0x00	; 0
    1dee:	50 e0       	ldi	r21, 0x00	; 0
    1df0:	0e 94 3b 11 	call	0x2276	; 0x2276 <__udivmodsi4>
    1df4:	ca 01       	movw	r24, r20
    1df6:	b9 01       	movw	r22, r18
    1df8:	2a e0       	ldi	r18, 0x0A	; 10
    1dfa:	30 e0       	ldi	r19, 0x00	; 0
    1dfc:	40 e0       	ldi	r20, 0x00	; 0
    1dfe:	50 e0       	ldi	r21, 0x00	; 0
    1e00:	0e 94 3b 11 	call	0x2276	; 0x2276 <__udivmodsi4>
    1e04:	86 2f       	mov	r24, r22
    1e06:	80 5d       	subi	r24, 0xD0	; 208
    1e08:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <LCD_KIT_voidDisplayCharacter>
				LCD_KIT_voidDisplayCharacter((Number/1000)%10+48);
    1e0c:	c8 01       	movw	r24, r16
    1e0e:	b7 01       	movw	r22, r14
    1e10:	28 ee       	ldi	r18, 0xE8	; 232
    1e12:	33 e0       	ldi	r19, 0x03	; 3
    1e14:	40 e0       	ldi	r20, 0x00	; 0
    1e16:	50 e0       	ldi	r21, 0x00	; 0
    1e18:	0e 94 3b 11 	call	0x2276	; 0x2276 <__udivmodsi4>
    1e1c:	ca 01       	movw	r24, r20
    1e1e:	b9 01       	movw	r22, r18
    1e20:	2a e0       	ldi	r18, 0x0A	; 10
    1e22:	30 e0       	ldi	r19, 0x00	; 0
    1e24:	40 e0       	ldi	r20, 0x00	; 0
    1e26:	50 e0       	ldi	r21, 0x00	; 0
    1e28:	0e 94 3b 11 	call	0x2276	; 0x2276 <__udivmodsi4>
    1e2c:	86 2f       	mov	r24, r22
    1e2e:	80 5d       	subi	r24, 0xD0	; 208
    1e30:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <LCD_KIT_voidDisplayCharacter>
				LCD_KIT_voidDisplayCharacter((Number/100)%10+48);
    1e34:	c8 01       	movw	r24, r16
    1e36:	b7 01       	movw	r22, r14
    1e38:	24 e6       	ldi	r18, 0x64	; 100
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	40 e0       	ldi	r20, 0x00	; 0
    1e3e:	50 e0       	ldi	r21, 0x00	; 0
    1e40:	0e 94 3b 11 	call	0x2276	; 0x2276 <__udivmodsi4>
    1e44:	ca 01       	movw	r24, r20
    1e46:	b9 01       	movw	r22, r18
    1e48:	2a e0       	ldi	r18, 0x0A	; 10
    1e4a:	30 e0       	ldi	r19, 0x00	; 0
    1e4c:	40 e0       	ldi	r20, 0x00	; 0
    1e4e:	50 e0       	ldi	r21, 0x00	; 0
    1e50:	0e 94 3b 11 	call	0x2276	; 0x2276 <__udivmodsi4>
    1e54:	86 2f       	mov	r24, r22
    1e56:	80 5d       	subi	r24, 0xD0	; 208
    1e58:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <LCD_KIT_voidDisplayCharacter>
				LCD_KIT_voidDisplayCharacter((Number/10)%10+48);
    1e5c:	c8 01       	movw	r24, r16
    1e5e:	b7 01       	movw	r22, r14
    1e60:	2a e0       	ldi	r18, 0x0A	; 10
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	40 e0       	ldi	r20, 0x00	; 0
    1e66:	50 e0       	ldi	r21, 0x00	; 0
    1e68:	0e 94 3b 11 	call	0x2276	; 0x2276 <__udivmodsi4>
    1e6c:	ca 01       	movw	r24, r20
    1e6e:	b9 01       	movw	r22, r18
    1e70:	2a e0       	ldi	r18, 0x0A	; 10
    1e72:	30 e0       	ldi	r19, 0x00	; 0
    1e74:	40 e0       	ldi	r20, 0x00	; 0
    1e76:	50 e0       	ldi	r21, 0x00	; 0
    1e78:	0e 94 3b 11 	call	0x2276	; 0x2276 <__udivmodsi4>
    1e7c:	86 2f       	mov	r24, r22
    1e7e:	80 5d       	subi	r24, 0xD0	; 208
    1e80:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <LCD_KIT_voidDisplayCharacter>
				LCD_KIT_voidDisplayCharacter(Number%10+48);
    1e84:	c8 01       	movw	r24, r16
    1e86:	b7 01       	movw	r22, r14
    1e88:	2a e0       	ldi	r18, 0x0A	; 10
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	40 e0       	ldi	r20, 0x00	; 0
    1e8e:	50 e0       	ldi	r21, 0x00	; 0
    1e90:	0e 94 3b 11 	call	0x2276	; 0x2276 <__udivmodsi4>
    1e94:	86 2f       	mov	r24, r22
    1e96:	80 5d       	subi	r24, 0xD0	; 208
    1e98:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <LCD_KIT_voidDisplayCharacter>
			}

	return;
}
    1e9c:	1f 91       	pop	r17
    1e9e:	0f 91       	pop	r16
    1ea0:	ff 90       	pop	r15
    1ea2:	ef 90       	pop	r14
    1ea4:	08 95       	ret

00001ea6 <LCD_KIT_voidDisplayString>:

	return;
}

void LCD_KIT_voidDisplayString(u8 *Str)
{
    1ea6:	1f 93       	push	r17
    1ea8:	cf 93       	push	r28
    1eaa:	df 93       	push	r29
    1eac:	ec 01       	movw	r28, r24
    1eae:	10 e0       	ldi	r17, 0x00	; 0
    1eb0:	03 c0       	rjmp	.+6      	; 0x1eb8 <LCD_KIT_voidDisplayString+0x12>
	for(u8 j=0;Str[j]!='\0';j++)
	{
		LCD_KIT_voidDisplayCharacter(Str[j]);
    1eb2:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <LCD_KIT_voidDisplayCharacter>
	return;
}

void LCD_KIT_voidDisplayString(u8 *Str)
{
	for(u8 j=0;Str[j]!='\0';j++)
    1eb6:	1f 5f       	subi	r17, 0xFF	; 255
    1eb8:	fe 01       	movw	r30, r28
    1eba:	e1 0f       	add	r30, r17
    1ebc:	f1 1d       	adc	r31, r1
    1ebe:	80 81       	ld	r24, Z
    1ec0:	88 23       	and	r24, r24
    1ec2:	b9 f7       	brne	.-18     	; 0x1eb2 <LCD_KIT_voidDisplayString+0xc>
	{
		LCD_KIT_voidDisplayCharacter(Str[j]);
	}
}
    1ec4:	df 91       	pop	r29
    1ec6:	cf 91       	pop	r28
    1ec8:	1f 91       	pop	r17
    1eca:	08 95       	ret

00001ecc <LCD_KIT_voidInitialization>:

#include <util/delay.h>


void LCD_KIT_voidInitialization(void)
{
    1ecc:	ef 92       	push	r14
    1ece:	ff 92       	push	r15
    1ed0:	0f 93       	push	r16
    1ed2:	1f 93       	push	r17
	DIO_voidSetPinDirection(LCD_ADDRESS_PORT,LCD_ADDRESS_E,Output);
    1ed4:	80 e0       	ldi	r24, 0x00	; 0
    1ed6:	62 e0       	ldi	r22, 0x02	; 2
    1ed8:	41 e0       	ldi	r20, 0x01	; 1
    1eda:	0e 94 81 09 	call	0x1302	; 0x1302 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_ADDRESS_PORT,LCD_ADDRESS_RS,Output);
    1ede:	80 e0       	ldi	r24, 0x00	; 0
    1ee0:	63 e0       	ldi	r22, 0x03	; 3
    1ee2:	41 e0       	ldi	r20, 0x01	; 1
    1ee4:	0e 94 81 09 	call	0x1302	; 0x1302 <DIO_voidSetPinDirection>

	DIO_voidSetPinDirection(LCD_DATA_PORT,LCD_DATA_PinD4,Output);
    1ee8:	81 e0       	ldi	r24, 0x01	; 1
    1eea:	60 e0       	ldi	r22, 0x00	; 0
    1eec:	41 e0       	ldi	r20, 0x01	; 1
    1eee:	0e 94 81 09 	call	0x1302	; 0x1302 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_DATA_PORT,LCD_DATA_PinD5,Output);
    1ef2:	81 e0       	ldi	r24, 0x01	; 1
    1ef4:	61 e0       	ldi	r22, 0x01	; 1
    1ef6:	41 e0       	ldi	r20, 0x01	; 1
    1ef8:	0e 94 81 09 	call	0x1302	; 0x1302 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_DATA_PORT,LCD_DATA_PinD6,Output);
    1efc:	81 e0       	ldi	r24, 0x01	; 1
    1efe:	62 e0       	ldi	r22, 0x02	; 2
    1f00:	41 e0       	ldi	r20, 0x01	; 1
    1f02:	0e 94 81 09 	call	0x1302	; 0x1302 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_DATA_PORT,LCD_DATA_PinD7,Output);
    1f06:	81 e0       	ldi	r24, 0x01	; 1
    1f08:	64 e0       	ldi	r22, 0x04	; 4
    1f0a:	41 e0       	ldi	r20, 0x01	; 1
    1f0c:	0e 94 81 09 	call	0x1302	; 0x1302 <DIO_voidSetPinDirection>
    1f10:	80 e9       	ldi	r24, 0x90	; 144
    1f12:	91 e0       	ldi	r25, 0x01	; 1
    1f14:	20 e9       	ldi	r18, 0x90	; 144
    1f16:	31 e0       	ldi	r19, 0x01	; 1
    1f18:	f9 01       	movw	r30, r18
    1f1a:	31 97       	sbiw	r30, 0x01	; 1
    1f1c:	f1 f7       	brne	.-4      	; 0x1f1a <LCD_KIT_voidInitialization+0x4e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f1e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f20:	d9 f7       	brne	.-10     	; 0x1f18 <LCD_KIT_voidInitialization+0x4c>

	_delay_ms(40);
	DIO_voidSetPinValue(LCD_DATA_PORT,LCD_DATA_PinD4,Low);
    1f22:	81 e0       	ldi	r24, 0x01	; 1
    1f24:	60 e0       	ldi	r22, 0x00	; 0
    1f26:	40 e0       	ldi	r20, 0x00	; 0
    1f28:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT,LCD_DATA_PinD5,High);
    1f2c:	81 e0       	ldi	r24, 0x01	; 1
    1f2e:	61 e0       	ldi	r22, 0x01	; 1
    1f30:	41 e0       	ldi	r20, 0x01	; 1
    1f32:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT,LCD_DATA_PinD6,Low);
    1f36:	81 e0       	ldi	r24, 0x01	; 1
    1f38:	62 e0       	ldi	r22, 0x02	; 2
    1f3a:	40 e0       	ldi	r20, 0x00	; 0
    1f3c:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT,LCD_DATA_PinD7,Low);
    1f40:	81 e0       	ldi	r24, 0x01	; 1
    1f42:	64 e0       	ldi	r22, 0x04	; 4
    1f44:	40 e0       	ldi	r20, 0x00	; 0
    1f46:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_voidSetPinValue>

	DIO_voidSetPinValue(LCD_ADDRESS_PORT,LCD_ADDRESS_E,High);
    1f4a:	80 e0       	ldi	r24, 0x00	; 0
    1f4c:	62 e0       	ldi	r22, 0x02	; 2
    1f4e:	41 e0       	ldi	r20, 0x01	; 1
    1f50:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_voidSetPinValue>
    1f54:	40 e4       	ldi	r20, 0x40	; 64
    1f56:	e4 2e       	mov	r14, r20
    1f58:	4f e1       	ldi	r20, 0x1F	; 31
    1f5a:	f4 2e       	mov	r15, r20
    1f5c:	c7 01       	movw	r24, r14
    1f5e:	01 97       	sbiw	r24, 0x01	; 1
    1f60:	f1 f7       	brne	.-4      	; 0x1f5e <LCD_KIT_voidInitialization+0x92>
	_delay_ms(2);
	DIO_voidSetPinValue(LCD_ADDRESS_PORT,LCD_ADDRESS_E,Low);
    1f62:	80 e0       	ldi	r24, 0x00	; 0
    1f64:	62 e0       	ldi	r22, 0x02	; 2
    1f66:	40 e0       	ldi	r20, 0x00	; 0
    1f68:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_voidSetPinValue>
    1f6c:	c7 01       	movw	r24, r14
    1f6e:	01 97       	sbiw	r24, 0x01	; 1
    1f70:	f1 f7       	brne	.-4      	; 0x1f6e <LCD_KIT_voidInitialization+0xa2>
	_delay_ms(2);

	LCD_KIT_voidRunCommand(0x28);
    1f72:	88 e2       	ldi	r24, 0x28	; 40
    1f74:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <LCD_KIT_voidRunCommand>
    1f78:	00 ea       	ldi	r16, 0xA0	; 160
    1f7a:	1f e0       	ldi	r17, 0x0F	; 15
    1f7c:	c8 01       	movw	r24, r16
    1f7e:	01 97       	sbiw	r24, 0x01	; 1
    1f80:	f1 f7       	brne	.-4      	; 0x1f7e <LCD_KIT_voidInitialization+0xb2>
	_delay_ms(1);

	LCD_KIT_voidRunCommand(0x0C);
    1f82:	8c e0       	ldi	r24, 0x0C	; 12
    1f84:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <LCD_KIT_voidRunCommand>
    1f88:	c8 01       	movw	r24, r16
    1f8a:	01 97       	sbiw	r24, 0x01	; 1
    1f8c:	f1 f7       	brne	.-4      	; 0x1f8a <LCD_KIT_voidInitialization+0xbe>
	_delay_ms(1);

	LCD_KIT_voidRunCommand(0x01);
    1f8e:	81 e0       	ldi	r24, 0x01	; 1
    1f90:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <LCD_KIT_voidRunCommand>
    1f94:	c7 01       	movw	r24, r14
    1f96:	01 97       	sbiw	r24, 0x01	; 1
    1f98:	f1 f7       	brne	.-4      	; 0x1f96 <LCD_KIT_voidInitialization+0xca>
	_delay_ms(2);

	LCD_KIT_voidRunCommand(0x06);
    1f9a:	86 e0       	ldi	r24, 0x06	; 6
    1f9c:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <LCD_KIT_voidRunCommand>

	LCD_KIT_voidRunCommand(0x80);
    1fa0:	80 e8       	ldi	r24, 0x80	; 128
    1fa2:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <LCD_KIT_voidRunCommand>

	return;
}
    1fa6:	1f 91       	pop	r17
    1fa8:	0f 91       	pop	r16
    1faa:	ff 90       	pop	r15
    1fac:	ef 90       	pop	r14
    1fae:	08 95       	ret

00001fb0 <KEYBAD_voidGetPressedKey>:
	DIO_voidSetPinValue(KEYPAD_COL_Port,KEYPAD_COL_Pin4,High);
	//return;
}

void KEYBAD_voidGetPressedKey(u8 *Row, u8 *Col,u8 *Flag)
{
    1fb0:	4f 92       	push	r4
    1fb2:	5f 92       	push	r5
    1fb4:	6f 92       	push	r6
    1fb6:	7f 92       	push	r7
    1fb8:	8f 92       	push	r8
    1fba:	9f 92       	push	r9
    1fbc:	af 92       	push	r10
    1fbe:	bf 92       	push	r11
    1fc0:	cf 92       	push	r12
    1fc2:	df 92       	push	r13
    1fc4:	ef 92       	push	r14
    1fc6:	ff 92       	push	r15
    1fc8:	0f 93       	push	r16
    1fca:	1f 93       	push	r17
    1fcc:	cf 93       	push	r28
    1fce:	df 93       	push	r29
    1fd0:	4c 01       	movw	r8, r24
    1fd2:	5b 01       	movw	r10, r22
    1fd4:	6a 01       	movw	r12, r20
    1fd6:	00 e0       	ldi	r16, 0x00	; 0
    1fd8:	c3 e0       	ldi	r28, 0x03	; 3
    1fda:	d0 e0       	ldi	r29, 0x00	; 0
	for(u8 i=0;i<5;i++)
	{
		if(i==1)
		{	continue;	}

		DIO_voidSetPortValueMask(KEYPAD_COL_Port,~(1<<(i+3)),0x17);
    1fdc:	21 e0       	ldi	r18, 0x01	; 1
    1fde:	62 2e       	mov	r6, r18
    1fe0:	71 2c       	mov	r7, r1

		for(u8 j=0;j<4;j++)
		{
			if(!DIO_u8GetPinValue(KEYPAD_ROW_Port,j+2))
    1fe2:	95 e0       	ldi	r25, 0x05	; 5
    1fe4:	49 2e       	mov	r4, r25
			{
				*Row=3-j;
				*Col=4-i;
    1fe6:	84 e0       	ldi	r24, 0x04	; 4
    1fe8:	58 2e       	mov	r5, r24

				*Flag=1;
    1fea:	ee 24       	eor	r14, r14
    1fec:	e3 94       	inc	r14

void KEYBAD_voidGetPressedKey(u8 *Row, u8 *Col,u8 *Flag)
{
	for(u8 i=0;i<5;i++)
	{
		if(i==1)
    1fee:	01 30       	cpi	r16, 0x01	; 1
    1ff0:	f1 f0       	breq	.+60     	; 0x202e <KEYBAD_voidGetPressedKey+0x7e>
		{	continue;	}

		DIO_voidSetPortValueMask(KEYPAD_COL_Port,~(1<<(i+3)),0x17);
    1ff2:	b3 01       	movw	r22, r6
    1ff4:	0c 2e       	mov	r0, r28
    1ff6:	02 c0       	rjmp	.+4      	; 0x1ffc <KEYBAD_voidGetPressedKey+0x4c>
    1ff8:	66 0f       	add	r22, r22
    1ffa:	77 1f       	adc	r23, r23
    1ffc:	0a 94       	dec	r0
    1ffe:	e2 f7       	brpl	.-8      	; 0x1ff8 <KEYBAD_voidGetPressedKey+0x48>
    2000:	60 95       	com	r22
    2002:	83 e0       	ldi	r24, 0x03	; 3
    2004:	47 e1       	ldi	r20, 0x17	; 23
    2006:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <DIO_voidSetPortValueMask>
    200a:	13 e0       	ldi	r17, 0x03	; 3
		for(u8 j=0;j<4;j++)
		{
			if(!DIO_u8GetPinValue(KEYPAD_ROW_Port,j+2))
			{
				*Row=3-j;
				*Col=4-i;
    200c:	f5 2c       	mov	r15, r5
    200e:	f0 1a       	sub	r15, r16

		DIO_voidSetPortValueMask(KEYPAD_COL_Port,~(1<<(i+3)),0x17);

		for(u8 j=0;j<4;j++)
		{
			if(!DIO_u8GetPinValue(KEYPAD_ROW_Port,j+2))
    2010:	64 2d       	mov	r22, r4
    2012:	61 1b       	sub	r22, r17
    2014:	82 e0       	ldi	r24, 0x02	; 2
    2016:	0e 94 0b 0b 	call	0x1616	; 0x1616 <DIO_u8GetPinValue>
    201a:	88 23       	and	r24, r24
    201c:	31 f4       	brne	.+12     	; 0x202a <KEYBAD_voidGetPressedKey+0x7a>
			{
				*Row=3-j;
    201e:	f4 01       	movw	r30, r8
    2020:	10 83       	st	Z, r17
				*Col=4-i;
    2022:	f5 01       	movw	r30, r10
    2024:	f0 82       	st	Z, r15

				*Flag=1;
    2026:	f6 01       	movw	r30, r12
    2028:	e0 82       	st	Z, r14
    202a:	11 50       	subi	r17, 0x01	; 1
    202c:	88 f7       	brcc	.-30     	; 0x2010 <KEYBAD_voidGetPressedKey+0x60>
	//return;
}

void KEYBAD_voidGetPressedKey(u8 *Row, u8 *Col,u8 *Flag)
{
	for(u8 i=0;i<5;i++)
    202e:	0f 5f       	subi	r16, 0xFF	; 255
    2030:	21 96       	adiw	r28, 0x01	; 1
    2032:	05 30       	cpi	r16, 0x05	; 5
    2034:	e1 f6       	brne	.-72     	; 0x1fee <KEYBAD_voidGetPressedKey+0x3e>
				*Flag=1;
			}
		}
	}

	DIO_voidSetPortValueMask(KEYPAD_COL_Port,0xFF,0x17);
    2036:	83 e0       	ldi	r24, 0x03	; 3
    2038:	6f ef       	ldi	r22, 0xFF	; 255
    203a:	47 e1       	ldi	r20, 0x17	; 23
    203c:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <DIO_voidSetPortValueMask>

	return;
}
    2040:	df 91       	pop	r29
    2042:	cf 91       	pop	r28
    2044:	1f 91       	pop	r17
    2046:	0f 91       	pop	r16
    2048:	ff 90       	pop	r15
    204a:	ef 90       	pop	r14
    204c:	df 90       	pop	r13
    204e:	cf 90       	pop	r12
    2050:	bf 90       	pop	r11
    2052:	af 90       	pop	r10
    2054:	9f 90       	pop	r9
    2056:	8f 90       	pop	r8
    2058:	7f 90       	pop	r7
    205a:	6f 90       	pop	r6
    205c:	5f 90       	pop	r5
    205e:	4f 90       	pop	r4
    2060:	08 95       	ret

00002062 <KEYBAD_voidInitialization>:
#include "KEYBADConfg.h"


void KEYBAD_voidInitialization(void)
{
	DIO_voidSetPinDirection(KEYPAD_ROW_Port,KEYPAD_ROW_Pin1,Input);
    2062:	82 e0       	ldi	r24, 0x02	; 2
    2064:	65 e0       	ldi	r22, 0x05	; 5
    2066:	40 e0       	ldi	r20, 0x00	; 0
    2068:	0e 94 81 09 	call	0x1302	; 0x1302 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_ROW_Port,KEYPAD_ROW_Pin2,Input);
    206c:	82 e0       	ldi	r24, 0x02	; 2
    206e:	64 e0       	ldi	r22, 0x04	; 4
    2070:	40 e0       	ldi	r20, 0x00	; 0
    2072:	0e 94 81 09 	call	0x1302	; 0x1302 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_ROW_Port,KEYPAD_ROW_Pin3,Input);
    2076:	82 e0       	ldi	r24, 0x02	; 2
    2078:	63 e0       	ldi	r22, 0x03	; 3
    207a:	40 e0       	ldi	r20, 0x00	; 0
    207c:	0e 94 81 09 	call	0x1302	; 0x1302 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_ROW_Port,KEYPAD_ROW_Pin4,Input);
    2080:	82 e0       	ldi	r24, 0x02	; 2
    2082:	62 e0       	ldi	r22, 0x02	; 2
    2084:	40 e0       	ldi	r20, 0x00	; 0
    2086:	0e 94 81 09 	call	0x1302	; 0x1302 <DIO_voidSetPinDirection>

	DIO_voidSetPinValue(KEYPAD_ROW_Port,KEYPAD_ROW_Pin1,High);
    208a:	82 e0       	ldi	r24, 0x02	; 2
    208c:	65 e0       	ldi	r22, 0x05	; 5
    208e:	41 e0       	ldi	r20, 0x01	; 1
    2090:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYPAD_ROW_Port,KEYPAD_ROW_Pin2,High);
    2094:	82 e0       	ldi	r24, 0x02	; 2
    2096:	64 e0       	ldi	r22, 0x04	; 4
    2098:	41 e0       	ldi	r20, 0x01	; 1
    209a:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYPAD_ROW_Port,KEYPAD_ROW_Pin3,High);
    209e:	82 e0       	ldi	r24, 0x02	; 2
    20a0:	63 e0       	ldi	r22, 0x03	; 3
    20a2:	41 e0       	ldi	r20, 0x01	; 1
    20a4:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYPAD_ROW_Port,KEYPAD_ROW_Pin4,High);
    20a8:	82 e0       	ldi	r24, 0x02	; 2
    20aa:	62 e0       	ldi	r22, 0x02	; 2
    20ac:	41 e0       	ldi	r20, 0x01	; 1
    20ae:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_voidSetPinValue>




	DIO_voidSetPinDirection(KEYPAD_COL_Port,KEYPAD_COL_Pin1,Output);
    20b2:	83 e0       	ldi	r24, 0x03	; 3
    20b4:	67 e0       	ldi	r22, 0x07	; 7
    20b6:	41 e0       	ldi	r20, 0x01	; 1
    20b8:	0e 94 81 09 	call	0x1302	; 0x1302 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_COL_Port,KEYPAD_COL_Pin2,Output);
    20bc:	83 e0       	ldi	r24, 0x03	; 3
    20be:	66 e0       	ldi	r22, 0x06	; 6
    20c0:	41 e0       	ldi	r20, 0x01	; 1
    20c2:	0e 94 81 09 	call	0x1302	; 0x1302 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_COL_Port,KEYPAD_COL_Pin3,Output);
    20c6:	83 e0       	ldi	r24, 0x03	; 3
    20c8:	65 e0       	ldi	r22, 0x05	; 5
    20ca:	41 e0       	ldi	r20, 0x01	; 1
    20cc:	0e 94 81 09 	call	0x1302	; 0x1302 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_COL_Port,KEYPAD_COL_Pin4,Output);
    20d0:	83 e0       	ldi	r24, 0x03	; 3
    20d2:	63 e0       	ldi	r22, 0x03	; 3
    20d4:	41 e0       	ldi	r20, 0x01	; 1
    20d6:	0e 94 81 09 	call	0x1302	; 0x1302 <DIO_voidSetPinDirection>

	DIO_voidSetPinValue(KEYPAD_COL_Port,KEYPAD_COL_Pin1,High);
    20da:	83 e0       	ldi	r24, 0x03	; 3
    20dc:	67 e0       	ldi	r22, 0x07	; 7
    20de:	41 e0       	ldi	r20, 0x01	; 1
    20e0:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYPAD_COL_Port,KEYPAD_COL_Pin2,High);
    20e4:	83 e0       	ldi	r24, 0x03	; 3
    20e6:	66 e0       	ldi	r22, 0x06	; 6
    20e8:	41 e0       	ldi	r20, 0x01	; 1
    20ea:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYPAD_COL_Port,KEYPAD_COL_Pin3,High);
    20ee:	83 e0       	ldi	r24, 0x03	; 3
    20f0:	65 e0       	ldi	r22, 0x05	; 5
    20f2:	41 e0       	ldi	r20, 0x01	; 1
    20f4:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYPAD_COL_Port,KEYPAD_COL_Pin4,High);
    20f8:	83 e0       	ldi	r24, 0x03	; 3
    20fa:	63 e0       	ldi	r22, 0x03	; 3
    20fc:	41 e0       	ldi	r20, 0x01	; 1
    20fe:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_voidSetPinValue>
	//return;
}
    2102:	08 95       	ret

00002104 <SEG_voidDisplayNumber>:
	DIO_voidSetPortDirection(SEG_PORT,Output);
}

void SEG_voidDisplayNumber(u8 Number)
{
	switch(Number)
    2104:	84 30       	cpi	r24, 0x04	; 4
    2106:	29 f1       	breq	.+74     	; 0x2152 <SEG_voidDisplayNumber+0x4e>
    2108:	85 30       	cpi	r24, 0x05	; 5
    210a:	48 f4       	brcc	.+18     	; 0x211e <SEG_voidDisplayNumber+0x1a>
    210c:	81 30       	cpi	r24, 0x01	; 1
    210e:	c1 f0       	breq	.+48     	; 0x2140 <SEG_voidDisplayNumber+0x3c>
    2110:	81 30       	cpi	r24, 0x01	; 1
    2112:	98 f0       	brcs	.+38     	; 0x213a <SEG_voidDisplayNumber+0x36>
    2114:	82 30       	cpi	r24, 0x02	; 2
    2116:	b9 f0       	breq	.+46     	; 0x2146 <SEG_voidDisplayNumber+0x42>
    2118:	83 30       	cpi	r24, 0x03	; 3
    211a:	81 f5       	brne	.+96     	; 0x217c <SEG_voidDisplayNumber+0x78>
    211c:	17 c0       	rjmp	.+46     	; 0x214c <SEG_voidDisplayNumber+0x48>
    211e:	87 30       	cpi	r24, 0x07	; 7
    2120:	09 f1       	breq	.+66     	; 0x2164 <SEG_voidDisplayNumber+0x60>
    2122:	88 30       	cpi	r24, 0x08	; 8
    2124:	28 f4       	brcc	.+10     	; 0x2130 <SEG_voidDisplayNumber+0x2c>
    2126:	85 30       	cpi	r24, 0x05	; 5
    2128:	b9 f0       	breq	.+46     	; 0x2158 <SEG_voidDisplayNumber+0x54>
    212a:	86 30       	cpi	r24, 0x06	; 6
    212c:	39 f5       	brne	.+78     	; 0x217c <SEG_voidDisplayNumber+0x78>
    212e:	17 c0       	rjmp	.+46     	; 0x215e <SEG_voidDisplayNumber+0x5a>
    2130:	88 30       	cpi	r24, 0x08	; 8
    2132:	d9 f0       	breq	.+54     	; 0x216a <SEG_voidDisplayNumber+0x66>
    2134:	89 30       	cpi	r24, 0x09	; 9
    2136:	11 f5       	brne	.+68     	; 0x217c <SEG_voidDisplayNumber+0x78>
    2138:	1d c0       	rjmp	.+58     	; 0x2174 <SEG_voidDisplayNumber+0x70>
	{
	case 0 : DIO_voidSetPortValue(SEG_PORT,SEG_Display0_Value); break;
    213a:	80 e0       	ldi	r24, 0x00	; 0
    213c:	6f e3       	ldi	r22, 0x3F	; 63
    213e:	17 c0       	rjmp	.+46     	; 0x216e <SEG_voidDisplayNumber+0x6a>
	case 1 : DIO_voidSetPortValue(SEG_PORT,SEG_Display1_Value); break;
    2140:	80 e0       	ldi	r24, 0x00	; 0
    2142:	66 e0       	ldi	r22, 0x06	; 6
    2144:	14 c0       	rjmp	.+40     	; 0x216e <SEG_voidDisplayNumber+0x6a>
	case 2 : DIO_voidSetPortValue(SEG_PORT,SEG_Display2_Value); break;
    2146:	80 e0       	ldi	r24, 0x00	; 0
    2148:	6b e5       	ldi	r22, 0x5B	; 91
    214a:	11 c0       	rjmp	.+34     	; 0x216e <SEG_voidDisplayNumber+0x6a>
	case 3 : DIO_voidSetPortValue(SEG_PORT,SEG_Display3_Value); break;
    214c:	80 e0       	ldi	r24, 0x00	; 0
    214e:	6f e4       	ldi	r22, 0x4F	; 79
    2150:	0e c0       	rjmp	.+28     	; 0x216e <SEG_voidDisplayNumber+0x6a>
	case 4 : DIO_voidSetPortValue(SEG_PORT,SEG_Display4_Value); break;
    2152:	80 e0       	ldi	r24, 0x00	; 0
    2154:	66 e6       	ldi	r22, 0x66	; 102
    2156:	0b c0       	rjmp	.+22     	; 0x216e <SEG_voidDisplayNumber+0x6a>
	case 5 : DIO_voidSetPortValue(SEG_PORT,SEG_Display5_Value); break;
    2158:	80 e0       	ldi	r24, 0x00	; 0
    215a:	6d e6       	ldi	r22, 0x6D	; 109
    215c:	08 c0       	rjmp	.+16     	; 0x216e <SEG_voidDisplayNumber+0x6a>
	case 6 : DIO_voidSetPortValue(SEG_PORT,SEG_Display6_Value); break;
    215e:	80 e0       	ldi	r24, 0x00	; 0
    2160:	6d e7       	ldi	r22, 0x7D	; 125
    2162:	05 c0       	rjmp	.+10     	; 0x216e <SEG_voidDisplayNumber+0x6a>
	case 7 : DIO_voidSetPortValue(SEG_PORT,SEG_Display7_Value); break;
    2164:	80 e0       	ldi	r24, 0x00	; 0
    2166:	67 e4       	ldi	r22, 0x47	; 71
    2168:	02 c0       	rjmp	.+4      	; 0x216e <SEG_voidDisplayNumber+0x6a>
	case 8 : DIO_voidSetPortValue(SEG_PORT,SEG_Display8_Value); break;
    216a:	80 e0       	ldi	r24, 0x00	; 0
    216c:	6f e7       	ldi	r22, 0x7F	; 127
    216e:	0e 94 c0 0a 	call	0x1580	; 0x1580 <DIO_voidSetPortValue>
    2172:	08 95       	ret
	case 9 : DIO_voidSetPortValue(SEG_PORT,SEG_Display9_Value); break;
    2174:	80 e0       	ldi	r24, 0x00	; 0
    2176:	6f e6       	ldi	r22, 0x6F	; 111
    2178:	0e 94 c0 0a 	call	0x1580	; 0x1580 <DIO_voidSetPortValue>
    217c:	08 95       	ret

0000217e <SEG_voidInitialization>:
#include "7SEG_int.h"
#include "7SEG_priv.h"

void SEG_voidInitialization(void)
{
	DIO_voidSetPortDirection(SEG_PORT,Output);
    217e:	80 e0       	ldi	r24, 0x00	; 0
    2180:	61 e0       	ldi	r22, 0x01	; 1
    2182:	0e 94 98 0a 	call	0x1530	; 0x1530 <DIO_voidSetPortDirection>
}
    2186:	08 95       	ret

00002188 <USART_voidRecieveData_Interrupt>:
	return;
}

void USART_voidRecieveData_Interrupt(void)
{
	LCD_KIT_voidDisplayCharacter('A');
    2188:	81 e4       	ldi	r24, 0x41	; 65
    218a:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <LCD_KIT_voidDisplayCharacter>
	LCD_KIT_voidDisplayCharacter(UDR);
    218e:	8c b1       	in	r24, 0x0c	; 12
    2190:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <LCD_KIT_voidDisplayCharacter>
}
    2194:	08 95       	ret

00002196 <USART_voidSendData_Interrupt>:

void USART_voidSendData_Interrupt(void)
{
	LCD_KIT_voidDisplayCharacter('H');
    2196:	88 e4       	ldi	r24, 0x48	; 72
    2198:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <LCD_KIT_voidDisplayCharacter>

	CLR_BIT(UCSRB,TXEN);
    219c:	53 98       	cbi	0x0a, 3	; 10
	SET_BIT(UCSRB,TXEN);
    219e:	53 9a       	sbi	0x0a, 3	; 10

	USART_voidDisableTransmitterInterrupt();
    21a0:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <USART_voidDisableTransmitterInterrupt>
	USART_voidEnableTransmitterInterrupt();
    21a4:	0e 94 da 06 	call	0xdb4	; 0xdb4 <USART_voidEnableTransmitterInterrupt>


}
    21a8:	08 95       	ret

000021aa <main>:

void USART_voidRecieveData_Interrupt(void);
void USART_voidSendData_Interrupt(void);

void main()
{
    21aa:	1f 93       	push	r17
    21ac:	df 93       	push	r29
    21ae:	cf 93       	push	r28
    21b0:	cd b7       	in	r28, 0x3d	; 61
    21b2:	de b7       	in	r29, 0x3e	; 62
    21b4:	64 97       	sbiw	r28, 0x14	; 20
    21b6:	0f b6       	in	r0, 0x3f	; 63
    21b8:	f8 94       	cli
    21ba:	de bf       	out	0x3e, r29	; 62
    21bc:	0f be       	out	0x3f, r0	; 63
    21be:	cd bf       	out	0x3d, r28	; 61
//
////	USART_voidSendString_Polling("Ahmed ");

//	POOLING

	LCD_KIT_voidInitialization();
    21c0:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <LCD_KIT_voidInitialization>
	USART_voidInitialization();
    21c4:	0e 94 b7 06 	call	0xd6e	; 0xd6e <USART_voidInitialization>

	//LCD_KIT_voidDisplayCharacter('D');

	DIO_voidSetPortDirection(PortA,Output);
    21c8:	80 e0       	ldi	r24, 0x00	; 0
    21ca:	61 e0       	ldi	r22, 0x01	; 1
    21cc:	0e 94 98 0a 	call	0x1530	; 0x1530 <DIO_voidSetPortDirection>
	DIO_voidSetPinValue(PortA,Pin5,High);
    21d0:	80 e0       	ldi	r24, 0x00	; 0
    21d2:	65 e0       	ldi	r22, 0x05	; 5
    21d4:	41 e0       	ldi	r20, 0x01	; 1
    21d6:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PortA,Pin4,High);
    21da:	80 e0       	ldi	r24, 0x00	; 0
    21dc:	64 e0       	ldi	r22, 0x04	; 4
    21de:	41 e0       	ldi	r20, 0x01	; 1
    21e0:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PortA,Pin6,High);
    21e4:	80 e0       	ldi	r24, 0x00	; 0
    21e6:	66 e0       	ldi	r22, 0x06	; 6
    21e8:	41 e0       	ldi	r20, 0x01	; 1
    21ea:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_voidSetPinValue>
	//_delay_ms(1000);

	u8 arr[20]="Hi Mohamed ";
    21ee:	de 01       	movw	r26, r28
    21f0:	11 96       	adiw	r26, 0x01	; 1
    21f2:	e0 e6       	ldi	r30, 0x60	; 96
    21f4:	f0 e0       	ldi	r31, 0x00	; 0
    21f6:	8c e0       	ldi	r24, 0x0C	; 12
    21f8:	01 90       	ld	r0, Z+
    21fa:	0d 92       	st	X+, r0
    21fc:	81 50       	subi	r24, 0x01	; 1
    21fe:	e1 f7       	brne	.-8      	; 0x21f8 <main+0x4e>
    2200:	fe 01       	movw	r30, r28
    2202:	3d 96       	adiw	r30, 0x0d	; 13
    2204:	88 e0       	ldi	r24, 0x08	; 8
    2206:	df 01       	movw	r26, r30
    2208:	1d 92       	st	X+, r1
    220a:	8a 95       	dec	r24
    220c:	e9 f7       	brne	.-6      	; 0x2208 <main+0x5e>

	USART_voidSendString_Polling(arr);
    220e:	ce 01       	movw	r24, r28
    2210:	01 96       	adiw	r24, 0x01	; 1
    2212:	0e 94 c5 06 	call	0xd8a	; 0xd8a <USART_voidSendString_Polling>

	while(1)
	{
		u8 Temp=0;

		Temp=USART_u8RecieveData_Polling();
    2216:	0e 94 d2 06 	call	0xda4	; 0xda4 <USART_u8RecieveData_Polling>
    221a:	18 2f       	mov	r17, r24
		LCD_KIT_voidDisplayCharacter(Temp);
    221c:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <LCD_KIT_voidDisplayCharacter>

		if(Temp=='1')
    2220:	11 33       	cpi	r17, 0x31	; 49
    2222:	19 f4       	brne	.+6      	; 0x222a <main+0x80>
		{
			DIO_voidTogglePin(PortA,Pin6);
    2224:	80 e0       	ldi	r24, 0x00	; 0
    2226:	66 e0       	ldi	r22, 0x06	; 6
    2228:	09 c0       	rjmp	.+18     	; 0x223c <main+0x92>
		}
		else if(Temp=='2')
    222a:	12 33       	cpi	r17, 0x32	; 50
    222c:	19 f4       	brne	.+6      	; 0x2234 <main+0x8a>
		{
			DIO_voidTogglePin(PortA,Pin5);
    222e:	80 e0       	ldi	r24, 0x00	; 0
    2230:	65 e0       	ldi	r22, 0x05	; 5
    2232:	04 c0       	rjmp	.+8      	; 0x223c <main+0x92>
		}
		else if(Temp=='3')
    2234:	13 33       	cpi	r17, 0x33	; 51
    2236:	21 f4       	brne	.+8      	; 0x2240 <main+0x96>
		{
			DIO_voidTogglePin(PortA,Pin4);
    2238:	80 e0       	ldi	r24, 0x00	; 0
    223a:	64 e0       	ldi	r22, 0x04	; 4
    223c:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <DIO_voidTogglePin>
		}

		LCD_KIT_voidDisplayCharacter('Z');
    2240:	8a e5       	ldi	r24, 0x5A	; 90
    2242:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <LCD_KIT_voidDisplayCharacter>
		USART_voidSendData_Polling('A');
    2246:	81 e4       	ldi	r24, 0x41	; 65
    2248:	0e 94 c1 06 	call	0xd82	; 0xd82 <USART_voidSendData_Polling>
    224c:	e4 cf       	rjmp	.-56     	; 0x2216 <main+0x6c>

0000224e <__udivmodhi4>:
    224e:	aa 1b       	sub	r26, r26
    2250:	bb 1b       	sub	r27, r27
    2252:	51 e1       	ldi	r21, 0x11	; 17
    2254:	07 c0       	rjmp	.+14     	; 0x2264 <__udivmodhi4_ep>

00002256 <__udivmodhi4_loop>:
    2256:	aa 1f       	adc	r26, r26
    2258:	bb 1f       	adc	r27, r27
    225a:	a6 17       	cp	r26, r22
    225c:	b7 07       	cpc	r27, r23
    225e:	10 f0       	brcs	.+4      	; 0x2264 <__udivmodhi4_ep>
    2260:	a6 1b       	sub	r26, r22
    2262:	b7 0b       	sbc	r27, r23

00002264 <__udivmodhi4_ep>:
    2264:	88 1f       	adc	r24, r24
    2266:	99 1f       	adc	r25, r25
    2268:	5a 95       	dec	r21
    226a:	a9 f7       	brne	.-22     	; 0x2256 <__udivmodhi4_loop>
    226c:	80 95       	com	r24
    226e:	90 95       	com	r25
    2270:	bc 01       	movw	r22, r24
    2272:	cd 01       	movw	r24, r26
    2274:	08 95       	ret

00002276 <__udivmodsi4>:
    2276:	a1 e2       	ldi	r26, 0x21	; 33
    2278:	1a 2e       	mov	r1, r26
    227a:	aa 1b       	sub	r26, r26
    227c:	bb 1b       	sub	r27, r27
    227e:	fd 01       	movw	r30, r26
    2280:	0d c0       	rjmp	.+26     	; 0x229c <__udivmodsi4_ep>

00002282 <__udivmodsi4_loop>:
    2282:	aa 1f       	adc	r26, r26
    2284:	bb 1f       	adc	r27, r27
    2286:	ee 1f       	adc	r30, r30
    2288:	ff 1f       	adc	r31, r31
    228a:	a2 17       	cp	r26, r18
    228c:	b3 07       	cpc	r27, r19
    228e:	e4 07       	cpc	r30, r20
    2290:	f5 07       	cpc	r31, r21
    2292:	20 f0       	brcs	.+8      	; 0x229c <__udivmodsi4_ep>
    2294:	a2 1b       	sub	r26, r18
    2296:	b3 0b       	sbc	r27, r19
    2298:	e4 0b       	sbc	r30, r20
    229a:	f5 0b       	sbc	r31, r21

0000229c <__udivmodsi4_ep>:
    229c:	66 1f       	adc	r22, r22
    229e:	77 1f       	adc	r23, r23
    22a0:	88 1f       	adc	r24, r24
    22a2:	99 1f       	adc	r25, r25
    22a4:	1a 94       	dec	r1
    22a6:	69 f7       	brne	.-38     	; 0x2282 <__udivmodsi4_loop>
    22a8:	60 95       	com	r22
    22aa:	70 95       	com	r23
    22ac:	80 95       	com	r24
    22ae:	90 95       	com	r25
    22b0:	9b 01       	movw	r18, r22
    22b2:	ac 01       	movw	r20, r24
    22b4:	bd 01       	movw	r22, r26
    22b6:	cf 01       	movw	r24, r30
    22b8:	08 95       	ret

000022ba <__divmodsi4>:
    22ba:	97 fb       	bst	r25, 7
    22bc:	09 2e       	mov	r0, r25
    22be:	05 26       	eor	r0, r21
    22c0:	0e d0       	rcall	.+28     	; 0x22de <__divmodsi4_neg1>
    22c2:	57 fd       	sbrc	r21, 7
    22c4:	04 d0       	rcall	.+8      	; 0x22ce <__divmodsi4_neg2>
    22c6:	d7 df       	rcall	.-82     	; 0x2276 <__udivmodsi4>
    22c8:	0a d0       	rcall	.+20     	; 0x22de <__divmodsi4_neg1>
    22ca:	00 1c       	adc	r0, r0
    22cc:	38 f4       	brcc	.+14     	; 0x22dc <__divmodsi4_exit>

000022ce <__divmodsi4_neg2>:
    22ce:	50 95       	com	r21
    22d0:	40 95       	com	r20
    22d2:	30 95       	com	r19
    22d4:	21 95       	neg	r18
    22d6:	3f 4f       	sbci	r19, 0xFF	; 255
    22d8:	4f 4f       	sbci	r20, 0xFF	; 255
    22da:	5f 4f       	sbci	r21, 0xFF	; 255

000022dc <__divmodsi4_exit>:
    22dc:	08 95       	ret

000022de <__divmodsi4_neg1>:
    22de:	f6 f7       	brtc	.-4      	; 0x22dc <__divmodsi4_exit>
    22e0:	90 95       	com	r25
    22e2:	80 95       	com	r24
    22e4:	70 95       	com	r23
    22e6:	61 95       	neg	r22
    22e8:	7f 4f       	sbci	r23, 0xFF	; 255
    22ea:	8f 4f       	sbci	r24, 0xFF	; 255
    22ec:	9f 4f       	sbci	r25, 0xFF	; 255
    22ee:	08 95       	ret

000022f0 <__prologue_saves__>:
    22f0:	2f 92       	push	r2
    22f2:	3f 92       	push	r3
    22f4:	4f 92       	push	r4
    22f6:	5f 92       	push	r5
    22f8:	6f 92       	push	r6
    22fa:	7f 92       	push	r7
    22fc:	8f 92       	push	r8
    22fe:	9f 92       	push	r9
    2300:	af 92       	push	r10
    2302:	bf 92       	push	r11
    2304:	cf 92       	push	r12
    2306:	df 92       	push	r13
    2308:	ef 92       	push	r14
    230a:	ff 92       	push	r15
    230c:	0f 93       	push	r16
    230e:	1f 93       	push	r17
    2310:	cf 93       	push	r28
    2312:	df 93       	push	r29
    2314:	cd b7       	in	r28, 0x3d	; 61
    2316:	de b7       	in	r29, 0x3e	; 62
    2318:	ca 1b       	sub	r28, r26
    231a:	db 0b       	sbc	r29, r27
    231c:	0f b6       	in	r0, 0x3f	; 63
    231e:	f8 94       	cli
    2320:	de bf       	out	0x3e, r29	; 62
    2322:	0f be       	out	0x3f, r0	; 63
    2324:	cd bf       	out	0x3d, r28	; 61
    2326:	09 94       	ijmp

00002328 <__epilogue_restores__>:
    2328:	2a 88       	ldd	r2, Y+18	; 0x12
    232a:	39 88       	ldd	r3, Y+17	; 0x11
    232c:	48 88       	ldd	r4, Y+16	; 0x10
    232e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2330:	6e 84       	ldd	r6, Y+14	; 0x0e
    2332:	7d 84       	ldd	r7, Y+13	; 0x0d
    2334:	8c 84       	ldd	r8, Y+12	; 0x0c
    2336:	9b 84       	ldd	r9, Y+11	; 0x0b
    2338:	aa 84       	ldd	r10, Y+10	; 0x0a
    233a:	b9 84       	ldd	r11, Y+9	; 0x09
    233c:	c8 84       	ldd	r12, Y+8	; 0x08
    233e:	df 80       	ldd	r13, Y+7	; 0x07
    2340:	ee 80       	ldd	r14, Y+6	; 0x06
    2342:	fd 80       	ldd	r15, Y+5	; 0x05
    2344:	0c 81       	ldd	r16, Y+4	; 0x04
    2346:	1b 81       	ldd	r17, Y+3	; 0x03
    2348:	aa 81       	ldd	r26, Y+2	; 0x02
    234a:	b9 81       	ldd	r27, Y+1	; 0x01
    234c:	ce 0f       	add	r28, r30
    234e:	d1 1d       	adc	r29, r1
    2350:	0f b6       	in	r0, 0x3f	; 63
    2352:	f8 94       	cli
    2354:	de bf       	out	0x3e, r29	; 62
    2356:	0f be       	out	0x3f, r0	; 63
    2358:	cd bf       	out	0x3d, r28	; 61
    235a:	ed 01       	movw	r28, r26
    235c:	08 95       	ret

0000235e <_exit>:
    235e:	f8 94       	cli

00002360 <__stop_program>:
    2360:	ff cf       	rjmp	.-2      	; 0x2360 <__stop_program>
