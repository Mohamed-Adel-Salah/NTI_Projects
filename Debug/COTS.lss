
COTS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000044b2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  000044b2  00004526  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000030d8  00000000  00000000  00004540  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000cd4  00000000  00000000  00007618  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  000082ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  0000842c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  0000859c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  0000a1e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  0000b0d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000be80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000bfe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000c26d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000ca3b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 eb       	ldi	r30, 0xB2	; 178
      68:	f4 e4       	ldi	r31, 0x44	; 68
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 1b 1d 	call	0x3a36	; 0x3a36 <main>
      7a:	0c 94 57 22 	jmp	0x44ae	; 0x44ae <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 20 22 	jmp	0x4440	; 0x4440 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	aa e6       	ldi	r26, 0x6A	; 106
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 3c 22 	jmp	0x4478	; 0x4478 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 2c 22 	jmp	0x4458	; 0x4458 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 48 22 	jmp	0x4490	; 0x4490 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 2c 22 	jmp	0x4458	; 0x4458 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 48 22 	jmp	0x4490	; 0x4490 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 20 22 	jmp	0x4440	; 0x4440 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8a e6       	ldi	r24, 0x6A	; 106
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 3c 22 	jmp	0x4478	; 0x4478 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 2c 22 	jmp	0x4458	; 0x4458 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 48 22 	jmp	0x4490	; 0x4490 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 2c 22 	jmp	0x4458	; 0x4458 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 48 22 	jmp	0x4490	; 0x4490 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 2c 22 	jmp	0x4458	; 0x4458 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 48 22 	jmp	0x4490	; 0x4490 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 30 22 	jmp	0x4460	; 0x4460 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 4c 22 	jmp	0x4498	; 0x4498 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <DIO_voidInitialization>:
#include "DIO_int.h"
#include "DIO_priv.h"
#include "DIO_reg.h"

void DIO_voidInitialization (void)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
//Depends on Application

/***** Game *****/
	DIO_voidSetPinDirection(PortD,Pin5,Input);
     b3e:	83 e0       	ldi	r24, 0x03	; 3
     b40:	65 e0       	ldi	r22, 0x05	; 5
     b42:	40 e0       	ldi	r20, 0x00	; 0
     b44:	0e 94 ca 05 	call	0xb94	; 0xb94 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PortD,Pin3,Input);
     b48:	83 e0       	ldi	r24, 0x03	; 3
     b4a:	63 e0       	ldi	r22, 0x03	; 3
     b4c:	40 e0       	ldi	r20, 0x00	; 0
     b4e:	0e 94 ca 05 	call	0xb94	; 0xb94 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PortD,Pin7,Input);
     b52:	83 e0       	ldi	r24, 0x03	; 3
     b54:	67 e0       	ldi	r22, 0x07	; 7
     b56:	40 e0       	ldi	r20, 0x00	; 0
     b58:	0e 94 ca 05 	call	0xb94	; 0xb94 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PortD,Pin6,Input);
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	66 e0       	ldi	r22, 0x06	; 6
     b60:	40 e0       	ldi	r20, 0x00	; 0
     b62:	0e 94 ca 05 	call	0xb94	; 0xb94 <DIO_voidSetPinDirection>

	DIO_voidSetPinValue(PortD,Pin5,High);
     b66:	83 e0       	ldi	r24, 0x03	; 3
     b68:	65 e0       	ldi	r22, 0x05	; 5
     b6a:	41 e0       	ldi	r20, 0x01	; 1
     b6c:	0e 94 c6 06 	call	0xd8c	; 0xd8c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PortD,Pin3,High);
     b70:	83 e0       	ldi	r24, 0x03	; 3
     b72:	63 e0       	ldi	r22, 0x03	; 3
     b74:	41 e0       	ldi	r20, 0x01	; 1
     b76:	0e 94 c6 06 	call	0xd8c	; 0xd8c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PortD,Pin7,High);
     b7a:	83 e0       	ldi	r24, 0x03	; 3
     b7c:	67 e0       	ldi	r22, 0x07	; 7
     b7e:	41 e0       	ldi	r20, 0x01	; 1
     b80:	0e 94 c6 06 	call	0xd8c	; 0xd8c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PortD,Pin6,High);
     b84:	83 e0       	ldi	r24, 0x03	; 3
     b86:	66 e0       	ldi	r22, 0x06	; 6
     b88:	41 e0       	ldi	r20, 0x01	; 1
     b8a:	0e 94 c6 06 	call	0xd8c	; 0xd8c <DIO_voidSetPinValue>
}
     b8e:	cf 91       	pop	r28
     b90:	df 91       	pop	r29
     b92:	08 95       	ret

00000b94 <DIO_voidSetPinDirection>:

void 	DIO_voidSetPinDirection (u8 PortId,u8 PinId,u8 Direction)
{
     b94:	df 93       	push	r29
     b96:	cf 93       	push	r28
     b98:	cd b7       	in	r28, 0x3d	; 61
     b9a:	de b7       	in	r29, 0x3e	; 62
     b9c:	27 97       	sbiw	r28, 0x07	; 7
     b9e:	0f b6       	in	r0, 0x3f	; 63
     ba0:	f8 94       	cli
     ba2:	de bf       	out	0x3e, r29	; 62
     ba4:	0f be       	out	0x3f, r0	; 63
     ba6:	cd bf       	out	0x3d, r28	; 61
     ba8:	89 83       	std	Y+1, r24	; 0x01
     baa:	6a 83       	std	Y+2, r22	; 0x02
     bac:	4b 83       	std	Y+3, r20	; 0x03
	if(Direction==Output)
     bae:	8b 81       	ldd	r24, Y+3	; 0x03
     bb0:	81 30       	cpi	r24, 0x01	; 1
     bb2:	09 f0       	breq	.+2      	; 0xbb6 <DIO_voidSetPinDirection+0x22>
     bb4:	6f c0       	rjmp	.+222    	; 0xc94 <DIO_voidSetPinDirection+0x100>
	{
		switch(PortId)
     bb6:	89 81       	ldd	r24, Y+1	; 0x01
     bb8:	28 2f       	mov	r18, r24
     bba:	30 e0       	ldi	r19, 0x00	; 0
     bbc:	3f 83       	std	Y+7, r19	; 0x07
     bbe:	2e 83       	std	Y+6, r18	; 0x06
     bc0:	8e 81       	ldd	r24, Y+6	; 0x06
     bc2:	9f 81       	ldd	r25, Y+7	; 0x07
     bc4:	81 30       	cpi	r24, 0x01	; 1
     bc6:	91 05       	cpc	r25, r1
     bc8:	49 f1       	breq	.+82     	; 0xc1c <DIO_voidSetPinDirection+0x88>
     bca:	2e 81       	ldd	r18, Y+6	; 0x06
     bcc:	3f 81       	ldd	r19, Y+7	; 0x07
     bce:	22 30       	cpi	r18, 0x02	; 2
     bd0:	31 05       	cpc	r19, r1
     bd2:	2c f4       	brge	.+10     	; 0xbde <DIO_voidSetPinDirection+0x4a>
     bd4:	8e 81       	ldd	r24, Y+6	; 0x06
     bd6:	9f 81       	ldd	r25, Y+7	; 0x07
     bd8:	00 97       	sbiw	r24, 0x00	; 0
     bda:	61 f0       	breq	.+24     	; 0xbf4 <DIO_voidSetPinDirection+0x60>
     bdc:	ce c0       	rjmp	.+412    	; 0xd7a <DIO_voidSetPinDirection+0x1e6>
     bde:	2e 81       	ldd	r18, Y+6	; 0x06
     be0:	3f 81       	ldd	r19, Y+7	; 0x07
     be2:	22 30       	cpi	r18, 0x02	; 2
     be4:	31 05       	cpc	r19, r1
     be6:	71 f1       	breq	.+92     	; 0xc44 <DIO_voidSetPinDirection+0xb0>
     be8:	8e 81       	ldd	r24, Y+6	; 0x06
     bea:	9f 81       	ldd	r25, Y+7	; 0x07
     bec:	83 30       	cpi	r24, 0x03	; 3
     bee:	91 05       	cpc	r25, r1
     bf0:	e9 f1       	breq	.+122    	; 0xc6c <DIO_voidSetPinDirection+0xd8>
     bf2:	c3 c0       	rjmp	.+390    	; 0xd7a <DIO_voidSetPinDirection+0x1e6>
		{
			case 0: SET_BIT(DDRA,PinId); break;
     bf4:	aa e3       	ldi	r26, 0x3A	; 58
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	ea e3       	ldi	r30, 0x3A	; 58
     bfa:	f0 e0       	ldi	r31, 0x00	; 0
     bfc:	80 81       	ld	r24, Z
     bfe:	48 2f       	mov	r20, r24
     c00:	8a 81       	ldd	r24, Y+2	; 0x02
     c02:	28 2f       	mov	r18, r24
     c04:	30 e0       	ldi	r19, 0x00	; 0
     c06:	81 e0       	ldi	r24, 0x01	; 1
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	02 2e       	mov	r0, r18
     c0c:	02 c0       	rjmp	.+4      	; 0xc12 <DIO_voidSetPinDirection+0x7e>
     c0e:	88 0f       	add	r24, r24
     c10:	99 1f       	adc	r25, r25
     c12:	0a 94       	dec	r0
     c14:	e2 f7       	brpl	.-8      	; 0xc0e <DIO_voidSetPinDirection+0x7a>
     c16:	84 2b       	or	r24, r20
     c18:	8c 93       	st	X, r24
     c1a:	af c0       	rjmp	.+350    	; 0xd7a <DIO_voidSetPinDirection+0x1e6>
			case 1: SET_BIT(DDRB,PinId); break;
     c1c:	a7 e3       	ldi	r26, 0x37	; 55
     c1e:	b0 e0       	ldi	r27, 0x00	; 0
     c20:	e7 e3       	ldi	r30, 0x37	; 55
     c22:	f0 e0       	ldi	r31, 0x00	; 0
     c24:	80 81       	ld	r24, Z
     c26:	48 2f       	mov	r20, r24
     c28:	8a 81       	ldd	r24, Y+2	; 0x02
     c2a:	28 2f       	mov	r18, r24
     c2c:	30 e0       	ldi	r19, 0x00	; 0
     c2e:	81 e0       	ldi	r24, 0x01	; 1
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	02 2e       	mov	r0, r18
     c34:	02 c0       	rjmp	.+4      	; 0xc3a <DIO_voidSetPinDirection+0xa6>
     c36:	88 0f       	add	r24, r24
     c38:	99 1f       	adc	r25, r25
     c3a:	0a 94       	dec	r0
     c3c:	e2 f7       	brpl	.-8      	; 0xc36 <DIO_voidSetPinDirection+0xa2>
     c3e:	84 2b       	or	r24, r20
     c40:	8c 93       	st	X, r24
     c42:	9b c0       	rjmp	.+310    	; 0xd7a <DIO_voidSetPinDirection+0x1e6>
			case 2: SET_BIT(DDRC,PinId); break;
     c44:	a4 e3       	ldi	r26, 0x34	; 52
     c46:	b0 e0       	ldi	r27, 0x00	; 0
     c48:	e4 e3       	ldi	r30, 0x34	; 52
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	80 81       	ld	r24, Z
     c4e:	48 2f       	mov	r20, r24
     c50:	8a 81       	ldd	r24, Y+2	; 0x02
     c52:	28 2f       	mov	r18, r24
     c54:	30 e0       	ldi	r19, 0x00	; 0
     c56:	81 e0       	ldi	r24, 0x01	; 1
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	02 2e       	mov	r0, r18
     c5c:	02 c0       	rjmp	.+4      	; 0xc62 <DIO_voidSetPinDirection+0xce>
     c5e:	88 0f       	add	r24, r24
     c60:	99 1f       	adc	r25, r25
     c62:	0a 94       	dec	r0
     c64:	e2 f7       	brpl	.-8      	; 0xc5e <DIO_voidSetPinDirection+0xca>
     c66:	84 2b       	or	r24, r20
     c68:	8c 93       	st	X, r24
     c6a:	87 c0       	rjmp	.+270    	; 0xd7a <DIO_voidSetPinDirection+0x1e6>
			case 3: SET_BIT(DDRD,PinId); break;
     c6c:	a1 e3       	ldi	r26, 0x31	; 49
     c6e:	b0 e0       	ldi	r27, 0x00	; 0
     c70:	e1 e3       	ldi	r30, 0x31	; 49
     c72:	f0 e0       	ldi	r31, 0x00	; 0
     c74:	80 81       	ld	r24, Z
     c76:	48 2f       	mov	r20, r24
     c78:	8a 81       	ldd	r24, Y+2	; 0x02
     c7a:	28 2f       	mov	r18, r24
     c7c:	30 e0       	ldi	r19, 0x00	; 0
     c7e:	81 e0       	ldi	r24, 0x01	; 1
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	02 2e       	mov	r0, r18
     c84:	02 c0       	rjmp	.+4      	; 0xc8a <DIO_voidSetPinDirection+0xf6>
     c86:	88 0f       	add	r24, r24
     c88:	99 1f       	adc	r25, r25
     c8a:	0a 94       	dec	r0
     c8c:	e2 f7       	brpl	.-8      	; 0xc86 <DIO_voidSetPinDirection+0xf2>
     c8e:	84 2b       	or	r24, r20
     c90:	8c 93       	st	X, r24
     c92:	73 c0       	rjmp	.+230    	; 0xd7a <DIO_voidSetPinDirection+0x1e6>
		}
	}
	else
	{
		switch(PortId)
     c94:	89 81       	ldd	r24, Y+1	; 0x01
     c96:	28 2f       	mov	r18, r24
     c98:	30 e0       	ldi	r19, 0x00	; 0
     c9a:	3d 83       	std	Y+5, r19	; 0x05
     c9c:	2c 83       	std	Y+4, r18	; 0x04
     c9e:	8c 81       	ldd	r24, Y+4	; 0x04
     ca0:	9d 81       	ldd	r25, Y+5	; 0x05
     ca2:	81 30       	cpi	r24, 0x01	; 1
     ca4:	91 05       	cpc	r25, r1
     ca6:	59 f1       	breq	.+86     	; 0xcfe <DIO_voidSetPinDirection+0x16a>
     ca8:	2c 81       	ldd	r18, Y+4	; 0x04
     caa:	3d 81       	ldd	r19, Y+5	; 0x05
     cac:	22 30       	cpi	r18, 0x02	; 2
     cae:	31 05       	cpc	r19, r1
     cb0:	2c f4       	brge	.+10     	; 0xcbc <DIO_voidSetPinDirection+0x128>
     cb2:	8c 81       	ldd	r24, Y+4	; 0x04
     cb4:	9d 81       	ldd	r25, Y+5	; 0x05
     cb6:	00 97       	sbiw	r24, 0x00	; 0
     cb8:	69 f0       	breq	.+26     	; 0xcd4 <DIO_voidSetPinDirection+0x140>
     cba:	5f c0       	rjmp	.+190    	; 0xd7a <DIO_voidSetPinDirection+0x1e6>
     cbc:	2c 81       	ldd	r18, Y+4	; 0x04
     cbe:	3d 81       	ldd	r19, Y+5	; 0x05
     cc0:	22 30       	cpi	r18, 0x02	; 2
     cc2:	31 05       	cpc	r19, r1
     cc4:	89 f1       	breq	.+98     	; 0xd28 <DIO_voidSetPinDirection+0x194>
     cc6:	8c 81       	ldd	r24, Y+4	; 0x04
     cc8:	9d 81       	ldd	r25, Y+5	; 0x05
     cca:	83 30       	cpi	r24, 0x03	; 3
     ccc:	91 05       	cpc	r25, r1
     cce:	09 f4       	brne	.+2      	; 0xcd2 <DIO_voidSetPinDirection+0x13e>
     cd0:	40 c0       	rjmp	.+128    	; 0xd52 <DIO_voidSetPinDirection+0x1be>
     cd2:	53 c0       	rjmp	.+166    	; 0xd7a <DIO_voidSetPinDirection+0x1e6>
		{
			case 0: CLR_BIT(DDRA,PinId); break;
     cd4:	aa e3       	ldi	r26, 0x3A	; 58
     cd6:	b0 e0       	ldi	r27, 0x00	; 0
     cd8:	ea e3       	ldi	r30, 0x3A	; 58
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	80 81       	ld	r24, Z
     cde:	48 2f       	mov	r20, r24
     ce0:	8a 81       	ldd	r24, Y+2	; 0x02
     ce2:	28 2f       	mov	r18, r24
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	81 e0       	ldi	r24, 0x01	; 1
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	02 2e       	mov	r0, r18
     cec:	02 c0       	rjmp	.+4      	; 0xcf2 <DIO_voidSetPinDirection+0x15e>
     cee:	88 0f       	add	r24, r24
     cf0:	99 1f       	adc	r25, r25
     cf2:	0a 94       	dec	r0
     cf4:	e2 f7       	brpl	.-8      	; 0xcee <DIO_voidSetPinDirection+0x15a>
     cf6:	80 95       	com	r24
     cf8:	84 23       	and	r24, r20
     cfa:	8c 93       	st	X, r24
     cfc:	3e c0       	rjmp	.+124    	; 0xd7a <DIO_voidSetPinDirection+0x1e6>
			case 1: CLR_BIT(DDRB,PinId); break;
     cfe:	a7 e3       	ldi	r26, 0x37	; 55
     d00:	b0 e0       	ldi	r27, 0x00	; 0
     d02:	e7 e3       	ldi	r30, 0x37	; 55
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	80 81       	ld	r24, Z
     d08:	48 2f       	mov	r20, r24
     d0a:	8a 81       	ldd	r24, Y+2	; 0x02
     d0c:	28 2f       	mov	r18, r24
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	02 2e       	mov	r0, r18
     d16:	02 c0       	rjmp	.+4      	; 0xd1c <DIO_voidSetPinDirection+0x188>
     d18:	88 0f       	add	r24, r24
     d1a:	99 1f       	adc	r25, r25
     d1c:	0a 94       	dec	r0
     d1e:	e2 f7       	brpl	.-8      	; 0xd18 <DIO_voidSetPinDirection+0x184>
     d20:	80 95       	com	r24
     d22:	84 23       	and	r24, r20
     d24:	8c 93       	st	X, r24
     d26:	29 c0       	rjmp	.+82     	; 0xd7a <DIO_voidSetPinDirection+0x1e6>
			case 2: CLR_BIT(DDRC,PinId); break;
     d28:	a4 e3       	ldi	r26, 0x34	; 52
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	e4 e3       	ldi	r30, 0x34	; 52
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	48 2f       	mov	r20, r24
     d34:	8a 81       	ldd	r24, Y+2	; 0x02
     d36:	28 2f       	mov	r18, r24
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	02 2e       	mov	r0, r18
     d40:	02 c0       	rjmp	.+4      	; 0xd46 <DIO_voidSetPinDirection+0x1b2>
     d42:	88 0f       	add	r24, r24
     d44:	99 1f       	adc	r25, r25
     d46:	0a 94       	dec	r0
     d48:	e2 f7       	brpl	.-8      	; 0xd42 <DIO_voidSetPinDirection+0x1ae>
     d4a:	80 95       	com	r24
     d4c:	84 23       	and	r24, r20
     d4e:	8c 93       	st	X, r24
     d50:	14 c0       	rjmp	.+40     	; 0xd7a <DIO_voidSetPinDirection+0x1e6>
			case 3: CLR_BIT(DDRD,PinId); break;
     d52:	a1 e3       	ldi	r26, 0x31	; 49
     d54:	b0 e0       	ldi	r27, 0x00	; 0
     d56:	e1 e3       	ldi	r30, 0x31	; 49
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	80 81       	ld	r24, Z
     d5c:	48 2f       	mov	r20, r24
     d5e:	8a 81       	ldd	r24, Y+2	; 0x02
     d60:	28 2f       	mov	r18, r24
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	81 e0       	ldi	r24, 0x01	; 1
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	02 2e       	mov	r0, r18
     d6a:	02 c0       	rjmp	.+4      	; 0xd70 <DIO_voidSetPinDirection+0x1dc>
     d6c:	88 0f       	add	r24, r24
     d6e:	99 1f       	adc	r25, r25
     d70:	0a 94       	dec	r0
     d72:	e2 f7       	brpl	.-8      	; 0xd6c <DIO_voidSetPinDirection+0x1d8>
     d74:	80 95       	com	r24
     d76:	84 23       	and	r24, r20
     d78:	8c 93       	st	X, r24
		}
	}
}
     d7a:	27 96       	adiw	r28, 0x07	; 7
     d7c:	0f b6       	in	r0, 0x3f	; 63
     d7e:	f8 94       	cli
     d80:	de bf       	out	0x3e, r29	; 62
     d82:	0f be       	out	0x3f, r0	; 63
     d84:	cd bf       	out	0x3d, r28	; 61
     d86:	cf 91       	pop	r28
     d88:	df 91       	pop	r29
     d8a:	08 95       	ret

00000d8c <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(u8 PortId,u8 PinId,u8 Value)
{
     d8c:	df 93       	push	r29
     d8e:	cf 93       	push	r28
     d90:	cd b7       	in	r28, 0x3d	; 61
     d92:	de b7       	in	r29, 0x3e	; 62
     d94:	27 97       	sbiw	r28, 0x07	; 7
     d96:	0f b6       	in	r0, 0x3f	; 63
     d98:	f8 94       	cli
     d9a:	de bf       	out	0x3e, r29	; 62
     d9c:	0f be       	out	0x3f, r0	; 63
     d9e:	cd bf       	out	0x3d, r28	; 61
     da0:	89 83       	std	Y+1, r24	; 0x01
     da2:	6a 83       	std	Y+2, r22	; 0x02
     da4:	4b 83       	std	Y+3, r20	; 0x03
	if(Value==High)
     da6:	8b 81       	ldd	r24, Y+3	; 0x03
     da8:	81 30       	cpi	r24, 0x01	; 1
     daa:	09 f0       	breq	.+2      	; 0xdae <DIO_voidSetPinValue+0x22>
     dac:	6f c0       	rjmp	.+222    	; 0xe8c <DIO_voidSetPinValue+0x100>
	{
		switch(PortId)
     dae:	89 81       	ldd	r24, Y+1	; 0x01
     db0:	28 2f       	mov	r18, r24
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	3f 83       	std	Y+7, r19	; 0x07
     db6:	2e 83       	std	Y+6, r18	; 0x06
     db8:	8e 81       	ldd	r24, Y+6	; 0x06
     dba:	9f 81       	ldd	r25, Y+7	; 0x07
     dbc:	81 30       	cpi	r24, 0x01	; 1
     dbe:	91 05       	cpc	r25, r1
     dc0:	49 f1       	breq	.+82     	; 0xe14 <DIO_voidSetPinValue+0x88>
     dc2:	2e 81       	ldd	r18, Y+6	; 0x06
     dc4:	3f 81       	ldd	r19, Y+7	; 0x07
     dc6:	22 30       	cpi	r18, 0x02	; 2
     dc8:	31 05       	cpc	r19, r1
     dca:	2c f4       	brge	.+10     	; 0xdd6 <DIO_voidSetPinValue+0x4a>
     dcc:	8e 81       	ldd	r24, Y+6	; 0x06
     dce:	9f 81       	ldd	r25, Y+7	; 0x07
     dd0:	00 97       	sbiw	r24, 0x00	; 0
     dd2:	61 f0       	breq	.+24     	; 0xdec <DIO_voidSetPinValue+0x60>
     dd4:	ce c0       	rjmp	.+412    	; 0xf72 <DIO_voidSetPinValue+0x1e6>
     dd6:	2e 81       	ldd	r18, Y+6	; 0x06
     dd8:	3f 81       	ldd	r19, Y+7	; 0x07
     dda:	22 30       	cpi	r18, 0x02	; 2
     ddc:	31 05       	cpc	r19, r1
     dde:	71 f1       	breq	.+92     	; 0xe3c <DIO_voidSetPinValue+0xb0>
     de0:	8e 81       	ldd	r24, Y+6	; 0x06
     de2:	9f 81       	ldd	r25, Y+7	; 0x07
     de4:	83 30       	cpi	r24, 0x03	; 3
     de6:	91 05       	cpc	r25, r1
     de8:	e9 f1       	breq	.+122    	; 0xe64 <DIO_voidSetPinValue+0xd8>
     dea:	c3 c0       	rjmp	.+390    	; 0xf72 <DIO_voidSetPinValue+0x1e6>
		{
			case 0: SET_BIT(PORTA,PinId); break;
     dec:	ab e3       	ldi	r26, 0x3B	; 59
     dee:	b0 e0       	ldi	r27, 0x00	; 0
     df0:	eb e3       	ldi	r30, 0x3B	; 59
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	80 81       	ld	r24, Z
     df6:	48 2f       	mov	r20, r24
     df8:	8a 81       	ldd	r24, Y+2	; 0x02
     dfa:	28 2f       	mov	r18, r24
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	02 2e       	mov	r0, r18
     e04:	02 c0       	rjmp	.+4      	; 0xe0a <DIO_voidSetPinValue+0x7e>
     e06:	88 0f       	add	r24, r24
     e08:	99 1f       	adc	r25, r25
     e0a:	0a 94       	dec	r0
     e0c:	e2 f7       	brpl	.-8      	; 0xe06 <DIO_voidSetPinValue+0x7a>
     e0e:	84 2b       	or	r24, r20
     e10:	8c 93       	st	X, r24
     e12:	af c0       	rjmp	.+350    	; 0xf72 <DIO_voidSetPinValue+0x1e6>
			case 1: SET_BIT(PORTB,PinId); break;
     e14:	a8 e3       	ldi	r26, 0x38	; 56
     e16:	b0 e0       	ldi	r27, 0x00	; 0
     e18:	e8 e3       	ldi	r30, 0x38	; 56
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	48 2f       	mov	r20, r24
     e20:	8a 81       	ldd	r24, Y+2	; 0x02
     e22:	28 2f       	mov	r18, r24
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	02 2e       	mov	r0, r18
     e2c:	02 c0       	rjmp	.+4      	; 0xe32 <DIO_voidSetPinValue+0xa6>
     e2e:	88 0f       	add	r24, r24
     e30:	99 1f       	adc	r25, r25
     e32:	0a 94       	dec	r0
     e34:	e2 f7       	brpl	.-8      	; 0xe2e <DIO_voidSetPinValue+0xa2>
     e36:	84 2b       	or	r24, r20
     e38:	8c 93       	st	X, r24
     e3a:	9b c0       	rjmp	.+310    	; 0xf72 <DIO_voidSetPinValue+0x1e6>
			case 2: SET_BIT(PORTC,PinId); break;
     e3c:	a5 e3       	ldi	r26, 0x35	; 53
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	e5 e3       	ldi	r30, 0x35	; 53
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	48 2f       	mov	r20, r24
     e48:	8a 81       	ldd	r24, Y+2	; 0x02
     e4a:	28 2f       	mov	r18, r24
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	02 2e       	mov	r0, r18
     e54:	02 c0       	rjmp	.+4      	; 0xe5a <DIO_voidSetPinValue+0xce>
     e56:	88 0f       	add	r24, r24
     e58:	99 1f       	adc	r25, r25
     e5a:	0a 94       	dec	r0
     e5c:	e2 f7       	brpl	.-8      	; 0xe56 <DIO_voidSetPinValue+0xca>
     e5e:	84 2b       	or	r24, r20
     e60:	8c 93       	st	X, r24
     e62:	87 c0       	rjmp	.+270    	; 0xf72 <DIO_voidSetPinValue+0x1e6>
			case 3: SET_BIT(PORTD,PinId); break;
     e64:	a2 e3       	ldi	r26, 0x32	; 50
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	e2 e3       	ldi	r30, 0x32	; 50
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	48 2f       	mov	r20, r24
     e70:	8a 81       	ldd	r24, Y+2	; 0x02
     e72:	28 2f       	mov	r18, r24
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	02 2e       	mov	r0, r18
     e7c:	02 c0       	rjmp	.+4      	; 0xe82 <DIO_voidSetPinValue+0xf6>
     e7e:	88 0f       	add	r24, r24
     e80:	99 1f       	adc	r25, r25
     e82:	0a 94       	dec	r0
     e84:	e2 f7       	brpl	.-8      	; 0xe7e <DIO_voidSetPinValue+0xf2>
     e86:	84 2b       	or	r24, r20
     e88:	8c 93       	st	X, r24
     e8a:	73 c0       	rjmp	.+230    	; 0xf72 <DIO_voidSetPinValue+0x1e6>
		}
	}
	else
	{
		switch(PortId)
     e8c:	89 81       	ldd	r24, Y+1	; 0x01
     e8e:	28 2f       	mov	r18, r24
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	3d 83       	std	Y+5, r19	; 0x05
     e94:	2c 83       	std	Y+4, r18	; 0x04
     e96:	8c 81       	ldd	r24, Y+4	; 0x04
     e98:	9d 81       	ldd	r25, Y+5	; 0x05
     e9a:	81 30       	cpi	r24, 0x01	; 1
     e9c:	91 05       	cpc	r25, r1
     e9e:	59 f1       	breq	.+86     	; 0xef6 <DIO_voidSetPinValue+0x16a>
     ea0:	2c 81       	ldd	r18, Y+4	; 0x04
     ea2:	3d 81       	ldd	r19, Y+5	; 0x05
     ea4:	22 30       	cpi	r18, 0x02	; 2
     ea6:	31 05       	cpc	r19, r1
     ea8:	2c f4       	brge	.+10     	; 0xeb4 <DIO_voidSetPinValue+0x128>
     eaa:	8c 81       	ldd	r24, Y+4	; 0x04
     eac:	9d 81       	ldd	r25, Y+5	; 0x05
     eae:	00 97       	sbiw	r24, 0x00	; 0
     eb0:	69 f0       	breq	.+26     	; 0xecc <DIO_voidSetPinValue+0x140>
     eb2:	5f c0       	rjmp	.+190    	; 0xf72 <DIO_voidSetPinValue+0x1e6>
     eb4:	2c 81       	ldd	r18, Y+4	; 0x04
     eb6:	3d 81       	ldd	r19, Y+5	; 0x05
     eb8:	22 30       	cpi	r18, 0x02	; 2
     eba:	31 05       	cpc	r19, r1
     ebc:	89 f1       	breq	.+98     	; 0xf20 <DIO_voidSetPinValue+0x194>
     ebe:	8c 81       	ldd	r24, Y+4	; 0x04
     ec0:	9d 81       	ldd	r25, Y+5	; 0x05
     ec2:	83 30       	cpi	r24, 0x03	; 3
     ec4:	91 05       	cpc	r25, r1
     ec6:	09 f4       	brne	.+2      	; 0xeca <DIO_voidSetPinValue+0x13e>
     ec8:	40 c0       	rjmp	.+128    	; 0xf4a <DIO_voidSetPinValue+0x1be>
     eca:	53 c0       	rjmp	.+166    	; 0xf72 <DIO_voidSetPinValue+0x1e6>
		{
			case 0: CLR_BIT(PORTA,PinId); break;
     ecc:	ab e3       	ldi	r26, 0x3B	; 59
     ece:	b0 e0       	ldi	r27, 0x00	; 0
     ed0:	eb e3       	ldi	r30, 0x3B	; 59
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	80 81       	ld	r24, Z
     ed6:	48 2f       	mov	r20, r24
     ed8:	8a 81       	ldd	r24, Y+2	; 0x02
     eda:	28 2f       	mov	r18, r24
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	02 2e       	mov	r0, r18
     ee4:	02 c0       	rjmp	.+4      	; 0xeea <DIO_voidSetPinValue+0x15e>
     ee6:	88 0f       	add	r24, r24
     ee8:	99 1f       	adc	r25, r25
     eea:	0a 94       	dec	r0
     eec:	e2 f7       	brpl	.-8      	; 0xee6 <DIO_voidSetPinValue+0x15a>
     eee:	80 95       	com	r24
     ef0:	84 23       	and	r24, r20
     ef2:	8c 93       	st	X, r24
     ef4:	3e c0       	rjmp	.+124    	; 0xf72 <DIO_voidSetPinValue+0x1e6>
			case 1: CLR_BIT(PORTB,PinId); break;
     ef6:	a8 e3       	ldi	r26, 0x38	; 56
     ef8:	b0 e0       	ldi	r27, 0x00	; 0
     efa:	e8 e3       	ldi	r30, 0x38	; 56
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	80 81       	ld	r24, Z
     f00:	48 2f       	mov	r20, r24
     f02:	8a 81       	ldd	r24, Y+2	; 0x02
     f04:	28 2f       	mov	r18, r24
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	02 2e       	mov	r0, r18
     f0e:	02 c0       	rjmp	.+4      	; 0xf14 <DIO_voidSetPinValue+0x188>
     f10:	88 0f       	add	r24, r24
     f12:	99 1f       	adc	r25, r25
     f14:	0a 94       	dec	r0
     f16:	e2 f7       	brpl	.-8      	; 0xf10 <DIO_voidSetPinValue+0x184>
     f18:	80 95       	com	r24
     f1a:	84 23       	and	r24, r20
     f1c:	8c 93       	st	X, r24
     f1e:	29 c0       	rjmp	.+82     	; 0xf72 <DIO_voidSetPinValue+0x1e6>
			case 2: CLR_BIT(PORTC,PinId); break;
     f20:	a5 e3       	ldi	r26, 0x35	; 53
     f22:	b0 e0       	ldi	r27, 0x00	; 0
     f24:	e5 e3       	ldi	r30, 0x35	; 53
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	80 81       	ld	r24, Z
     f2a:	48 2f       	mov	r20, r24
     f2c:	8a 81       	ldd	r24, Y+2	; 0x02
     f2e:	28 2f       	mov	r18, r24
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	02 2e       	mov	r0, r18
     f38:	02 c0       	rjmp	.+4      	; 0xf3e <DIO_voidSetPinValue+0x1b2>
     f3a:	88 0f       	add	r24, r24
     f3c:	99 1f       	adc	r25, r25
     f3e:	0a 94       	dec	r0
     f40:	e2 f7       	brpl	.-8      	; 0xf3a <DIO_voidSetPinValue+0x1ae>
     f42:	80 95       	com	r24
     f44:	84 23       	and	r24, r20
     f46:	8c 93       	st	X, r24
     f48:	14 c0       	rjmp	.+40     	; 0xf72 <DIO_voidSetPinValue+0x1e6>
			case 3: CLR_BIT(PORTD,PinId); break;
     f4a:	a2 e3       	ldi	r26, 0x32	; 50
     f4c:	b0 e0       	ldi	r27, 0x00	; 0
     f4e:	e2 e3       	ldi	r30, 0x32	; 50
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	48 2f       	mov	r20, r24
     f56:	8a 81       	ldd	r24, Y+2	; 0x02
     f58:	28 2f       	mov	r18, r24
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	02 2e       	mov	r0, r18
     f62:	02 c0       	rjmp	.+4      	; 0xf68 <DIO_voidSetPinValue+0x1dc>
     f64:	88 0f       	add	r24, r24
     f66:	99 1f       	adc	r25, r25
     f68:	0a 94       	dec	r0
     f6a:	e2 f7       	brpl	.-8      	; 0xf64 <DIO_voidSetPinValue+0x1d8>
     f6c:	80 95       	com	r24
     f6e:	84 23       	and	r24, r20
     f70:	8c 93       	st	X, r24
		}
	}
}
     f72:	27 96       	adiw	r28, 0x07	; 7
     f74:	0f b6       	in	r0, 0x3f	; 63
     f76:	f8 94       	cli
     f78:	de bf       	out	0x3e, r29	; 62
     f7a:	0f be       	out	0x3f, r0	; 63
     f7c:	cd bf       	out	0x3d, r28	; 61
     f7e:	cf 91       	pop	r28
     f80:	df 91       	pop	r29
     f82:	08 95       	ret

00000f84 <DIO_voidTogglePin>:

void DIO_voidTogglePin (u8 PortId,u8 PinId)
{
     f84:	df 93       	push	r29
     f86:	cf 93       	push	r28
     f88:	00 d0       	rcall	.+0      	; 0xf8a <DIO_voidTogglePin+0x6>
     f8a:	00 d0       	rcall	.+0      	; 0xf8c <DIO_voidTogglePin+0x8>
     f8c:	cd b7       	in	r28, 0x3d	; 61
     f8e:	de b7       	in	r29, 0x3e	; 62
     f90:	89 83       	std	Y+1, r24	; 0x01
     f92:	6a 83       	std	Y+2, r22	; 0x02
	switch(PortId)
     f94:	89 81       	ldd	r24, Y+1	; 0x01
     f96:	28 2f       	mov	r18, r24
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	3c 83       	std	Y+4, r19	; 0x04
     f9c:	2b 83       	std	Y+3, r18	; 0x03
     f9e:	8b 81       	ldd	r24, Y+3	; 0x03
     fa0:	9c 81       	ldd	r25, Y+4	; 0x04
     fa2:	81 30       	cpi	r24, 0x01	; 1
     fa4:	91 05       	cpc	r25, r1
     fa6:	49 f1       	breq	.+82     	; 0xffa <DIO_voidTogglePin+0x76>
     fa8:	2b 81       	ldd	r18, Y+3	; 0x03
     faa:	3c 81       	ldd	r19, Y+4	; 0x04
     fac:	22 30       	cpi	r18, 0x02	; 2
     fae:	31 05       	cpc	r19, r1
     fb0:	2c f4       	brge	.+10     	; 0xfbc <DIO_voidTogglePin+0x38>
     fb2:	8b 81       	ldd	r24, Y+3	; 0x03
     fb4:	9c 81       	ldd	r25, Y+4	; 0x04
     fb6:	00 97       	sbiw	r24, 0x00	; 0
     fb8:	61 f0       	breq	.+24     	; 0xfd2 <DIO_voidTogglePin+0x4e>
     fba:	5a c0       	rjmp	.+180    	; 0x1070 <DIO_voidTogglePin+0xec>
     fbc:	2b 81       	ldd	r18, Y+3	; 0x03
     fbe:	3c 81       	ldd	r19, Y+4	; 0x04
     fc0:	22 30       	cpi	r18, 0x02	; 2
     fc2:	31 05       	cpc	r19, r1
     fc4:	71 f1       	breq	.+92     	; 0x1022 <DIO_voidTogglePin+0x9e>
     fc6:	8b 81       	ldd	r24, Y+3	; 0x03
     fc8:	9c 81       	ldd	r25, Y+4	; 0x04
     fca:	83 30       	cpi	r24, 0x03	; 3
     fcc:	91 05       	cpc	r25, r1
     fce:	e9 f1       	breq	.+122    	; 0x104a <DIO_voidTogglePin+0xc6>
     fd0:	4f c0       	rjmp	.+158    	; 0x1070 <DIO_voidTogglePin+0xec>
	{
		case 0: TOG_BIT(PORTA,PinId); break;
     fd2:	ab e3       	ldi	r26, 0x3B	; 59
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	eb e3       	ldi	r30, 0x3B	; 59
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	48 2f       	mov	r20, r24
     fde:	8a 81       	ldd	r24, Y+2	; 0x02
     fe0:	28 2f       	mov	r18, r24
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	02 2e       	mov	r0, r18
     fea:	02 c0       	rjmp	.+4      	; 0xff0 <DIO_voidTogglePin+0x6c>
     fec:	88 0f       	add	r24, r24
     fee:	99 1f       	adc	r25, r25
     ff0:	0a 94       	dec	r0
     ff2:	e2 f7       	brpl	.-8      	; 0xfec <DIO_voidTogglePin+0x68>
     ff4:	84 27       	eor	r24, r20
     ff6:	8c 93       	st	X, r24
     ff8:	3b c0       	rjmp	.+118    	; 0x1070 <DIO_voidTogglePin+0xec>
		case 1: TOG_BIT(PORTB,PinId); break;
     ffa:	a8 e3       	ldi	r26, 0x38	; 56
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	e8 e3       	ldi	r30, 0x38	; 56
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	48 2f       	mov	r20, r24
    1006:	8a 81       	ldd	r24, Y+2	; 0x02
    1008:	28 2f       	mov	r18, r24
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	02 2e       	mov	r0, r18
    1012:	02 c0       	rjmp	.+4      	; 0x1018 <DIO_voidTogglePin+0x94>
    1014:	88 0f       	add	r24, r24
    1016:	99 1f       	adc	r25, r25
    1018:	0a 94       	dec	r0
    101a:	e2 f7       	brpl	.-8      	; 0x1014 <DIO_voidTogglePin+0x90>
    101c:	84 27       	eor	r24, r20
    101e:	8c 93       	st	X, r24
    1020:	27 c0       	rjmp	.+78     	; 0x1070 <DIO_voidTogglePin+0xec>
		case 2: TOG_BIT(PORTC,PinId); break;
    1022:	a5 e3       	ldi	r26, 0x35	; 53
    1024:	b0 e0       	ldi	r27, 0x00	; 0
    1026:	e5 e3       	ldi	r30, 0x35	; 53
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	48 2f       	mov	r20, r24
    102e:	8a 81       	ldd	r24, Y+2	; 0x02
    1030:	28 2f       	mov	r18, r24
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	02 2e       	mov	r0, r18
    103a:	02 c0       	rjmp	.+4      	; 0x1040 <DIO_voidTogglePin+0xbc>
    103c:	88 0f       	add	r24, r24
    103e:	99 1f       	adc	r25, r25
    1040:	0a 94       	dec	r0
    1042:	e2 f7       	brpl	.-8      	; 0x103c <DIO_voidTogglePin+0xb8>
    1044:	84 27       	eor	r24, r20
    1046:	8c 93       	st	X, r24
    1048:	13 c0       	rjmp	.+38     	; 0x1070 <DIO_voidTogglePin+0xec>
		case 3: TOG_BIT(PORTD,PinId); break;
    104a:	a2 e3       	ldi	r26, 0x32	; 50
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	e2 e3       	ldi	r30, 0x32	; 50
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	48 2f       	mov	r20, r24
    1056:	8a 81       	ldd	r24, Y+2	; 0x02
    1058:	28 2f       	mov	r18, r24
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	02 2e       	mov	r0, r18
    1062:	02 c0       	rjmp	.+4      	; 0x1068 <DIO_voidTogglePin+0xe4>
    1064:	88 0f       	add	r24, r24
    1066:	99 1f       	adc	r25, r25
    1068:	0a 94       	dec	r0
    106a:	e2 f7       	brpl	.-8      	; 0x1064 <DIO_voidTogglePin+0xe0>
    106c:	84 27       	eor	r24, r20
    106e:	8c 93       	st	X, r24
	}
}
    1070:	0f 90       	pop	r0
    1072:	0f 90       	pop	r0
    1074:	0f 90       	pop	r0
    1076:	0f 90       	pop	r0
    1078:	cf 91       	pop	r28
    107a:	df 91       	pop	r29
    107c:	08 95       	ret

0000107e <DIO_voidSetPortDirection>:

void DIO_voidSetPortDirection (u8 PortId,u8 Direction)
{
    107e:	df 93       	push	r29
    1080:	cf 93       	push	r28
    1082:	00 d0       	rcall	.+0      	; 0x1084 <DIO_voidSetPortDirection+0x6>
    1084:	00 d0       	rcall	.+0      	; 0x1086 <DIO_voidSetPortDirection+0x8>
    1086:	00 d0       	rcall	.+0      	; 0x1088 <DIO_voidSetPortDirection+0xa>
    1088:	cd b7       	in	r28, 0x3d	; 61
    108a:	de b7       	in	r29, 0x3e	; 62
    108c:	89 83       	std	Y+1, r24	; 0x01
    108e:	6a 83       	std	Y+2, r22	; 0x02
	if(Direction==Output)
    1090:	8a 81       	ldd	r24, Y+2	; 0x02
    1092:	81 30       	cpi	r24, 0x01	; 1
    1094:	99 f5       	brne	.+102    	; 0x10fc <DIO_voidSetPortDirection+0x7e>
	{
		switch(PortId)
    1096:	89 81       	ldd	r24, Y+1	; 0x01
    1098:	28 2f       	mov	r18, r24
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	3e 83       	std	Y+6, r19	; 0x06
    109e:	2d 83       	std	Y+5, r18	; 0x05
    10a0:	8d 81       	ldd	r24, Y+5	; 0x05
    10a2:	9e 81       	ldd	r25, Y+6	; 0x06
    10a4:	81 30       	cpi	r24, 0x01	; 1
    10a6:	91 05       	cpc	r25, r1
    10a8:	d1 f0       	breq	.+52     	; 0x10de <DIO_voidSetPortDirection+0x60>
    10aa:	2d 81       	ldd	r18, Y+5	; 0x05
    10ac:	3e 81       	ldd	r19, Y+6	; 0x06
    10ae:	22 30       	cpi	r18, 0x02	; 2
    10b0:	31 05       	cpc	r19, r1
    10b2:	2c f4       	brge	.+10     	; 0x10be <DIO_voidSetPortDirection+0x40>
    10b4:	8d 81       	ldd	r24, Y+5	; 0x05
    10b6:	9e 81       	ldd	r25, Y+6	; 0x06
    10b8:	00 97       	sbiw	r24, 0x00	; 0
    10ba:	61 f0       	breq	.+24     	; 0x10d4 <DIO_voidSetPortDirection+0x56>
    10bc:	4d c0       	rjmp	.+154    	; 0x1158 <DIO_voidSetPortDirection+0xda>
    10be:	2d 81       	ldd	r18, Y+5	; 0x05
    10c0:	3e 81       	ldd	r19, Y+6	; 0x06
    10c2:	22 30       	cpi	r18, 0x02	; 2
    10c4:	31 05       	cpc	r19, r1
    10c6:	81 f0       	breq	.+32     	; 0x10e8 <DIO_voidSetPortDirection+0x6a>
    10c8:	8d 81       	ldd	r24, Y+5	; 0x05
    10ca:	9e 81       	ldd	r25, Y+6	; 0x06
    10cc:	83 30       	cpi	r24, 0x03	; 3
    10ce:	91 05       	cpc	r25, r1
    10d0:	81 f0       	breq	.+32     	; 0x10f2 <DIO_voidSetPortDirection+0x74>
    10d2:	42 c0       	rjmp	.+132    	; 0x1158 <DIO_voidSetPortDirection+0xda>
		{
			case 0: SET_BYTE(DDRA,0xFF); break;
    10d4:	ea e3       	ldi	r30, 0x3A	; 58
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	8f ef       	ldi	r24, 0xFF	; 255
    10da:	80 83       	st	Z, r24
    10dc:	3d c0       	rjmp	.+122    	; 0x1158 <DIO_voidSetPortDirection+0xda>
			case 1: SET_BYTE(DDRB,0xFF); break;
    10de:	e7 e3       	ldi	r30, 0x37	; 55
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	8f ef       	ldi	r24, 0xFF	; 255
    10e4:	80 83       	st	Z, r24
    10e6:	38 c0       	rjmp	.+112    	; 0x1158 <DIO_voidSetPortDirection+0xda>
			case 2: SET_BYTE(DDRC,0xFF); break;
    10e8:	e4 e3       	ldi	r30, 0x34	; 52
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	8f ef       	ldi	r24, 0xFF	; 255
    10ee:	80 83       	st	Z, r24
    10f0:	33 c0       	rjmp	.+102    	; 0x1158 <DIO_voidSetPortDirection+0xda>
			case 3: SET_BYTE(DDRD,0xFF); break;
    10f2:	e1 e3       	ldi	r30, 0x31	; 49
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	8f ef       	ldi	r24, 0xFF	; 255
    10f8:	80 83       	st	Z, r24
    10fa:	2e c0       	rjmp	.+92     	; 0x1158 <DIO_voidSetPortDirection+0xda>
		}
	}
	else
	{
		switch(PortId)
    10fc:	89 81       	ldd	r24, Y+1	; 0x01
    10fe:	28 2f       	mov	r18, r24
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	3c 83       	std	Y+4, r19	; 0x04
    1104:	2b 83       	std	Y+3, r18	; 0x03
    1106:	8b 81       	ldd	r24, Y+3	; 0x03
    1108:	9c 81       	ldd	r25, Y+4	; 0x04
    110a:	81 30       	cpi	r24, 0x01	; 1
    110c:	91 05       	cpc	r25, r1
    110e:	c9 f0       	breq	.+50     	; 0x1142 <DIO_voidSetPortDirection+0xc4>
    1110:	2b 81       	ldd	r18, Y+3	; 0x03
    1112:	3c 81       	ldd	r19, Y+4	; 0x04
    1114:	22 30       	cpi	r18, 0x02	; 2
    1116:	31 05       	cpc	r19, r1
    1118:	2c f4       	brge	.+10     	; 0x1124 <DIO_voidSetPortDirection+0xa6>
    111a:	8b 81       	ldd	r24, Y+3	; 0x03
    111c:	9c 81       	ldd	r25, Y+4	; 0x04
    111e:	00 97       	sbiw	r24, 0x00	; 0
    1120:	61 f0       	breq	.+24     	; 0x113a <DIO_voidSetPortDirection+0xbc>
    1122:	1a c0       	rjmp	.+52     	; 0x1158 <DIO_voidSetPortDirection+0xda>
    1124:	2b 81       	ldd	r18, Y+3	; 0x03
    1126:	3c 81       	ldd	r19, Y+4	; 0x04
    1128:	22 30       	cpi	r18, 0x02	; 2
    112a:	31 05       	cpc	r19, r1
    112c:	71 f0       	breq	.+28     	; 0x114a <DIO_voidSetPortDirection+0xcc>
    112e:	8b 81       	ldd	r24, Y+3	; 0x03
    1130:	9c 81       	ldd	r25, Y+4	; 0x04
    1132:	83 30       	cpi	r24, 0x03	; 3
    1134:	91 05       	cpc	r25, r1
    1136:	69 f0       	breq	.+26     	; 0x1152 <DIO_voidSetPortDirection+0xd4>
    1138:	0f c0       	rjmp	.+30     	; 0x1158 <DIO_voidSetPortDirection+0xda>
		{
			case 0: SET_BYTE(DDRA,0x00); break;
    113a:	ea e3       	ldi	r30, 0x3A	; 58
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	10 82       	st	Z, r1
    1140:	0b c0       	rjmp	.+22     	; 0x1158 <DIO_voidSetPortDirection+0xda>
			case 1: SET_BYTE(DDRB,0x00); break;
    1142:	e7 e3       	ldi	r30, 0x37	; 55
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	10 82       	st	Z, r1
    1148:	07 c0       	rjmp	.+14     	; 0x1158 <DIO_voidSetPortDirection+0xda>
			case 2: SET_BYTE(DDRC,0x00); break;
    114a:	e4 e3       	ldi	r30, 0x34	; 52
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	10 82       	st	Z, r1
    1150:	03 c0       	rjmp	.+6      	; 0x1158 <DIO_voidSetPortDirection+0xda>
			case 3: SET_BYTE(DDRD,0x00); break;
    1152:	e1 e3       	ldi	r30, 0x31	; 49
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	10 82       	st	Z, r1
		}
	}
}
    1158:	26 96       	adiw	r28, 0x06	; 6
    115a:	0f b6       	in	r0, 0x3f	; 63
    115c:	f8 94       	cli
    115e:	de bf       	out	0x3e, r29	; 62
    1160:	0f be       	out	0x3f, r0	; 63
    1162:	cd bf       	out	0x3d, r28	; 61
    1164:	cf 91       	pop	r28
    1166:	df 91       	pop	r29
    1168:	08 95       	ret

0000116a <DIO_voidSetPortValue>:

void DIO_voidSetPortValue (u8 PortId,u8 Value)
{
    116a:	df 93       	push	r29
    116c:	cf 93       	push	r28
    116e:	00 d0       	rcall	.+0      	; 0x1170 <DIO_voidSetPortValue+0x6>
    1170:	00 d0       	rcall	.+0      	; 0x1172 <DIO_voidSetPortValue+0x8>
    1172:	cd b7       	in	r28, 0x3d	; 61
    1174:	de b7       	in	r29, 0x3e	; 62
    1176:	89 83       	std	Y+1, r24	; 0x01
    1178:	6a 83       	std	Y+2, r22	; 0x02
	switch(PortId)
    117a:	89 81       	ldd	r24, Y+1	; 0x01
    117c:	28 2f       	mov	r18, r24
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	3c 83       	std	Y+4, r19	; 0x04
    1182:	2b 83       	std	Y+3, r18	; 0x03
    1184:	8b 81       	ldd	r24, Y+3	; 0x03
    1186:	9c 81       	ldd	r25, Y+4	; 0x04
    1188:	81 30       	cpi	r24, 0x01	; 1
    118a:	91 05       	cpc	r25, r1
    118c:	d1 f0       	breq	.+52     	; 0x11c2 <DIO_voidSetPortValue+0x58>
    118e:	2b 81       	ldd	r18, Y+3	; 0x03
    1190:	3c 81       	ldd	r19, Y+4	; 0x04
    1192:	22 30       	cpi	r18, 0x02	; 2
    1194:	31 05       	cpc	r19, r1
    1196:	2c f4       	brge	.+10     	; 0x11a2 <DIO_voidSetPortValue+0x38>
    1198:	8b 81       	ldd	r24, Y+3	; 0x03
    119a:	9c 81       	ldd	r25, Y+4	; 0x04
    119c:	00 97       	sbiw	r24, 0x00	; 0
    119e:	61 f0       	breq	.+24     	; 0x11b8 <DIO_voidSetPortValue+0x4e>
    11a0:	1e c0       	rjmp	.+60     	; 0x11de <DIO_voidSetPortValue+0x74>
    11a2:	2b 81       	ldd	r18, Y+3	; 0x03
    11a4:	3c 81       	ldd	r19, Y+4	; 0x04
    11a6:	22 30       	cpi	r18, 0x02	; 2
    11a8:	31 05       	cpc	r19, r1
    11aa:	81 f0       	breq	.+32     	; 0x11cc <DIO_voidSetPortValue+0x62>
    11ac:	8b 81       	ldd	r24, Y+3	; 0x03
    11ae:	9c 81       	ldd	r25, Y+4	; 0x04
    11b0:	83 30       	cpi	r24, 0x03	; 3
    11b2:	91 05       	cpc	r25, r1
    11b4:	81 f0       	breq	.+32     	; 0x11d6 <DIO_voidSetPortValue+0x6c>
    11b6:	13 c0       	rjmp	.+38     	; 0x11de <DIO_voidSetPortValue+0x74>
	{
		case 0: SET_BYTE(PORTA,Value); break;
    11b8:	eb e3       	ldi	r30, 0x3B	; 59
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	8a 81       	ldd	r24, Y+2	; 0x02
    11be:	80 83       	st	Z, r24
    11c0:	0e c0       	rjmp	.+28     	; 0x11de <DIO_voidSetPortValue+0x74>
		case 1: SET_BYTE(PORTB,Value); break;
    11c2:	e8 e3       	ldi	r30, 0x38	; 56
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	8a 81       	ldd	r24, Y+2	; 0x02
    11c8:	80 83       	st	Z, r24
    11ca:	09 c0       	rjmp	.+18     	; 0x11de <DIO_voidSetPortValue+0x74>
		case 2: SET_BYTE(PORTC,Value); break;
    11cc:	e5 e3       	ldi	r30, 0x35	; 53
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	8a 81       	ldd	r24, Y+2	; 0x02
    11d2:	80 83       	st	Z, r24
    11d4:	04 c0       	rjmp	.+8      	; 0x11de <DIO_voidSetPortValue+0x74>
		case 3: SET_BYTE(PORTD,Value); break;
    11d6:	e2 e3       	ldi	r30, 0x32	; 50
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	8a 81       	ldd	r24, Y+2	; 0x02
    11dc:	80 83       	st	Z, r24
	}
}
    11de:	0f 90       	pop	r0
    11e0:	0f 90       	pop	r0
    11e2:	0f 90       	pop	r0
    11e4:	0f 90       	pop	r0
    11e6:	cf 91       	pop	r28
    11e8:	df 91       	pop	r29
    11ea:	08 95       	ret

000011ec <DIO_voidSetPortValueMask>:

void	DIO_voidSetPortValueMask		(u8 PortId,u8 Value,u8 Mask)
{
    11ec:	df 93       	push	r29
    11ee:	cf 93       	push	r28
    11f0:	00 d0       	rcall	.+0      	; 0x11f2 <DIO_voidSetPortValueMask+0x6>
    11f2:	00 d0       	rcall	.+0      	; 0x11f4 <DIO_voidSetPortValueMask+0x8>
    11f4:	0f 92       	push	r0
    11f6:	cd b7       	in	r28, 0x3d	; 61
    11f8:	de b7       	in	r29, 0x3e	; 62
    11fa:	89 83       	std	Y+1, r24	; 0x01
    11fc:	6a 83       	std	Y+2, r22	; 0x02
    11fe:	4b 83       	std	Y+3, r20	; 0x03
	switch(PortId)
    1200:	89 81       	ldd	r24, Y+1	; 0x01
    1202:	28 2f       	mov	r18, r24
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	3d 83       	std	Y+5, r19	; 0x05
    1208:	2c 83       	std	Y+4, r18	; 0x04
    120a:	8c 81       	ldd	r24, Y+4	; 0x04
    120c:	9d 81       	ldd	r25, Y+5	; 0x05
    120e:	81 30       	cpi	r24, 0x01	; 1
    1210:	91 05       	cpc	r25, r1
    1212:	01 f1       	breq	.+64     	; 0x1254 <DIO_voidSetPortValueMask+0x68>
    1214:	2c 81       	ldd	r18, Y+4	; 0x04
    1216:	3d 81       	ldd	r19, Y+5	; 0x05
    1218:	22 30       	cpi	r18, 0x02	; 2
    121a:	31 05       	cpc	r19, r1
    121c:	2c f4       	brge	.+10     	; 0x1228 <DIO_voidSetPortValueMask+0x3c>
    121e:	8c 81       	ldd	r24, Y+4	; 0x04
    1220:	9d 81       	ldd	r25, Y+5	; 0x05
    1222:	00 97       	sbiw	r24, 0x00	; 0
    1224:	61 f0       	breq	.+24     	; 0x123e <DIO_voidSetPortValueMask+0x52>
    1226:	36 c0       	rjmp	.+108    	; 0x1294 <DIO_voidSetPortValueMask+0xa8>
    1228:	2c 81       	ldd	r18, Y+4	; 0x04
    122a:	3d 81       	ldd	r19, Y+5	; 0x05
    122c:	22 30       	cpi	r18, 0x02	; 2
    122e:	31 05       	cpc	r19, r1
    1230:	e1 f0       	breq	.+56     	; 0x126a <DIO_voidSetPortValueMask+0x7e>
    1232:	8c 81       	ldd	r24, Y+4	; 0x04
    1234:	9d 81       	ldd	r25, Y+5	; 0x05
    1236:	83 30       	cpi	r24, 0x03	; 3
    1238:	91 05       	cpc	r25, r1
    123a:	11 f1       	breq	.+68     	; 0x1280 <DIO_voidSetPortValueMask+0x94>
    123c:	2b c0       	rjmp	.+86     	; 0x1294 <DIO_voidSetPortValueMask+0xa8>
	{
		case 0: PORTA=((Value)|(PORTA & Mask)); break;
    123e:	ab e3       	ldi	r26, 0x3B	; 59
    1240:	b0 e0       	ldi	r27, 0x00	; 0
    1242:	eb e3       	ldi	r30, 0x3B	; 59
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	90 81       	ld	r25, Z
    1248:	8b 81       	ldd	r24, Y+3	; 0x03
    124a:	98 23       	and	r25, r24
    124c:	8a 81       	ldd	r24, Y+2	; 0x02
    124e:	89 2b       	or	r24, r25
    1250:	8c 93       	st	X, r24
    1252:	20 c0       	rjmp	.+64     	; 0x1294 <DIO_voidSetPortValueMask+0xa8>
		case 1: PORTB=((Value)|(PORTB & Mask)); break;
    1254:	a8 e3       	ldi	r26, 0x38	; 56
    1256:	b0 e0       	ldi	r27, 0x00	; 0
    1258:	e8 e3       	ldi	r30, 0x38	; 56
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	90 81       	ld	r25, Z
    125e:	8b 81       	ldd	r24, Y+3	; 0x03
    1260:	98 23       	and	r25, r24
    1262:	8a 81       	ldd	r24, Y+2	; 0x02
    1264:	89 2b       	or	r24, r25
    1266:	8c 93       	st	X, r24
    1268:	15 c0       	rjmp	.+42     	; 0x1294 <DIO_voidSetPortValueMask+0xa8>
		case 2: PORTC=((Value)|(PORTC & Mask)); break;
    126a:	a5 e3       	ldi	r26, 0x35	; 53
    126c:	b0 e0       	ldi	r27, 0x00	; 0
    126e:	e5 e3       	ldi	r30, 0x35	; 53
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	90 81       	ld	r25, Z
    1274:	8b 81       	ldd	r24, Y+3	; 0x03
    1276:	98 23       	and	r25, r24
    1278:	8a 81       	ldd	r24, Y+2	; 0x02
    127a:	89 2b       	or	r24, r25
    127c:	8c 93       	st	X, r24
    127e:	0a c0       	rjmp	.+20     	; 0x1294 <DIO_voidSetPortValueMask+0xa8>
		case 3: PORTD=((Value)|(PORTD & Mask)); break;
    1280:	a2 e3       	ldi	r26, 0x32	; 50
    1282:	b0 e0       	ldi	r27, 0x00	; 0
    1284:	e2 e3       	ldi	r30, 0x32	; 50
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	90 81       	ld	r25, Z
    128a:	8b 81       	ldd	r24, Y+3	; 0x03
    128c:	98 23       	and	r25, r24
    128e:	8a 81       	ldd	r24, Y+2	; 0x02
    1290:	89 2b       	or	r24, r25
    1292:	8c 93       	st	X, r24
	}
}
    1294:	0f 90       	pop	r0
    1296:	0f 90       	pop	r0
    1298:	0f 90       	pop	r0
    129a:	0f 90       	pop	r0
    129c:	0f 90       	pop	r0
    129e:	cf 91       	pop	r28
    12a0:	df 91       	pop	r29
    12a2:	08 95       	ret

000012a4 <DIO_voidSetPortDirectionMask>:

void	DIO_voidSetPortDirectionMask	(u8 PortId,u8 Direction,u8 Mask)
{
    12a4:	df 93       	push	r29
    12a6:	cf 93       	push	r28
    12a8:	00 d0       	rcall	.+0      	; 0x12aa <DIO_voidSetPortDirectionMask+0x6>
    12aa:	00 d0       	rcall	.+0      	; 0x12ac <DIO_voidSetPortDirectionMask+0x8>
    12ac:	0f 92       	push	r0
    12ae:	cd b7       	in	r28, 0x3d	; 61
    12b0:	de b7       	in	r29, 0x3e	; 62
    12b2:	89 83       	std	Y+1, r24	; 0x01
    12b4:	6a 83       	std	Y+2, r22	; 0x02
    12b6:	4b 83       	std	Y+3, r20	; 0x03
	switch(PortId)
    12b8:	89 81       	ldd	r24, Y+1	; 0x01
    12ba:	28 2f       	mov	r18, r24
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	3d 83       	std	Y+5, r19	; 0x05
    12c0:	2c 83       	std	Y+4, r18	; 0x04
    12c2:	8c 81       	ldd	r24, Y+4	; 0x04
    12c4:	9d 81       	ldd	r25, Y+5	; 0x05
    12c6:	81 30       	cpi	r24, 0x01	; 1
    12c8:	91 05       	cpc	r25, r1
    12ca:	01 f1       	breq	.+64     	; 0x130c <DIO_voidSetPortDirectionMask+0x68>
    12cc:	2c 81       	ldd	r18, Y+4	; 0x04
    12ce:	3d 81       	ldd	r19, Y+5	; 0x05
    12d0:	22 30       	cpi	r18, 0x02	; 2
    12d2:	31 05       	cpc	r19, r1
    12d4:	2c f4       	brge	.+10     	; 0x12e0 <DIO_voidSetPortDirectionMask+0x3c>
    12d6:	8c 81       	ldd	r24, Y+4	; 0x04
    12d8:	9d 81       	ldd	r25, Y+5	; 0x05
    12da:	00 97       	sbiw	r24, 0x00	; 0
    12dc:	61 f0       	breq	.+24     	; 0x12f6 <DIO_voidSetPortDirectionMask+0x52>
    12de:	36 c0       	rjmp	.+108    	; 0x134c <DIO_voidSetPortDirectionMask+0xa8>
    12e0:	2c 81       	ldd	r18, Y+4	; 0x04
    12e2:	3d 81       	ldd	r19, Y+5	; 0x05
    12e4:	22 30       	cpi	r18, 0x02	; 2
    12e6:	31 05       	cpc	r19, r1
    12e8:	e1 f0       	breq	.+56     	; 0x1322 <DIO_voidSetPortDirectionMask+0x7e>
    12ea:	8c 81       	ldd	r24, Y+4	; 0x04
    12ec:	9d 81       	ldd	r25, Y+5	; 0x05
    12ee:	83 30       	cpi	r24, 0x03	; 3
    12f0:	91 05       	cpc	r25, r1
    12f2:	11 f1       	breq	.+68     	; 0x1338 <DIO_voidSetPortDirectionMask+0x94>
    12f4:	2b c0       	rjmp	.+86     	; 0x134c <DIO_voidSetPortDirectionMask+0xa8>
	{
		case 0: PORTA=((Direction)|(DDRA & Mask)); break;
    12f6:	ab e3       	ldi	r26, 0x3B	; 59
    12f8:	b0 e0       	ldi	r27, 0x00	; 0
    12fa:	ea e3       	ldi	r30, 0x3A	; 58
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	90 81       	ld	r25, Z
    1300:	8b 81       	ldd	r24, Y+3	; 0x03
    1302:	98 23       	and	r25, r24
    1304:	8a 81       	ldd	r24, Y+2	; 0x02
    1306:	89 2b       	or	r24, r25
    1308:	8c 93       	st	X, r24
    130a:	20 c0       	rjmp	.+64     	; 0x134c <DIO_voidSetPortDirectionMask+0xa8>
		case 1: PORTB=((Direction)|(DDRB & Mask)); break;
    130c:	a8 e3       	ldi	r26, 0x38	; 56
    130e:	b0 e0       	ldi	r27, 0x00	; 0
    1310:	e7 e3       	ldi	r30, 0x37	; 55
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	90 81       	ld	r25, Z
    1316:	8b 81       	ldd	r24, Y+3	; 0x03
    1318:	98 23       	and	r25, r24
    131a:	8a 81       	ldd	r24, Y+2	; 0x02
    131c:	89 2b       	or	r24, r25
    131e:	8c 93       	st	X, r24
    1320:	15 c0       	rjmp	.+42     	; 0x134c <DIO_voidSetPortDirectionMask+0xa8>
		case 2: PORTC=((Direction)|(DDRC & Mask)); break;
    1322:	a5 e3       	ldi	r26, 0x35	; 53
    1324:	b0 e0       	ldi	r27, 0x00	; 0
    1326:	e4 e3       	ldi	r30, 0x34	; 52
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	90 81       	ld	r25, Z
    132c:	8b 81       	ldd	r24, Y+3	; 0x03
    132e:	98 23       	and	r25, r24
    1330:	8a 81       	ldd	r24, Y+2	; 0x02
    1332:	89 2b       	or	r24, r25
    1334:	8c 93       	st	X, r24
    1336:	0a c0       	rjmp	.+20     	; 0x134c <DIO_voidSetPortDirectionMask+0xa8>
		case 3: PORTD=((Direction)|(DDRD & Mask)); break;
    1338:	a2 e3       	ldi	r26, 0x32	; 50
    133a:	b0 e0       	ldi	r27, 0x00	; 0
    133c:	e1 e3       	ldi	r30, 0x31	; 49
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	90 81       	ld	r25, Z
    1342:	8b 81       	ldd	r24, Y+3	; 0x03
    1344:	98 23       	and	r25, r24
    1346:	8a 81       	ldd	r24, Y+2	; 0x02
    1348:	89 2b       	or	r24, r25
    134a:	8c 93       	st	X, r24
	}
}
    134c:	0f 90       	pop	r0
    134e:	0f 90       	pop	r0
    1350:	0f 90       	pop	r0
    1352:	0f 90       	pop	r0
    1354:	0f 90       	pop	r0
    1356:	cf 91       	pop	r28
    1358:	df 91       	pop	r29
    135a:	08 95       	ret

0000135c <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue (u8 PortId,u8 PinId)
{
    135c:	df 93       	push	r29
    135e:	cf 93       	push	r28
    1360:	00 d0       	rcall	.+0      	; 0x1362 <DIO_u8GetPinValue+0x6>
    1362:	00 d0       	rcall	.+0      	; 0x1364 <DIO_u8GetPinValue+0x8>
    1364:	0f 92       	push	r0
    1366:	cd b7       	in	r28, 0x3d	; 61
    1368:	de b7       	in	r29, 0x3e	; 62
    136a:	8a 83       	std	Y+2, r24	; 0x02
    136c:	6b 83       	std	Y+3, r22	; 0x03
	u8 DIO_u8ReturnPinValue;
	switch(PortId)
    136e:	8a 81       	ldd	r24, Y+2	; 0x02
    1370:	28 2f       	mov	r18, r24
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	3d 83       	std	Y+5, r19	; 0x05
    1376:	2c 83       	std	Y+4, r18	; 0x04
    1378:	4c 81       	ldd	r20, Y+4	; 0x04
    137a:	5d 81       	ldd	r21, Y+5	; 0x05
    137c:	41 30       	cpi	r20, 0x01	; 1
    137e:	51 05       	cpc	r21, r1
    1380:	b1 f1       	breq	.+108    	; 0x13ee <DIO_u8GetPinValue+0x92>
    1382:	8c 81       	ldd	r24, Y+4	; 0x04
    1384:	9d 81       	ldd	r25, Y+5	; 0x05
    1386:	82 30       	cpi	r24, 0x02	; 2
    1388:	91 05       	cpc	r25, r1
    138a:	34 f4       	brge	.+12     	; 0x1398 <DIO_u8GetPinValue+0x3c>
    138c:	2c 81       	ldd	r18, Y+4	; 0x04
    138e:	3d 81       	ldd	r19, Y+5	; 0x05
    1390:	21 15       	cp	r18, r1
    1392:	31 05       	cpc	r19, r1
    1394:	71 f0       	breq	.+28     	; 0x13b2 <DIO_u8GetPinValue+0x56>
    1396:	85 c0       	rjmp	.+266    	; 0x14a2 <DIO_u8GetPinValue+0x146>
    1398:	4c 81       	ldd	r20, Y+4	; 0x04
    139a:	5d 81       	ldd	r21, Y+5	; 0x05
    139c:	42 30       	cpi	r20, 0x02	; 2
    139e:	51 05       	cpc	r21, r1
    13a0:	09 f4       	brne	.+2      	; 0x13a4 <DIO_u8GetPinValue+0x48>
    13a2:	43 c0       	rjmp	.+134    	; 0x142a <DIO_u8GetPinValue+0xce>
    13a4:	8c 81       	ldd	r24, Y+4	; 0x04
    13a6:	9d 81       	ldd	r25, Y+5	; 0x05
    13a8:	83 30       	cpi	r24, 0x03	; 3
    13aa:	91 05       	cpc	r25, r1
    13ac:	09 f4       	brne	.+2      	; 0x13b0 <DIO_u8GetPinValue+0x54>
    13ae:	5b c0       	rjmp	.+182    	; 0x1466 <DIO_u8GetPinValue+0x10a>
    13b0:	78 c0       	rjmp	.+240    	; 0x14a2 <DIO_u8GetPinValue+0x146>
	{
	case 0: DIO_u8ReturnPinValue = GET_BIT(PINA,PinId); break;
    13b2:	e9 e3       	ldi	r30, 0x39	; 57
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	80 81       	ld	r24, Z
    13b8:	48 2f       	mov	r20, r24
    13ba:	50 e0       	ldi	r21, 0x00	; 0
    13bc:	8b 81       	ldd	r24, Y+3	; 0x03
    13be:	28 2f       	mov	r18, r24
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	02 c0       	rjmp	.+4      	; 0x13cc <DIO_u8GetPinValue+0x70>
    13c8:	88 0f       	add	r24, r24
    13ca:	99 1f       	adc	r25, r25
    13cc:	2a 95       	dec	r18
    13ce:	e2 f7       	brpl	.-8      	; 0x13c8 <DIO_u8GetPinValue+0x6c>
    13d0:	9a 01       	movw	r18, r20
    13d2:	28 23       	and	r18, r24
    13d4:	39 23       	and	r19, r25
    13d6:	8b 81       	ldd	r24, Y+3	; 0x03
    13d8:	88 2f       	mov	r24, r24
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	a9 01       	movw	r20, r18
    13de:	02 c0       	rjmp	.+4      	; 0x13e4 <DIO_u8GetPinValue+0x88>
    13e0:	55 95       	asr	r21
    13e2:	47 95       	ror	r20
    13e4:	8a 95       	dec	r24
    13e6:	e2 f7       	brpl	.-8      	; 0x13e0 <DIO_u8GetPinValue+0x84>
    13e8:	ca 01       	movw	r24, r20
    13ea:	89 83       	std	Y+1, r24	; 0x01
    13ec:	75 c0       	rjmp	.+234    	; 0x14d8 <DIO_u8GetPinValue+0x17c>
	case 1: DIO_u8ReturnPinValue = GET_BIT(PINB,PinId); break;
    13ee:	e6 e3       	ldi	r30, 0x36	; 54
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	48 2f       	mov	r20, r24
    13f6:	50 e0       	ldi	r21, 0x00	; 0
    13f8:	8b 81       	ldd	r24, Y+3	; 0x03
    13fa:	28 2f       	mov	r18, r24
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	02 c0       	rjmp	.+4      	; 0x1408 <DIO_u8GetPinValue+0xac>
    1404:	88 0f       	add	r24, r24
    1406:	99 1f       	adc	r25, r25
    1408:	2a 95       	dec	r18
    140a:	e2 f7       	brpl	.-8      	; 0x1404 <DIO_u8GetPinValue+0xa8>
    140c:	9a 01       	movw	r18, r20
    140e:	28 23       	and	r18, r24
    1410:	39 23       	and	r19, r25
    1412:	8b 81       	ldd	r24, Y+3	; 0x03
    1414:	88 2f       	mov	r24, r24
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	a9 01       	movw	r20, r18
    141a:	02 c0       	rjmp	.+4      	; 0x1420 <DIO_u8GetPinValue+0xc4>
    141c:	55 95       	asr	r21
    141e:	47 95       	ror	r20
    1420:	8a 95       	dec	r24
    1422:	e2 f7       	brpl	.-8      	; 0x141c <DIO_u8GetPinValue+0xc0>
    1424:	ca 01       	movw	r24, r20
    1426:	89 83       	std	Y+1, r24	; 0x01
    1428:	57 c0       	rjmp	.+174    	; 0x14d8 <DIO_u8GetPinValue+0x17c>
	case 2: DIO_u8ReturnPinValue = GET_BIT(PINC,PinId); break;
    142a:	e3 e3       	ldi	r30, 0x33	; 51
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	80 81       	ld	r24, Z
    1430:	48 2f       	mov	r20, r24
    1432:	50 e0       	ldi	r21, 0x00	; 0
    1434:	8b 81       	ldd	r24, Y+3	; 0x03
    1436:	28 2f       	mov	r18, r24
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	81 e0       	ldi	r24, 0x01	; 1
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	02 c0       	rjmp	.+4      	; 0x1444 <DIO_u8GetPinValue+0xe8>
    1440:	88 0f       	add	r24, r24
    1442:	99 1f       	adc	r25, r25
    1444:	2a 95       	dec	r18
    1446:	e2 f7       	brpl	.-8      	; 0x1440 <DIO_u8GetPinValue+0xe4>
    1448:	9a 01       	movw	r18, r20
    144a:	28 23       	and	r18, r24
    144c:	39 23       	and	r19, r25
    144e:	8b 81       	ldd	r24, Y+3	; 0x03
    1450:	88 2f       	mov	r24, r24
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	a9 01       	movw	r20, r18
    1456:	02 c0       	rjmp	.+4      	; 0x145c <DIO_u8GetPinValue+0x100>
    1458:	55 95       	asr	r21
    145a:	47 95       	ror	r20
    145c:	8a 95       	dec	r24
    145e:	e2 f7       	brpl	.-8      	; 0x1458 <DIO_u8GetPinValue+0xfc>
    1460:	ca 01       	movw	r24, r20
    1462:	89 83       	std	Y+1, r24	; 0x01
    1464:	39 c0       	rjmp	.+114    	; 0x14d8 <DIO_u8GetPinValue+0x17c>
	case 3: DIO_u8ReturnPinValue = GET_BIT(PIND,PinId); break;
    1466:	e0 e3       	ldi	r30, 0x30	; 48
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	80 81       	ld	r24, Z
    146c:	48 2f       	mov	r20, r24
    146e:	50 e0       	ldi	r21, 0x00	; 0
    1470:	8b 81       	ldd	r24, Y+3	; 0x03
    1472:	28 2f       	mov	r18, r24
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	02 c0       	rjmp	.+4      	; 0x1480 <DIO_u8GetPinValue+0x124>
    147c:	88 0f       	add	r24, r24
    147e:	99 1f       	adc	r25, r25
    1480:	2a 95       	dec	r18
    1482:	e2 f7       	brpl	.-8      	; 0x147c <DIO_u8GetPinValue+0x120>
    1484:	9a 01       	movw	r18, r20
    1486:	28 23       	and	r18, r24
    1488:	39 23       	and	r19, r25
    148a:	8b 81       	ldd	r24, Y+3	; 0x03
    148c:	88 2f       	mov	r24, r24
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	a9 01       	movw	r20, r18
    1492:	02 c0       	rjmp	.+4      	; 0x1498 <DIO_u8GetPinValue+0x13c>
    1494:	55 95       	asr	r21
    1496:	47 95       	ror	r20
    1498:	8a 95       	dec	r24
    149a:	e2 f7       	brpl	.-8      	; 0x1494 <DIO_u8GetPinValue+0x138>
    149c:	ca 01       	movw	r24, r20
    149e:	89 83       	std	Y+1, r24	; 0x01
    14a0:	1b c0       	rjmp	.+54     	; 0x14d8 <DIO_u8GetPinValue+0x17c>
	default : DIO_u8ReturnPinValue = GET_BIT(PortId,PinId); break;
    14a2:	8a 81       	ldd	r24, Y+2	; 0x02
    14a4:	48 2f       	mov	r20, r24
    14a6:	50 e0       	ldi	r21, 0x00	; 0
    14a8:	8b 81       	ldd	r24, Y+3	; 0x03
    14aa:	28 2f       	mov	r18, r24
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	81 e0       	ldi	r24, 0x01	; 1
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	02 c0       	rjmp	.+4      	; 0x14b8 <DIO_u8GetPinValue+0x15c>
    14b4:	88 0f       	add	r24, r24
    14b6:	99 1f       	adc	r25, r25
    14b8:	2a 95       	dec	r18
    14ba:	e2 f7       	brpl	.-8      	; 0x14b4 <DIO_u8GetPinValue+0x158>
    14bc:	9a 01       	movw	r18, r20
    14be:	28 23       	and	r18, r24
    14c0:	39 23       	and	r19, r25
    14c2:	8b 81       	ldd	r24, Y+3	; 0x03
    14c4:	88 2f       	mov	r24, r24
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	a9 01       	movw	r20, r18
    14ca:	02 c0       	rjmp	.+4      	; 0x14d0 <DIO_u8GetPinValue+0x174>
    14cc:	55 95       	asr	r21
    14ce:	47 95       	ror	r20
    14d0:	8a 95       	dec	r24
    14d2:	e2 f7       	brpl	.-8      	; 0x14cc <DIO_u8GetPinValue+0x170>
    14d4:	ca 01       	movw	r24, r20
    14d6:	89 83       	std	Y+1, r24	; 0x01
	}
	return DIO_u8ReturnPinValue;
    14d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    14da:	0f 90       	pop	r0
    14dc:	0f 90       	pop	r0
    14de:	0f 90       	pop	r0
    14e0:	0f 90       	pop	r0
    14e2:	0f 90       	pop	r0
    14e4:	cf 91       	pop	r28
    14e6:	df 91       	pop	r29
    14e8:	08 95       	ret

000014ea <DIO_voidGetPinValue>:

void DIO_voidGetPinValue (u8 PortId,u8 PinId, u8 * ptr)
{
    14ea:	df 93       	push	r29
    14ec:	cf 93       	push	r28
    14ee:	00 d0       	rcall	.+0      	; 0x14f0 <DIO_voidGetPinValue+0x6>
    14f0:	00 d0       	rcall	.+0      	; 0x14f2 <DIO_voidGetPinValue+0x8>
    14f2:	00 d0       	rcall	.+0      	; 0x14f4 <DIO_voidGetPinValue+0xa>
    14f4:	cd b7       	in	r28, 0x3d	; 61
    14f6:	de b7       	in	r29, 0x3e	; 62
    14f8:	89 83       	std	Y+1, r24	; 0x01
    14fa:	6a 83       	std	Y+2, r22	; 0x02
    14fc:	5c 83       	std	Y+4, r21	; 0x04
    14fe:	4b 83       	std	Y+3, r20	; 0x03
	switch(PortId)
    1500:	89 81       	ldd	r24, Y+1	; 0x01
    1502:	28 2f       	mov	r18, r24
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	3e 83       	std	Y+6, r19	; 0x06
    1508:	2d 83       	std	Y+5, r18	; 0x05
    150a:	4d 81       	ldd	r20, Y+5	; 0x05
    150c:	5e 81       	ldd	r21, Y+6	; 0x06
    150e:	41 30       	cpi	r20, 0x01	; 1
    1510:	51 05       	cpc	r21, r1
    1512:	c1 f1       	breq	.+112    	; 0x1584 <DIO_voidGetPinValue+0x9a>
    1514:	8d 81       	ldd	r24, Y+5	; 0x05
    1516:	9e 81       	ldd	r25, Y+6	; 0x06
    1518:	82 30       	cpi	r24, 0x02	; 2
    151a:	91 05       	cpc	r25, r1
    151c:	34 f4       	brge	.+12     	; 0x152a <DIO_voidGetPinValue+0x40>
    151e:	2d 81       	ldd	r18, Y+5	; 0x05
    1520:	3e 81       	ldd	r19, Y+6	; 0x06
    1522:	21 15       	cp	r18, r1
    1524:	31 05       	cpc	r19, r1
    1526:	71 f0       	breq	.+28     	; 0x1544 <DIO_voidGetPinValue+0x5a>
    1528:	8c c0       	rjmp	.+280    	; 0x1642 <DIO_voidGetPinValue+0x158>
    152a:	4d 81       	ldd	r20, Y+5	; 0x05
    152c:	5e 81       	ldd	r21, Y+6	; 0x06
    152e:	42 30       	cpi	r20, 0x02	; 2
    1530:	51 05       	cpc	r21, r1
    1532:	09 f4       	brne	.+2      	; 0x1536 <DIO_voidGetPinValue+0x4c>
    1534:	47 c0       	rjmp	.+142    	; 0x15c4 <DIO_voidGetPinValue+0xda>
    1536:	8d 81       	ldd	r24, Y+5	; 0x05
    1538:	9e 81       	ldd	r25, Y+6	; 0x06
    153a:	83 30       	cpi	r24, 0x03	; 3
    153c:	91 05       	cpc	r25, r1
    153e:	09 f4       	brne	.+2      	; 0x1542 <DIO_voidGetPinValue+0x58>
    1540:	61 c0       	rjmp	.+194    	; 0x1604 <DIO_voidGetPinValue+0x11a>
    1542:	7f c0       	rjmp	.+254    	; 0x1642 <DIO_voidGetPinValue+0x158>
	{
	case 0: *ptr = GET_BIT(DDRA,PinId); break;
    1544:	ea e3       	ldi	r30, 0x3A	; 58
    1546:	f0 e0       	ldi	r31, 0x00	; 0
    1548:	80 81       	ld	r24, Z
    154a:	48 2f       	mov	r20, r24
    154c:	50 e0       	ldi	r21, 0x00	; 0
    154e:	8a 81       	ldd	r24, Y+2	; 0x02
    1550:	28 2f       	mov	r18, r24
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	02 c0       	rjmp	.+4      	; 0x155e <DIO_voidGetPinValue+0x74>
    155a:	88 0f       	add	r24, r24
    155c:	99 1f       	adc	r25, r25
    155e:	2a 95       	dec	r18
    1560:	e2 f7       	brpl	.-8      	; 0x155a <DIO_voidGetPinValue+0x70>
    1562:	9a 01       	movw	r18, r20
    1564:	28 23       	and	r18, r24
    1566:	39 23       	and	r19, r25
    1568:	8a 81       	ldd	r24, Y+2	; 0x02
    156a:	88 2f       	mov	r24, r24
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	a9 01       	movw	r20, r18
    1570:	02 c0       	rjmp	.+4      	; 0x1576 <DIO_voidGetPinValue+0x8c>
    1572:	55 95       	asr	r21
    1574:	47 95       	ror	r20
    1576:	8a 95       	dec	r24
    1578:	e2 f7       	brpl	.-8      	; 0x1572 <DIO_voidGetPinValue+0x88>
    157a:	ca 01       	movw	r24, r20
    157c:	eb 81       	ldd	r30, Y+3	; 0x03
    157e:	fc 81       	ldd	r31, Y+4	; 0x04
    1580:	80 83       	st	Z, r24
    1582:	5f c0       	rjmp	.+190    	; 0x1642 <DIO_voidGetPinValue+0x158>
	case 1: *ptr = GET_BIT(DDRB,PinId); break;
    1584:	e7 e3       	ldi	r30, 0x37	; 55
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	80 81       	ld	r24, Z
    158a:	48 2f       	mov	r20, r24
    158c:	50 e0       	ldi	r21, 0x00	; 0
    158e:	8a 81       	ldd	r24, Y+2	; 0x02
    1590:	28 2f       	mov	r18, r24
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	81 e0       	ldi	r24, 0x01	; 1
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	02 c0       	rjmp	.+4      	; 0x159e <DIO_voidGetPinValue+0xb4>
    159a:	88 0f       	add	r24, r24
    159c:	99 1f       	adc	r25, r25
    159e:	2a 95       	dec	r18
    15a0:	e2 f7       	brpl	.-8      	; 0x159a <DIO_voidGetPinValue+0xb0>
    15a2:	9a 01       	movw	r18, r20
    15a4:	28 23       	and	r18, r24
    15a6:	39 23       	and	r19, r25
    15a8:	8a 81       	ldd	r24, Y+2	; 0x02
    15aa:	88 2f       	mov	r24, r24
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	a9 01       	movw	r20, r18
    15b0:	02 c0       	rjmp	.+4      	; 0x15b6 <DIO_voidGetPinValue+0xcc>
    15b2:	55 95       	asr	r21
    15b4:	47 95       	ror	r20
    15b6:	8a 95       	dec	r24
    15b8:	e2 f7       	brpl	.-8      	; 0x15b2 <DIO_voidGetPinValue+0xc8>
    15ba:	ca 01       	movw	r24, r20
    15bc:	eb 81       	ldd	r30, Y+3	; 0x03
    15be:	fc 81       	ldd	r31, Y+4	; 0x04
    15c0:	80 83       	st	Z, r24
    15c2:	3f c0       	rjmp	.+126    	; 0x1642 <DIO_voidGetPinValue+0x158>
	case 2: *ptr = GET_BIT(DDRC,PinId); break;
    15c4:	e4 e3       	ldi	r30, 0x34	; 52
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	80 81       	ld	r24, Z
    15ca:	48 2f       	mov	r20, r24
    15cc:	50 e0       	ldi	r21, 0x00	; 0
    15ce:	8a 81       	ldd	r24, Y+2	; 0x02
    15d0:	28 2f       	mov	r18, r24
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	81 e0       	ldi	r24, 0x01	; 1
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	02 c0       	rjmp	.+4      	; 0x15de <DIO_voidGetPinValue+0xf4>
    15da:	88 0f       	add	r24, r24
    15dc:	99 1f       	adc	r25, r25
    15de:	2a 95       	dec	r18
    15e0:	e2 f7       	brpl	.-8      	; 0x15da <DIO_voidGetPinValue+0xf0>
    15e2:	9a 01       	movw	r18, r20
    15e4:	28 23       	and	r18, r24
    15e6:	39 23       	and	r19, r25
    15e8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ea:	88 2f       	mov	r24, r24
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	a9 01       	movw	r20, r18
    15f0:	02 c0       	rjmp	.+4      	; 0x15f6 <DIO_voidGetPinValue+0x10c>
    15f2:	55 95       	asr	r21
    15f4:	47 95       	ror	r20
    15f6:	8a 95       	dec	r24
    15f8:	e2 f7       	brpl	.-8      	; 0x15f2 <DIO_voidGetPinValue+0x108>
    15fa:	ca 01       	movw	r24, r20
    15fc:	eb 81       	ldd	r30, Y+3	; 0x03
    15fe:	fc 81       	ldd	r31, Y+4	; 0x04
    1600:	80 83       	st	Z, r24
    1602:	1f c0       	rjmp	.+62     	; 0x1642 <DIO_voidGetPinValue+0x158>
	case 3: *ptr = GET_BIT(DDRD,PinId); break;
    1604:	e1 e3       	ldi	r30, 0x31	; 49
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	80 81       	ld	r24, Z
    160a:	48 2f       	mov	r20, r24
    160c:	50 e0       	ldi	r21, 0x00	; 0
    160e:	8a 81       	ldd	r24, Y+2	; 0x02
    1610:	28 2f       	mov	r18, r24
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	02 c0       	rjmp	.+4      	; 0x161e <DIO_voidGetPinValue+0x134>
    161a:	88 0f       	add	r24, r24
    161c:	99 1f       	adc	r25, r25
    161e:	2a 95       	dec	r18
    1620:	e2 f7       	brpl	.-8      	; 0x161a <DIO_voidGetPinValue+0x130>
    1622:	9a 01       	movw	r18, r20
    1624:	28 23       	and	r18, r24
    1626:	39 23       	and	r19, r25
    1628:	8a 81       	ldd	r24, Y+2	; 0x02
    162a:	88 2f       	mov	r24, r24
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	a9 01       	movw	r20, r18
    1630:	02 c0       	rjmp	.+4      	; 0x1636 <DIO_voidGetPinValue+0x14c>
    1632:	55 95       	asr	r21
    1634:	47 95       	ror	r20
    1636:	8a 95       	dec	r24
    1638:	e2 f7       	brpl	.-8      	; 0x1632 <DIO_voidGetPinValue+0x148>
    163a:	ca 01       	movw	r24, r20
    163c:	eb 81       	ldd	r30, Y+3	; 0x03
    163e:	fc 81       	ldd	r31, Y+4	; 0x04
    1640:	80 83       	st	Z, r24
	}
	return;
}
    1642:	26 96       	adiw	r28, 0x06	; 6
    1644:	0f b6       	in	r0, 0x3f	; 63
    1646:	f8 94       	cli
    1648:	de bf       	out	0x3e, r29	; 62
    164a:	0f be       	out	0x3f, r0	; 63
    164c:	cd bf       	out	0x3d, r28	; 61
    164e:	cf 91       	pop	r28
    1650:	df 91       	pop	r29
    1652:	08 95       	ret

00001654 <SEG_KIT_voidInitialization>:
#include "SEG_KIT_int.h"

#include <util/delay.h>

void SEG_KIT_voidInitialization(void)
{
    1654:	df 93       	push	r29
    1656:	cf 93       	push	r28
    1658:	cd b7       	in	r28, 0x3d	; 61
    165a:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(PortA,Pin3,Output);
    165c:	80 e0       	ldi	r24, 0x00	; 0
    165e:	63 e0       	ldi	r22, 0x03	; 3
    1660:	41 e0       	ldi	r20, 0x01	; 1
    1662:	0e 94 ca 05 	call	0xb94	; 0xb94 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PortA,Pin2,Output);
    1666:	80 e0       	ldi	r24, 0x00	; 0
    1668:	62 e0       	ldi	r22, 0x02	; 2
    166a:	41 e0       	ldi	r20, 0x01	; 1
    166c:	0e 94 ca 05 	call	0xb94	; 0xb94 <DIO_voidSetPinDirection>

	DIO_voidSetPinDirection(PortB,Pin5,Output);
    1670:	81 e0       	ldi	r24, 0x01	; 1
    1672:	65 e0       	ldi	r22, 0x05	; 5
    1674:	41 e0       	ldi	r20, 0x01	; 1
    1676:	0e 94 ca 05 	call	0xb94	; 0xb94 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PortB,Pin6,Output);
    167a:	81 e0       	ldi	r24, 0x01	; 1
    167c:	66 e0       	ldi	r22, 0x06	; 6
    167e:	41 e0       	ldi	r20, 0x01	; 1
    1680:	0e 94 ca 05 	call	0xb94	; 0xb94 <DIO_voidSetPinDirection>

	DIO_voidSetPinDirection(PortB,Pin0,Output);
    1684:	81 e0       	ldi	r24, 0x01	; 1
    1686:	60 e0       	ldi	r22, 0x00	; 0
    1688:	41 e0       	ldi	r20, 0x01	; 1
    168a:	0e 94 ca 05 	call	0xb94	; 0xb94 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PortB,Pin1,Output);
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	61 e0       	ldi	r22, 0x01	; 1
    1692:	41 e0       	ldi	r20, 0x01	; 1
    1694:	0e 94 ca 05 	call	0xb94	; 0xb94 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PortB,Pin2,Output);
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	62 e0       	ldi	r22, 0x02	; 2
    169c:	41 e0       	ldi	r20, 0x01	; 1
    169e:	0e 94 ca 05 	call	0xb94	; 0xb94 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PortB,Pin4,Output);
    16a2:	81 e0       	ldi	r24, 0x01	; 1
    16a4:	64 e0       	ldi	r22, 0x04	; 4
    16a6:	41 e0       	ldi	r20, 0x01	; 1
    16a8:	0e 94 ca 05 	call	0xb94	; 0xb94 <DIO_voidSetPinDirection>


	DIO_voidSetPinValue(PortA,Pin3,High);
    16ac:	80 e0       	ldi	r24, 0x00	; 0
    16ae:	63 e0       	ldi	r22, 0x03	; 3
    16b0:	41 e0       	ldi	r20, 0x01	; 1
    16b2:	0e 94 c6 06 	call	0xd8c	; 0xd8c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PortA,Pin2,High);
    16b6:	80 e0       	ldi	r24, 0x00	; 0
    16b8:	62 e0       	ldi	r22, 0x02	; 2
    16ba:	41 e0       	ldi	r20, 0x01	; 1
    16bc:	0e 94 c6 06 	call	0xd8c	; 0xd8c <DIO_voidSetPinValue>

	DIO_voidSetPinValue(PortB,Pin5,High);
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	65 e0       	ldi	r22, 0x05	; 5
    16c4:	41 e0       	ldi	r20, 0x01	; 1
    16c6:	0e 94 c6 06 	call	0xd8c	; 0xd8c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PortB,Pin6,High);
    16ca:	81 e0       	ldi	r24, 0x01	; 1
    16cc:	66 e0       	ldi	r22, 0x06	; 6
    16ce:	41 e0       	ldi	r20, 0x01	; 1
    16d0:	0e 94 c6 06 	call	0xd8c	; 0xd8c <DIO_voidSetPinValue>

	DIO_voidSetPinValue(PortB,Pin0,Low);
    16d4:	81 e0       	ldi	r24, 0x01	; 1
    16d6:	60 e0       	ldi	r22, 0x00	; 0
    16d8:	40 e0       	ldi	r20, 0x00	; 0
    16da:	0e 94 c6 06 	call	0xd8c	; 0xd8c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PortB,Pin1,Low);
    16de:	81 e0       	ldi	r24, 0x01	; 1
    16e0:	61 e0       	ldi	r22, 0x01	; 1
    16e2:	40 e0       	ldi	r20, 0x00	; 0
    16e4:	0e 94 c6 06 	call	0xd8c	; 0xd8c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PortB,Pin2,Low);
    16e8:	81 e0       	ldi	r24, 0x01	; 1
    16ea:	62 e0       	ldi	r22, 0x02	; 2
    16ec:	40 e0       	ldi	r20, 0x00	; 0
    16ee:	0e 94 c6 06 	call	0xd8c	; 0xd8c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PortB,Pin4,Low);
    16f2:	81 e0       	ldi	r24, 0x01	; 1
    16f4:	64 e0       	ldi	r22, 0x04	; 4
    16f6:	40 e0       	ldi	r20, 0x00	; 0
    16f8:	0e 94 c6 06 	call	0xd8c	; 0xd8c <DIO_voidSetPinValue>
}
    16fc:	cf 91       	pop	r28
    16fe:	df 91       	pop	r29
    1700:	08 95       	ret

00001702 <SEG_KIT_voidDisplayNumber>:

void SEG_KIT_voidDisplayNumber(u8 Number,u8 SEGNumber)
{
    1702:	df 93       	push	r29
    1704:	cf 93       	push	r28
    1706:	00 d0       	rcall	.+0      	; 0x1708 <SEG_KIT_voidDisplayNumber+0x6>
    1708:	00 d0       	rcall	.+0      	; 0x170a <SEG_KIT_voidDisplayNumber+0x8>
    170a:	00 d0       	rcall	.+0      	; 0x170c <SEG_KIT_voidDisplayNumber+0xa>
    170c:	cd b7       	in	r28, 0x3d	; 61
    170e:	de b7       	in	r29, 0x3e	; 62
    1710:	89 83       	std	Y+1, r24	; 0x01
    1712:	6a 83       	std	Y+2, r22	; 0x02
	switch(Number)
    1714:	89 81       	ldd	r24, Y+1	; 0x01
    1716:	28 2f       	mov	r18, r24
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	3e 83       	std	Y+6, r19	; 0x06
    171c:	2d 83       	std	Y+5, r18	; 0x05
    171e:	8d 81       	ldd	r24, Y+5	; 0x05
    1720:	9e 81       	ldd	r25, Y+6	; 0x06
    1722:	84 30       	cpi	r24, 0x04	; 4
    1724:	91 05       	cpc	r25, r1
    1726:	09 f4       	brne	.+2      	; 0x172a <SEG_KIT_voidDisplayNumber+0x28>
    1728:	59 c0       	rjmp	.+178    	; 0x17dc <SEG_KIT_voidDisplayNumber+0xda>
    172a:	2d 81       	ldd	r18, Y+5	; 0x05
    172c:	3e 81       	ldd	r19, Y+6	; 0x06
    172e:	25 30       	cpi	r18, 0x05	; 5
    1730:	31 05       	cpc	r19, r1
    1732:	dc f4       	brge	.+54     	; 0x176a <SEG_KIT_voidDisplayNumber+0x68>
    1734:	8d 81       	ldd	r24, Y+5	; 0x05
    1736:	9e 81       	ldd	r25, Y+6	; 0x06
    1738:	81 30       	cpi	r24, 0x01	; 1
    173a:	91 05       	cpc	r25, r1
    173c:	09 f4       	brne	.+2      	; 0x1740 <SEG_KIT_voidDisplayNumber+0x3e>
    173e:	3c c0       	rjmp	.+120    	; 0x17b8 <SEG_KIT_voidDisplayNumber+0xb6>
    1740:	2d 81       	ldd	r18, Y+5	; 0x05
    1742:	3e 81       	ldd	r19, Y+6	; 0x06
    1744:	22 30       	cpi	r18, 0x02	; 2
    1746:	31 05       	cpc	r19, r1
    1748:	2c f4       	brge	.+10     	; 0x1754 <SEG_KIT_voidDisplayNumber+0x52>
    174a:	8d 81       	ldd	r24, Y+5	; 0x05
    174c:	9e 81       	ldd	r25, Y+6	; 0x06
    174e:	00 97       	sbiw	r24, 0x00	; 0
    1750:	69 f1       	breq	.+90     	; 0x17ac <SEG_KIT_voidDisplayNumber+0xaa>
    1752:	67 c0       	rjmp	.+206    	; 0x1822 <SEG_KIT_voidDisplayNumber+0x120>
    1754:	2d 81       	ldd	r18, Y+5	; 0x05
    1756:	3e 81       	ldd	r19, Y+6	; 0x06
    1758:	22 30       	cpi	r18, 0x02	; 2
    175a:	31 05       	cpc	r19, r1
    175c:	99 f1       	breq	.+102    	; 0x17c4 <SEG_KIT_voidDisplayNumber+0xc2>
    175e:	8d 81       	ldd	r24, Y+5	; 0x05
    1760:	9e 81       	ldd	r25, Y+6	; 0x06
    1762:	83 30       	cpi	r24, 0x03	; 3
    1764:	91 05       	cpc	r25, r1
    1766:	a1 f1       	breq	.+104    	; 0x17d0 <SEG_KIT_voidDisplayNumber+0xce>
    1768:	5c c0       	rjmp	.+184    	; 0x1822 <SEG_KIT_voidDisplayNumber+0x120>
    176a:	2d 81       	ldd	r18, Y+5	; 0x05
    176c:	3e 81       	ldd	r19, Y+6	; 0x06
    176e:	27 30       	cpi	r18, 0x07	; 7
    1770:	31 05       	cpc	r19, r1
    1772:	09 f4       	brne	.+2      	; 0x1776 <SEG_KIT_voidDisplayNumber+0x74>
    1774:	45 c0       	rjmp	.+138    	; 0x1800 <SEG_KIT_voidDisplayNumber+0xfe>
    1776:	8d 81       	ldd	r24, Y+5	; 0x05
    1778:	9e 81       	ldd	r25, Y+6	; 0x06
    177a:	88 30       	cpi	r24, 0x08	; 8
    177c:	91 05       	cpc	r25, r1
    177e:	5c f4       	brge	.+22     	; 0x1796 <SEG_KIT_voidDisplayNumber+0x94>
    1780:	2d 81       	ldd	r18, Y+5	; 0x05
    1782:	3e 81       	ldd	r19, Y+6	; 0x06
    1784:	25 30       	cpi	r18, 0x05	; 5
    1786:	31 05       	cpc	r19, r1
    1788:	79 f1       	breq	.+94     	; 0x17e8 <SEG_KIT_voidDisplayNumber+0xe6>
    178a:	8d 81       	ldd	r24, Y+5	; 0x05
    178c:	9e 81       	ldd	r25, Y+6	; 0x06
    178e:	86 30       	cpi	r24, 0x06	; 6
    1790:	91 05       	cpc	r25, r1
    1792:	81 f1       	breq	.+96     	; 0x17f4 <SEG_KIT_voidDisplayNumber+0xf2>
    1794:	46 c0       	rjmp	.+140    	; 0x1822 <SEG_KIT_voidDisplayNumber+0x120>
    1796:	2d 81       	ldd	r18, Y+5	; 0x05
    1798:	3e 81       	ldd	r19, Y+6	; 0x06
    179a:	28 30       	cpi	r18, 0x08	; 8
    179c:	31 05       	cpc	r19, r1
    179e:	b1 f1       	breq	.+108    	; 0x180c <SEG_KIT_voidDisplayNumber+0x10a>
    17a0:	8d 81       	ldd	r24, Y+5	; 0x05
    17a2:	9e 81       	ldd	r25, Y+6	; 0x06
    17a4:	89 30       	cpi	r24, 0x09	; 9
    17a6:	91 05       	cpc	r25, r1
    17a8:	b9 f1       	breq	.+110    	; 0x1818 <SEG_KIT_voidDisplayNumber+0x116>
    17aa:	3b c0       	rjmp	.+118    	; 0x1822 <SEG_KIT_voidDisplayNumber+0x120>
	{
	case 0: DIO_voidSetPortValueMask(PortB,0,0xE8); break;
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	60 e0       	ldi	r22, 0x00	; 0
    17b0:	48 ee       	ldi	r20, 0xE8	; 232
    17b2:	0e 94 f6 08 	call	0x11ec	; 0x11ec <DIO_voidSetPortValueMask>
    17b6:	35 c0       	rjmp	.+106    	; 0x1822 <SEG_KIT_voidDisplayNumber+0x120>
	case 1: DIO_voidSetPortValueMask(PortB,1,0xE8); break;
    17b8:	81 e0       	ldi	r24, 0x01	; 1
    17ba:	61 e0       	ldi	r22, 0x01	; 1
    17bc:	48 ee       	ldi	r20, 0xE8	; 232
    17be:	0e 94 f6 08 	call	0x11ec	; 0x11ec <DIO_voidSetPortValueMask>
    17c2:	2f c0       	rjmp	.+94     	; 0x1822 <SEG_KIT_voidDisplayNumber+0x120>
	case 2: DIO_voidSetPortValueMask(PortB,2,0xE8); break;
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	62 e0       	ldi	r22, 0x02	; 2
    17c8:	48 ee       	ldi	r20, 0xE8	; 232
    17ca:	0e 94 f6 08 	call	0x11ec	; 0x11ec <DIO_voidSetPortValueMask>
    17ce:	29 c0       	rjmp	.+82     	; 0x1822 <SEG_KIT_voidDisplayNumber+0x120>
	case 3: DIO_voidSetPortValueMask(PortB,3,0xE8); break;
    17d0:	81 e0       	ldi	r24, 0x01	; 1
    17d2:	63 e0       	ldi	r22, 0x03	; 3
    17d4:	48 ee       	ldi	r20, 0xE8	; 232
    17d6:	0e 94 f6 08 	call	0x11ec	; 0x11ec <DIO_voidSetPortValueMask>
    17da:	23 c0       	rjmp	.+70     	; 0x1822 <SEG_KIT_voidDisplayNumber+0x120>
	case 4: DIO_voidSetPortValueMask(PortB,4,0xE8); break;
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	64 e0       	ldi	r22, 0x04	; 4
    17e0:	48 ee       	ldi	r20, 0xE8	; 232
    17e2:	0e 94 f6 08 	call	0x11ec	; 0x11ec <DIO_voidSetPortValueMask>
    17e6:	1d c0       	rjmp	.+58     	; 0x1822 <SEG_KIT_voidDisplayNumber+0x120>
	case 5: DIO_voidSetPortValueMask(PortB,5,0xE8); break;
    17e8:	81 e0       	ldi	r24, 0x01	; 1
    17ea:	65 e0       	ldi	r22, 0x05	; 5
    17ec:	48 ee       	ldi	r20, 0xE8	; 232
    17ee:	0e 94 f6 08 	call	0x11ec	; 0x11ec <DIO_voidSetPortValueMask>
    17f2:	17 c0       	rjmp	.+46     	; 0x1822 <SEG_KIT_voidDisplayNumber+0x120>
	case 6: DIO_voidSetPortValueMask(PortB,6,0xE8); break;
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	66 e0       	ldi	r22, 0x06	; 6
    17f8:	48 ee       	ldi	r20, 0xE8	; 232
    17fa:	0e 94 f6 08 	call	0x11ec	; 0x11ec <DIO_voidSetPortValueMask>
    17fe:	11 c0       	rjmp	.+34     	; 0x1822 <SEG_KIT_voidDisplayNumber+0x120>
	case 7: DIO_voidSetPortValueMask(PortB,7,0xE8); break;
    1800:	81 e0       	ldi	r24, 0x01	; 1
    1802:	67 e0       	ldi	r22, 0x07	; 7
    1804:	48 ee       	ldi	r20, 0xE8	; 232
    1806:	0e 94 f6 08 	call	0x11ec	; 0x11ec <DIO_voidSetPortValueMask>
    180a:	0b c0       	rjmp	.+22     	; 0x1822 <SEG_KIT_voidDisplayNumber+0x120>
	case 8: DIO_voidSetPortValueMask(PortB,8+8,0xE8); break;
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	60 e1       	ldi	r22, 0x10	; 16
    1810:	48 ee       	ldi	r20, 0xE8	; 232
    1812:	0e 94 f6 08 	call	0x11ec	; 0x11ec <DIO_voidSetPortValueMask>
    1816:	05 c0       	rjmp	.+10     	; 0x1822 <SEG_KIT_voidDisplayNumber+0x120>
	case 9: DIO_voidSetPortValueMask(PortB,9+8,0xE8); break;
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	61 e1       	ldi	r22, 0x11	; 17
    181c:	48 ee       	ldi	r20, 0xE8	; 232
    181e:	0e 94 f6 08 	call	0x11ec	; 0x11ec <DIO_voidSetPortValueMask>
	}
	switch(SEGNumber)
    1822:	8a 81       	ldd	r24, Y+2	; 0x02
    1824:	28 2f       	mov	r18, r24
    1826:	30 e0       	ldi	r19, 0x00	; 0
    1828:	3c 83       	std	Y+4, r19	; 0x04
    182a:	2b 83       	std	Y+3, r18	; 0x03
    182c:	8b 81       	ldd	r24, Y+3	; 0x03
    182e:	9c 81       	ldd	r25, Y+4	; 0x04
    1830:	82 30       	cpi	r24, 0x02	; 2
    1832:	91 05       	cpc	r25, r1
    1834:	09 f1       	breq	.+66     	; 0x1878 <SEG_KIT_voidDisplayNumber+0x176>
    1836:	2b 81       	ldd	r18, Y+3	; 0x03
    1838:	3c 81       	ldd	r19, Y+4	; 0x04
    183a:	23 30       	cpi	r18, 0x03	; 3
    183c:	31 05       	cpc	r19, r1
    183e:	34 f4       	brge	.+12     	; 0x184c <SEG_KIT_voidDisplayNumber+0x14a>
    1840:	8b 81       	ldd	r24, Y+3	; 0x03
    1842:	9c 81       	ldd	r25, Y+4	; 0x04
    1844:	81 30       	cpi	r24, 0x01	; 1
    1846:	91 05       	cpc	r25, r1
    1848:	61 f0       	breq	.+24     	; 0x1862 <SEG_KIT_voidDisplayNumber+0x160>
    184a:	36 c0       	rjmp	.+108    	; 0x18b8 <SEG_KIT_voidDisplayNumber+0x1b6>
    184c:	2b 81       	ldd	r18, Y+3	; 0x03
    184e:	3c 81       	ldd	r19, Y+4	; 0x04
    1850:	23 30       	cpi	r18, 0x03	; 3
    1852:	31 05       	cpc	r19, r1
    1854:	e1 f0       	breq	.+56     	; 0x188e <SEG_KIT_voidDisplayNumber+0x18c>
    1856:	8b 81       	ldd	r24, Y+3	; 0x03
    1858:	9c 81       	ldd	r25, Y+4	; 0x04
    185a:	84 30       	cpi	r24, 0x04	; 4
    185c:	91 05       	cpc	r25, r1
    185e:	11 f1       	breq	.+68     	; 0x18a4 <SEG_KIT_voidDisplayNumber+0x1a2>
    1860:	2b c0       	rjmp	.+86     	; 0x18b8 <SEG_KIT_voidDisplayNumber+0x1b6>
	{
	case 1: DIO_voidSetPortValueMask(PortA,0x04,0xF3);DIO_voidSetPortValueMask(PortB,0x60,0x9F);break;
    1862:	80 e0       	ldi	r24, 0x00	; 0
    1864:	64 e0       	ldi	r22, 0x04	; 4
    1866:	43 ef       	ldi	r20, 0xF3	; 243
    1868:	0e 94 f6 08 	call	0x11ec	; 0x11ec <DIO_voidSetPortValueMask>
    186c:	81 e0       	ldi	r24, 0x01	; 1
    186e:	60 e6       	ldi	r22, 0x60	; 96
    1870:	4f e9       	ldi	r20, 0x9F	; 159
    1872:	0e 94 f6 08 	call	0x11ec	; 0x11ec <DIO_voidSetPortValueMask>
    1876:	20 c0       	rjmp	.+64     	; 0x18b8 <SEG_KIT_voidDisplayNumber+0x1b6>
	case 2: DIO_voidSetPortValueMask(PortA,0x08,0xF3);DIO_voidSetPortValueMask(PortB,0x60,0x9F);break;
    1878:	80 e0       	ldi	r24, 0x00	; 0
    187a:	68 e0       	ldi	r22, 0x08	; 8
    187c:	43 ef       	ldi	r20, 0xF3	; 243
    187e:	0e 94 f6 08 	call	0x11ec	; 0x11ec <DIO_voidSetPortValueMask>
    1882:	81 e0       	ldi	r24, 0x01	; 1
    1884:	60 e6       	ldi	r22, 0x60	; 96
    1886:	4f e9       	ldi	r20, 0x9F	; 159
    1888:	0e 94 f6 08 	call	0x11ec	; 0x11ec <DIO_voidSetPortValueMask>
    188c:	15 c0       	rjmp	.+42     	; 0x18b8 <SEG_KIT_voidDisplayNumber+0x1b6>
	case 3: DIO_voidSetPortValueMask(PortA,0x0C,0xF3);DIO_voidSetPortValueMask(PortB,0x40,0x9F);break;
    188e:	80 e0       	ldi	r24, 0x00	; 0
    1890:	6c e0       	ldi	r22, 0x0C	; 12
    1892:	43 ef       	ldi	r20, 0xF3	; 243
    1894:	0e 94 f6 08 	call	0x11ec	; 0x11ec <DIO_voidSetPortValueMask>
    1898:	81 e0       	ldi	r24, 0x01	; 1
    189a:	60 e4       	ldi	r22, 0x40	; 64
    189c:	4f e9       	ldi	r20, 0x9F	; 159
    189e:	0e 94 f6 08 	call	0x11ec	; 0x11ec <DIO_voidSetPortValueMask>
    18a2:	0a c0       	rjmp	.+20     	; 0x18b8 <SEG_KIT_voidDisplayNumber+0x1b6>
	case 4: DIO_voidSetPortValueMask(PortA,0x0C,0xF3);DIO_voidSetPortValueMask(PortB,0x20,0x9F);break;
    18a4:	80 e0       	ldi	r24, 0x00	; 0
    18a6:	6c e0       	ldi	r22, 0x0C	; 12
    18a8:	43 ef       	ldi	r20, 0xF3	; 243
    18aa:	0e 94 f6 08 	call	0x11ec	; 0x11ec <DIO_voidSetPortValueMask>
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	60 e2       	ldi	r22, 0x20	; 32
    18b2:	4f e9       	ldi	r20, 0x9F	; 159
    18b4:	0e 94 f6 08 	call	0x11ec	; 0x11ec <DIO_voidSetPortValueMask>
	}
}
    18b8:	26 96       	adiw	r28, 0x06	; 6
    18ba:	0f b6       	in	r0, 0x3f	; 63
    18bc:	f8 94       	cli
    18be:	de bf       	out	0x3e, r29	; 62
    18c0:	0f be       	out	0x3f, r0	; 63
    18c2:	cd bf       	out	0x3d, r28	; 61
    18c4:	cf 91       	pop	r28
    18c6:	df 91       	pop	r29
    18c8:	08 95       	ret

000018ca <SEG_KIT_voidDisplayBigNumber>:

void SEG_KIT_voidDisplayBigNumber(u16 Number)
{
    18ca:	0f 93       	push	r16
    18cc:	1f 93       	push	r17
    18ce:	df 93       	push	r29
    18d0:	cf 93       	push	r28
    18d2:	cd b7       	in	r28, 0x3d	; 61
    18d4:	de b7       	in	r29, 0x3e	; 62
    18d6:	c0 58       	subi	r28, 0x80	; 128
    18d8:	d0 40       	sbci	r29, 0x00	; 0
    18da:	0f b6       	in	r0, 0x3f	; 63
    18dc:	f8 94       	cli
    18de:	de bf       	out	0x3e, r29	; 62
    18e0:	0f be       	out	0x3f, r0	; 63
    18e2:	cd bf       	out	0x3d, r28	; 61
    18e4:	fe 01       	movw	r30, r28
    18e6:	e1 58       	subi	r30, 0x81	; 129
    18e8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ea:	91 83       	std	Z+1, r25	; 0x01
    18ec:	80 83       	st	Z, r24
	if(Number<=9)
    18ee:	fe 01       	movw	r30, r28
    18f0:	e1 58       	subi	r30, 0x81	; 129
    18f2:	ff 4f       	sbci	r31, 0xFF	; 255
    18f4:	80 81       	ld	r24, Z
    18f6:	91 81       	ldd	r25, Z+1	; 0x01
    18f8:	8a 30       	cpi	r24, 0x0A	; 10
    18fa:	91 05       	cpc	r25, r1
    18fc:	40 f4       	brcc	.+16     	; 0x190e <SEG_KIT_voidDisplayBigNumber+0x44>
	{
		SEG_KIT_voidDisplayNumber(Number,SEG1);
    18fe:	fe 01       	movw	r30, r28
    1900:	e1 58       	subi	r30, 0x81	; 129
    1902:	ff 4f       	sbci	r31, 0xFF	; 255
    1904:	80 81       	ld	r24, Z
    1906:	61 e0       	ldi	r22, 0x01	; 1
    1908:	0e 94 81 0b 	call	0x1702	; 0x1702 <SEG_KIT_voidDisplayNumber>
    190c:	b9 c5       	rjmp	.+2930   	; 0x2480 <SEG_KIT_voidDisplayBigNumber+0xbb6>
	}
	else if(Number<=99)
    190e:	fe 01       	movw	r30, r28
    1910:	e1 58       	subi	r30, 0x81	; 129
    1912:	ff 4f       	sbci	r31, 0xFF	; 255
    1914:	80 81       	ld	r24, Z
    1916:	91 81       	ldd	r25, Z+1	; 0x01
    1918:	84 36       	cpi	r24, 0x64	; 100
    191a:	91 05       	cpc	r25, r1
    191c:	08 f0       	brcs	.+2      	; 0x1920 <SEG_KIT_voidDisplayBigNumber+0x56>
    191e:	83 c1       	rjmp	.+774    	; 0x1c26 <SEG_KIT_voidDisplayBigNumber+0x35c>
	{
		SEG_KIT_voidDisplayNumber(Number%10,SEG1);
    1920:	fe 01       	movw	r30, r28
    1922:	e1 58       	subi	r30, 0x81	; 129
    1924:	ff 4f       	sbci	r31, 0xFF	; 255
    1926:	80 81       	ld	r24, Z
    1928:	91 81       	ldd	r25, Z+1	; 0x01
    192a:	2a e0       	ldi	r18, 0x0A	; 10
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	b9 01       	movw	r22, r18
    1930:	0e 94 0c 22 	call	0x4418	; 0x4418 <__udivmodhi4>
    1934:	61 e0       	ldi	r22, 0x01	; 1
    1936:	0e 94 81 0b 	call	0x1702	; 0x1702 <SEG_KIT_voidDisplayNumber>
    193a:	fe 01       	movw	r30, r28
    193c:	e5 58       	subi	r30, 0x85	; 133
    193e:	ff 4f       	sbci	r31, 0xFF	; 255
    1940:	80 e0       	ldi	r24, 0x00	; 0
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	a0 e0       	ldi	r26, 0x00	; 0
    1946:	b0 e4       	ldi	r27, 0x40	; 64
    1948:	80 83       	st	Z, r24
    194a:	91 83       	std	Z+1, r25	; 0x01
    194c:	a2 83       	std	Z+2, r26	; 0x02
    194e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1950:	8e 01       	movw	r16, r28
    1952:	09 58       	subi	r16, 0x89	; 137
    1954:	1f 4f       	sbci	r17, 0xFF	; 255
    1956:	fe 01       	movw	r30, r28
    1958:	e5 58       	subi	r30, 0x85	; 133
    195a:	ff 4f       	sbci	r31, 0xFF	; 255
    195c:	60 81       	ld	r22, Z
    195e:	71 81       	ldd	r23, Z+1	; 0x01
    1960:	82 81       	ldd	r24, Z+2	; 0x02
    1962:	93 81       	ldd	r25, Z+3	; 0x03
    1964:	20 e0       	ldi	r18, 0x00	; 0
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	4a e7       	ldi	r20, 0x7A	; 122
    196a:	55 e4       	ldi	r21, 0x45	; 69
    196c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1970:	dc 01       	movw	r26, r24
    1972:	cb 01       	movw	r24, r22
    1974:	f8 01       	movw	r30, r16
    1976:	80 83       	st	Z, r24
    1978:	91 83       	std	Z+1, r25	; 0x01
    197a:	a2 83       	std	Z+2, r26	; 0x02
    197c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    197e:	fe 01       	movw	r30, r28
    1980:	e9 58       	subi	r30, 0x89	; 137
    1982:	ff 4f       	sbci	r31, 0xFF	; 255
    1984:	60 81       	ld	r22, Z
    1986:	71 81       	ldd	r23, Z+1	; 0x01
    1988:	82 81       	ldd	r24, Z+2	; 0x02
    198a:	93 81       	ldd	r25, Z+3	; 0x03
    198c:	20 e0       	ldi	r18, 0x00	; 0
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	40 e8       	ldi	r20, 0x80	; 128
    1992:	5f e3       	ldi	r21, 0x3F	; 63
    1994:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1998:	88 23       	and	r24, r24
    199a:	44 f4       	brge	.+16     	; 0x19ac <SEG_KIT_voidDisplayBigNumber+0xe2>
		__ticks = 1;
    199c:	fe 01       	movw	r30, r28
    199e:	eb 58       	subi	r30, 0x8B	; 139
    19a0:	ff 4f       	sbci	r31, 0xFF	; 255
    19a2:	81 e0       	ldi	r24, 0x01	; 1
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	91 83       	std	Z+1, r25	; 0x01
    19a8:	80 83       	st	Z, r24
    19aa:	64 c0       	rjmp	.+200    	; 0x1a74 <SEG_KIT_voidDisplayBigNumber+0x1aa>
	else if (__tmp > 65535)
    19ac:	fe 01       	movw	r30, r28
    19ae:	e9 58       	subi	r30, 0x89	; 137
    19b0:	ff 4f       	sbci	r31, 0xFF	; 255
    19b2:	60 81       	ld	r22, Z
    19b4:	71 81       	ldd	r23, Z+1	; 0x01
    19b6:	82 81       	ldd	r24, Z+2	; 0x02
    19b8:	93 81       	ldd	r25, Z+3	; 0x03
    19ba:	20 e0       	ldi	r18, 0x00	; 0
    19bc:	3f ef       	ldi	r19, 0xFF	; 255
    19be:	4f e7       	ldi	r20, 0x7F	; 127
    19c0:	57 e4       	ldi	r21, 0x47	; 71
    19c2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    19c6:	18 16       	cp	r1, r24
    19c8:	0c f0       	brlt	.+2      	; 0x19cc <SEG_KIT_voidDisplayBigNumber+0x102>
    19ca:	43 c0       	rjmp	.+134    	; 0x1a52 <SEG_KIT_voidDisplayBigNumber+0x188>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19cc:	fe 01       	movw	r30, r28
    19ce:	e5 58       	subi	r30, 0x85	; 133
    19d0:	ff 4f       	sbci	r31, 0xFF	; 255
    19d2:	60 81       	ld	r22, Z
    19d4:	71 81       	ldd	r23, Z+1	; 0x01
    19d6:	82 81       	ldd	r24, Z+2	; 0x02
    19d8:	93 81       	ldd	r25, Z+3	; 0x03
    19da:	20 e0       	ldi	r18, 0x00	; 0
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	40 e2       	ldi	r20, 0x20	; 32
    19e0:	51 e4       	ldi	r21, 0x41	; 65
    19e2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19e6:	dc 01       	movw	r26, r24
    19e8:	cb 01       	movw	r24, r22
    19ea:	8e 01       	movw	r16, r28
    19ec:	0b 58       	subi	r16, 0x8B	; 139
    19ee:	1f 4f       	sbci	r17, 0xFF	; 255
    19f0:	bc 01       	movw	r22, r24
    19f2:	cd 01       	movw	r24, r26
    19f4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19f8:	dc 01       	movw	r26, r24
    19fa:	cb 01       	movw	r24, r22
    19fc:	f8 01       	movw	r30, r16
    19fe:	91 83       	std	Z+1, r25	; 0x01
    1a00:	80 83       	st	Z, r24
    1a02:	1f c0       	rjmp	.+62     	; 0x1a42 <SEG_KIT_voidDisplayBigNumber+0x178>
    1a04:	fe 01       	movw	r30, r28
    1a06:	ed 58       	subi	r30, 0x8D	; 141
    1a08:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0a:	80 e9       	ldi	r24, 0x90	; 144
    1a0c:	91 e0       	ldi	r25, 0x01	; 1
    1a0e:	91 83       	std	Z+1, r25	; 0x01
    1a10:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a12:	fe 01       	movw	r30, r28
    1a14:	ed 58       	subi	r30, 0x8D	; 141
    1a16:	ff 4f       	sbci	r31, 0xFF	; 255
    1a18:	80 81       	ld	r24, Z
    1a1a:	91 81       	ldd	r25, Z+1	; 0x01
    1a1c:	01 97       	sbiw	r24, 0x01	; 1
    1a1e:	f1 f7       	brne	.-4      	; 0x1a1c <SEG_KIT_voidDisplayBigNumber+0x152>
    1a20:	fe 01       	movw	r30, r28
    1a22:	ed 58       	subi	r30, 0x8D	; 141
    1a24:	ff 4f       	sbci	r31, 0xFF	; 255
    1a26:	91 83       	std	Z+1, r25	; 0x01
    1a28:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a2a:	de 01       	movw	r26, r28
    1a2c:	ab 58       	subi	r26, 0x8B	; 139
    1a2e:	bf 4f       	sbci	r27, 0xFF	; 255
    1a30:	fe 01       	movw	r30, r28
    1a32:	eb 58       	subi	r30, 0x8B	; 139
    1a34:	ff 4f       	sbci	r31, 0xFF	; 255
    1a36:	80 81       	ld	r24, Z
    1a38:	91 81       	ldd	r25, Z+1	; 0x01
    1a3a:	01 97       	sbiw	r24, 0x01	; 1
    1a3c:	11 96       	adiw	r26, 0x01	; 1
    1a3e:	9c 93       	st	X, r25
    1a40:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a42:	fe 01       	movw	r30, r28
    1a44:	eb 58       	subi	r30, 0x8B	; 139
    1a46:	ff 4f       	sbci	r31, 0xFF	; 255
    1a48:	80 81       	ld	r24, Z
    1a4a:	91 81       	ldd	r25, Z+1	; 0x01
    1a4c:	00 97       	sbiw	r24, 0x00	; 0
    1a4e:	d1 f6       	brne	.-76     	; 0x1a04 <SEG_KIT_voidDisplayBigNumber+0x13a>
    1a50:	27 c0       	rjmp	.+78     	; 0x1aa0 <SEG_KIT_voidDisplayBigNumber+0x1d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a52:	8e 01       	movw	r16, r28
    1a54:	0b 58       	subi	r16, 0x8B	; 139
    1a56:	1f 4f       	sbci	r17, 0xFF	; 255
    1a58:	fe 01       	movw	r30, r28
    1a5a:	e9 58       	subi	r30, 0x89	; 137
    1a5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a5e:	60 81       	ld	r22, Z
    1a60:	71 81       	ldd	r23, Z+1	; 0x01
    1a62:	82 81       	ldd	r24, Z+2	; 0x02
    1a64:	93 81       	ldd	r25, Z+3	; 0x03
    1a66:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a6a:	dc 01       	movw	r26, r24
    1a6c:	cb 01       	movw	r24, r22
    1a6e:	f8 01       	movw	r30, r16
    1a70:	91 83       	std	Z+1, r25	; 0x01
    1a72:	80 83       	st	Z, r24
    1a74:	de 01       	movw	r26, r28
    1a76:	af 58       	subi	r26, 0x8F	; 143
    1a78:	bf 4f       	sbci	r27, 0xFF	; 255
    1a7a:	fe 01       	movw	r30, r28
    1a7c:	eb 58       	subi	r30, 0x8B	; 139
    1a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a80:	80 81       	ld	r24, Z
    1a82:	91 81       	ldd	r25, Z+1	; 0x01
    1a84:	8d 93       	st	X+, r24
    1a86:	9c 93       	st	X, r25
    1a88:	fe 01       	movw	r30, r28
    1a8a:	ef 58       	subi	r30, 0x8F	; 143
    1a8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a8e:	80 81       	ld	r24, Z
    1a90:	91 81       	ldd	r25, Z+1	; 0x01
    1a92:	01 97       	sbiw	r24, 0x01	; 1
    1a94:	f1 f7       	brne	.-4      	; 0x1a92 <SEG_KIT_voidDisplayBigNumber+0x1c8>
    1a96:	fe 01       	movw	r30, r28
    1a98:	ef 58       	subi	r30, 0x8F	; 143
    1a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9c:	91 83       	std	Z+1, r25	; 0x01
    1a9e:	80 83       	st	Z, r24
		_delay_ms(2);
		SEG_KIT_voidDisplayNumber(Number/10,SEG2);
    1aa0:	fe 01       	movw	r30, r28
    1aa2:	e1 58       	subi	r30, 0x81	; 129
    1aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa6:	80 81       	ld	r24, Z
    1aa8:	91 81       	ldd	r25, Z+1	; 0x01
    1aaa:	2a e0       	ldi	r18, 0x0A	; 10
    1aac:	30 e0       	ldi	r19, 0x00	; 0
    1aae:	b9 01       	movw	r22, r18
    1ab0:	0e 94 0c 22 	call	0x4418	; 0x4418 <__udivmodhi4>
    1ab4:	cb 01       	movw	r24, r22
    1ab6:	62 e0       	ldi	r22, 0x02	; 2
    1ab8:	0e 94 81 0b 	call	0x1702	; 0x1702 <SEG_KIT_voidDisplayNumber>
    1abc:	fe 01       	movw	r30, r28
    1abe:	e3 59       	subi	r30, 0x93	; 147
    1ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac2:	80 e0       	ldi	r24, 0x00	; 0
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	a0 e0       	ldi	r26, 0x00	; 0
    1ac8:	b0 e4       	ldi	r27, 0x40	; 64
    1aca:	80 83       	st	Z, r24
    1acc:	91 83       	std	Z+1, r25	; 0x01
    1ace:	a2 83       	std	Z+2, r26	; 0x02
    1ad0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ad2:	8e 01       	movw	r16, r28
    1ad4:	07 59       	subi	r16, 0x97	; 151
    1ad6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ad8:	fe 01       	movw	r30, r28
    1ada:	e3 59       	subi	r30, 0x93	; 147
    1adc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ade:	60 81       	ld	r22, Z
    1ae0:	71 81       	ldd	r23, Z+1	; 0x01
    1ae2:	82 81       	ldd	r24, Z+2	; 0x02
    1ae4:	93 81       	ldd	r25, Z+3	; 0x03
    1ae6:	20 e0       	ldi	r18, 0x00	; 0
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	4a e7       	ldi	r20, 0x7A	; 122
    1aec:	55 e4       	ldi	r21, 0x45	; 69
    1aee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1af2:	dc 01       	movw	r26, r24
    1af4:	cb 01       	movw	r24, r22
    1af6:	f8 01       	movw	r30, r16
    1af8:	80 83       	st	Z, r24
    1afa:	91 83       	std	Z+1, r25	; 0x01
    1afc:	a2 83       	std	Z+2, r26	; 0x02
    1afe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b00:	fe 01       	movw	r30, r28
    1b02:	e7 59       	subi	r30, 0x97	; 151
    1b04:	ff 4f       	sbci	r31, 0xFF	; 255
    1b06:	60 81       	ld	r22, Z
    1b08:	71 81       	ldd	r23, Z+1	; 0x01
    1b0a:	82 81       	ldd	r24, Z+2	; 0x02
    1b0c:	93 81       	ldd	r25, Z+3	; 0x03
    1b0e:	20 e0       	ldi	r18, 0x00	; 0
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	40 e8       	ldi	r20, 0x80	; 128
    1b14:	5f e3       	ldi	r21, 0x3F	; 63
    1b16:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b1a:	88 23       	and	r24, r24
    1b1c:	44 f4       	brge	.+16     	; 0x1b2e <SEG_KIT_voidDisplayBigNumber+0x264>
		__ticks = 1;
    1b1e:	fe 01       	movw	r30, r28
    1b20:	e9 59       	subi	r30, 0x99	; 153
    1b22:	ff 4f       	sbci	r31, 0xFF	; 255
    1b24:	81 e0       	ldi	r24, 0x01	; 1
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	91 83       	std	Z+1, r25	; 0x01
    1b2a:	80 83       	st	Z, r24
    1b2c:	64 c0       	rjmp	.+200    	; 0x1bf6 <SEG_KIT_voidDisplayBigNumber+0x32c>
	else if (__tmp > 65535)
    1b2e:	fe 01       	movw	r30, r28
    1b30:	e7 59       	subi	r30, 0x97	; 151
    1b32:	ff 4f       	sbci	r31, 0xFF	; 255
    1b34:	60 81       	ld	r22, Z
    1b36:	71 81       	ldd	r23, Z+1	; 0x01
    1b38:	82 81       	ldd	r24, Z+2	; 0x02
    1b3a:	93 81       	ldd	r25, Z+3	; 0x03
    1b3c:	20 e0       	ldi	r18, 0x00	; 0
    1b3e:	3f ef       	ldi	r19, 0xFF	; 255
    1b40:	4f e7       	ldi	r20, 0x7F	; 127
    1b42:	57 e4       	ldi	r21, 0x47	; 71
    1b44:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b48:	18 16       	cp	r1, r24
    1b4a:	0c f0       	brlt	.+2      	; 0x1b4e <SEG_KIT_voidDisplayBigNumber+0x284>
    1b4c:	43 c0       	rjmp	.+134    	; 0x1bd4 <SEG_KIT_voidDisplayBigNumber+0x30a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b4e:	fe 01       	movw	r30, r28
    1b50:	e3 59       	subi	r30, 0x93	; 147
    1b52:	ff 4f       	sbci	r31, 0xFF	; 255
    1b54:	60 81       	ld	r22, Z
    1b56:	71 81       	ldd	r23, Z+1	; 0x01
    1b58:	82 81       	ldd	r24, Z+2	; 0x02
    1b5a:	93 81       	ldd	r25, Z+3	; 0x03
    1b5c:	20 e0       	ldi	r18, 0x00	; 0
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	40 e2       	ldi	r20, 0x20	; 32
    1b62:	51 e4       	ldi	r21, 0x41	; 65
    1b64:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b68:	dc 01       	movw	r26, r24
    1b6a:	cb 01       	movw	r24, r22
    1b6c:	8e 01       	movw	r16, r28
    1b6e:	09 59       	subi	r16, 0x99	; 153
    1b70:	1f 4f       	sbci	r17, 0xFF	; 255
    1b72:	bc 01       	movw	r22, r24
    1b74:	cd 01       	movw	r24, r26
    1b76:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b7a:	dc 01       	movw	r26, r24
    1b7c:	cb 01       	movw	r24, r22
    1b7e:	f8 01       	movw	r30, r16
    1b80:	91 83       	std	Z+1, r25	; 0x01
    1b82:	80 83       	st	Z, r24
    1b84:	1f c0       	rjmp	.+62     	; 0x1bc4 <SEG_KIT_voidDisplayBigNumber+0x2fa>
    1b86:	fe 01       	movw	r30, r28
    1b88:	eb 59       	subi	r30, 0x9B	; 155
    1b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8c:	80 e9       	ldi	r24, 0x90	; 144
    1b8e:	91 e0       	ldi	r25, 0x01	; 1
    1b90:	91 83       	std	Z+1, r25	; 0x01
    1b92:	80 83       	st	Z, r24
    1b94:	fe 01       	movw	r30, r28
    1b96:	eb 59       	subi	r30, 0x9B	; 155
    1b98:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9a:	80 81       	ld	r24, Z
    1b9c:	91 81       	ldd	r25, Z+1	; 0x01
    1b9e:	01 97       	sbiw	r24, 0x01	; 1
    1ba0:	f1 f7       	brne	.-4      	; 0x1b9e <SEG_KIT_voidDisplayBigNumber+0x2d4>
    1ba2:	fe 01       	movw	r30, r28
    1ba4:	eb 59       	subi	r30, 0x9B	; 155
    1ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba8:	91 83       	std	Z+1, r25	; 0x01
    1baa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bac:	de 01       	movw	r26, r28
    1bae:	a9 59       	subi	r26, 0x99	; 153
    1bb0:	bf 4f       	sbci	r27, 0xFF	; 255
    1bb2:	fe 01       	movw	r30, r28
    1bb4:	e9 59       	subi	r30, 0x99	; 153
    1bb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb8:	80 81       	ld	r24, Z
    1bba:	91 81       	ldd	r25, Z+1	; 0x01
    1bbc:	01 97       	sbiw	r24, 0x01	; 1
    1bbe:	11 96       	adiw	r26, 0x01	; 1
    1bc0:	9c 93       	st	X, r25
    1bc2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bc4:	fe 01       	movw	r30, r28
    1bc6:	e9 59       	subi	r30, 0x99	; 153
    1bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bca:	80 81       	ld	r24, Z
    1bcc:	91 81       	ldd	r25, Z+1	; 0x01
    1bce:	00 97       	sbiw	r24, 0x00	; 0
    1bd0:	d1 f6       	brne	.-76     	; 0x1b86 <SEG_KIT_voidDisplayBigNumber+0x2bc>
    1bd2:	56 c4       	rjmp	.+2220   	; 0x2480 <SEG_KIT_voidDisplayBigNumber+0xbb6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bd4:	8e 01       	movw	r16, r28
    1bd6:	09 59       	subi	r16, 0x99	; 153
    1bd8:	1f 4f       	sbci	r17, 0xFF	; 255
    1bda:	fe 01       	movw	r30, r28
    1bdc:	e7 59       	subi	r30, 0x97	; 151
    1bde:	ff 4f       	sbci	r31, 0xFF	; 255
    1be0:	60 81       	ld	r22, Z
    1be2:	71 81       	ldd	r23, Z+1	; 0x01
    1be4:	82 81       	ldd	r24, Z+2	; 0x02
    1be6:	93 81       	ldd	r25, Z+3	; 0x03
    1be8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bec:	dc 01       	movw	r26, r24
    1bee:	cb 01       	movw	r24, r22
    1bf0:	f8 01       	movw	r30, r16
    1bf2:	91 83       	std	Z+1, r25	; 0x01
    1bf4:	80 83       	st	Z, r24
    1bf6:	de 01       	movw	r26, r28
    1bf8:	ad 59       	subi	r26, 0x9D	; 157
    1bfa:	bf 4f       	sbci	r27, 0xFF	; 255
    1bfc:	fe 01       	movw	r30, r28
    1bfe:	e9 59       	subi	r30, 0x99	; 153
    1c00:	ff 4f       	sbci	r31, 0xFF	; 255
    1c02:	80 81       	ld	r24, Z
    1c04:	91 81       	ldd	r25, Z+1	; 0x01
    1c06:	11 96       	adiw	r26, 0x01	; 1
    1c08:	9c 93       	st	X, r25
    1c0a:	8e 93       	st	-X, r24
    1c0c:	fe 01       	movw	r30, r28
    1c0e:	ed 59       	subi	r30, 0x9D	; 157
    1c10:	ff 4f       	sbci	r31, 0xFF	; 255
    1c12:	80 81       	ld	r24, Z
    1c14:	91 81       	ldd	r25, Z+1	; 0x01
    1c16:	01 97       	sbiw	r24, 0x01	; 1
    1c18:	f1 f7       	brne	.-4      	; 0x1c16 <SEG_KIT_voidDisplayBigNumber+0x34c>
    1c1a:	fe 01       	movw	r30, r28
    1c1c:	ed 59       	subi	r30, 0x9D	; 157
    1c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c20:	91 83       	std	Z+1, r25	; 0x01
    1c22:	80 83       	st	Z, r24
    1c24:	2d c4       	rjmp	.+2138   	; 0x2480 <SEG_KIT_voidDisplayBigNumber+0xbb6>
		_delay_ms(2);
	}
	else if(Number<=999)
    1c26:	fe 01       	movw	r30, r28
    1c28:	e1 58       	subi	r30, 0x81	; 129
    1c2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2c:	80 81       	ld	r24, Z
    1c2e:	91 81       	ldd	r25, Z+1	; 0x01
    1c30:	f3 e0       	ldi	r31, 0x03	; 3
    1c32:	88 3e       	cpi	r24, 0xE8	; 232
    1c34:	9f 07       	cpc	r25, r31
    1c36:	08 f0       	brcs	.+2      	; 0x1c3a <SEG_KIT_voidDisplayBigNumber+0x370>
    1c38:	1a c2       	rjmp	.+1076   	; 0x206e <SEG_KIT_voidDisplayBigNumber+0x7a4>
		{
			SEG_KIT_voidDisplayNumber(Number%10,SEG1);
    1c3a:	fe 01       	movw	r30, r28
    1c3c:	e1 58       	subi	r30, 0x81	; 129
    1c3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c40:	80 81       	ld	r24, Z
    1c42:	91 81       	ldd	r25, Z+1	; 0x01
    1c44:	2a e0       	ldi	r18, 0x0A	; 10
    1c46:	30 e0       	ldi	r19, 0x00	; 0
    1c48:	b9 01       	movw	r22, r18
    1c4a:	0e 94 0c 22 	call	0x4418	; 0x4418 <__udivmodhi4>
    1c4e:	61 e0       	ldi	r22, 0x01	; 1
    1c50:	0e 94 81 0b 	call	0x1702	; 0x1702 <SEG_KIT_voidDisplayNumber>
    1c54:	fe 01       	movw	r30, r28
    1c56:	e1 5a       	subi	r30, 0xA1	; 161
    1c58:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5a:	80 e0       	ldi	r24, 0x00	; 0
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	a0 e0       	ldi	r26, 0x00	; 0
    1c60:	b0 e4       	ldi	r27, 0x40	; 64
    1c62:	80 83       	st	Z, r24
    1c64:	91 83       	std	Z+1, r25	; 0x01
    1c66:	a2 83       	std	Z+2, r26	; 0x02
    1c68:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c6a:	8e 01       	movw	r16, r28
    1c6c:	05 5a       	subi	r16, 0xA5	; 165
    1c6e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c70:	fe 01       	movw	r30, r28
    1c72:	e1 5a       	subi	r30, 0xA1	; 161
    1c74:	ff 4f       	sbci	r31, 0xFF	; 255
    1c76:	60 81       	ld	r22, Z
    1c78:	71 81       	ldd	r23, Z+1	; 0x01
    1c7a:	82 81       	ldd	r24, Z+2	; 0x02
    1c7c:	93 81       	ldd	r25, Z+3	; 0x03
    1c7e:	20 e0       	ldi	r18, 0x00	; 0
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	4a e7       	ldi	r20, 0x7A	; 122
    1c84:	55 e4       	ldi	r21, 0x45	; 69
    1c86:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c8a:	dc 01       	movw	r26, r24
    1c8c:	cb 01       	movw	r24, r22
    1c8e:	f8 01       	movw	r30, r16
    1c90:	80 83       	st	Z, r24
    1c92:	91 83       	std	Z+1, r25	; 0x01
    1c94:	a2 83       	std	Z+2, r26	; 0x02
    1c96:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c98:	fe 01       	movw	r30, r28
    1c9a:	e5 5a       	subi	r30, 0xA5	; 165
    1c9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9e:	60 81       	ld	r22, Z
    1ca0:	71 81       	ldd	r23, Z+1	; 0x01
    1ca2:	82 81       	ldd	r24, Z+2	; 0x02
    1ca4:	93 81       	ldd	r25, Z+3	; 0x03
    1ca6:	20 e0       	ldi	r18, 0x00	; 0
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	40 e8       	ldi	r20, 0x80	; 128
    1cac:	5f e3       	ldi	r21, 0x3F	; 63
    1cae:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1cb2:	88 23       	and	r24, r24
    1cb4:	44 f4       	brge	.+16     	; 0x1cc6 <SEG_KIT_voidDisplayBigNumber+0x3fc>
		__ticks = 1;
    1cb6:	fe 01       	movw	r30, r28
    1cb8:	e7 5a       	subi	r30, 0xA7	; 167
    1cba:	ff 4f       	sbci	r31, 0xFF	; 255
    1cbc:	81 e0       	ldi	r24, 0x01	; 1
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	91 83       	std	Z+1, r25	; 0x01
    1cc2:	80 83       	st	Z, r24
    1cc4:	64 c0       	rjmp	.+200    	; 0x1d8e <SEG_KIT_voidDisplayBigNumber+0x4c4>
	else if (__tmp > 65535)
    1cc6:	fe 01       	movw	r30, r28
    1cc8:	e5 5a       	subi	r30, 0xA5	; 165
    1cca:	ff 4f       	sbci	r31, 0xFF	; 255
    1ccc:	60 81       	ld	r22, Z
    1cce:	71 81       	ldd	r23, Z+1	; 0x01
    1cd0:	82 81       	ldd	r24, Z+2	; 0x02
    1cd2:	93 81       	ldd	r25, Z+3	; 0x03
    1cd4:	20 e0       	ldi	r18, 0x00	; 0
    1cd6:	3f ef       	ldi	r19, 0xFF	; 255
    1cd8:	4f e7       	ldi	r20, 0x7F	; 127
    1cda:	57 e4       	ldi	r21, 0x47	; 71
    1cdc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ce0:	18 16       	cp	r1, r24
    1ce2:	0c f0       	brlt	.+2      	; 0x1ce6 <SEG_KIT_voidDisplayBigNumber+0x41c>
    1ce4:	43 c0       	rjmp	.+134    	; 0x1d6c <SEG_KIT_voidDisplayBigNumber+0x4a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ce6:	fe 01       	movw	r30, r28
    1ce8:	e1 5a       	subi	r30, 0xA1	; 161
    1cea:	ff 4f       	sbci	r31, 0xFF	; 255
    1cec:	60 81       	ld	r22, Z
    1cee:	71 81       	ldd	r23, Z+1	; 0x01
    1cf0:	82 81       	ldd	r24, Z+2	; 0x02
    1cf2:	93 81       	ldd	r25, Z+3	; 0x03
    1cf4:	20 e0       	ldi	r18, 0x00	; 0
    1cf6:	30 e0       	ldi	r19, 0x00	; 0
    1cf8:	40 e2       	ldi	r20, 0x20	; 32
    1cfa:	51 e4       	ldi	r21, 0x41	; 65
    1cfc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d00:	dc 01       	movw	r26, r24
    1d02:	cb 01       	movw	r24, r22
    1d04:	8e 01       	movw	r16, r28
    1d06:	07 5a       	subi	r16, 0xA7	; 167
    1d08:	1f 4f       	sbci	r17, 0xFF	; 255
    1d0a:	bc 01       	movw	r22, r24
    1d0c:	cd 01       	movw	r24, r26
    1d0e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d12:	dc 01       	movw	r26, r24
    1d14:	cb 01       	movw	r24, r22
    1d16:	f8 01       	movw	r30, r16
    1d18:	91 83       	std	Z+1, r25	; 0x01
    1d1a:	80 83       	st	Z, r24
    1d1c:	1f c0       	rjmp	.+62     	; 0x1d5c <SEG_KIT_voidDisplayBigNumber+0x492>
    1d1e:	fe 01       	movw	r30, r28
    1d20:	e9 5a       	subi	r30, 0xA9	; 169
    1d22:	ff 4f       	sbci	r31, 0xFF	; 255
    1d24:	80 e9       	ldi	r24, 0x90	; 144
    1d26:	91 e0       	ldi	r25, 0x01	; 1
    1d28:	91 83       	std	Z+1, r25	; 0x01
    1d2a:	80 83       	st	Z, r24
    1d2c:	fe 01       	movw	r30, r28
    1d2e:	e9 5a       	subi	r30, 0xA9	; 169
    1d30:	ff 4f       	sbci	r31, 0xFF	; 255
    1d32:	80 81       	ld	r24, Z
    1d34:	91 81       	ldd	r25, Z+1	; 0x01
    1d36:	01 97       	sbiw	r24, 0x01	; 1
    1d38:	f1 f7       	brne	.-4      	; 0x1d36 <SEG_KIT_voidDisplayBigNumber+0x46c>
    1d3a:	fe 01       	movw	r30, r28
    1d3c:	e9 5a       	subi	r30, 0xA9	; 169
    1d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d40:	91 83       	std	Z+1, r25	; 0x01
    1d42:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d44:	de 01       	movw	r26, r28
    1d46:	a7 5a       	subi	r26, 0xA7	; 167
    1d48:	bf 4f       	sbci	r27, 0xFF	; 255
    1d4a:	fe 01       	movw	r30, r28
    1d4c:	e7 5a       	subi	r30, 0xA7	; 167
    1d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d50:	80 81       	ld	r24, Z
    1d52:	91 81       	ldd	r25, Z+1	; 0x01
    1d54:	01 97       	sbiw	r24, 0x01	; 1
    1d56:	11 96       	adiw	r26, 0x01	; 1
    1d58:	9c 93       	st	X, r25
    1d5a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d5c:	fe 01       	movw	r30, r28
    1d5e:	e7 5a       	subi	r30, 0xA7	; 167
    1d60:	ff 4f       	sbci	r31, 0xFF	; 255
    1d62:	80 81       	ld	r24, Z
    1d64:	91 81       	ldd	r25, Z+1	; 0x01
    1d66:	00 97       	sbiw	r24, 0x00	; 0
    1d68:	d1 f6       	brne	.-76     	; 0x1d1e <SEG_KIT_voidDisplayBigNumber+0x454>
    1d6a:	27 c0       	rjmp	.+78     	; 0x1dba <SEG_KIT_voidDisplayBigNumber+0x4f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d6c:	8e 01       	movw	r16, r28
    1d6e:	07 5a       	subi	r16, 0xA7	; 167
    1d70:	1f 4f       	sbci	r17, 0xFF	; 255
    1d72:	fe 01       	movw	r30, r28
    1d74:	e5 5a       	subi	r30, 0xA5	; 165
    1d76:	ff 4f       	sbci	r31, 0xFF	; 255
    1d78:	60 81       	ld	r22, Z
    1d7a:	71 81       	ldd	r23, Z+1	; 0x01
    1d7c:	82 81       	ldd	r24, Z+2	; 0x02
    1d7e:	93 81       	ldd	r25, Z+3	; 0x03
    1d80:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d84:	dc 01       	movw	r26, r24
    1d86:	cb 01       	movw	r24, r22
    1d88:	f8 01       	movw	r30, r16
    1d8a:	91 83       	std	Z+1, r25	; 0x01
    1d8c:	80 83       	st	Z, r24
    1d8e:	de 01       	movw	r26, r28
    1d90:	ab 5a       	subi	r26, 0xAB	; 171
    1d92:	bf 4f       	sbci	r27, 0xFF	; 255
    1d94:	fe 01       	movw	r30, r28
    1d96:	e7 5a       	subi	r30, 0xA7	; 167
    1d98:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9a:	80 81       	ld	r24, Z
    1d9c:	91 81       	ldd	r25, Z+1	; 0x01
    1d9e:	8d 93       	st	X+, r24
    1da0:	9c 93       	st	X, r25
    1da2:	fe 01       	movw	r30, r28
    1da4:	eb 5a       	subi	r30, 0xAB	; 171
    1da6:	ff 4f       	sbci	r31, 0xFF	; 255
    1da8:	80 81       	ld	r24, Z
    1daa:	91 81       	ldd	r25, Z+1	; 0x01
    1dac:	01 97       	sbiw	r24, 0x01	; 1
    1dae:	f1 f7       	brne	.-4      	; 0x1dac <SEG_KIT_voidDisplayBigNumber+0x4e2>
    1db0:	fe 01       	movw	r30, r28
    1db2:	eb 5a       	subi	r30, 0xAB	; 171
    1db4:	ff 4f       	sbci	r31, 0xFF	; 255
    1db6:	91 83       	std	Z+1, r25	; 0x01
    1db8:	80 83       	st	Z, r24
			_delay_ms(2);
			SEG_KIT_voidDisplayNumber((Number/10)%10,SEG2);
    1dba:	fe 01       	movw	r30, r28
    1dbc:	e1 58       	subi	r30, 0x81	; 129
    1dbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc0:	80 81       	ld	r24, Z
    1dc2:	91 81       	ldd	r25, Z+1	; 0x01
    1dc4:	2a e0       	ldi	r18, 0x0A	; 10
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	b9 01       	movw	r22, r18
    1dca:	0e 94 0c 22 	call	0x4418	; 0x4418 <__udivmodhi4>
    1dce:	cb 01       	movw	r24, r22
    1dd0:	2a e0       	ldi	r18, 0x0A	; 10
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	b9 01       	movw	r22, r18
    1dd6:	0e 94 0c 22 	call	0x4418	; 0x4418 <__udivmodhi4>
    1dda:	62 e0       	ldi	r22, 0x02	; 2
    1ddc:	0e 94 81 0b 	call	0x1702	; 0x1702 <SEG_KIT_voidDisplayNumber>
    1de0:	fe 01       	movw	r30, r28
    1de2:	ef 5a       	subi	r30, 0xAF	; 175
    1de4:	ff 4f       	sbci	r31, 0xFF	; 255
    1de6:	80 e0       	ldi	r24, 0x00	; 0
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	a0 e0       	ldi	r26, 0x00	; 0
    1dec:	b0 e4       	ldi	r27, 0x40	; 64
    1dee:	80 83       	st	Z, r24
    1df0:	91 83       	std	Z+1, r25	; 0x01
    1df2:	a2 83       	std	Z+2, r26	; 0x02
    1df4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1df6:	8e 01       	movw	r16, r28
    1df8:	03 5b       	subi	r16, 0xB3	; 179
    1dfa:	1f 4f       	sbci	r17, 0xFF	; 255
    1dfc:	fe 01       	movw	r30, r28
    1dfe:	ef 5a       	subi	r30, 0xAF	; 175
    1e00:	ff 4f       	sbci	r31, 0xFF	; 255
    1e02:	60 81       	ld	r22, Z
    1e04:	71 81       	ldd	r23, Z+1	; 0x01
    1e06:	82 81       	ldd	r24, Z+2	; 0x02
    1e08:	93 81       	ldd	r25, Z+3	; 0x03
    1e0a:	20 e0       	ldi	r18, 0x00	; 0
    1e0c:	30 e0       	ldi	r19, 0x00	; 0
    1e0e:	4a e7       	ldi	r20, 0x7A	; 122
    1e10:	55 e4       	ldi	r21, 0x45	; 69
    1e12:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e16:	dc 01       	movw	r26, r24
    1e18:	cb 01       	movw	r24, r22
    1e1a:	f8 01       	movw	r30, r16
    1e1c:	80 83       	st	Z, r24
    1e1e:	91 83       	std	Z+1, r25	; 0x01
    1e20:	a2 83       	std	Z+2, r26	; 0x02
    1e22:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e24:	fe 01       	movw	r30, r28
    1e26:	e3 5b       	subi	r30, 0xB3	; 179
    1e28:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2a:	60 81       	ld	r22, Z
    1e2c:	71 81       	ldd	r23, Z+1	; 0x01
    1e2e:	82 81       	ldd	r24, Z+2	; 0x02
    1e30:	93 81       	ldd	r25, Z+3	; 0x03
    1e32:	20 e0       	ldi	r18, 0x00	; 0
    1e34:	30 e0       	ldi	r19, 0x00	; 0
    1e36:	40 e8       	ldi	r20, 0x80	; 128
    1e38:	5f e3       	ldi	r21, 0x3F	; 63
    1e3a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1e3e:	88 23       	and	r24, r24
    1e40:	44 f4       	brge	.+16     	; 0x1e52 <SEG_KIT_voidDisplayBigNumber+0x588>
		__ticks = 1;
    1e42:	fe 01       	movw	r30, r28
    1e44:	e5 5b       	subi	r30, 0xB5	; 181
    1e46:	ff 4f       	sbci	r31, 0xFF	; 255
    1e48:	81 e0       	ldi	r24, 0x01	; 1
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	91 83       	std	Z+1, r25	; 0x01
    1e4e:	80 83       	st	Z, r24
    1e50:	64 c0       	rjmp	.+200    	; 0x1f1a <SEG_KIT_voidDisplayBigNumber+0x650>
	else if (__tmp > 65535)
    1e52:	fe 01       	movw	r30, r28
    1e54:	e3 5b       	subi	r30, 0xB3	; 179
    1e56:	ff 4f       	sbci	r31, 0xFF	; 255
    1e58:	60 81       	ld	r22, Z
    1e5a:	71 81       	ldd	r23, Z+1	; 0x01
    1e5c:	82 81       	ldd	r24, Z+2	; 0x02
    1e5e:	93 81       	ldd	r25, Z+3	; 0x03
    1e60:	20 e0       	ldi	r18, 0x00	; 0
    1e62:	3f ef       	ldi	r19, 0xFF	; 255
    1e64:	4f e7       	ldi	r20, 0x7F	; 127
    1e66:	57 e4       	ldi	r21, 0x47	; 71
    1e68:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e6c:	18 16       	cp	r1, r24
    1e6e:	0c f0       	brlt	.+2      	; 0x1e72 <SEG_KIT_voidDisplayBigNumber+0x5a8>
    1e70:	43 c0       	rjmp	.+134    	; 0x1ef8 <SEG_KIT_voidDisplayBigNumber+0x62e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e72:	fe 01       	movw	r30, r28
    1e74:	ef 5a       	subi	r30, 0xAF	; 175
    1e76:	ff 4f       	sbci	r31, 0xFF	; 255
    1e78:	60 81       	ld	r22, Z
    1e7a:	71 81       	ldd	r23, Z+1	; 0x01
    1e7c:	82 81       	ldd	r24, Z+2	; 0x02
    1e7e:	93 81       	ldd	r25, Z+3	; 0x03
    1e80:	20 e0       	ldi	r18, 0x00	; 0
    1e82:	30 e0       	ldi	r19, 0x00	; 0
    1e84:	40 e2       	ldi	r20, 0x20	; 32
    1e86:	51 e4       	ldi	r21, 0x41	; 65
    1e88:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e8c:	dc 01       	movw	r26, r24
    1e8e:	cb 01       	movw	r24, r22
    1e90:	8e 01       	movw	r16, r28
    1e92:	05 5b       	subi	r16, 0xB5	; 181
    1e94:	1f 4f       	sbci	r17, 0xFF	; 255
    1e96:	bc 01       	movw	r22, r24
    1e98:	cd 01       	movw	r24, r26
    1e9a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e9e:	dc 01       	movw	r26, r24
    1ea0:	cb 01       	movw	r24, r22
    1ea2:	f8 01       	movw	r30, r16
    1ea4:	91 83       	std	Z+1, r25	; 0x01
    1ea6:	80 83       	st	Z, r24
    1ea8:	1f c0       	rjmp	.+62     	; 0x1ee8 <SEG_KIT_voidDisplayBigNumber+0x61e>
    1eaa:	fe 01       	movw	r30, r28
    1eac:	e7 5b       	subi	r30, 0xB7	; 183
    1eae:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb0:	80 e9       	ldi	r24, 0x90	; 144
    1eb2:	91 e0       	ldi	r25, 0x01	; 1
    1eb4:	91 83       	std	Z+1, r25	; 0x01
    1eb6:	80 83       	st	Z, r24
    1eb8:	fe 01       	movw	r30, r28
    1eba:	e7 5b       	subi	r30, 0xB7	; 183
    1ebc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ebe:	80 81       	ld	r24, Z
    1ec0:	91 81       	ldd	r25, Z+1	; 0x01
    1ec2:	01 97       	sbiw	r24, 0x01	; 1
    1ec4:	f1 f7       	brne	.-4      	; 0x1ec2 <SEG_KIT_voidDisplayBigNumber+0x5f8>
    1ec6:	fe 01       	movw	r30, r28
    1ec8:	e7 5b       	subi	r30, 0xB7	; 183
    1eca:	ff 4f       	sbci	r31, 0xFF	; 255
    1ecc:	91 83       	std	Z+1, r25	; 0x01
    1ece:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ed0:	de 01       	movw	r26, r28
    1ed2:	a5 5b       	subi	r26, 0xB5	; 181
    1ed4:	bf 4f       	sbci	r27, 0xFF	; 255
    1ed6:	fe 01       	movw	r30, r28
    1ed8:	e5 5b       	subi	r30, 0xB5	; 181
    1eda:	ff 4f       	sbci	r31, 0xFF	; 255
    1edc:	80 81       	ld	r24, Z
    1ede:	91 81       	ldd	r25, Z+1	; 0x01
    1ee0:	01 97       	sbiw	r24, 0x01	; 1
    1ee2:	11 96       	adiw	r26, 0x01	; 1
    1ee4:	9c 93       	st	X, r25
    1ee6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ee8:	fe 01       	movw	r30, r28
    1eea:	e5 5b       	subi	r30, 0xB5	; 181
    1eec:	ff 4f       	sbci	r31, 0xFF	; 255
    1eee:	80 81       	ld	r24, Z
    1ef0:	91 81       	ldd	r25, Z+1	; 0x01
    1ef2:	00 97       	sbiw	r24, 0x00	; 0
    1ef4:	d1 f6       	brne	.-76     	; 0x1eaa <SEG_KIT_voidDisplayBigNumber+0x5e0>
    1ef6:	27 c0       	rjmp	.+78     	; 0x1f46 <SEG_KIT_voidDisplayBigNumber+0x67c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ef8:	8e 01       	movw	r16, r28
    1efa:	05 5b       	subi	r16, 0xB5	; 181
    1efc:	1f 4f       	sbci	r17, 0xFF	; 255
    1efe:	fe 01       	movw	r30, r28
    1f00:	e3 5b       	subi	r30, 0xB3	; 179
    1f02:	ff 4f       	sbci	r31, 0xFF	; 255
    1f04:	60 81       	ld	r22, Z
    1f06:	71 81       	ldd	r23, Z+1	; 0x01
    1f08:	82 81       	ldd	r24, Z+2	; 0x02
    1f0a:	93 81       	ldd	r25, Z+3	; 0x03
    1f0c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f10:	dc 01       	movw	r26, r24
    1f12:	cb 01       	movw	r24, r22
    1f14:	f8 01       	movw	r30, r16
    1f16:	91 83       	std	Z+1, r25	; 0x01
    1f18:	80 83       	st	Z, r24
    1f1a:	de 01       	movw	r26, r28
    1f1c:	a9 5b       	subi	r26, 0xB9	; 185
    1f1e:	bf 4f       	sbci	r27, 0xFF	; 255
    1f20:	fe 01       	movw	r30, r28
    1f22:	e5 5b       	subi	r30, 0xB5	; 181
    1f24:	ff 4f       	sbci	r31, 0xFF	; 255
    1f26:	80 81       	ld	r24, Z
    1f28:	91 81       	ldd	r25, Z+1	; 0x01
    1f2a:	8d 93       	st	X+, r24
    1f2c:	9c 93       	st	X, r25
    1f2e:	fe 01       	movw	r30, r28
    1f30:	e9 5b       	subi	r30, 0xB9	; 185
    1f32:	ff 4f       	sbci	r31, 0xFF	; 255
    1f34:	80 81       	ld	r24, Z
    1f36:	91 81       	ldd	r25, Z+1	; 0x01
    1f38:	01 97       	sbiw	r24, 0x01	; 1
    1f3a:	f1 f7       	brne	.-4      	; 0x1f38 <SEG_KIT_voidDisplayBigNumber+0x66e>
    1f3c:	fe 01       	movw	r30, r28
    1f3e:	e9 5b       	subi	r30, 0xB9	; 185
    1f40:	ff 4f       	sbci	r31, 0xFF	; 255
    1f42:	91 83       	std	Z+1, r25	; 0x01
    1f44:	80 83       	st	Z, r24
			_delay_ms(2);
			SEG_KIT_voidDisplayNumber(Number/100,SEG3);
    1f46:	fe 01       	movw	r30, r28
    1f48:	e1 58       	subi	r30, 0x81	; 129
    1f4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4c:	80 81       	ld	r24, Z
    1f4e:	91 81       	ldd	r25, Z+1	; 0x01
    1f50:	24 e6       	ldi	r18, 0x64	; 100
    1f52:	30 e0       	ldi	r19, 0x00	; 0
    1f54:	b9 01       	movw	r22, r18
    1f56:	0e 94 0c 22 	call	0x4418	; 0x4418 <__udivmodhi4>
    1f5a:	cb 01       	movw	r24, r22
    1f5c:	63 e0       	ldi	r22, 0x03	; 3
    1f5e:	0e 94 81 0b 	call	0x1702	; 0x1702 <SEG_KIT_voidDisplayNumber>
    1f62:	fe 01       	movw	r30, r28
    1f64:	ed 5b       	subi	r30, 0xBD	; 189
    1f66:	ff 4f       	sbci	r31, 0xFF	; 255
    1f68:	80 e0       	ldi	r24, 0x00	; 0
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	a0 e0       	ldi	r26, 0x00	; 0
    1f6e:	b0 e4       	ldi	r27, 0x40	; 64
    1f70:	80 83       	st	Z, r24
    1f72:	91 83       	std	Z+1, r25	; 0x01
    1f74:	a2 83       	std	Z+2, r26	; 0x02
    1f76:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f78:	8e 01       	movw	r16, r28
    1f7a:	01 5c       	subi	r16, 0xC1	; 193
    1f7c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f7e:	fe 01       	movw	r30, r28
    1f80:	ed 5b       	subi	r30, 0xBD	; 189
    1f82:	ff 4f       	sbci	r31, 0xFF	; 255
    1f84:	60 81       	ld	r22, Z
    1f86:	71 81       	ldd	r23, Z+1	; 0x01
    1f88:	82 81       	ldd	r24, Z+2	; 0x02
    1f8a:	93 81       	ldd	r25, Z+3	; 0x03
    1f8c:	20 e0       	ldi	r18, 0x00	; 0
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	4a e7       	ldi	r20, 0x7A	; 122
    1f92:	55 e4       	ldi	r21, 0x45	; 69
    1f94:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f98:	dc 01       	movw	r26, r24
    1f9a:	cb 01       	movw	r24, r22
    1f9c:	f8 01       	movw	r30, r16
    1f9e:	80 83       	st	Z, r24
    1fa0:	91 83       	std	Z+1, r25	; 0x01
    1fa2:	a2 83       	std	Z+2, r26	; 0x02
    1fa4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1fa6:	fe 01       	movw	r30, r28
    1fa8:	ff 96       	adiw	r30, 0x3f	; 63
    1faa:	60 81       	ld	r22, Z
    1fac:	71 81       	ldd	r23, Z+1	; 0x01
    1fae:	82 81       	ldd	r24, Z+2	; 0x02
    1fb0:	93 81       	ldd	r25, Z+3	; 0x03
    1fb2:	20 e0       	ldi	r18, 0x00	; 0
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	40 e8       	ldi	r20, 0x80	; 128
    1fb8:	5f e3       	ldi	r21, 0x3F	; 63
    1fba:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1fbe:	88 23       	and	r24, r24
    1fc0:	2c f4       	brge	.+10     	; 0x1fcc <SEG_KIT_voidDisplayBigNumber+0x702>
		__ticks = 1;
    1fc2:	81 e0       	ldi	r24, 0x01	; 1
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	9e af       	std	Y+62, r25	; 0x3e
    1fc8:	8d af       	std	Y+61, r24	; 0x3d
    1fca:	46 c0       	rjmp	.+140    	; 0x2058 <SEG_KIT_voidDisplayBigNumber+0x78e>
	else if (__tmp > 65535)
    1fcc:	fe 01       	movw	r30, r28
    1fce:	ff 96       	adiw	r30, 0x3f	; 63
    1fd0:	60 81       	ld	r22, Z
    1fd2:	71 81       	ldd	r23, Z+1	; 0x01
    1fd4:	82 81       	ldd	r24, Z+2	; 0x02
    1fd6:	93 81       	ldd	r25, Z+3	; 0x03
    1fd8:	20 e0       	ldi	r18, 0x00	; 0
    1fda:	3f ef       	ldi	r19, 0xFF	; 255
    1fdc:	4f e7       	ldi	r20, 0x7F	; 127
    1fde:	57 e4       	ldi	r21, 0x47	; 71
    1fe0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1fe4:	18 16       	cp	r1, r24
    1fe6:	64 f5       	brge	.+88     	; 0x2040 <SEG_KIT_voidDisplayBigNumber+0x776>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fe8:	fe 01       	movw	r30, r28
    1fea:	ed 5b       	subi	r30, 0xBD	; 189
    1fec:	ff 4f       	sbci	r31, 0xFF	; 255
    1fee:	60 81       	ld	r22, Z
    1ff0:	71 81       	ldd	r23, Z+1	; 0x01
    1ff2:	82 81       	ldd	r24, Z+2	; 0x02
    1ff4:	93 81       	ldd	r25, Z+3	; 0x03
    1ff6:	20 e0       	ldi	r18, 0x00	; 0
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	40 e2       	ldi	r20, 0x20	; 32
    1ffc:	51 e4       	ldi	r21, 0x41	; 65
    1ffe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2002:	dc 01       	movw	r26, r24
    2004:	cb 01       	movw	r24, r22
    2006:	bc 01       	movw	r22, r24
    2008:	cd 01       	movw	r24, r26
    200a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    200e:	dc 01       	movw	r26, r24
    2010:	cb 01       	movw	r24, r22
    2012:	9e af       	std	Y+62, r25	; 0x3e
    2014:	8d af       	std	Y+61, r24	; 0x3d
    2016:	0f c0       	rjmp	.+30     	; 0x2036 <SEG_KIT_voidDisplayBigNumber+0x76c>
    2018:	80 e9       	ldi	r24, 0x90	; 144
    201a:	91 e0       	ldi	r25, 0x01	; 1
    201c:	9c af       	std	Y+60, r25	; 0x3c
    201e:	8b af       	std	Y+59, r24	; 0x3b
    2020:	8b ad       	ldd	r24, Y+59	; 0x3b
    2022:	9c ad       	ldd	r25, Y+60	; 0x3c
    2024:	01 97       	sbiw	r24, 0x01	; 1
    2026:	f1 f7       	brne	.-4      	; 0x2024 <SEG_KIT_voidDisplayBigNumber+0x75a>
    2028:	9c af       	std	Y+60, r25	; 0x3c
    202a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    202c:	8d ad       	ldd	r24, Y+61	; 0x3d
    202e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2030:	01 97       	sbiw	r24, 0x01	; 1
    2032:	9e af       	std	Y+62, r25	; 0x3e
    2034:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2036:	8d ad       	ldd	r24, Y+61	; 0x3d
    2038:	9e ad       	ldd	r25, Y+62	; 0x3e
    203a:	00 97       	sbiw	r24, 0x00	; 0
    203c:	69 f7       	brne	.-38     	; 0x2018 <SEG_KIT_voidDisplayBigNumber+0x74e>
    203e:	20 c2       	rjmp	.+1088   	; 0x2480 <SEG_KIT_voidDisplayBigNumber+0xbb6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2040:	fe 01       	movw	r30, r28
    2042:	ff 96       	adiw	r30, 0x3f	; 63
    2044:	60 81       	ld	r22, Z
    2046:	71 81       	ldd	r23, Z+1	; 0x01
    2048:	82 81       	ldd	r24, Z+2	; 0x02
    204a:	93 81       	ldd	r25, Z+3	; 0x03
    204c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2050:	dc 01       	movw	r26, r24
    2052:	cb 01       	movw	r24, r22
    2054:	9e af       	std	Y+62, r25	; 0x3e
    2056:	8d af       	std	Y+61, r24	; 0x3d
    2058:	8d ad       	ldd	r24, Y+61	; 0x3d
    205a:	9e ad       	ldd	r25, Y+62	; 0x3e
    205c:	9a af       	std	Y+58, r25	; 0x3a
    205e:	89 af       	std	Y+57, r24	; 0x39
    2060:	89 ad       	ldd	r24, Y+57	; 0x39
    2062:	9a ad       	ldd	r25, Y+58	; 0x3a
    2064:	01 97       	sbiw	r24, 0x01	; 1
    2066:	f1 f7       	brne	.-4      	; 0x2064 <SEG_KIT_voidDisplayBigNumber+0x79a>
    2068:	9a af       	std	Y+58, r25	; 0x3a
    206a:	89 af       	std	Y+57, r24	; 0x39
    206c:	09 c2       	rjmp	.+1042   	; 0x2480 <SEG_KIT_voidDisplayBigNumber+0xbb6>
			_delay_ms(2);
		}
	else
		{
			SEG_KIT_voidDisplayNumber(Number%10,SEG1);
    206e:	fe 01       	movw	r30, r28
    2070:	e1 58       	subi	r30, 0x81	; 129
    2072:	ff 4f       	sbci	r31, 0xFF	; 255
    2074:	80 81       	ld	r24, Z
    2076:	91 81       	ldd	r25, Z+1	; 0x01
    2078:	2a e0       	ldi	r18, 0x0A	; 10
    207a:	30 e0       	ldi	r19, 0x00	; 0
    207c:	b9 01       	movw	r22, r18
    207e:	0e 94 0c 22 	call	0x4418	; 0x4418 <__udivmodhi4>
    2082:	61 e0       	ldi	r22, 0x01	; 1
    2084:	0e 94 81 0b 	call	0x1702	; 0x1702 <SEG_KIT_voidDisplayNumber>
    2088:	80 e0       	ldi	r24, 0x00	; 0
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	a0 e0       	ldi	r26, 0x00	; 0
    208e:	b0 e4       	ldi	r27, 0x40	; 64
    2090:	8d ab       	std	Y+53, r24	; 0x35
    2092:	9e ab       	std	Y+54, r25	; 0x36
    2094:	af ab       	std	Y+55, r26	; 0x37
    2096:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2098:	6d a9       	ldd	r22, Y+53	; 0x35
    209a:	7e a9       	ldd	r23, Y+54	; 0x36
    209c:	8f a9       	ldd	r24, Y+55	; 0x37
    209e:	98 ad       	ldd	r25, Y+56	; 0x38
    20a0:	20 e0       	ldi	r18, 0x00	; 0
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	4a e7       	ldi	r20, 0x7A	; 122
    20a6:	55 e4       	ldi	r21, 0x45	; 69
    20a8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20ac:	dc 01       	movw	r26, r24
    20ae:	cb 01       	movw	r24, r22
    20b0:	89 ab       	std	Y+49, r24	; 0x31
    20b2:	9a ab       	std	Y+50, r25	; 0x32
    20b4:	ab ab       	std	Y+51, r26	; 0x33
    20b6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    20b8:	69 a9       	ldd	r22, Y+49	; 0x31
    20ba:	7a a9       	ldd	r23, Y+50	; 0x32
    20bc:	8b a9       	ldd	r24, Y+51	; 0x33
    20be:	9c a9       	ldd	r25, Y+52	; 0x34
    20c0:	20 e0       	ldi	r18, 0x00	; 0
    20c2:	30 e0       	ldi	r19, 0x00	; 0
    20c4:	40 e8       	ldi	r20, 0x80	; 128
    20c6:	5f e3       	ldi	r21, 0x3F	; 63
    20c8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    20cc:	88 23       	and	r24, r24
    20ce:	2c f4       	brge	.+10     	; 0x20da <SEG_KIT_voidDisplayBigNumber+0x810>
		__ticks = 1;
    20d0:	81 e0       	ldi	r24, 0x01	; 1
    20d2:	90 e0       	ldi	r25, 0x00	; 0
    20d4:	98 ab       	std	Y+48, r25	; 0x30
    20d6:	8f a7       	std	Y+47, r24	; 0x2f
    20d8:	3f c0       	rjmp	.+126    	; 0x2158 <SEG_KIT_voidDisplayBigNumber+0x88e>
	else if (__tmp > 65535)
    20da:	69 a9       	ldd	r22, Y+49	; 0x31
    20dc:	7a a9       	ldd	r23, Y+50	; 0x32
    20de:	8b a9       	ldd	r24, Y+51	; 0x33
    20e0:	9c a9       	ldd	r25, Y+52	; 0x34
    20e2:	20 e0       	ldi	r18, 0x00	; 0
    20e4:	3f ef       	ldi	r19, 0xFF	; 255
    20e6:	4f e7       	ldi	r20, 0x7F	; 127
    20e8:	57 e4       	ldi	r21, 0x47	; 71
    20ea:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    20ee:	18 16       	cp	r1, r24
    20f0:	4c f5       	brge	.+82     	; 0x2144 <SEG_KIT_voidDisplayBigNumber+0x87a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20f2:	6d a9       	ldd	r22, Y+53	; 0x35
    20f4:	7e a9       	ldd	r23, Y+54	; 0x36
    20f6:	8f a9       	ldd	r24, Y+55	; 0x37
    20f8:	98 ad       	ldd	r25, Y+56	; 0x38
    20fa:	20 e0       	ldi	r18, 0x00	; 0
    20fc:	30 e0       	ldi	r19, 0x00	; 0
    20fe:	40 e2       	ldi	r20, 0x20	; 32
    2100:	51 e4       	ldi	r21, 0x41	; 65
    2102:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2106:	dc 01       	movw	r26, r24
    2108:	cb 01       	movw	r24, r22
    210a:	bc 01       	movw	r22, r24
    210c:	cd 01       	movw	r24, r26
    210e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2112:	dc 01       	movw	r26, r24
    2114:	cb 01       	movw	r24, r22
    2116:	98 ab       	std	Y+48, r25	; 0x30
    2118:	8f a7       	std	Y+47, r24	; 0x2f
    211a:	0f c0       	rjmp	.+30     	; 0x213a <SEG_KIT_voidDisplayBigNumber+0x870>
    211c:	80 e9       	ldi	r24, 0x90	; 144
    211e:	91 e0       	ldi	r25, 0x01	; 1
    2120:	9e a7       	std	Y+46, r25	; 0x2e
    2122:	8d a7       	std	Y+45, r24	; 0x2d
    2124:	8d a5       	ldd	r24, Y+45	; 0x2d
    2126:	9e a5       	ldd	r25, Y+46	; 0x2e
    2128:	01 97       	sbiw	r24, 0x01	; 1
    212a:	f1 f7       	brne	.-4      	; 0x2128 <SEG_KIT_voidDisplayBigNumber+0x85e>
    212c:	9e a7       	std	Y+46, r25	; 0x2e
    212e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2130:	8f a5       	ldd	r24, Y+47	; 0x2f
    2132:	98 a9       	ldd	r25, Y+48	; 0x30
    2134:	01 97       	sbiw	r24, 0x01	; 1
    2136:	98 ab       	std	Y+48, r25	; 0x30
    2138:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    213a:	8f a5       	ldd	r24, Y+47	; 0x2f
    213c:	98 a9       	ldd	r25, Y+48	; 0x30
    213e:	00 97       	sbiw	r24, 0x00	; 0
    2140:	69 f7       	brne	.-38     	; 0x211c <SEG_KIT_voidDisplayBigNumber+0x852>
    2142:	14 c0       	rjmp	.+40     	; 0x216c <SEG_KIT_voidDisplayBigNumber+0x8a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2144:	69 a9       	ldd	r22, Y+49	; 0x31
    2146:	7a a9       	ldd	r23, Y+50	; 0x32
    2148:	8b a9       	ldd	r24, Y+51	; 0x33
    214a:	9c a9       	ldd	r25, Y+52	; 0x34
    214c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2150:	dc 01       	movw	r26, r24
    2152:	cb 01       	movw	r24, r22
    2154:	98 ab       	std	Y+48, r25	; 0x30
    2156:	8f a7       	std	Y+47, r24	; 0x2f
    2158:	8f a5       	ldd	r24, Y+47	; 0x2f
    215a:	98 a9       	ldd	r25, Y+48	; 0x30
    215c:	9c a7       	std	Y+44, r25	; 0x2c
    215e:	8b a7       	std	Y+43, r24	; 0x2b
    2160:	8b a5       	ldd	r24, Y+43	; 0x2b
    2162:	9c a5       	ldd	r25, Y+44	; 0x2c
    2164:	01 97       	sbiw	r24, 0x01	; 1
    2166:	f1 f7       	brne	.-4      	; 0x2164 <SEG_KIT_voidDisplayBigNumber+0x89a>
    2168:	9c a7       	std	Y+44, r25	; 0x2c
    216a:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(2);
			SEG_KIT_voidDisplayNumber((Number/10)%10,SEG2);
    216c:	fe 01       	movw	r30, r28
    216e:	e1 58       	subi	r30, 0x81	; 129
    2170:	ff 4f       	sbci	r31, 0xFF	; 255
    2172:	80 81       	ld	r24, Z
    2174:	91 81       	ldd	r25, Z+1	; 0x01
    2176:	2a e0       	ldi	r18, 0x0A	; 10
    2178:	30 e0       	ldi	r19, 0x00	; 0
    217a:	b9 01       	movw	r22, r18
    217c:	0e 94 0c 22 	call	0x4418	; 0x4418 <__udivmodhi4>
    2180:	cb 01       	movw	r24, r22
    2182:	2a e0       	ldi	r18, 0x0A	; 10
    2184:	30 e0       	ldi	r19, 0x00	; 0
    2186:	b9 01       	movw	r22, r18
    2188:	0e 94 0c 22 	call	0x4418	; 0x4418 <__udivmodhi4>
    218c:	62 e0       	ldi	r22, 0x02	; 2
    218e:	0e 94 81 0b 	call	0x1702	; 0x1702 <SEG_KIT_voidDisplayNumber>
    2192:	80 e0       	ldi	r24, 0x00	; 0
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	a0 e0       	ldi	r26, 0x00	; 0
    2198:	b0 e4       	ldi	r27, 0x40	; 64
    219a:	8f a3       	std	Y+39, r24	; 0x27
    219c:	98 a7       	std	Y+40, r25	; 0x28
    219e:	a9 a7       	std	Y+41, r26	; 0x29
    21a0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21a2:	6f a1       	ldd	r22, Y+39	; 0x27
    21a4:	78 a5       	ldd	r23, Y+40	; 0x28
    21a6:	89 a5       	ldd	r24, Y+41	; 0x29
    21a8:	9a a5       	ldd	r25, Y+42	; 0x2a
    21aa:	20 e0       	ldi	r18, 0x00	; 0
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	4a e7       	ldi	r20, 0x7A	; 122
    21b0:	55 e4       	ldi	r21, 0x45	; 69
    21b2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21b6:	dc 01       	movw	r26, r24
    21b8:	cb 01       	movw	r24, r22
    21ba:	8b a3       	std	Y+35, r24	; 0x23
    21bc:	9c a3       	std	Y+36, r25	; 0x24
    21be:	ad a3       	std	Y+37, r26	; 0x25
    21c0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    21c2:	6b a1       	ldd	r22, Y+35	; 0x23
    21c4:	7c a1       	ldd	r23, Y+36	; 0x24
    21c6:	8d a1       	ldd	r24, Y+37	; 0x25
    21c8:	9e a1       	ldd	r25, Y+38	; 0x26
    21ca:	20 e0       	ldi	r18, 0x00	; 0
    21cc:	30 e0       	ldi	r19, 0x00	; 0
    21ce:	40 e8       	ldi	r20, 0x80	; 128
    21d0:	5f e3       	ldi	r21, 0x3F	; 63
    21d2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    21d6:	88 23       	and	r24, r24
    21d8:	2c f4       	brge	.+10     	; 0x21e4 <SEG_KIT_voidDisplayBigNumber+0x91a>
		__ticks = 1;
    21da:	81 e0       	ldi	r24, 0x01	; 1
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	9a a3       	std	Y+34, r25	; 0x22
    21e0:	89 a3       	std	Y+33, r24	; 0x21
    21e2:	3f c0       	rjmp	.+126    	; 0x2262 <SEG_KIT_voidDisplayBigNumber+0x998>
	else if (__tmp > 65535)
    21e4:	6b a1       	ldd	r22, Y+35	; 0x23
    21e6:	7c a1       	ldd	r23, Y+36	; 0x24
    21e8:	8d a1       	ldd	r24, Y+37	; 0x25
    21ea:	9e a1       	ldd	r25, Y+38	; 0x26
    21ec:	20 e0       	ldi	r18, 0x00	; 0
    21ee:	3f ef       	ldi	r19, 0xFF	; 255
    21f0:	4f e7       	ldi	r20, 0x7F	; 127
    21f2:	57 e4       	ldi	r21, 0x47	; 71
    21f4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    21f8:	18 16       	cp	r1, r24
    21fa:	4c f5       	brge	.+82     	; 0x224e <SEG_KIT_voidDisplayBigNumber+0x984>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21fc:	6f a1       	ldd	r22, Y+39	; 0x27
    21fe:	78 a5       	ldd	r23, Y+40	; 0x28
    2200:	89 a5       	ldd	r24, Y+41	; 0x29
    2202:	9a a5       	ldd	r25, Y+42	; 0x2a
    2204:	20 e0       	ldi	r18, 0x00	; 0
    2206:	30 e0       	ldi	r19, 0x00	; 0
    2208:	40 e2       	ldi	r20, 0x20	; 32
    220a:	51 e4       	ldi	r21, 0x41	; 65
    220c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2210:	dc 01       	movw	r26, r24
    2212:	cb 01       	movw	r24, r22
    2214:	bc 01       	movw	r22, r24
    2216:	cd 01       	movw	r24, r26
    2218:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    221c:	dc 01       	movw	r26, r24
    221e:	cb 01       	movw	r24, r22
    2220:	9a a3       	std	Y+34, r25	; 0x22
    2222:	89 a3       	std	Y+33, r24	; 0x21
    2224:	0f c0       	rjmp	.+30     	; 0x2244 <SEG_KIT_voidDisplayBigNumber+0x97a>
    2226:	80 e9       	ldi	r24, 0x90	; 144
    2228:	91 e0       	ldi	r25, 0x01	; 1
    222a:	98 a3       	std	Y+32, r25	; 0x20
    222c:	8f 8f       	std	Y+31, r24	; 0x1f
    222e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2230:	98 a1       	ldd	r25, Y+32	; 0x20
    2232:	01 97       	sbiw	r24, 0x01	; 1
    2234:	f1 f7       	brne	.-4      	; 0x2232 <SEG_KIT_voidDisplayBigNumber+0x968>
    2236:	98 a3       	std	Y+32, r25	; 0x20
    2238:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    223a:	89 a1       	ldd	r24, Y+33	; 0x21
    223c:	9a a1       	ldd	r25, Y+34	; 0x22
    223e:	01 97       	sbiw	r24, 0x01	; 1
    2240:	9a a3       	std	Y+34, r25	; 0x22
    2242:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2244:	89 a1       	ldd	r24, Y+33	; 0x21
    2246:	9a a1       	ldd	r25, Y+34	; 0x22
    2248:	00 97       	sbiw	r24, 0x00	; 0
    224a:	69 f7       	brne	.-38     	; 0x2226 <SEG_KIT_voidDisplayBigNumber+0x95c>
    224c:	14 c0       	rjmp	.+40     	; 0x2276 <SEG_KIT_voidDisplayBigNumber+0x9ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    224e:	6b a1       	ldd	r22, Y+35	; 0x23
    2250:	7c a1       	ldd	r23, Y+36	; 0x24
    2252:	8d a1       	ldd	r24, Y+37	; 0x25
    2254:	9e a1       	ldd	r25, Y+38	; 0x26
    2256:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    225a:	dc 01       	movw	r26, r24
    225c:	cb 01       	movw	r24, r22
    225e:	9a a3       	std	Y+34, r25	; 0x22
    2260:	89 a3       	std	Y+33, r24	; 0x21
    2262:	89 a1       	ldd	r24, Y+33	; 0x21
    2264:	9a a1       	ldd	r25, Y+34	; 0x22
    2266:	9e 8f       	std	Y+30, r25	; 0x1e
    2268:	8d 8f       	std	Y+29, r24	; 0x1d
    226a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    226c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    226e:	01 97       	sbiw	r24, 0x01	; 1
    2270:	f1 f7       	brne	.-4      	; 0x226e <SEG_KIT_voidDisplayBigNumber+0x9a4>
    2272:	9e 8f       	std	Y+30, r25	; 0x1e
    2274:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(2);
			SEG_KIT_voidDisplayNumber((Number/100)%10,SEG3);
    2276:	fe 01       	movw	r30, r28
    2278:	e1 58       	subi	r30, 0x81	; 129
    227a:	ff 4f       	sbci	r31, 0xFF	; 255
    227c:	80 81       	ld	r24, Z
    227e:	91 81       	ldd	r25, Z+1	; 0x01
    2280:	24 e6       	ldi	r18, 0x64	; 100
    2282:	30 e0       	ldi	r19, 0x00	; 0
    2284:	b9 01       	movw	r22, r18
    2286:	0e 94 0c 22 	call	0x4418	; 0x4418 <__udivmodhi4>
    228a:	cb 01       	movw	r24, r22
    228c:	2a e0       	ldi	r18, 0x0A	; 10
    228e:	30 e0       	ldi	r19, 0x00	; 0
    2290:	b9 01       	movw	r22, r18
    2292:	0e 94 0c 22 	call	0x4418	; 0x4418 <__udivmodhi4>
    2296:	63 e0       	ldi	r22, 0x03	; 3
    2298:	0e 94 81 0b 	call	0x1702	; 0x1702 <SEG_KIT_voidDisplayNumber>
    229c:	80 e0       	ldi	r24, 0x00	; 0
    229e:	90 e0       	ldi	r25, 0x00	; 0
    22a0:	a0 e0       	ldi	r26, 0x00	; 0
    22a2:	b0 e4       	ldi	r27, 0x40	; 64
    22a4:	89 8f       	std	Y+25, r24	; 0x19
    22a6:	9a 8f       	std	Y+26, r25	; 0x1a
    22a8:	ab 8f       	std	Y+27, r26	; 0x1b
    22aa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22ac:	69 8d       	ldd	r22, Y+25	; 0x19
    22ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22b4:	20 e0       	ldi	r18, 0x00	; 0
    22b6:	30 e0       	ldi	r19, 0x00	; 0
    22b8:	4a e7       	ldi	r20, 0x7A	; 122
    22ba:	55 e4       	ldi	r21, 0x45	; 69
    22bc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22c0:	dc 01       	movw	r26, r24
    22c2:	cb 01       	movw	r24, r22
    22c4:	8d 8b       	std	Y+21, r24	; 0x15
    22c6:	9e 8b       	std	Y+22, r25	; 0x16
    22c8:	af 8b       	std	Y+23, r26	; 0x17
    22ca:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    22cc:	6d 89       	ldd	r22, Y+21	; 0x15
    22ce:	7e 89       	ldd	r23, Y+22	; 0x16
    22d0:	8f 89       	ldd	r24, Y+23	; 0x17
    22d2:	98 8d       	ldd	r25, Y+24	; 0x18
    22d4:	20 e0       	ldi	r18, 0x00	; 0
    22d6:	30 e0       	ldi	r19, 0x00	; 0
    22d8:	40 e8       	ldi	r20, 0x80	; 128
    22da:	5f e3       	ldi	r21, 0x3F	; 63
    22dc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    22e0:	88 23       	and	r24, r24
    22e2:	2c f4       	brge	.+10     	; 0x22ee <SEG_KIT_voidDisplayBigNumber+0xa24>
		__ticks = 1;
    22e4:	81 e0       	ldi	r24, 0x01	; 1
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	9c 8b       	std	Y+20, r25	; 0x14
    22ea:	8b 8b       	std	Y+19, r24	; 0x13
    22ec:	3f c0       	rjmp	.+126    	; 0x236c <SEG_KIT_voidDisplayBigNumber+0xaa2>
	else if (__tmp > 65535)
    22ee:	6d 89       	ldd	r22, Y+21	; 0x15
    22f0:	7e 89       	ldd	r23, Y+22	; 0x16
    22f2:	8f 89       	ldd	r24, Y+23	; 0x17
    22f4:	98 8d       	ldd	r25, Y+24	; 0x18
    22f6:	20 e0       	ldi	r18, 0x00	; 0
    22f8:	3f ef       	ldi	r19, 0xFF	; 255
    22fa:	4f e7       	ldi	r20, 0x7F	; 127
    22fc:	57 e4       	ldi	r21, 0x47	; 71
    22fe:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2302:	18 16       	cp	r1, r24
    2304:	4c f5       	brge	.+82     	; 0x2358 <SEG_KIT_voidDisplayBigNumber+0xa8e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2306:	69 8d       	ldd	r22, Y+25	; 0x19
    2308:	7a 8d       	ldd	r23, Y+26	; 0x1a
    230a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    230c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    230e:	20 e0       	ldi	r18, 0x00	; 0
    2310:	30 e0       	ldi	r19, 0x00	; 0
    2312:	40 e2       	ldi	r20, 0x20	; 32
    2314:	51 e4       	ldi	r21, 0x41	; 65
    2316:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    231a:	dc 01       	movw	r26, r24
    231c:	cb 01       	movw	r24, r22
    231e:	bc 01       	movw	r22, r24
    2320:	cd 01       	movw	r24, r26
    2322:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2326:	dc 01       	movw	r26, r24
    2328:	cb 01       	movw	r24, r22
    232a:	9c 8b       	std	Y+20, r25	; 0x14
    232c:	8b 8b       	std	Y+19, r24	; 0x13
    232e:	0f c0       	rjmp	.+30     	; 0x234e <SEG_KIT_voidDisplayBigNumber+0xa84>
    2330:	80 e9       	ldi	r24, 0x90	; 144
    2332:	91 e0       	ldi	r25, 0x01	; 1
    2334:	9a 8b       	std	Y+18, r25	; 0x12
    2336:	89 8b       	std	Y+17, r24	; 0x11
    2338:	89 89       	ldd	r24, Y+17	; 0x11
    233a:	9a 89       	ldd	r25, Y+18	; 0x12
    233c:	01 97       	sbiw	r24, 0x01	; 1
    233e:	f1 f7       	brne	.-4      	; 0x233c <SEG_KIT_voidDisplayBigNumber+0xa72>
    2340:	9a 8b       	std	Y+18, r25	; 0x12
    2342:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2344:	8b 89       	ldd	r24, Y+19	; 0x13
    2346:	9c 89       	ldd	r25, Y+20	; 0x14
    2348:	01 97       	sbiw	r24, 0x01	; 1
    234a:	9c 8b       	std	Y+20, r25	; 0x14
    234c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    234e:	8b 89       	ldd	r24, Y+19	; 0x13
    2350:	9c 89       	ldd	r25, Y+20	; 0x14
    2352:	00 97       	sbiw	r24, 0x00	; 0
    2354:	69 f7       	brne	.-38     	; 0x2330 <SEG_KIT_voidDisplayBigNumber+0xa66>
    2356:	14 c0       	rjmp	.+40     	; 0x2380 <SEG_KIT_voidDisplayBigNumber+0xab6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2358:	6d 89       	ldd	r22, Y+21	; 0x15
    235a:	7e 89       	ldd	r23, Y+22	; 0x16
    235c:	8f 89       	ldd	r24, Y+23	; 0x17
    235e:	98 8d       	ldd	r25, Y+24	; 0x18
    2360:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2364:	dc 01       	movw	r26, r24
    2366:	cb 01       	movw	r24, r22
    2368:	9c 8b       	std	Y+20, r25	; 0x14
    236a:	8b 8b       	std	Y+19, r24	; 0x13
    236c:	8b 89       	ldd	r24, Y+19	; 0x13
    236e:	9c 89       	ldd	r25, Y+20	; 0x14
    2370:	98 8b       	std	Y+16, r25	; 0x10
    2372:	8f 87       	std	Y+15, r24	; 0x0f
    2374:	8f 85       	ldd	r24, Y+15	; 0x0f
    2376:	98 89       	ldd	r25, Y+16	; 0x10
    2378:	01 97       	sbiw	r24, 0x01	; 1
    237a:	f1 f7       	brne	.-4      	; 0x2378 <SEG_KIT_voidDisplayBigNumber+0xaae>
    237c:	98 8b       	std	Y+16, r25	; 0x10
    237e:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(2);
			SEG_KIT_voidDisplayNumber(Number/1000,SEG4);
    2380:	fe 01       	movw	r30, r28
    2382:	e1 58       	subi	r30, 0x81	; 129
    2384:	ff 4f       	sbci	r31, 0xFF	; 255
    2386:	80 81       	ld	r24, Z
    2388:	91 81       	ldd	r25, Z+1	; 0x01
    238a:	28 ee       	ldi	r18, 0xE8	; 232
    238c:	33 e0       	ldi	r19, 0x03	; 3
    238e:	b9 01       	movw	r22, r18
    2390:	0e 94 0c 22 	call	0x4418	; 0x4418 <__udivmodhi4>
    2394:	cb 01       	movw	r24, r22
    2396:	64 e0       	ldi	r22, 0x04	; 4
    2398:	0e 94 81 0b 	call	0x1702	; 0x1702 <SEG_KIT_voidDisplayNumber>
    239c:	80 e0       	ldi	r24, 0x00	; 0
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	a0 e0       	ldi	r26, 0x00	; 0
    23a2:	b0 e4       	ldi	r27, 0x40	; 64
    23a4:	8b 87       	std	Y+11, r24	; 0x0b
    23a6:	9c 87       	std	Y+12, r25	; 0x0c
    23a8:	ad 87       	std	Y+13, r26	; 0x0d
    23aa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    23ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    23b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    23b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    23b4:	20 e0       	ldi	r18, 0x00	; 0
    23b6:	30 e0       	ldi	r19, 0x00	; 0
    23b8:	4a e7       	ldi	r20, 0x7A	; 122
    23ba:	55 e4       	ldi	r21, 0x45	; 69
    23bc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23c0:	dc 01       	movw	r26, r24
    23c2:	cb 01       	movw	r24, r22
    23c4:	8f 83       	std	Y+7, r24	; 0x07
    23c6:	98 87       	std	Y+8, r25	; 0x08
    23c8:	a9 87       	std	Y+9, r26	; 0x09
    23ca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23cc:	6f 81       	ldd	r22, Y+7	; 0x07
    23ce:	78 85       	ldd	r23, Y+8	; 0x08
    23d0:	89 85       	ldd	r24, Y+9	; 0x09
    23d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    23d4:	20 e0       	ldi	r18, 0x00	; 0
    23d6:	30 e0       	ldi	r19, 0x00	; 0
    23d8:	40 e8       	ldi	r20, 0x80	; 128
    23da:	5f e3       	ldi	r21, 0x3F	; 63
    23dc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    23e0:	88 23       	and	r24, r24
    23e2:	2c f4       	brge	.+10     	; 0x23ee <SEG_KIT_voidDisplayBigNumber+0xb24>
		__ticks = 1;
    23e4:	81 e0       	ldi	r24, 0x01	; 1
    23e6:	90 e0       	ldi	r25, 0x00	; 0
    23e8:	9e 83       	std	Y+6, r25	; 0x06
    23ea:	8d 83       	std	Y+5, r24	; 0x05
    23ec:	3f c0       	rjmp	.+126    	; 0x246c <SEG_KIT_voidDisplayBigNumber+0xba2>
	else if (__tmp > 65535)
    23ee:	6f 81       	ldd	r22, Y+7	; 0x07
    23f0:	78 85       	ldd	r23, Y+8	; 0x08
    23f2:	89 85       	ldd	r24, Y+9	; 0x09
    23f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    23f6:	20 e0       	ldi	r18, 0x00	; 0
    23f8:	3f ef       	ldi	r19, 0xFF	; 255
    23fa:	4f e7       	ldi	r20, 0x7F	; 127
    23fc:	57 e4       	ldi	r21, 0x47	; 71
    23fe:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2402:	18 16       	cp	r1, r24
    2404:	4c f5       	brge	.+82     	; 0x2458 <SEG_KIT_voidDisplayBigNumber+0xb8e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2406:	6b 85       	ldd	r22, Y+11	; 0x0b
    2408:	7c 85       	ldd	r23, Y+12	; 0x0c
    240a:	8d 85       	ldd	r24, Y+13	; 0x0d
    240c:	9e 85       	ldd	r25, Y+14	; 0x0e
    240e:	20 e0       	ldi	r18, 0x00	; 0
    2410:	30 e0       	ldi	r19, 0x00	; 0
    2412:	40 e2       	ldi	r20, 0x20	; 32
    2414:	51 e4       	ldi	r21, 0x41	; 65
    2416:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    241a:	dc 01       	movw	r26, r24
    241c:	cb 01       	movw	r24, r22
    241e:	bc 01       	movw	r22, r24
    2420:	cd 01       	movw	r24, r26
    2422:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2426:	dc 01       	movw	r26, r24
    2428:	cb 01       	movw	r24, r22
    242a:	9e 83       	std	Y+6, r25	; 0x06
    242c:	8d 83       	std	Y+5, r24	; 0x05
    242e:	0f c0       	rjmp	.+30     	; 0x244e <SEG_KIT_voidDisplayBigNumber+0xb84>
    2430:	80 e9       	ldi	r24, 0x90	; 144
    2432:	91 e0       	ldi	r25, 0x01	; 1
    2434:	9c 83       	std	Y+4, r25	; 0x04
    2436:	8b 83       	std	Y+3, r24	; 0x03
    2438:	8b 81       	ldd	r24, Y+3	; 0x03
    243a:	9c 81       	ldd	r25, Y+4	; 0x04
    243c:	01 97       	sbiw	r24, 0x01	; 1
    243e:	f1 f7       	brne	.-4      	; 0x243c <SEG_KIT_voidDisplayBigNumber+0xb72>
    2440:	9c 83       	std	Y+4, r25	; 0x04
    2442:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2444:	8d 81       	ldd	r24, Y+5	; 0x05
    2446:	9e 81       	ldd	r25, Y+6	; 0x06
    2448:	01 97       	sbiw	r24, 0x01	; 1
    244a:	9e 83       	std	Y+6, r25	; 0x06
    244c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    244e:	8d 81       	ldd	r24, Y+5	; 0x05
    2450:	9e 81       	ldd	r25, Y+6	; 0x06
    2452:	00 97       	sbiw	r24, 0x00	; 0
    2454:	69 f7       	brne	.-38     	; 0x2430 <SEG_KIT_voidDisplayBigNumber+0xb66>
    2456:	14 c0       	rjmp	.+40     	; 0x2480 <SEG_KIT_voidDisplayBigNumber+0xbb6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2458:	6f 81       	ldd	r22, Y+7	; 0x07
    245a:	78 85       	ldd	r23, Y+8	; 0x08
    245c:	89 85       	ldd	r24, Y+9	; 0x09
    245e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2460:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2464:	dc 01       	movw	r26, r24
    2466:	cb 01       	movw	r24, r22
    2468:	9e 83       	std	Y+6, r25	; 0x06
    246a:	8d 83       	std	Y+5, r24	; 0x05
    246c:	8d 81       	ldd	r24, Y+5	; 0x05
    246e:	9e 81       	ldd	r25, Y+6	; 0x06
    2470:	9a 83       	std	Y+2, r25	; 0x02
    2472:	89 83       	std	Y+1, r24	; 0x01
    2474:	89 81       	ldd	r24, Y+1	; 0x01
    2476:	9a 81       	ldd	r25, Y+2	; 0x02
    2478:	01 97       	sbiw	r24, 0x01	; 1
    247a:	f1 f7       	brne	.-4      	; 0x2478 <SEG_KIT_voidDisplayBigNumber+0xbae>
    247c:	9a 83       	std	Y+2, r25	; 0x02
    247e:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(2);
		}
}
    2480:	c0 58       	subi	r28, 0x80	; 128
    2482:	df 4f       	sbci	r29, 0xFF	; 255
    2484:	0f b6       	in	r0, 0x3f	; 63
    2486:	f8 94       	cli
    2488:	de bf       	out	0x3e, r29	; 62
    248a:	0f be       	out	0x3f, r0	; 63
    248c:	cd bf       	out	0x3d, r28	; 61
    248e:	cf 91       	pop	r28
    2490:	df 91       	pop	r29
    2492:	1f 91       	pop	r17
    2494:	0f 91       	pop	r16
    2496:	08 95       	ret

00002498 <LCD_KIT_voidInitialization>:

#include <util/delay.h>


void LCD_KIT_voidInitialization(void)
{
    2498:	0f 93       	push	r16
    249a:	1f 93       	push	r17
    249c:	df 93       	push	r29
    249e:	cf 93       	push	r28
    24a0:	cd b7       	in	r28, 0x3d	; 61
    24a2:	de b7       	in	r29, 0x3e	; 62
    24a4:	c4 55       	subi	r28, 0x54	; 84
    24a6:	d0 40       	sbci	r29, 0x00	; 0
    24a8:	0f b6       	in	r0, 0x3f	; 63
    24aa:	f8 94       	cli
    24ac:	de bf       	out	0x3e, r29	; 62
    24ae:	0f be       	out	0x3f, r0	; 63
    24b0:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinDirection(PortA,Pin2,Output);
    24b2:	80 e0       	ldi	r24, 0x00	; 0
    24b4:	62 e0       	ldi	r22, 0x02	; 2
    24b6:	41 e0       	ldi	r20, 0x01	; 1
    24b8:	0e 94 ca 05 	call	0xb94	; 0xb94 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PortA,Pin3,Output);
    24bc:	80 e0       	ldi	r24, 0x00	; 0
    24be:	63 e0       	ldi	r22, 0x03	; 3
    24c0:	41 e0       	ldi	r20, 0x01	; 1
    24c2:	0e 94 ca 05 	call	0xb94	; 0xb94 <DIO_voidSetPinDirection>

	DIO_voidSetPinDirection(PortB,Pin0,Output);
    24c6:	81 e0       	ldi	r24, 0x01	; 1
    24c8:	60 e0       	ldi	r22, 0x00	; 0
    24ca:	41 e0       	ldi	r20, 0x01	; 1
    24cc:	0e 94 ca 05 	call	0xb94	; 0xb94 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PortB,Pin1,Output);
    24d0:	81 e0       	ldi	r24, 0x01	; 1
    24d2:	61 e0       	ldi	r22, 0x01	; 1
    24d4:	41 e0       	ldi	r20, 0x01	; 1
    24d6:	0e 94 ca 05 	call	0xb94	; 0xb94 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PortB,Pin2,Output);
    24da:	81 e0       	ldi	r24, 0x01	; 1
    24dc:	62 e0       	ldi	r22, 0x02	; 2
    24de:	41 e0       	ldi	r20, 0x01	; 1
    24e0:	0e 94 ca 05 	call	0xb94	; 0xb94 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PortB,Pin4,Output);
    24e4:	81 e0       	ldi	r24, 0x01	; 1
    24e6:	64 e0       	ldi	r22, 0x04	; 4
    24e8:	41 e0       	ldi	r20, 0x01	; 1
    24ea:	0e 94 ca 05 	call	0xb94	; 0xb94 <DIO_voidSetPinDirection>
    24ee:	fe 01       	movw	r30, r28
    24f0:	ef 5a       	subi	r30, 0xAF	; 175
    24f2:	ff 4f       	sbci	r31, 0xFF	; 255
    24f4:	80 e0       	ldi	r24, 0x00	; 0
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	a0 e2       	ldi	r26, 0x20	; 32
    24fa:	b2 e4       	ldi	r27, 0x42	; 66
    24fc:	80 83       	st	Z, r24
    24fe:	91 83       	std	Z+1, r25	; 0x01
    2500:	a2 83       	std	Z+2, r26	; 0x02
    2502:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2504:	8e 01       	movw	r16, r28
    2506:	03 5b       	subi	r16, 0xB3	; 179
    2508:	1f 4f       	sbci	r17, 0xFF	; 255
    250a:	fe 01       	movw	r30, r28
    250c:	ef 5a       	subi	r30, 0xAF	; 175
    250e:	ff 4f       	sbci	r31, 0xFF	; 255
    2510:	60 81       	ld	r22, Z
    2512:	71 81       	ldd	r23, Z+1	; 0x01
    2514:	82 81       	ldd	r24, Z+2	; 0x02
    2516:	93 81       	ldd	r25, Z+3	; 0x03
    2518:	20 e0       	ldi	r18, 0x00	; 0
    251a:	30 e0       	ldi	r19, 0x00	; 0
    251c:	4a e7       	ldi	r20, 0x7A	; 122
    251e:	55 e4       	ldi	r21, 0x45	; 69
    2520:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2524:	dc 01       	movw	r26, r24
    2526:	cb 01       	movw	r24, r22
    2528:	f8 01       	movw	r30, r16
    252a:	80 83       	st	Z, r24
    252c:	91 83       	std	Z+1, r25	; 0x01
    252e:	a2 83       	std	Z+2, r26	; 0x02
    2530:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2532:	fe 01       	movw	r30, r28
    2534:	e3 5b       	subi	r30, 0xB3	; 179
    2536:	ff 4f       	sbci	r31, 0xFF	; 255
    2538:	60 81       	ld	r22, Z
    253a:	71 81       	ldd	r23, Z+1	; 0x01
    253c:	82 81       	ldd	r24, Z+2	; 0x02
    253e:	93 81       	ldd	r25, Z+3	; 0x03
    2540:	20 e0       	ldi	r18, 0x00	; 0
    2542:	30 e0       	ldi	r19, 0x00	; 0
    2544:	40 e8       	ldi	r20, 0x80	; 128
    2546:	5f e3       	ldi	r21, 0x3F	; 63
    2548:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    254c:	88 23       	and	r24, r24
    254e:	44 f4       	brge	.+16     	; 0x2560 <LCD_KIT_voidInitialization+0xc8>
		__ticks = 1;
    2550:	fe 01       	movw	r30, r28
    2552:	e5 5b       	subi	r30, 0xB5	; 181
    2554:	ff 4f       	sbci	r31, 0xFF	; 255
    2556:	81 e0       	ldi	r24, 0x01	; 1
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	91 83       	std	Z+1, r25	; 0x01
    255c:	80 83       	st	Z, r24
    255e:	64 c0       	rjmp	.+200    	; 0x2628 <LCD_KIT_voidInitialization+0x190>
	else if (__tmp > 65535)
    2560:	fe 01       	movw	r30, r28
    2562:	e3 5b       	subi	r30, 0xB3	; 179
    2564:	ff 4f       	sbci	r31, 0xFF	; 255
    2566:	60 81       	ld	r22, Z
    2568:	71 81       	ldd	r23, Z+1	; 0x01
    256a:	82 81       	ldd	r24, Z+2	; 0x02
    256c:	93 81       	ldd	r25, Z+3	; 0x03
    256e:	20 e0       	ldi	r18, 0x00	; 0
    2570:	3f ef       	ldi	r19, 0xFF	; 255
    2572:	4f e7       	ldi	r20, 0x7F	; 127
    2574:	57 e4       	ldi	r21, 0x47	; 71
    2576:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    257a:	18 16       	cp	r1, r24
    257c:	0c f0       	brlt	.+2      	; 0x2580 <LCD_KIT_voidInitialization+0xe8>
    257e:	43 c0       	rjmp	.+134    	; 0x2606 <LCD_KIT_voidInitialization+0x16e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2580:	fe 01       	movw	r30, r28
    2582:	ef 5a       	subi	r30, 0xAF	; 175
    2584:	ff 4f       	sbci	r31, 0xFF	; 255
    2586:	60 81       	ld	r22, Z
    2588:	71 81       	ldd	r23, Z+1	; 0x01
    258a:	82 81       	ldd	r24, Z+2	; 0x02
    258c:	93 81       	ldd	r25, Z+3	; 0x03
    258e:	20 e0       	ldi	r18, 0x00	; 0
    2590:	30 e0       	ldi	r19, 0x00	; 0
    2592:	40 e2       	ldi	r20, 0x20	; 32
    2594:	51 e4       	ldi	r21, 0x41	; 65
    2596:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    259a:	dc 01       	movw	r26, r24
    259c:	cb 01       	movw	r24, r22
    259e:	8e 01       	movw	r16, r28
    25a0:	05 5b       	subi	r16, 0xB5	; 181
    25a2:	1f 4f       	sbci	r17, 0xFF	; 255
    25a4:	bc 01       	movw	r22, r24
    25a6:	cd 01       	movw	r24, r26
    25a8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25ac:	dc 01       	movw	r26, r24
    25ae:	cb 01       	movw	r24, r22
    25b0:	f8 01       	movw	r30, r16
    25b2:	91 83       	std	Z+1, r25	; 0x01
    25b4:	80 83       	st	Z, r24
    25b6:	1f c0       	rjmp	.+62     	; 0x25f6 <LCD_KIT_voidInitialization+0x15e>
    25b8:	fe 01       	movw	r30, r28
    25ba:	e7 5b       	subi	r30, 0xB7	; 183
    25bc:	ff 4f       	sbci	r31, 0xFF	; 255
    25be:	80 e9       	ldi	r24, 0x90	; 144
    25c0:	91 e0       	ldi	r25, 0x01	; 1
    25c2:	91 83       	std	Z+1, r25	; 0x01
    25c4:	80 83       	st	Z, r24
    25c6:	fe 01       	movw	r30, r28
    25c8:	e7 5b       	subi	r30, 0xB7	; 183
    25ca:	ff 4f       	sbci	r31, 0xFF	; 255
    25cc:	80 81       	ld	r24, Z
    25ce:	91 81       	ldd	r25, Z+1	; 0x01
    25d0:	01 97       	sbiw	r24, 0x01	; 1
    25d2:	f1 f7       	brne	.-4      	; 0x25d0 <LCD_KIT_voidInitialization+0x138>
    25d4:	fe 01       	movw	r30, r28
    25d6:	e7 5b       	subi	r30, 0xB7	; 183
    25d8:	ff 4f       	sbci	r31, 0xFF	; 255
    25da:	91 83       	std	Z+1, r25	; 0x01
    25dc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25de:	de 01       	movw	r26, r28
    25e0:	a5 5b       	subi	r26, 0xB5	; 181
    25e2:	bf 4f       	sbci	r27, 0xFF	; 255
    25e4:	fe 01       	movw	r30, r28
    25e6:	e5 5b       	subi	r30, 0xB5	; 181
    25e8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ea:	80 81       	ld	r24, Z
    25ec:	91 81       	ldd	r25, Z+1	; 0x01
    25ee:	01 97       	sbiw	r24, 0x01	; 1
    25f0:	11 96       	adiw	r26, 0x01	; 1
    25f2:	9c 93       	st	X, r25
    25f4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25f6:	fe 01       	movw	r30, r28
    25f8:	e5 5b       	subi	r30, 0xB5	; 181
    25fa:	ff 4f       	sbci	r31, 0xFF	; 255
    25fc:	80 81       	ld	r24, Z
    25fe:	91 81       	ldd	r25, Z+1	; 0x01
    2600:	00 97       	sbiw	r24, 0x00	; 0
    2602:	d1 f6       	brne	.-76     	; 0x25b8 <LCD_KIT_voidInitialization+0x120>
    2604:	27 c0       	rjmp	.+78     	; 0x2654 <LCD_KIT_voidInitialization+0x1bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2606:	8e 01       	movw	r16, r28
    2608:	05 5b       	subi	r16, 0xB5	; 181
    260a:	1f 4f       	sbci	r17, 0xFF	; 255
    260c:	fe 01       	movw	r30, r28
    260e:	e3 5b       	subi	r30, 0xB3	; 179
    2610:	ff 4f       	sbci	r31, 0xFF	; 255
    2612:	60 81       	ld	r22, Z
    2614:	71 81       	ldd	r23, Z+1	; 0x01
    2616:	82 81       	ldd	r24, Z+2	; 0x02
    2618:	93 81       	ldd	r25, Z+3	; 0x03
    261a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    261e:	dc 01       	movw	r26, r24
    2620:	cb 01       	movw	r24, r22
    2622:	f8 01       	movw	r30, r16
    2624:	91 83       	std	Z+1, r25	; 0x01
    2626:	80 83       	st	Z, r24
    2628:	de 01       	movw	r26, r28
    262a:	a9 5b       	subi	r26, 0xB9	; 185
    262c:	bf 4f       	sbci	r27, 0xFF	; 255
    262e:	fe 01       	movw	r30, r28
    2630:	e5 5b       	subi	r30, 0xB5	; 181
    2632:	ff 4f       	sbci	r31, 0xFF	; 255
    2634:	80 81       	ld	r24, Z
    2636:	91 81       	ldd	r25, Z+1	; 0x01
    2638:	8d 93       	st	X+, r24
    263a:	9c 93       	st	X, r25
    263c:	fe 01       	movw	r30, r28
    263e:	e9 5b       	subi	r30, 0xB9	; 185
    2640:	ff 4f       	sbci	r31, 0xFF	; 255
    2642:	80 81       	ld	r24, Z
    2644:	91 81       	ldd	r25, Z+1	; 0x01
    2646:	01 97       	sbiw	r24, 0x01	; 1
    2648:	f1 f7       	brne	.-4      	; 0x2646 <LCD_KIT_voidInitialization+0x1ae>
    264a:	fe 01       	movw	r30, r28
    264c:	e9 5b       	subi	r30, 0xB9	; 185
    264e:	ff 4f       	sbci	r31, 0xFF	; 255
    2650:	91 83       	std	Z+1, r25	; 0x01
    2652:	80 83       	st	Z, r24

	_delay_ms(40);
	DIO_voidSetPinValue(PortB,Pin0,Low);
    2654:	81 e0       	ldi	r24, 0x01	; 1
    2656:	60 e0       	ldi	r22, 0x00	; 0
    2658:	40 e0       	ldi	r20, 0x00	; 0
    265a:	0e 94 c6 06 	call	0xd8c	; 0xd8c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PortB,Pin1,High);
    265e:	81 e0       	ldi	r24, 0x01	; 1
    2660:	61 e0       	ldi	r22, 0x01	; 1
    2662:	41 e0       	ldi	r20, 0x01	; 1
    2664:	0e 94 c6 06 	call	0xd8c	; 0xd8c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PortB,Pin2,Low);
    2668:	81 e0       	ldi	r24, 0x01	; 1
    266a:	62 e0       	ldi	r22, 0x02	; 2
    266c:	40 e0       	ldi	r20, 0x00	; 0
    266e:	0e 94 c6 06 	call	0xd8c	; 0xd8c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PortB,Pin4,Low);
    2672:	81 e0       	ldi	r24, 0x01	; 1
    2674:	64 e0       	ldi	r22, 0x04	; 4
    2676:	40 e0       	ldi	r20, 0x00	; 0
    2678:	0e 94 c6 06 	call	0xd8c	; 0xd8c <DIO_voidSetPinValue>

	DIO_voidSetPinValue(PortA,Pin2,High);
    267c:	80 e0       	ldi	r24, 0x00	; 0
    267e:	62 e0       	ldi	r22, 0x02	; 2
    2680:	41 e0       	ldi	r20, 0x01	; 1
    2682:	0e 94 c6 06 	call	0xd8c	; 0xd8c <DIO_voidSetPinValue>
    2686:	fe 01       	movw	r30, r28
    2688:	ed 5b       	subi	r30, 0xBD	; 189
    268a:	ff 4f       	sbci	r31, 0xFF	; 255
    268c:	80 e0       	ldi	r24, 0x00	; 0
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	a0 e0       	ldi	r26, 0x00	; 0
    2692:	b0 e4       	ldi	r27, 0x40	; 64
    2694:	80 83       	st	Z, r24
    2696:	91 83       	std	Z+1, r25	; 0x01
    2698:	a2 83       	std	Z+2, r26	; 0x02
    269a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    269c:	8e 01       	movw	r16, r28
    269e:	01 5c       	subi	r16, 0xC1	; 193
    26a0:	1f 4f       	sbci	r17, 0xFF	; 255
    26a2:	fe 01       	movw	r30, r28
    26a4:	ed 5b       	subi	r30, 0xBD	; 189
    26a6:	ff 4f       	sbci	r31, 0xFF	; 255
    26a8:	60 81       	ld	r22, Z
    26aa:	71 81       	ldd	r23, Z+1	; 0x01
    26ac:	82 81       	ldd	r24, Z+2	; 0x02
    26ae:	93 81       	ldd	r25, Z+3	; 0x03
    26b0:	20 e0       	ldi	r18, 0x00	; 0
    26b2:	30 e0       	ldi	r19, 0x00	; 0
    26b4:	4a e7       	ldi	r20, 0x7A	; 122
    26b6:	55 e4       	ldi	r21, 0x45	; 69
    26b8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26bc:	dc 01       	movw	r26, r24
    26be:	cb 01       	movw	r24, r22
    26c0:	f8 01       	movw	r30, r16
    26c2:	80 83       	st	Z, r24
    26c4:	91 83       	std	Z+1, r25	; 0x01
    26c6:	a2 83       	std	Z+2, r26	; 0x02
    26c8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26ca:	fe 01       	movw	r30, r28
    26cc:	ff 96       	adiw	r30, 0x3f	; 63
    26ce:	60 81       	ld	r22, Z
    26d0:	71 81       	ldd	r23, Z+1	; 0x01
    26d2:	82 81       	ldd	r24, Z+2	; 0x02
    26d4:	93 81       	ldd	r25, Z+3	; 0x03
    26d6:	20 e0       	ldi	r18, 0x00	; 0
    26d8:	30 e0       	ldi	r19, 0x00	; 0
    26da:	40 e8       	ldi	r20, 0x80	; 128
    26dc:	5f e3       	ldi	r21, 0x3F	; 63
    26de:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    26e2:	88 23       	and	r24, r24
    26e4:	2c f4       	brge	.+10     	; 0x26f0 <LCD_KIT_voidInitialization+0x258>
		__ticks = 1;
    26e6:	81 e0       	ldi	r24, 0x01	; 1
    26e8:	90 e0       	ldi	r25, 0x00	; 0
    26ea:	9e af       	std	Y+62, r25	; 0x3e
    26ec:	8d af       	std	Y+61, r24	; 0x3d
    26ee:	46 c0       	rjmp	.+140    	; 0x277c <LCD_KIT_voidInitialization+0x2e4>
	else if (__tmp > 65535)
    26f0:	fe 01       	movw	r30, r28
    26f2:	ff 96       	adiw	r30, 0x3f	; 63
    26f4:	60 81       	ld	r22, Z
    26f6:	71 81       	ldd	r23, Z+1	; 0x01
    26f8:	82 81       	ldd	r24, Z+2	; 0x02
    26fa:	93 81       	ldd	r25, Z+3	; 0x03
    26fc:	20 e0       	ldi	r18, 0x00	; 0
    26fe:	3f ef       	ldi	r19, 0xFF	; 255
    2700:	4f e7       	ldi	r20, 0x7F	; 127
    2702:	57 e4       	ldi	r21, 0x47	; 71
    2704:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2708:	18 16       	cp	r1, r24
    270a:	64 f5       	brge	.+88     	; 0x2764 <LCD_KIT_voidInitialization+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    270c:	fe 01       	movw	r30, r28
    270e:	ed 5b       	subi	r30, 0xBD	; 189
    2710:	ff 4f       	sbci	r31, 0xFF	; 255
    2712:	60 81       	ld	r22, Z
    2714:	71 81       	ldd	r23, Z+1	; 0x01
    2716:	82 81       	ldd	r24, Z+2	; 0x02
    2718:	93 81       	ldd	r25, Z+3	; 0x03
    271a:	20 e0       	ldi	r18, 0x00	; 0
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	40 e2       	ldi	r20, 0x20	; 32
    2720:	51 e4       	ldi	r21, 0x41	; 65
    2722:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2726:	dc 01       	movw	r26, r24
    2728:	cb 01       	movw	r24, r22
    272a:	bc 01       	movw	r22, r24
    272c:	cd 01       	movw	r24, r26
    272e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2732:	dc 01       	movw	r26, r24
    2734:	cb 01       	movw	r24, r22
    2736:	9e af       	std	Y+62, r25	; 0x3e
    2738:	8d af       	std	Y+61, r24	; 0x3d
    273a:	0f c0       	rjmp	.+30     	; 0x275a <LCD_KIT_voidInitialization+0x2c2>
    273c:	80 e9       	ldi	r24, 0x90	; 144
    273e:	91 e0       	ldi	r25, 0x01	; 1
    2740:	9c af       	std	Y+60, r25	; 0x3c
    2742:	8b af       	std	Y+59, r24	; 0x3b
    2744:	8b ad       	ldd	r24, Y+59	; 0x3b
    2746:	9c ad       	ldd	r25, Y+60	; 0x3c
    2748:	01 97       	sbiw	r24, 0x01	; 1
    274a:	f1 f7       	brne	.-4      	; 0x2748 <LCD_KIT_voidInitialization+0x2b0>
    274c:	9c af       	std	Y+60, r25	; 0x3c
    274e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2750:	8d ad       	ldd	r24, Y+61	; 0x3d
    2752:	9e ad       	ldd	r25, Y+62	; 0x3e
    2754:	01 97       	sbiw	r24, 0x01	; 1
    2756:	9e af       	std	Y+62, r25	; 0x3e
    2758:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    275a:	8d ad       	ldd	r24, Y+61	; 0x3d
    275c:	9e ad       	ldd	r25, Y+62	; 0x3e
    275e:	00 97       	sbiw	r24, 0x00	; 0
    2760:	69 f7       	brne	.-38     	; 0x273c <LCD_KIT_voidInitialization+0x2a4>
    2762:	16 c0       	rjmp	.+44     	; 0x2790 <LCD_KIT_voidInitialization+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2764:	fe 01       	movw	r30, r28
    2766:	ff 96       	adiw	r30, 0x3f	; 63
    2768:	60 81       	ld	r22, Z
    276a:	71 81       	ldd	r23, Z+1	; 0x01
    276c:	82 81       	ldd	r24, Z+2	; 0x02
    276e:	93 81       	ldd	r25, Z+3	; 0x03
    2770:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2774:	dc 01       	movw	r26, r24
    2776:	cb 01       	movw	r24, r22
    2778:	9e af       	std	Y+62, r25	; 0x3e
    277a:	8d af       	std	Y+61, r24	; 0x3d
    277c:	8d ad       	ldd	r24, Y+61	; 0x3d
    277e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2780:	9a af       	std	Y+58, r25	; 0x3a
    2782:	89 af       	std	Y+57, r24	; 0x39
    2784:	89 ad       	ldd	r24, Y+57	; 0x39
    2786:	9a ad       	ldd	r25, Y+58	; 0x3a
    2788:	01 97       	sbiw	r24, 0x01	; 1
    278a:	f1 f7       	brne	.-4      	; 0x2788 <LCD_KIT_voidInitialization+0x2f0>
    278c:	9a af       	std	Y+58, r25	; 0x3a
    278e:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(2);
	DIO_voidSetPinValue(PortA,Pin2,Low);
    2790:	80 e0       	ldi	r24, 0x00	; 0
    2792:	62 e0       	ldi	r22, 0x02	; 2
    2794:	40 e0       	ldi	r20, 0x00	; 0
    2796:	0e 94 c6 06 	call	0xd8c	; 0xd8c <DIO_voidSetPinValue>
    279a:	80 e0       	ldi	r24, 0x00	; 0
    279c:	90 e0       	ldi	r25, 0x00	; 0
    279e:	a0 e0       	ldi	r26, 0x00	; 0
    27a0:	b0 e4       	ldi	r27, 0x40	; 64
    27a2:	8d ab       	std	Y+53, r24	; 0x35
    27a4:	9e ab       	std	Y+54, r25	; 0x36
    27a6:	af ab       	std	Y+55, r26	; 0x37
    27a8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27aa:	6d a9       	ldd	r22, Y+53	; 0x35
    27ac:	7e a9       	ldd	r23, Y+54	; 0x36
    27ae:	8f a9       	ldd	r24, Y+55	; 0x37
    27b0:	98 ad       	ldd	r25, Y+56	; 0x38
    27b2:	20 e0       	ldi	r18, 0x00	; 0
    27b4:	30 e0       	ldi	r19, 0x00	; 0
    27b6:	4a e7       	ldi	r20, 0x7A	; 122
    27b8:	55 e4       	ldi	r21, 0x45	; 69
    27ba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27be:	dc 01       	movw	r26, r24
    27c0:	cb 01       	movw	r24, r22
    27c2:	89 ab       	std	Y+49, r24	; 0x31
    27c4:	9a ab       	std	Y+50, r25	; 0x32
    27c6:	ab ab       	std	Y+51, r26	; 0x33
    27c8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    27ca:	69 a9       	ldd	r22, Y+49	; 0x31
    27cc:	7a a9       	ldd	r23, Y+50	; 0x32
    27ce:	8b a9       	ldd	r24, Y+51	; 0x33
    27d0:	9c a9       	ldd	r25, Y+52	; 0x34
    27d2:	20 e0       	ldi	r18, 0x00	; 0
    27d4:	30 e0       	ldi	r19, 0x00	; 0
    27d6:	40 e8       	ldi	r20, 0x80	; 128
    27d8:	5f e3       	ldi	r21, 0x3F	; 63
    27da:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    27de:	88 23       	and	r24, r24
    27e0:	2c f4       	brge	.+10     	; 0x27ec <LCD_KIT_voidInitialization+0x354>
		__ticks = 1;
    27e2:	81 e0       	ldi	r24, 0x01	; 1
    27e4:	90 e0       	ldi	r25, 0x00	; 0
    27e6:	98 ab       	std	Y+48, r25	; 0x30
    27e8:	8f a7       	std	Y+47, r24	; 0x2f
    27ea:	3f c0       	rjmp	.+126    	; 0x286a <LCD_KIT_voidInitialization+0x3d2>
	else if (__tmp > 65535)
    27ec:	69 a9       	ldd	r22, Y+49	; 0x31
    27ee:	7a a9       	ldd	r23, Y+50	; 0x32
    27f0:	8b a9       	ldd	r24, Y+51	; 0x33
    27f2:	9c a9       	ldd	r25, Y+52	; 0x34
    27f4:	20 e0       	ldi	r18, 0x00	; 0
    27f6:	3f ef       	ldi	r19, 0xFF	; 255
    27f8:	4f e7       	ldi	r20, 0x7F	; 127
    27fa:	57 e4       	ldi	r21, 0x47	; 71
    27fc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2800:	18 16       	cp	r1, r24
    2802:	4c f5       	brge	.+82     	; 0x2856 <LCD_KIT_voidInitialization+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2804:	6d a9       	ldd	r22, Y+53	; 0x35
    2806:	7e a9       	ldd	r23, Y+54	; 0x36
    2808:	8f a9       	ldd	r24, Y+55	; 0x37
    280a:	98 ad       	ldd	r25, Y+56	; 0x38
    280c:	20 e0       	ldi	r18, 0x00	; 0
    280e:	30 e0       	ldi	r19, 0x00	; 0
    2810:	40 e2       	ldi	r20, 0x20	; 32
    2812:	51 e4       	ldi	r21, 0x41	; 65
    2814:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2818:	dc 01       	movw	r26, r24
    281a:	cb 01       	movw	r24, r22
    281c:	bc 01       	movw	r22, r24
    281e:	cd 01       	movw	r24, r26
    2820:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2824:	dc 01       	movw	r26, r24
    2826:	cb 01       	movw	r24, r22
    2828:	98 ab       	std	Y+48, r25	; 0x30
    282a:	8f a7       	std	Y+47, r24	; 0x2f
    282c:	0f c0       	rjmp	.+30     	; 0x284c <LCD_KIT_voidInitialization+0x3b4>
    282e:	80 e9       	ldi	r24, 0x90	; 144
    2830:	91 e0       	ldi	r25, 0x01	; 1
    2832:	9e a7       	std	Y+46, r25	; 0x2e
    2834:	8d a7       	std	Y+45, r24	; 0x2d
    2836:	8d a5       	ldd	r24, Y+45	; 0x2d
    2838:	9e a5       	ldd	r25, Y+46	; 0x2e
    283a:	01 97       	sbiw	r24, 0x01	; 1
    283c:	f1 f7       	brne	.-4      	; 0x283a <LCD_KIT_voidInitialization+0x3a2>
    283e:	9e a7       	std	Y+46, r25	; 0x2e
    2840:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2842:	8f a5       	ldd	r24, Y+47	; 0x2f
    2844:	98 a9       	ldd	r25, Y+48	; 0x30
    2846:	01 97       	sbiw	r24, 0x01	; 1
    2848:	98 ab       	std	Y+48, r25	; 0x30
    284a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    284c:	8f a5       	ldd	r24, Y+47	; 0x2f
    284e:	98 a9       	ldd	r25, Y+48	; 0x30
    2850:	00 97       	sbiw	r24, 0x00	; 0
    2852:	69 f7       	brne	.-38     	; 0x282e <LCD_KIT_voidInitialization+0x396>
    2854:	14 c0       	rjmp	.+40     	; 0x287e <LCD_KIT_voidInitialization+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2856:	69 a9       	ldd	r22, Y+49	; 0x31
    2858:	7a a9       	ldd	r23, Y+50	; 0x32
    285a:	8b a9       	ldd	r24, Y+51	; 0x33
    285c:	9c a9       	ldd	r25, Y+52	; 0x34
    285e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2862:	dc 01       	movw	r26, r24
    2864:	cb 01       	movw	r24, r22
    2866:	98 ab       	std	Y+48, r25	; 0x30
    2868:	8f a7       	std	Y+47, r24	; 0x2f
    286a:	8f a5       	ldd	r24, Y+47	; 0x2f
    286c:	98 a9       	ldd	r25, Y+48	; 0x30
    286e:	9c a7       	std	Y+44, r25	; 0x2c
    2870:	8b a7       	std	Y+43, r24	; 0x2b
    2872:	8b a5       	ldd	r24, Y+43	; 0x2b
    2874:	9c a5       	ldd	r25, Y+44	; 0x2c
    2876:	01 97       	sbiw	r24, 0x01	; 1
    2878:	f1 f7       	brne	.-4      	; 0x2876 <LCD_KIT_voidInitialization+0x3de>
    287a:	9c a7       	std	Y+44, r25	; 0x2c
    287c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);

	LCD_KIT_voidRunCommand(0x28);
    287e:	88 e2       	ldi	r24, 0x28	; 40
    2880:	0e 94 1f 18 	call	0x303e	; 0x303e <LCD_KIT_voidRunCommand>
    2884:	80 e0       	ldi	r24, 0x00	; 0
    2886:	90 e0       	ldi	r25, 0x00	; 0
    2888:	a0 e8       	ldi	r26, 0x80	; 128
    288a:	bf e3       	ldi	r27, 0x3F	; 63
    288c:	8f a3       	std	Y+39, r24	; 0x27
    288e:	98 a7       	std	Y+40, r25	; 0x28
    2890:	a9 a7       	std	Y+41, r26	; 0x29
    2892:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2894:	6f a1       	ldd	r22, Y+39	; 0x27
    2896:	78 a5       	ldd	r23, Y+40	; 0x28
    2898:	89 a5       	ldd	r24, Y+41	; 0x29
    289a:	9a a5       	ldd	r25, Y+42	; 0x2a
    289c:	20 e0       	ldi	r18, 0x00	; 0
    289e:	30 e0       	ldi	r19, 0x00	; 0
    28a0:	4a e7       	ldi	r20, 0x7A	; 122
    28a2:	55 e4       	ldi	r21, 0x45	; 69
    28a4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28a8:	dc 01       	movw	r26, r24
    28aa:	cb 01       	movw	r24, r22
    28ac:	8b a3       	std	Y+35, r24	; 0x23
    28ae:	9c a3       	std	Y+36, r25	; 0x24
    28b0:	ad a3       	std	Y+37, r26	; 0x25
    28b2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    28b4:	6b a1       	ldd	r22, Y+35	; 0x23
    28b6:	7c a1       	ldd	r23, Y+36	; 0x24
    28b8:	8d a1       	ldd	r24, Y+37	; 0x25
    28ba:	9e a1       	ldd	r25, Y+38	; 0x26
    28bc:	20 e0       	ldi	r18, 0x00	; 0
    28be:	30 e0       	ldi	r19, 0x00	; 0
    28c0:	40 e8       	ldi	r20, 0x80	; 128
    28c2:	5f e3       	ldi	r21, 0x3F	; 63
    28c4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    28c8:	88 23       	and	r24, r24
    28ca:	2c f4       	brge	.+10     	; 0x28d6 <LCD_KIT_voidInitialization+0x43e>
		__ticks = 1;
    28cc:	81 e0       	ldi	r24, 0x01	; 1
    28ce:	90 e0       	ldi	r25, 0x00	; 0
    28d0:	9a a3       	std	Y+34, r25	; 0x22
    28d2:	89 a3       	std	Y+33, r24	; 0x21
    28d4:	3f c0       	rjmp	.+126    	; 0x2954 <LCD_KIT_voidInitialization+0x4bc>
	else if (__tmp > 65535)
    28d6:	6b a1       	ldd	r22, Y+35	; 0x23
    28d8:	7c a1       	ldd	r23, Y+36	; 0x24
    28da:	8d a1       	ldd	r24, Y+37	; 0x25
    28dc:	9e a1       	ldd	r25, Y+38	; 0x26
    28de:	20 e0       	ldi	r18, 0x00	; 0
    28e0:	3f ef       	ldi	r19, 0xFF	; 255
    28e2:	4f e7       	ldi	r20, 0x7F	; 127
    28e4:	57 e4       	ldi	r21, 0x47	; 71
    28e6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    28ea:	18 16       	cp	r1, r24
    28ec:	4c f5       	brge	.+82     	; 0x2940 <LCD_KIT_voidInitialization+0x4a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28ee:	6f a1       	ldd	r22, Y+39	; 0x27
    28f0:	78 a5       	ldd	r23, Y+40	; 0x28
    28f2:	89 a5       	ldd	r24, Y+41	; 0x29
    28f4:	9a a5       	ldd	r25, Y+42	; 0x2a
    28f6:	20 e0       	ldi	r18, 0x00	; 0
    28f8:	30 e0       	ldi	r19, 0x00	; 0
    28fa:	40 e2       	ldi	r20, 0x20	; 32
    28fc:	51 e4       	ldi	r21, 0x41	; 65
    28fe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2902:	dc 01       	movw	r26, r24
    2904:	cb 01       	movw	r24, r22
    2906:	bc 01       	movw	r22, r24
    2908:	cd 01       	movw	r24, r26
    290a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    290e:	dc 01       	movw	r26, r24
    2910:	cb 01       	movw	r24, r22
    2912:	9a a3       	std	Y+34, r25	; 0x22
    2914:	89 a3       	std	Y+33, r24	; 0x21
    2916:	0f c0       	rjmp	.+30     	; 0x2936 <LCD_KIT_voidInitialization+0x49e>
    2918:	80 e9       	ldi	r24, 0x90	; 144
    291a:	91 e0       	ldi	r25, 0x01	; 1
    291c:	98 a3       	std	Y+32, r25	; 0x20
    291e:	8f 8f       	std	Y+31, r24	; 0x1f
    2920:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2922:	98 a1       	ldd	r25, Y+32	; 0x20
    2924:	01 97       	sbiw	r24, 0x01	; 1
    2926:	f1 f7       	brne	.-4      	; 0x2924 <LCD_KIT_voidInitialization+0x48c>
    2928:	98 a3       	std	Y+32, r25	; 0x20
    292a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    292c:	89 a1       	ldd	r24, Y+33	; 0x21
    292e:	9a a1       	ldd	r25, Y+34	; 0x22
    2930:	01 97       	sbiw	r24, 0x01	; 1
    2932:	9a a3       	std	Y+34, r25	; 0x22
    2934:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2936:	89 a1       	ldd	r24, Y+33	; 0x21
    2938:	9a a1       	ldd	r25, Y+34	; 0x22
    293a:	00 97       	sbiw	r24, 0x00	; 0
    293c:	69 f7       	brne	.-38     	; 0x2918 <LCD_KIT_voidInitialization+0x480>
    293e:	14 c0       	rjmp	.+40     	; 0x2968 <LCD_KIT_voidInitialization+0x4d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2940:	6b a1       	ldd	r22, Y+35	; 0x23
    2942:	7c a1       	ldd	r23, Y+36	; 0x24
    2944:	8d a1       	ldd	r24, Y+37	; 0x25
    2946:	9e a1       	ldd	r25, Y+38	; 0x26
    2948:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    294c:	dc 01       	movw	r26, r24
    294e:	cb 01       	movw	r24, r22
    2950:	9a a3       	std	Y+34, r25	; 0x22
    2952:	89 a3       	std	Y+33, r24	; 0x21
    2954:	89 a1       	ldd	r24, Y+33	; 0x21
    2956:	9a a1       	ldd	r25, Y+34	; 0x22
    2958:	9e 8f       	std	Y+30, r25	; 0x1e
    295a:	8d 8f       	std	Y+29, r24	; 0x1d
    295c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    295e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2960:	01 97       	sbiw	r24, 0x01	; 1
    2962:	f1 f7       	brne	.-4      	; 0x2960 <LCD_KIT_voidInitialization+0x4c8>
    2964:	9e 8f       	std	Y+30, r25	; 0x1e
    2966:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	LCD_KIT_voidRunCommand(0x0C);
    2968:	8c e0       	ldi	r24, 0x0C	; 12
    296a:	0e 94 1f 18 	call	0x303e	; 0x303e <LCD_KIT_voidRunCommand>
    296e:	80 e0       	ldi	r24, 0x00	; 0
    2970:	90 e0       	ldi	r25, 0x00	; 0
    2972:	a0 e8       	ldi	r26, 0x80	; 128
    2974:	bf e3       	ldi	r27, 0x3F	; 63
    2976:	89 8f       	std	Y+25, r24	; 0x19
    2978:	9a 8f       	std	Y+26, r25	; 0x1a
    297a:	ab 8f       	std	Y+27, r26	; 0x1b
    297c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    297e:	69 8d       	ldd	r22, Y+25	; 0x19
    2980:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2982:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2984:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2986:	20 e0       	ldi	r18, 0x00	; 0
    2988:	30 e0       	ldi	r19, 0x00	; 0
    298a:	4a e7       	ldi	r20, 0x7A	; 122
    298c:	55 e4       	ldi	r21, 0x45	; 69
    298e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2992:	dc 01       	movw	r26, r24
    2994:	cb 01       	movw	r24, r22
    2996:	8d 8b       	std	Y+21, r24	; 0x15
    2998:	9e 8b       	std	Y+22, r25	; 0x16
    299a:	af 8b       	std	Y+23, r26	; 0x17
    299c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    299e:	6d 89       	ldd	r22, Y+21	; 0x15
    29a0:	7e 89       	ldd	r23, Y+22	; 0x16
    29a2:	8f 89       	ldd	r24, Y+23	; 0x17
    29a4:	98 8d       	ldd	r25, Y+24	; 0x18
    29a6:	20 e0       	ldi	r18, 0x00	; 0
    29a8:	30 e0       	ldi	r19, 0x00	; 0
    29aa:	40 e8       	ldi	r20, 0x80	; 128
    29ac:	5f e3       	ldi	r21, 0x3F	; 63
    29ae:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    29b2:	88 23       	and	r24, r24
    29b4:	2c f4       	brge	.+10     	; 0x29c0 <LCD_KIT_voidInitialization+0x528>
		__ticks = 1;
    29b6:	81 e0       	ldi	r24, 0x01	; 1
    29b8:	90 e0       	ldi	r25, 0x00	; 0
    29ba:	9c 8b       	std	Y+20, r25	; 0x14
    29bc:	8b 8b       	std	Y+19, r24	; 0x13
    29be:	3f c0       	rjmp	.+126    	; 0x2a3e <LCD_KIT_voidInitialization+0x5a6>
	else if (__tmp > 65535)
    29c0:	6d 89       	ldd	r22, Y+21	; 0x15
    29c2:	7e 89       	ldd	r23, Y+22	; 0x16
    29c4:	8f 89       	ldd	r24, Y+23	; 0x17
    29c6:	98 8d       	ldd	r25, Y+24	; 0x18
    29c8:	20 e0       	ldi	r18, 0x00	; 0
    29ca:	3f ef       	ldi	r19, 0xFF	; 255
    29cc:	4f e7       	ldi	r20, 0x7F	; 127
    29ce:	57 e4       	ldi	r21, 0x47	; 71
    29d0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    29d4:	18 16       	cp	r1, r24
    29d6:	4c f5       	brge	.+82     	; 0x2a2a <LCD_KIT_voidInitialization+0x592>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29d8:	69 8d       	ldd	r22, Y+25	; 0x19
    29da:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29e0:	20 e0       	ldi	r18, 0x00	; 0
    29e2:	30 e0       	ldi	r19, 0x00	; 0
    29e4:	40 e2       	ldi	r20, 0x20	; 32
    29e6:	51 e4       	ldi	r21, 0x41	; 65
    29e8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29ec:	dc 01       	movw	r26, r24
    29ee:	cb 01       	movw	r24, r22
    29f0:	bc 01       	movw	r22, r24
    29f2:	cd 01       	movw	r24, r26
    29f4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29f8:	dc 01       	movw	r26, r24
    29fa:	cb 01       	movw	r24, r22
    29fc:	9c 8b       	std	Y+20, r25	; 0x14
    29fe:	8b 8b       	std	Y+19, r24	; 0x13
    2a00:	0f c0       	rjmp	.+30     	; 0x2a20 <LCD_KIT_voidInitialization+0x588>
    2a02:	80 e9       	ldi	r24, 0x90	; 144
    2a04:	91 e0       	ldi	r25, 0x01	; 1
    2a06:	9a 8b       	std	Y+18, r25	; 0x12
    2a08:	89 8b       	std	Y+17, r24	; 0x11
    2a0a:	89 89       	ldd	r24, Y+17	; 0x11
    2a0c:	9a 89       	ldd	r25, Y+18	; 0x12
    2a0e:	01 97       	sbiw	r24, 0x01	; 1
    2a10:	f1 f7       	brne	.-4      	; 0x2a0e <LCD_KIT_voidInitialization+0x576>
    2a12:	9a 8b       	std	Y+18, r25	; 0x12
    2a14:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a16:	8b 89       	ldd	r24, Y+19	; 0x13
    2a18:	9c 89       	ldd	r25, Y+20	; 0x14
    2a1a:	01 97       	sbiw	r24, 0x01	; 1
    2a1c:	9c 8b       	std	Y+20, r25	; 0x14
    2a1e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a20:	8b 89       	ldd	r24, Y+19	; 0x13
    2a22:	9c 89       	ldd	r25, Y+20	; 0x14
    2a24:	00 97       	sbiw	r24, 0x00	; 0
    2a26:	69 f7       	brne	.-38     	; 0x2a02 <LCD_KIT_voidInitialization+0x56a>
    2a28:	14 c0       	rjmp	.+40     	; 0x2a52 <LCD_KIT_voidInitialization+0x5ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a2a:	6d 89       	ldd	r22, Y+21	; 0x15
    2a2c:	7e 89       	ldd	r23, Y+22	; 0x16
    2a2e:	8f 89       	ldd	r24, Y+23	; 0x17
    2a30:	98 8d       	ldd	r25, Y+24	; 0x18
    2a32:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a36:	dc 01       	movw	r26, r24
    2a38:	cb 01       	movw	r24, r22
    2a3a:	9c 8b       	std	Y+20, r25	; 0x14
    2a3c:	8b 8b       	std	Y+19, r24	; 0x13
    2a3e:	8b 89       	ldd	r24, Y+19	; 0x13
    2a40:	9c 89       	ldd	r25, Y+20	; 0x14
    2a42:	98 8b       	std	Y+16, r25	; 0x10
    2a44:	8f 87       	std	Y+15, r24	; 0x0f
    2a46:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a48:	98 89       	ldd	r25, Y+16	; 0x10
    2a4a:	01 97       	sbiw	r24, 0x01	; 1
    2a4c:	f1 f7       	brne	.-4      	; 0x2a4a <LCD_KIT_voidInitialization+0x5b2>
    2a4e:	98 8b       	std	Y+16, r25	; 0x10
    2a50:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);

	LCD_KIT_voidRunCommand(0x01);
    2a52:	81 e0       	ldi	r24, 0x01	; 1
    2a54:	0e 94 1f 18 	call	0x303e	; 0x303e <LCD_KIT_voidRunCommand>
    2a58:	80 e0       	ldi	r24, 0x00	; 0
    2a5a:	90 e0       	ldi	r25, 0x00	; 0
    2a5c:	a0 e0       	ldi	r26, 0x00	; 0
    2a5e:	b0 e4       	ldi	r27, 0x40	; 64
    2a60:	8b 87       	std	Y+11, r24	; 0x0b
    2a62:	9c 87       	std	Y+12, r25	; 0x0c
    2a64:	ad 87       	std	Y+13, r26	; 0x0d
    2a66:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a68:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a70:	20 e0       	ldi	r18, 0x00	; 0
    2a72:	30 e0       	ldi	r19, 0x00	; 0
    2a74:	4a e7       	ldi	r20, 0x7A	; 122
    2a76:	55 e4       	ldi	r21, 0x45	; 69
    2a78:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a7c:	dc 01       	movw	r26, r24
    2a7e:	cb 01       	movw	r24, r22
    2a80:	8f 83       	std	Y+7, r24	; 0x07
    2a82:	98 87       	std	Y+8, r25	; 0x08
    2a84:	a9 87       	std	Y+9, r26	; 0x09
    2a86:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a88:	6f 81       	ldd	r22, Y+7	; 0x07
    2a8a:	78 85       	ldd	r23, Y+8	; 0x08
    2a8c:	89 85       	ldd	r24, Y+9	; 0x09
    2a8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a90:	20 e0       	ldi	r18, 0x00	; 0
    2a92:	30 e0       	ldi	r19, 0x00	; 0
    2a94:	40 e8       	ldi	r20, 0x80	; 128
    2a96:	5f e3       	ldi	r21, 0x3F	; 63
    2a98:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2a9c:	88 23       	and	r24, r24
    2a9e:	2c f4       	brge	.+10     	; 0x2aaa <LCD_KIT_voidInitialization+0x612>
		__ticks = 1;
    2aa0:	81 e0       	ldi	r24, 0x01	; 1
    2aa2:	90 e0       	ldi	r25, 0x00	; 0
    2aa4:	9e 83       	std	Y+6, r25	; 0x06
    2aa6:	8d 83       	std	Y+5, r24	; 0x05
    2aa8:	3f c0       	rjmp	.+126    	; 0x2b28 <LCD_KIT_voidInitialization+0x690>
	else if (__tmp > 65535)
    2aaa:	6f 81       	ldd	r22, Y+7	; 0x07
    2aac:	78 85       	ldd	r23, Y+8	; 0x08
    2aae:	89 85       	ldd	r24, Y+9	; 0x09
    2ab0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ab2:	20 e0       	ldi	r18, 0x00	; 0
    2ab4:	3f ef       	ldi	r19, 0xFF	; 255
    2ab6:	4f e7       	ldi	r20, 0x7F	; 127
    2ab8:	57 e4       	ldi	r21, 0x47	; 71
    2aba:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2abe:	18 16       	cp	r1, r24
    2ac0:	4c f5       	brge	.+82     	; 0x2b14 <LCD_KIT_voidInitialization+0x67c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ac2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ac4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ac6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ac8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aca:	20 e0       	ldi	r18, 0x00	; 0
    2acc:	30 e0       	ldi	r19, 0x00	; 0
    2ace:	40 e2       	ldi	r20, 0x20	; 32
    2ad0:	51 e4       	ldi	r21, 0x41	; 65
    2ad2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ad6:	dc 01       	movw	r26, r24
    2ad8:	cb 01       	movw	r24, r22
    2ada:	bc 01       	movw	r22, r24
    2adc:	cd 01       	movw	r24, r26
    2ade:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ae2:	dc 01       	movw	r26, r24
    2ae4:	cb 01       	movw	r24, r22
    2ae6:	9e 83       	std	Y+6, r25	; 0x06
    2ae8:	8d 83       	std	Y+5, r24	; 0x05
    2aea:	0f c0       	rjmp	.+30     	; 0x2b0a <LCD_KIT_voidInitialization+0x672>
    2aec:	80 e9       	ldi	r24, 0x90	; 144
    2aee:	91 e0       	ldi	r25, 0x01	; 1
    2af0:	9c 83       	std	Y+4, r25	; 0x04
    2af2:	8b 83       	std	Y+3, r24	; 0x03
    2af4:	8b 81       	ldd	r24, Y+3	; 0x03
    2af6:	9c 81       	ldd	r25, Y+4	; 0x04
    2af8:	01 97       	sbiw	r24, 0x01	; 1
    2afa:	f1 f7       	brne	.-4      	; 0x2af8 <LCD_KIT_voidInitialization+0x660>
    2afc:	9c 83       	std	Y+4, r25	; 0x04
    2afe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b00:	8d 81       	ldd	r24, Y+5	; 0x05
    2b02:	9e 81       	ldd	r25, Y+6	; 0x06
    2b04:	01 97       	sbiw	r24, 0x01	; 1
    2b06:	9e 83       	std	Y+6, r25	; 0x06
    2b08:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b0a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b0c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b0e:	00 97       	sbiw	r24, 0x00	; 0
    2b10:	69 f7       	brne	.-38     	; 0x2aec <LCD_KIT_voidInitialization+0x654>
    2b12:	14 c0       	rjmp	.+40     	; 0x2b3c <LCD_KIT_voidInitialization+0x6a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b14:	6f 81       	ldd	r22, Y+7	; 0x07
    2b16:	78 85       	ldd	r23, Y+8	; 0x08
    2b18:	89 85       	ldd	r24, Y+9	; 0x09
    2b1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b1c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b20:	dc 01       	movw	r26, r24
    2b22:	cb 01       	movw	r24, r22
    2b24:	9e 83       	std	Y+6, r25	; 0x06
    2b26:	8d 83       	std	Y+5, r24	; 0x05
    2b28:	8d 81       	ldd	r24, Y+5	; 0x05
    2b2a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b2c:	9a 83       	std	Y+2, r25	; 0x02
    2b2e:	89 83       	std	Y+1, r24	; 0x01
    2b30:	89 81       	ldd	r24, Y+1	; 0x01
    2b32:	9a 81       	ldd	r25, Y+2	; 0x02
    2b34:	01 97       	sbiw	r24, 0x01	; 1
    2b36:	f1 f7       	brne	.-4      	; 0x2b34 <LCD_KIT_voidInitialization+0x69c>
    2b38:	9a 83       	std	Y+2, r25	; 0x02
    2b3a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

	LCD_KIT_voidRunCommand(0x06);
    2b3c:	86 e0       	ldi	r24, 0x06	; 6
    2b3e:	0e 94 1f 18 	call	0x303e	; 0x303e <LCD_KIT_voidRunCommand>

	LCD_KIT_voidRunCommand(0x80);
    2b42:	80 e8       	ldi	r24, 0x80	; 128
    2b44:	0e 94 1f 18 	call	0x303e	; 0x303e <LCD_KIT_voidRunCommand>

	return;
}
    2b48:	cc 5a       	subi	r28, 0xAC	; 172
    2b4a:	df 4f       	sbci	r29, 0xFF	; 255
    2b4c:	0f b6       	in	r0, 0x3f	; 63
    2b4e:	f8 94       	cli
    2b50:	de bf       	out	0x3e, r29	; 62
    2b52:	0f be       	out	0x3f, r0	; 63
    2b54:	cd bf       	out	0x3d, r28	; 61
    2b56:	cf 91       	pop	r28
    2b58:	df 91       	pop	r29
    2b5a:	1f 91       	pop	r17
    2b5c:	0f 91       	pop	r16
    2b5e:	08 95       	ret

00002b60 <LCD_KIT_voidDisplayCharacter>:

void LCD_KIT_voidDisplayCharacter(u8 character)
{
    2b60:	df 93       	push	r29
    2b62:	cf 93       	push	r28
    2b64:	cd b7       	in	r28, 0x3d	; 61
    2b66:	de b7       	in	r29, 0x3e	; 62
    2b68:	e9 97       	sbiw	r28, 0x39	; 57
    2b6a:	0f b6       	in	r0, 0x3f	; 63
    2b6c:	f8 94       	cli
    2b6e:	de bf       	out	0x3e, r29	; 62
    2b70:	0f be       	out	0x3f, r0	; 63
    2b72:	cd bf       	out	0x3d, r28	; 61
    2b74:	89 af       	std	Y+57, r24	; 0x39
	DIO_voidSetPinValue(PortA,Pin3,High);
    2b76:	80 e0       	ldi	r24, 0x00	; 0
    2b78:	63 e0       	ldi	r22, 0x03	; 3
    2b7a:	41 e0       	ldi	r20, 0x01	; 1
    2b7c:	0e 94 c6 06 	call	0xd8c	; 0xd8c <DIO_voidSetPinValue>

	DIO_voidSetPinValue(PortB,Pin4,GET_BIT(character,Pin7));
    2b80:	89 ad       	ldd	r24, Y+57	; 0x39
    2b82:	98 2f       	mov	r25, r24
    2b84:	99 1f       	adc	r25, r25
    2b86:	99 27       	eor	r25, r25
    2b88:	99 1f       	adc	r25, r25
    2b8a:	81 e0       	ldi	r24, 0x01	; 1
    2b8c:	64 e0       	ldi	r22, 0x04	; 4
    2b8e:	49 2f       	mov	r20, r25
    2b90:	0e 94 c6 06 	call	0xd8c	; 0xd8c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PortB,Pin2,GET_BIT(character,Pin6));
    2b94:	89 ad       	ldd	r24, Y+57	; 0x39
    2b96:	88 2f       	mov	r24, r24
    2b98:	90 e0       	ldi	r25, 0x00	; 0
    2b9a:	80 74       	andi	r24, 0x40	; 64
    2b9c:	90 70       	andi	r25, 0x00	; 0
    2b9e:	08 2e       	mov	r0, r24
    2ba0:	89 2f       	mov	r24, r25
    2ba2:	00 0c       	add	r0, r0
    2ba4:	88 1f       	adc	r24, r24
    2ba6:	99 0b       	sbc	r25, r25
    2ba8:	00 0c       	add	r0, r0
    2baa:	88 1f       	adc	r24, r24
    2bac:	99 1f       	adc	r25, r25
    2bae:	98 2f       	mov	r25, r24
    2bb0:	81 e0       	ldi	r24, 0x01	; 1
    2bb2:	62 e0       	ldi	r22, 0x02	; 2
    2bb4:	49 2f       	mov	r20, r25
    2bb6:	0e 94 c6 06 	call	0xd8c	; 0xd8c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PortB,Pin1,GET_BIT(character,Pin5));
    2bba:	89 ad       	ldd	r24, Y+57	; 0x39
    2bbc:	88 2f       	mov	r24, r24
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
    2bc0:	80 72       	andi	r24, 0x20	; 32
    2bc2:	90 70       	andi	r25, 0x00	; 0
    2bc4:	95 95       	asr	r25
    2bc6:	87 95       	ror	r24
    2bc8:	95 95       	asr	r25
    2bca:	87 95       	ror	r24
    2bcc:	95 95       	asr	r25
    2bce:	87 95       	ror	r24
    2bd0:	95 95       	asr	r25
    2bd2:	87 95       	ror	r24
    2bd4:	95 95       	asr	r25
    2bd6:	87 95       	ror	r24
    2bd8:	98 2f       	mov	r25, r24
    2bda:	81 e0       	ldi	r24, 0x01	; 1
    2bdc:	61 e0       	ldi	r22, 0x01	; 1
    2bde:	49 2f       	mov	r20, r25
    2be0:	0e 94 c6 06 	call	0xd8c	; 0xd8c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PortB,Pin0,GET_BIT(character,Pin4));
    2be4:	89 ad       	ldd	r24, Y+57	; 0x39
    2be6:	88 2f       	mov	r24, r24
    2be8:	90 e0       	ldi	r25, 0x00	; 0
    2bea:	80 71       	andi	r24, 0x10	; 16
    2bec:	90 70       	andi	r25, 0x00	; 0
    2bee:	95 95       	asr	r25
    2bf0:	87 95       	ror	r24
    2bf2:	95 95       	asr	r25
    2bf4:	87 95       	ror	r24
    2bf6:	95 95       	asr	r25
    2bf8:	87 95       	ror	r24
    2bfa:	95 95       	asr	r25
    2bfc:	87 95       	ror	r24
    2bfe:	98 2f       	mov	r25, r24
    2c00:	81 e0       	ldi	r24, 0x01	; 1
    2c02:	60 e0       	ldi	r22, 0x00	; 0
    2c04:	49 2f       	mov	r20, r25
    2c06:	0e 94 c6 06 	call	0xd8c	; 0xd8c <DIO_voidSetPinValue>

	DIO_voidSetPinValue(PortA,Pin2,High);
    2c0a:	80 e0       	ldi	r24, 0x00	; 0
    2c0c:	62 e0       	ldi	r22, 0x02	; 2
    2c0e:	41 e0       	ldi	r20, 0x01	; 1
    2c10:	0e 94 c6 06 	call	0xd8c	; 0xd8c <DIO_voidSetPinValue>
    2c14:	80 e0       	ldi	r24, 0x00	; 0
    2c16:	90 e0       	ldi	r25, 0x00	; 0
    2c18:	a0 e0       	ldi	r26, 0x00	; 0
    2c1a:	b0 e4       	ldi	r27, 0x40	; 64
    2c1c:	8d ab       	std	Y+53, r24	; 0x35
    2c1e:	9e ab       	std	Y+54, r25	; 0x36
    2c20:	af ab       	std	Y+55, r26	; 0x37
    2c22:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c24:	6d a9       	ldd	r22, Y+53	; 0x35
    2c26:	7e a9       	ldd	r23, Y+54	; 0x36
    2c28:	8f a9       	ldd	r24, Y+55	; 0x37
    2c2a:	98 ad       	ldd	r25, Y+56	; 0x38
    2c2c:	20 e0       	ldi	r18, 0x00	; 0
    2c2e:	30 e0       	ldi	r19, 0x00	; 0
    2c30:	4a e7       	ldi	r20, 0x7A	; 122
    2c32:	55 e4       	ldi	r21, 0x45	; 69
    2c34:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c38:	dc 01       	movw	r26, r24
    2c3a:	cb 01       	movw	r24, r22
    2c3c:	89 ab       	std	Y+49, r24	; 0x31
    2c3e:	9a ab       	std	Y+50, r25	; 0x32
    2c40:	ab ab       	std	Y+51, r26	; 0x33
    2c42:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2c44:	69 a9       	ldd	r22, Y+49	; 0x31
    2c46:	7a a9       	ldd	r23, Y+50	; 0x32
    2c48:	8b a9       	ldd	r24, Y+51	; 0x33
    2c4a:	9c a9       	ldd	r25, Y+52	; 0x34
    2c4c:	20 e0       	ldi	r18, 0x00	; 0
    2c4e:	30 e0       	ldi	r19, 0x00	; 0
    2c50:	40 e8       	ldi	r20, 0x80	; 128
    2c52:	5f e3       	ldi	r21, 0x3F	; 63
    2c54:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2c58:	88 23       	and	r24, r24
    2c5a:	2c f4       	brge	.+10     	; 0x2c66 <LCD_KIT_voidDisplayCharacter+0x106>
		__ticks = 1;
    2c5c:	81 e0       	ldi	r24, 0x01	; 1
    2c5e:	90 e0       	ldi	r25, 0x00	; 0
    2c60:	98 ab       	std	Y+48, r25	; 0x30
    2c62:	8f a7       	std	Y+47, r24	; 0x2f
    2c64:	3f c0       	rjmp	.+126    	; 0x2ce4 <LCD_KIT_voidDisplayCharacter+0x184>
	else if (__tmp > 65535)
    2c66:	69 a9       	ldd	r22, Y+49	; 0x31
    2c68:	7a a9       	ldd	r23, Y+50	; 0x32
    2c6a:	8b a9       	ldd	r24, Y+51	; 0x33
    2c6c:	9c a9       	ldd	r25, Y+52	; 0x34
    2c6e:	20 e0       	ldi	r18, 0x00	; 0
    2c70:	3f ef       	ldi	r19, 0xFF	; 255
    2c72:	4f e7       	ldi	r20, 0x7F	; 127
    2c74:	57 e4       	ldi	r21, 0x47	; 71
    2c76:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2c7a:	18 16       	cp	r1, r24
    2c7c:	4c f5       	brge	.+82     	; 0x2cd0 <LCD_KIT_voidDisplayCharacter+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c7e:	6d a9       	ldd	r22, Y+53	; 0x35
    2c80:	7e a9       	ldd	r23, Y+54	; 0x36
    2c82:	8f a9       	ldd	r24, Y+55	; 0x37
    2c84:	98 ad       	ldd	r25, Y+56	; 0x38
    2c86:	20 e0       	ldi	r18, 0x00	; 0
    2c88:	30 e0       	ldi	r19, 0x00	; 0
    2c8a:	40 e2       	ldi	r20, 0x20	; 32
    2c8c:	51 e4       	ldi	r21, 0x41	; 65
    2c8e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c92:	dc 01       	movw	r26, r24
    2c94:	cb 01       	movw	r24, r22
    2c96:	bc 01       	movw	r22, r24
    2c98:	cd 01       	movw	r24, r26
    2c9a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c9e:	dc 01       	movw	r26, r24
    2ca0:	cb 01       	movw	r24, r22
    2ca2:	98 ab       	std	Y+48, r25	; 0x30
    2ca4:	8f a7       	std	Y+47, r24	; 0x2f
    2ca6:	0f c0       	rjmp	.+30     	; 0x2cc6 <LCD_KIT_voidDisplayCharacter+0x166>
    2ca8:	80 e9       	ldi	r24, 0x90	; 144
    2caa:	91 e0       	ldi	r25, 0x01	; 1
    2cac:	9e a7       	std	Y+46, r25	; 0x2e
    2cae:	8d a7       	std	Y+45, r24	; 0x2d
    2cb0:	8d a5       	ldd	r24, Y+45	; 0x2d
    2cb2:	9e a5       	ldd	r25, Y+46	; 0x2e
    2cb4:	01 97       	sbiw	r24, 0x01	; 1
    2cb6:	f1 f7       	brne	.-4      	; 0x2cb4 <LCD_KIT_voidDisplayCharacter+0x154>
    2cb8:	9e a7       	std	Y+46, r25	; 0x2e
    2cba:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cbc:	8f a5       	ldd	r24, Y+47	; 0x2f
    2cbe:	98 a9       	ldd	r25, Y+48	; 0x30
    2cc0:	01 97       	sbiw	r24, 0x01	; 1
    2cc2:	98 ab       	std	Y+48, r25	; 0x30
    2cc4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cc6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2cc8:	98 a9       	ldd	r25, Y+48	; 0x30
    2cca:	00 97       	sbiw	r24, 0x00	; 0
    2ccc:	69 f7       	brne	.-38     	; 0x2ca8 <LCD_KIT_voidDisplayCharacter+0x148>
    2cce:	14 c0       	rjmp	.+40     	; 0x2cf8 <LCD_KIT_voidDisplayCharacter+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cd0:	69 a9       	ldd	r22, Y+49	; 0x31
    2cd2:	7a a9       	ldd	r23, Y+50	; 0x32
    2cd4:	8b a9       	ldd	r24, Y+51	; 0x33
    2cd6:	9c a9       	ldd	r25, Y+52	; 0x34
    2cd8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2cdc:	dc 01       	movw	r26, r24
    2cde:	cb 01       	movw	r24, r22
    2ce0:	98 ab       	std	Y+48, r25	; 0x30
    2ce2:	8f a7       	std	Y+47, r24	; 0x2f
    2ce4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ce6:	98 a9       	ldd	r25, Y+48	; 0x30
    2ce8:	9c a7       	std	Y+44, r25	; 0x2c
    2cea:	8b a7       	std	Y+43, r24	; 0x2b
    2cec:	8b a5       	ldd	r24, Y+43	; 0x2b
    2cee:	9c a5       	ldd	r25, Y+44	; 0x2c
    2cf0:	01 97       	sbiw	r24, 0x01	; 1
    2cf2:	f1 f7       	brne	.-4      	; 0x2cf0 <LCD_KIT_voidDisplayCharacter+0x190>
    2cf4:	9c a7       	std	Y+44, r25	; 0x2c
    2cf6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	DIO_voidSetPinValue(PortA,Pin2,Low);
    2cf8:	80 e0       	ldi	r24, 0x00	; 0
    2cfa:	62 e0       	ldi	r22, 0x02	; 2
    2cfc:	40 e0       	ldi	r20, 0x00	; 0
    2cfe:	0e 94 c6 06 	call	0xd8c	; 0xd8c <DIO_voidSetPinValue>
    2d02:	80 e0       	ldi	r24, 0x00	; 0
    2d04:	90 e0       	ldi	r25, 0x00	; 0
    2d06:	a0 e0       	ldi	r26, 0x00	; 0
    2d08:	b0 e4       	ldi	r27, 0x40	; 64
    2d0a:	8f a3       	std	Y+39, r24	; 0x27
    2d0c:	98 a7       	std	Y+40, r25	; 0x28
    2d0e:	a9 a7       	std	Y+41, r26	; 0x29
    2d10:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d12:	6f a1       	ldd	r22, Y+39	; 0x27
    2d14:	78 a5       	ldd	r23, Y+40	; 0x28
    2d16:	89 a5       	ldd	r24, Y+41	; 0x29
    2d18:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d1a:	20 e0       	ldi	r18, 0x00	; 0
    2d1c:	30 e0       	ldi	r19, 0x00	; 0
    2d1e:	4a e7       	ldi	r20, 0x7A	; 122
    2d20:	55 e4       	ldi	r21, 0x45	; 69
    2d22:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d26:	dc 01       	movw	r26, r24
    2d28:	cb 01       	movw	r24, r22
    2d2a:	8b a3       	std	Y+35, r24	; 0x23
    2d2c:	9c a3       	std	Y+36, r25	; 0x24
    2d2e:	ad a3       	std	Y+37, r26	; 0x25
    2d30:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2d32:	6b a1       	ldd	r22, Y+35	; 0x23
    2d34:	7c a1       	ldd	r23, Y+36	; 0x24
    2d36:	8d a1       	ldd	r24, Y+37	; 0x25
    2d38:	9e a1       	ldd	r25, Y+38	; 0x26
    2d3a:	20 e0       	ldi	r18, 0x00	; 0
    2d3c:	30 e0       	ldi	r19, 0x00	; 0
    2d3e:	40 e8       	ldi	r20, 0x80	; 128
    2d40:	5f e3       	ldi	r21, 0x3F	; 63
    2d42:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2d46:	88 23       	and	r24, r24
    2d48:	2c f4       	brge	.+10     	; 0x2d54 <LCD_KIT_voidDisplayCharacter+0x1f4>
		__ticks = 1;
    2d4a:	81 e0       	ldi	r24, 0x01	; 1
    2d4c:	90 e0       	ldi	r25, 0x00	; 0
    2d4e:	9a a3       	std	Y+34, r25	; 0x22
    2d50:	89 a3       	std	Y+33, r24	; 0x21
    2d52:	3f c0       	rjmp	.+126    	; 0x2dd2 <LCD_KIT_voidDisplayCharacter+0x272>
	else if (__tmp > 65535)
    2d54:	6b a1       	ldd	r22, Y+35	; 0x23
    2d56:	7c a1       	ldd	r23, Y+36	; 0x24
    2d58:	8d a1       	ldd	r24, Y+37	; 0x25
    2d5a:	9e a1       	ldd	r25, Y+38	; 0x26
    2d5c:	20 e0       	ldi	r18, 0x00	; 0
    2d5e:	3f ef       	ldi	r19, 0xFF	; 255
    2d60:	4f e7       	ldi	r20, 0x7F	; 127
    2d62:	57 e4       	ldi	r21, 0x47	; 71
    2d64:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2d68:	18 16       	cp	r1, r24
    2d6a:	4c f5       	brge	.+82     	; 0x2dbe <LCD_KIT_voidDisplayCharacter+0x25e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d6c:	6f a1       	ldd	r22, Y+39	; 0x27
    2d6e:	78 a5       	ldd	r23, Y+40	; 0x28
    2d70:	89 a5       	ldd	r24, Y+41	; 0x29
    2d72:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d74:	20 e0       	ldi	r18, 0x00	; 0
    2d76:	30 e0       	ldi	r19, 0x00	; 0
    2d78:	40 e2       	ldi	r20, 0x20	; 32
    2d7a:	51 e4       	ldi	r21, 0x41	; 65
    2d7c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d80:	dc 01       	movw	r26, r24
    2d82:	cb 01       	movw	r24, r22
    2d84:	bc 01       	movw	r22, r24
    2d86:	cd 01       	movw	r24, r26
    2d88:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d8c:	dc 01       	movw	r26, r24
    2d8e:	cb 01       	movw	r24, r22
    2d90:	9a a3       	std	Y+34, r25	; 0x22
    2d92:	89 a3       	std	Y+33, r24	; 0x21
    2d94:	0f c0       	rjmp	.+30     	; 0x2db4 <LCD_KIT_voidDisplayCharacter+0x254>
    2d96:	80 e9       	ldi	r24, 0x90	; 144
    2d98:	91 e0       	ldi	r25, 0x01	; 1
    2d9a:	98 a3       	std	Y+32, r25	; 0x20
    2d9c:	8f 8f       	std	Y+31, r24	; 0x1f
    2d9e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2da0:	98 a1       	ldd	r25, Y+32	; 0x20
    2da2:	01 97       	sbiw	r24, 0x01	; 1
    2da4:	f1 f7       	brne	.-4      	; 0x2da2 <LCD_KIT_voidDisplayCharacter+0x242>
    2da6:	98 a3       	std	Y+32, r25	; 0x20
    2da8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2daa:	89 a1       	ldd	r24, Y+33	; 0x21
    2dac:	9a a1       	ldd	r25, Y+34	; 0x22
    2dae:	01 97       	sbiw	r24, 0x01	; 1
    2db0:	9a a3       	std	Y+34, r25	; 0x22
    2db2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2db4:	89 a1       	ldd	r24, Y+33	; 0x21
    2db6:	9a a1       	ldd	r25, Y+34	; 0x22
    2db8:	00 97       	sbiw	r24, 0x00	; 0
    2dba:	69 f7       	brne	.-38     	; 0x2d96 <LCD_KIT_voidDisplayCharacter+0x236>
    2dbc:	14 c0       	rjmp	.+40     	; 0x2de6 <LCD_KIT_voidDisplayCharacter+0x286>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dbe:	6b a1       	ldd	r22, Y+35	; 0x23
    2dc0:	7c a1       	ldd	r23, Y+36	; 0x24
    2dc2:	8d a1       	ldd	r24, Y+37	; 0x25
    2dc4:	9e a1       	ldd	r25, Y+38	; 0x26
    2dc6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2dca:	dc 01       	movw	r26, r24
    2dcc:	cb 01       	movw	r24, r22
    2dce:	9a a3       	std	Y+34, r25	; 0x22
    2dd0:	89 a3       	std	Y+33, r24	; 0x21
    2dd2:	89 a1       	ldd	r24, Y+33	; 0x21
    2dd4:	9a a1       	ldd	r25, Y+34	; 0x22
    2dd6:	9e 8f       	std	Y+30, r25	; 0x1e
    2dd8:	8d 8f       	std	Y+29, r24	; 0x1d
    2dda:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ddc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2dde:	01 97       	sbiw	r24, 0x01	; 1
    2de0:	f1 f7       	brne	.-4      	; 0x2dde <LCD_KIT_voidDisplayCharacter+0x27e>
    2de2:	9e 8f       	std	Y+30, r25	; 0x1e
    2de4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);

	DIO_voidSetPinValue(PortB,Pin4,GET_BIT(character,Pin3));
    2de6:	89 ad       	ldd	r24, Y+57	; 0x39
    2de8:	88 2f       	mov	r24, r24
    2dea:	90 e0       	ldi	r25, 0x00	; 0
    2dec:	88 70       	andi	r24, 0x08	; 8
    2dee:	90 70       	andi	r25, 0x00	; 0
    2df0:	95 95       	asr	r25
    2df2:	87 95       	ror	r24
    2df4:	95 95       	asr	r25
    2df6:	87 95       	ror	r24
    2df8:	95 95       	asr	r25
    2dfa:	87 95       	ror	r24
    2dfc:	98 2f       	mov	r25, r24
    2dfe:	81 e0       	ldi	r24, 0x01	; 1
    2e00:	64 e0       	ldi	r22, 0x04	; 4
    2e02:	49 2f       	mov	r20, r25
    2e04:	0e 94 c6 06 	call	0xd8c	; 0xd8c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PortB,Pin2,GET_BIT(character,Pin2));
    2e08:	89 ad       	ldd	r24, Y+57	; 0x39
    2e0a:	88 2f       	mov	r24, r24
    2e0c:	90 e0       	ldi	r25, 0x00	; 0
    2e0e:	84 70       	andi	r24, 0x04	; 4
    2e10:	90 70       	andi	r25, 0x00	; 0
    2e12:	95 95       	asr	r25
    2e14:	87 95       	ror	r24
    2e16:	95 95       	asr	r25
    2e18:	87 95       	ror	r24
    2e1a:	98 2f       	mov	r25, r24
    2e1c:	81 e0       	ldi	r24, 0x01	; 1
    2e1e:	62 e0       	ldi	r22, 0x02	; 2
    2e20:	49 2f       	mov	r20, r25
    2e22:	0e 94 c6 06 	call	0xd8c	; 0xd8c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PortB,Pin1,GET_BIT(character,Pin1));
    2e26:	89 ad       	ldd	r24, Y+57	; 0x39
    2e28:	88 2f       	mov	r24, r24
    2e2a:	90 e0       	ldi	r25, 0x00	; 0
    2e2c:	82 70       	andi	r24, 0x02	; 2
    2e2e:	90 70       	andi	r25, 0x00	; 0
    2e30:	95 95       	asr	r25
    2e32:	87 95       	ror	r24
    2e34:	98 2f       	mov	r25, r24
    2e36:	81 e0       	ldi	r24, 0x01	; 1
    2e38:	61 e0       	ldi	r22, 0x01	; 1
    2e3a:	49 2f       	mov	r20, r25
    2e3c:	0e 94 c6 06 	call	0xd8c	; 0xd8c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PortB,Pin0,GET_BIT(character,Pin0));
    2e40:	89 ad       	ldd	r24, Y+57	; 0x39
    2e42:	98 2f       	mov	r25, r24
    2e44:	91 70       	andi	r25, 0x01	; 1
    2e46:	81 e0       	ldi	r24, 0x01	; 1
    2e48:	60 e0       	ldi	r22, 0x00	; 0
    2e4a:	49 2f       	mov	r20, r25
    2e4c:	0e 94 c6 06 	call	0xd8c	; 0xd8c <DIO_voidSetPinValue>

	DIO_voidSetPinValue(PortA,Pin2,High);
    2e50:	80 e0       	ldi	r24, 0x00	; 0
    2e52:	62 e0       	ldi	r22, 0x02	; 2
    2e54:	41 e0       	ldi	r20, 0x01	; 1
    2e56:	0e 94 c6 06 	call	0xd8c	; 0xd8c <DIO_voidSetPinValue>
    2e5a:	80 e0       	ldi	r24, 0x00	; 0
    2e5c:	90 e0       	ldi	r25, 0x00	; 0
    2e5e:	a0 e0       	ldi	r26, 0x00	; 0
    2e60:	b0 e4       	ldi	r27, 0x40	; 64
    2e62:	89 8f       	std	Y+25, r24	; 0x19
    2e64:	9a 8f       	std	Y+26, r25	; 0x1a
    2e66:	ab 8f       	std	Y+27, r26	; 0x1b
    2e68:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e6a:	69 8d       	ldd	r22, Y+25	; 0x19
    2e6c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e6e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e70:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e72:	20 e0       	ldi	r18, 0x00	; 0
    2e74:	30 e0       	ldi	r19, 0x00	; 0
    2e76:	4a e7       	ldi	r20, 0x7A	; 122
    2e78:	55 e4       	ldi	r21, 0x45	; 69
    2e7a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e7e:	dc 01       	movw	r26, r24
    2e80:	cb 01       	movw	r24, r22
    2e82:	8d 8b       	std	Y+21, r24	; 0x15
    2e84:	9e 8b       	std	Y+22, r25	; 0x16
    2e86:	af 8b       	std	Y+23, r26	; 0x17
    2e88:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e8a:	6d 89       	ldd	r22, Y+21	; 0x15
    2e8c:	7e 89       	ldd	r23, Y+22	; 0x16
    2e8e:	8f 89       	ldd	r24, Y+23	; 0x17
    2e90:	98 8d       	ldd	r25, Y+24	; 0x18
    2e92:	20 e0       	ldi	r18, 0x00	; 0
    2e94:	30 e0       	ldi	r19, 0x00	; 0
    2e96:	40 e8       	ldi	r20, 0x80	; 128
    2e98:	5f e3       	ldi	r21, 0x3F	; 63
    2e9a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2e9e:	88 23       	and	r24, r24
    2ea0:	2c f4       	brge	.+10     	; 0x2eac <LCD_KIT_voidDisplayCharacter+0x34c>
		__ticks = 1;
    2ea2:	81 e0       	ldi	r24, 0x01	; 1
    2ea4:	90 e0       	ldi	r25, 0x00	; 0
    2ea6:	9c 8b       	std	Y+20, r25	; 0x14
    2ea8:	8b 8b       	std	Y+19, r24	; 0x13
    2eaa:	3f c0       	rjmp	.+126    	; 0x2f2a <LCD_KIT_voidDisplayCharacter+0x3ca>
	else if (__tmp > 65535)
    2eac:	6d 89       	ldd	r22, Y+21	; 0x15
    2eae:	7e 89       	ldd	r23, Y+22	; 0x16
    2eb0:	8f 89       	ldd	r24, Y+23	; 0x17
    2eb2:	98 8d       	ldd	r25, Y+24	; 0x18
    2eb4:	20 e0       	ldi	r18, 0x00	; 0
    2eb6:	3f ef       	ldi	r19, 0xFF	; 255
    2eb8:	4f e7       	ldi	r20, 0x7F	; 127
    2eba:	57 e4       	ldi	r21, 0x47	; 71
    2ebc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2ec0:	18 16       	cp	r1, r24
    2ec2:	4c f5       	brge	.+82     	; 0x2f16 <LCD_KIT_voidDisplayCharacter+0x3b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ec4:	69 8d       	ldd	r22, Y+25	; 0x19
    2ec6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ec8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2eca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ecc:	20 e0       	ldi	r18, 0x00	; 0
    2ece:	30 e0       	ldi	r19, 0x00	; 0
    2ed0:	40 e2       	ldi	r20, 0x20	; 32
    2ed2:	51 e4       	ldi	r21, 0x41	; 65
    2ed4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ed8:	dc 01       	movw	r26, r24
    2eda:	cb 01       	movw	r24, r22
    2edc:	bc 01       	movw	r22, r24
    2ede:	cd 01       	movw	r24, r26
    2ee0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ee4:	dc 01       	movw	r26, r24
    2ee6:	cb 01       	movw	r24, r22
    2ee8:	9c 8b       	std	Y+20, r25	; 0x14
    2eea:	8b 8b       	std	Y+19, r24	; 0x13
    2eec:	0f c0       	rjmp	.+30     	; 0x2f0c <LCD_KIT_voidDisplayCharacter+0x3ac>
    2eee:	80 e9       	ldi	r24, 0x90	; 144
    2ef0:	91 e0       	ldi	r25, 0x01	; 1
    2ef2:	9a 8b       	std	Y+18, r25	; 0x12
    2ef4:	89 8b       	std	Y+17, r24	; 0x11
    2ef6:	89 89       	ldd	r24, Y+17	; 0x11
    2ef8:	9a 89       	ldd	r25, Y+18	; 0x12
    2efa:	01 97       	sbiw	r24, 0x01	; 1
    2efc:	f1 f7       	brne	.-4      	; 0x2efa <LCD_KIT_voidDisplayCharacter+0x39a>
    2efe:	9a 8b       	std	Y+18, r25	; 0x12
    2f00:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f02:	8b 89       	ldd	r24, Y+19	; 0x13
    2f04:	9c 89       	ldd	r25, Y+20	; 0x14
    2f06:	01 97       	sbiw	r24, 0x01	; 1
    2f08:	9c 8b       	std	Y+20, r25	; 0x14
    2f0a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f0c:	8b 89       	ldd	r24, Y+19	; 0x13
    2f0e:	9c 89       	ldd	r25, Y+20	; 0x14
    2f10:	00 97       	sbiw	r24, 0x00	; 0
    2f12:	69 f7       	brne	.-38     	; 0x2eee <LCD_KIT_voidDisplayCharacter+0x38e>
    2f14:	14 c0       	rjmp	.+40     	; 0x2f3e <LCD_KIT_voidDisplayCharacter+0x3de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f16:	6d 89       	ldd	r22, Y+21	; 0x15
    2f18:	7e 89       	ldd	r23, Y+22	; 0x16
    2f1a:	8f 89       	ldd	r24, Y+23	; 0x17
    2f1c:	98 8d       	ldd	r25, Y+24	; 0x18
    2f1e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f22:	dc 01       	movw	r26, r24
    2f24:	cb 01       	movw	r24, r22
    2f26:	9c 8b       	std	Y+20, r25	; 0x14
    2f28:	8b 8b       	std	Y+19, r24	; 0x13
    2f2a:	8b 89       	ldd	r24, Y+19	; 0x13
    2f2c:	9c 89       	ldd	r25, Y+20	; 0x14
    2f2e:	98 8b       	std	Y+16, r25	; 0x10
    2f30:	8f 87       	std	Y+15, r24	; 0x0f
    2f32:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f34:	98 89       	ldd	r25, Y+16	; 0x10
    2f36:	01 97       	sbiw	r24, 0x01	; 1
    2f38:	f1 f7       	brne	.-4      	; 0x2f36 <LCD_KIT_voidDisplayCharacter+0x3d6>
    2f3a:	98 8b       	std	Y+16, r25	; 0x10
    2f3c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_voidSetPinValue(PortA,Pin2,Low);
    2f3e:	80 e0       	ldi	r24, 0x00	; 0
    2f40:	62 e0       	ldi	r22, 0x02	; 2
    2f42:	40 e0       	ldi	r20, 0x00	; 0
    2f44:	0e 94 c6 06 	call	0xd8c	; 0xd8c <DIO_voidSetPinValue>
    2f48:	80 e0       	ldi	r24, 0x00	; 0
    2f4a:	90 e0       	ldi	r25, 0x00	; 0
    2f4c:	a0 e0       	ldi	r26, 0x00	; 0
    2f4e:	b0 e4       	ldi	r27, 0x40	; 64
    2f50:	8b 87       	std	Y+11, r24	; 0x0b
    2f52:	9c 87       	std	Y+12, r25	; 0x0c
    2f54:	ad 87       	std	Y+13, r26	; 0x0d
    2f56:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f58:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f60:	20 e0       	ldi	r18, 0x00	; 0
    2f62:	30 e0       	ldi	r19, 0x00	; 0
    2f64:	4a e7       	ldi	r20, 0x7A	; 122
    2f66:	55 e4       	ldi	r21, 0x45	; 69
    2f68:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f6c:	dc 01       	movw	r26, r24
    2f6e:	cb 01       	movw	r24, r22
    2f70:	8f 83       	std	Y+7, r24	; 0x07
    2f72:	98 87       	std	Y+8, r25	; 0x08
    2f74:	a9 87       	std	Y+9, r26	; 0x09
    2f76:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f78:	6f 81       	ldd	r22, Y+7	; 0x07
    2f7a:	78 85       	ldd	r23, Y+8	; 0x08
    2f7c:	89 85       	ldd	r24, Y+9	; 0x09
    2f7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f80:	20 e0       	ldi	r18, 0x00	; 0
    2f82:	30 e0       	ldi	r19, 0x00	; 0
    2f84:	40 e8       	ldi	r20, 0x80	; 128
    2f86:	5f e3       	ldi	r21, 0x3F	; 63
    2f88:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2f8c:	88 23       	and	r24, r24
    2f8e:	2c f4       	brge	.+10     	; 0x2f9a <LCD_KIT_voidDisplayCharacter+0x43a>
		__ticks = 1;
    2f90:	81 e0       	ldi	r24, 0x01	; 1
    2f92:	90 e0       	ldi	r25, 0x00	; 0
    2f94:	9e 83       	std	Y+6, r25	; 0x06
    2f96:	8d 83       	std	Y+5, r24	; 0x05
    2f98:	3f c0       	rjmp	.+126    	; 0x3018 <LCD_KIT_voidDisplayCharacter+0x4b8>
	else if (__tmp > 65535)
    2f9a:	6f 81       	ldd	r22, Y+7	; 0x07
    2f9c:	78 85       	ldd	r23, Y+8	; 0x08
    2f9e:	89 85       	ldd	r24, Y+9	; 0x09
    2fa0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fa2:	20 e0       	ldi	r18, 0x00	; 0
    2fa4:	3f ef       	ldi	r19, 0xFF	; 255
    2fa6:	4f e7       	ldi	r20, 0x7F	; 127
    2fa8:	57 e4       	ldi	r21, 0x47	; 71
    2faa:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2fae:	18 16       	cp	r1, r24
    2fb0:	4c f5       	brge	.+82     	; 0x3004 <LCD_KIT_voidDisplayCharacter+0x4a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fb2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fb4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fb6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fb8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fba:	20 e0       	ldi	r18, 0x00	; 0
    2fbc:	30 e0       	ldi	r19, 0x00	; 0
    2fbe:	40 e2       	ldi	r20, 0x20	; 32
    2fc0:	51 e4       	ldi	r21, 0x41	; 65
    2fc2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2fc6:	dc 01       	movw	r26, r24
    2fc8:	cb 01       	movw	r24, r22
    2fca:	bc 01       	movw	r22, r24
    2fcc:	cd 01       	movw	r24, r26
    2fce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2fd2:	dc 01       	movw	r26, r24
    2fd4:	cb 01       	movw	r24, r22
    2fd6:	9e 83       	std	Y+6, r25	; 0x06
    2fd8:	8d 83       	std	Y+5, r24	; 0x05
    2fda:	0f c0       	rjmp	.+30     	; 0x2ffa <LCD_KIT_voidDisplayCharacter+0x49a>
    2fdc:	80 e9       	ldi	r24, 0x90	; 144
    2fde:	91 e0       	ldi	r25, 0x01	; 1
    2fe0:	9c 83       	std	Y+4, r25	; 0x04
    2fe2:	8b 83       	std	Y+3, r24	; 0x03
    2fe4:	8b 81       	ldd	r24, Y+3	; 0x03
    2fe6:	9c 81       	ldd	r25, Y+4	; 0x04
    2fe8:	01 97       	sbiw	r24, 0x01	; 1
    2fea:	f1 f7       	brne	.-4      	; 0x2fe8 <LCD_KIT_voidDisplayCharacter+0x488>
    2fec:	9c 83       	std	Y+4, r25	; 0x04
    2fee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ff0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ff2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ff4:	01 97       	sbiw	r24, 0x01	; 1
    2ff6:	9e 83       	std	Y+6, r25	; 0x06
    2ff8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ffa:	8d 81       	ldd	r24, Y+5	; 0x05
    2ffc:	9e 81       	ldd	r25, Y+6	; 0x06
    2ffe:	00 97       	sbiw	r24, 0x00	; 0
    3000:	69 f7       	brne	.-38     	; 0x2fdc <LCD_KIT_voidDisplayCharacter+0x47c>
    3002:	14 c0       	rjmp	.+40     	; 0x302c <LCD_KIT_voidDisplayCharacter+0x4cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3004:	6f 81       	ldd	r22, Y+7	; 0x07
    3006:	78 85       	ldd	r23, Y+8	; 0x08
    3008:	89 85       	ldd	r24, Y+9	; 0x09
    300a:	9a 85       	ldd	r25, Y+10	; 0x0a
    300c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3010:	dc 01       	movw	r26, r24
    3012:	cb 01       	movw	r24, r22
    3014:	9e 83       	std	Y+6, r25	; 0x06
    3016:	8d 83       	std	Y+5, r24	; 0x05
    3018:	8d 81       	ldd	r24, Y+5	; 0x05
    301a:	9e 81       	ldd	r25, Y+6	; 0x06
    301c:	9a 83       	std	Y+2, r25	; 0x02
    301e:	89 83       	std	Y+1, r24	; 0x01
    3020:	89 81       	ldd	r24, Y+1	; 0x01
    3022:	9a 81       	ldd	r25, Y+2	; 0x02
    3024:	01 97       	sbiw	r24, 0x01	; 1
    3026:	f1 f7       	brne	.-4      	; 0x3024 <LCD_KIT_voidDisplayCharacter+0x4c4>
    3028:	9a 83       	std	Y+2, r25	; 0x02
    302a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

	return;
}
    302c:	e9 96       	adiw	r28, 0x39	; 57
    302e:	0f b6       	in	r0, 0x3f	; 63
    3030:	f8 94       	cli
    3032:	de bf       	out	0x3e, r29	; 62
    3034:	0f be       	out	0x3f, r0	; 63
    3036:	cd bf       	out	0x3d, r28	; 61
    3038:	cf 91       	pop	r28
    303a:	df 91       	pop	r29
    303c:	08 95       	ret

0000303e <LCD_KIT_voidRunCommand>:

void LCD_KIT_voidRunCommand(u8 command)
{
    303e:	df 93       	push	r29
    3040:	cf 93       	push	r28
    3042:	cd b7       	in	r28, 0x3d	; 61
    3044:	de b7       	in	r29, 0x3e	; 62
    3046:	e9 97       	sbiw	r28, 0x39	; 57
    3048:	0f b6       	in	r0, 0x3f	; 63
    304a:	f8 94       	cli
    304c:	de bf       	out	0x3e, r29	; 62
    304e:	0f be       	out	0x3f, r0	; 63
    3050:	cd bf       	out	0x3d, r28	; 61
    3052:	89 af       	std	Y+57, r24	; 0x39
	DIO_voidSetPinValue(PortA,Pin3,Low);
    3054:	80 e0       	ldi	r24, 0x00	; 0
    3056:	63 e0       	ldi	r22, 0x03	; 3
    3058:	40 e0       	ldi	r20, 0x00	; 0
    305a:	0e 94 c6 06 	call	0xd8c	; 0xd8c <DIO_voidSetPinValue>

	DIO_voidSetPinValue(PortB,Pin4,GET_BIT(command,Pin7));
    305e:	89 ad       	ldd	r24, Y+57	; 0x39
    3060:	98 2f       	mov	r25, r24
    3062:	99 1f       	adc	r25, r25
    3064:	99 27       	eor	r25, r25
    3066:	99 1f       	adc	r25, r25
    3068:	81 e0       	ldi	r24, 0x01	; 1
    306a:	64 e0       	ldi	r22, 0x04	; 4
    306c:	49 2f       	mov	r20, r25
    306e:	0e 94 c6 06 	call	0xd8c	; 0xd8c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PortB,Pin2,GET_BIT(command,Pin6));
    3072:	89 ad       	ldd	r24, Y+57	; 0x39
    3074:	88 2f       	mov	r24, r24
    3076:	90 e0       	ldi	r25, 0x00	; 0
    3078:	80 74       	andi	r24, 0x40	; 64
    307a:	90 70       	andi	r25, 0x00	; 0
    307c:	08 2e       	mov	r0, r24
    307e:	89 2f       	mov	r24, r25
    3080:	00 0c       	add	r0, r0
    3082:	88 1f       	adc	r24, r24
    3084:	99 0b       	sbc	r25, r25
    3086:	00 0c       	add	r0, r0
    3088:	88 1f       	adc	r24, r24
    308a:	99 1f       	adc	r25, r25
    308c:	98 2f       	mov	r25, r24
    308e:	81 e0       	ldi	r24, 0x01	; 1
    3090:	62 e0       	ldi	r22, 0x02	; 2
    3092:	49 2f       	mov	r20, r25
    3094:	0e 94 c6 06 	call	0xd8c	; 0xd8c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PortB,Pin1,GET_BIT(command,Pin5));
    3098:	89 ad       	ldd	r24, Y+57	; 0x39
    309a:	88 2f       	mov	r24, r24
    309c:	90 e0       	ldi	r25, 0x00	; 0
    309e:	80 72       	andi	r24, 0x20	; 32
    30a0:	90 70       	andi	r25, 0x00	; 0
    30a2:	95 95       	asr	r25
    30a4:	87 95       	ror	r24
    30a6:	95 95       	asr	r25
    30a8:	87 95       	ror	r24
    30aa:	95 95       	asr	r25
    30ac:	87 95       	ror	r24
    30ae:	95 95       	asr	r25
    30b0:	87 95       	ror	r24
    30b2:	95 95       	asr	r25
    30b4:	87 95       	ror	r24
    30b6:	98 2f       	mov	r25, r24
    30b8:	81 e0       	ldi	r24, 0x01	; 1
    30ba:	61 e0       	ldi	r22, 0x01	; 1
    30bc:	49 2f       	mov	r20, r25
    30be:	0e 94 c6 06 	call	0xd8c	; 0xd8c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PortB,Pin0,GET_BIT(command,Pin4));
    30c2:	89 ad       	ldd	r24, Y+57	; 0x39
    30c4:	88 2f       	mov	r24, r24
    30c6:	90 e0       	ldi	r25, 0x00	; 0
    30c8:	80 71       	andi	r24, 0x10	; 16
    30ca:	90 70       	andi	r25, 0x00	; 0
    30cc:	95 95       	asr	r25
    30ce:	87 95       	ror	r24
    30d0:	95 95       	asr	r25
    30d2:	87 95       	ror	r24
    30d4:	95 95       	asr	r25
    30d6:	87 95       	ror	r24
    30d8:	95 95       	asr	r25
    30da:	87 95       	ror	r24
    30dc:	98 2f       	mov	r25, r24
    30de:	81 e0       	ldi	r24, 0x01	; 1
    30e0:	60 e0       	ldi	r22, 0x00	; 0
    30e2:	49 2f       	mov	r20, r25
    30e4:	0e 94 c6 06 	call	0xd8c	; 0xd8c <DIO_voidSetPinValue>

	DIO_voidSetPinValue(PortA,Pin2,High);
    30e8:	80 e0       	ldi	r24, 0x00	; 0
    30ea:	62 e0       	ldi	r22, 0x02	; 2
    30ec:	41 e0       	ldi	r20, 0x01	; 1
    30ee:	0e 94 c6 06 	call	0xd8c	; 0xd8c <DIO_voidSetPinValue>
    30f2:	80 e0       	ldi	r24, 0x00	; 0
    30f4:	90 e0       	ldi	r25, 0x00	; 0
    30f6:	a0 e0       	ldi	r26, 0x00	; 0
    30f8:	b0 e4       	ldi	r27, 0x40	; 64
    30fa:	8d ab       	std	Y+53, r24	; 0x35
    30fc:	9e ab       	std	Y+54, r25	; 0x36
    30fe:	af ab       	std	Y+55, r26	; 0x37
    3100:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3102:	6d a9       	ldd	r22, Y+53	; 0x35
    3104:	7e a9       	ldd	r23, Y+54	; 0x36
    3106:	8f a9       	ldd	r24, Y+55	; 0x37
    3108:	98 ad       	ldd	r25, Y+56	; 0x38
    310a:	20 e0       	ldi	r18, 0x00	; 0
    310c:	30 e0       	ldi	r19, 0x00	; 0
    310e:	4a e7       	ldi	r20, 0x7A	; 122
    3110:	55 e4       	ldi	r21, 0x45	; 69
    3112:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3116:	dc 01       	movw	r26, r24
    3118:	cb 01       	movw	r24, r22
    311a:	89 ab       	std	Y+49, r24	; 0x31
    311c:	9a ab       	std	Y+50, r25	; 0x32
    311e:	ab ab       	std	Y+51, r26	; 0x33
    3120:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3122:	69 a9       	ldd	r22, Y+49	; 0x31
    3124:	7a a9       	ldd	r23, Y+50	; 0x32
    3126:	8b a9       	ldd	r24, Y+51	; 0x33
    3128:	9c a9       	ldd	r25, Y+52	; 0x34
    312a:	20 e0       	ldi	r18, 0x00	; 0
    312c:	30 e0       	ldi	r19, 0x00	; 0
    312e:	40 e8       	ldi	r20, 0x80	; 128
    3130:	5f e3       	ldi	r21, 0x3F	; 63
    3132:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3136:	88 23       	and	r24, r24
    3138:	2c f4       	brge	.+10     	; 0x3144 <LCD_KIT_voidRunCommand+0x106>
		__ticks = 1;
    313a:	81 e0       	ldi	r24, 0x01	; 1
    313c:	90 e0       	ldi	r25, 0x00	; 0
    313e:	98 ab       	std	Y+48, r25	; 0x30
    3140:	8f a7       	std	Y+47, r24	; 0x2f
    3142:	3f c0       	rjmp	.+126    	; 0x31c2 <LCD_KIT_voidRunCommand+0x184>
	else if (__tmp > 65535)
    3144:	69 a9       	ldd	r22, Y+49	; 0x31
    3146:	7a a9       	ldd	r23, Y+50	; 0x32
    3148:	8b a9       	ldd	r24, Y+51	; 0x33
    314a:	9c a9       	ldd	r25, Y+52	; 0x34
    314c:	20 e0       	ldi	r18, 0x00	; 0
    314e:	3f ef       	ldi	r19, 0xFF	; 255
    3150:	4f e7       	ldi	r20, 0x7F	; 127
    3152:	57 e4       	ldi	r21, 0x47	; 71
    3154:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3158:	18 16       	cp	r1, r24
    315a:	4c f5       	brge	.+82     	; 0x31ae <LCD_KIT_voidRunCommand+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    315c:	6d a9       	ldd	r22, Y+53	; 0x35
    315e:	7e a9       	ldd	r23, Y+54	; 0x36
    3160:	8f a9       	ldd	r24, Y+55	; 0x37
    3162:	98 ad       	ldd	r25, Y+56	; 0x38
    3164:	20 e0       	ldi	r18, 0x00	; 0
    3166:	30 e0       	ldi	r19, 0x00	; 0
    3168:	40 e2       	ldi	r20, 0x20	; 32
    316a:	51 e4       	ldi	r21, 0x41	; 65
    316c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3170:	dc 01       	movw	r26, r24
    3172:	cb 01       	movw	r24, r22
    3174:	bc 01       	movw	r22, r24
    3176:	cd 01       	movw	r24, r26
    3178:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    317c:	dc 01       	movw	r26, r24
    317e:	cb 01       	movw	r24, r22
    3180:	98 ab       	std	Y+48, r25	; 0x30
    3182:	8f a7       	std	Y+47, r24	; 0x2f
    3184:	0f c0       	rjmp	.+30     	; 0x31a4 <LCD_KIT_voidRunCommand+0x166>
    3186:	80 e9       	ldi	r24, 0x90	; 144
    3188:	91 e0       	ldi	r25, 0x01	; 1
    318a:	9e a7       	std	Y+46, r25	; 0x2e
    318c:	8d a7       	std	Y+45, r24	; 0x2d
    318e:	8d a5       	ldd	r24, Y+45	; 0x2d
    3190:	9e a5       	ldd	r25, Y+46	; 0x2e
    3192:	01 97       	sbiw	r24, 0x01	; 1
    3194:	f1 f7       	brne	.-4      	; 0x3192 <LCD_KIT_voidRunCommand+0x154>
    3196:	9e a7       	std	Y+46, r25	; 0x2e
    3198:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    319a:	8f a5       	ldd	r24, Y+47	; 0x2f
    319c:	98 a9       	ldd	r25, Y+48	; 0x30
    319e:	01 97       	sbiw	r24, 0x01	; 1
    31a0:	98 ab       	std	Y+48, r25	; 0x30
    31a2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    31a6:	98 a9       	ldd	r25, Y+48	; 0x30
    31a8:	00 97       	sbiw	r24, 0x00	; 0
    31aa:	69 f7       	brne	.-38     	; 0x3186 <LCD_KIT_voidRunCommand+0x148>
    31ac:	14 c0       	rjmp	.+40     	; 0x31d6 <LCD_KIT_voidRunCommand+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31ae:	69 a9       	ldd	r22, Y+49	; 0x31
    31b0:	7a a9       	ldd	r23, Y+50	; 0x32
    31b2:	8b a9       	ldd	r24, Y+51	; 0x33
    31b4:	9c a9       	ldd	r25, Y+52	; 0x34
    31b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    31ba:	dc 01       	movw	r26, r24
    31bc:	cb 01       	movw	r24, r22
    31be:	98 ab       	std	Y+48, r25	; 0x30
    31c0:	8f a7       	std	Y+47, r24	; 0x2f
    31c2:	8f a5       	ldd	r24, Y+47	; 0x2f
    31c4:	98 a9       	ldd	r25, Y+48	; 0x30
    31c6:	9c a7       	std	Y+44, r25	; 0x2c
    31c8:	8b a7       	std	Y+43, r24	; 0x2b
    31ca:	8b a5       	ldd	r24, Y+43	; 0x2b
    31cc:	9c a5       	ldd	r25, Y+44	; 0x2c
    31ce:	01 97       	sbiw	r24, 0x01	; 1
    31d0:	f1 f7       	brne	.-4      	; 0x31ce <LCD_KIT_voidRunCommand+0x190>
    31d2:	9c a7       	std	Y+44, r25	; 0x2c
    31d4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	DIO_voidSetPinValue(PortA,Pin2,Low);
    31d6:	80 e0       	ldi	r24, 0x00	; 0
    31d8:	62 e0       	ldi	r22, 0x02	; 2
    31da:	40 e0       	ldi	r20, 0x00	; 0
    31dc:	0e 94 c6 06 	call	0xd8c	; 0xd8c <DIO_voidSetPinValue>
    31e0:	80 e0       	ldi	r24, 0x00	; 0
    31e2:	90 e0       	ldi	r25, 0x00	; 0
    31e4:	a0 e0       	ldi	r26, 0x00	; 0
    31e6:	b0 e4       	ldi	r27, 0x40	; 64
    31e8:	8f a3       	std	Y+39, r24	; 0x27
    31ea:	98 a7       	std	Y+40, r25	; 0x28
    31ec:	a9 a7       	std	Y+41, r26	; 0x29
    31ee:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31f0:	6f a1       	ldd	r22, Y+39	; 0x27
    31f2:	78 a5       	ldd	r23, Y+40	; 0x28
    31f4:	89 a5       	ldd	r24, Y+41	; 0x29
    31f6:	9a a5       	ldd	r25, Y+42	; 0x2a
    31f8:	20 e0       	ldi	r18, 0x00	; 0
    31fa:	30 e0       	ldi	r19, 0x00	; 0
    31fc:	4a e7       	ldi	r20, 0x7A	; 122
    31fe:	55 e4       	ldi	r21, 0x45	; 69
    3200:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3204:	dc 01       	movw	r26, r24
    3206:	cb 01       	movw	r24, r22
    3208:	8b a3       	std	Y+35, r24	; 0x23
    320a:	9c a3       	std	Y+36, r25	; 0x24
    320c:	ad a3       	std	Y+37, r26	; 0x25
    320e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3210:	6b a1       	ldd	r22, Y+35	; 0x23
    3212:	7c a1       	ldd	r23, Y+36	; 0x24
    3214:	8d a1       	ldd	r24, Y+37	; 0x25
    3216:	9e a1       	ldd	r25, Y+38	; 0x26
    3218:	20 e0       	ldi	r18, 0x00	; 0
    321a:	30 e0       	ldi	r19, 0x00	; 0
    321c:	40 e8       	ldi	r20, 0x80	; 128
    321e:	5f e3       	ldi	r21, 0x3F	; 63
    3220:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3224:	88 23       	and	r24, r24
    3226:	2c f4       	brge	.+10     	; 0x3232 <LCD_KIT_voidRunCommand+0x1f4>
		__ticks = 1;
    3228:	81 e0       	ldi	r24, 0x01	; 1
    322a:	90 e0       	ldi	r25, 0x00	; 0
    322c:	9a a3       	std	Y+34, r25	; 0x22
    322e:	89 a3       	std	Y+33, r24	; 0x21
    3230:	3f c0       	rjmp	.+126    	; 0x32b0 <LCD_KIT_voidRunCommand+0x272>
	else if (__tmp > 65535)
    3232:	6b a1       	ldd	r22, Y+35	; 0x23
    3234:	7c a1       	ldd	r23, Y+36	; 0x24
    3236:	8d a1       	ldd	r24, Y+37	; 0x25
    3238:	9e a1       	ldd	r25, Y+38	; 0x26
    323a:	20 e0       	ldi	r18, 0x00	; 0
    323c:	3f ef       	ldi	r19, 0xFF	; 255
    323e:	4f e7       	ldi	r20, 0x7F	; 127
    3240:	57 e4       	ldi	r21, 0x47	; 71
    3242:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3246:	18 16       	cp	r1, r24
    3248:	4c f5       	brge	.+82     	; 0x329c <LCD_KIT_voidRunCommand+0x25e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    324a:	6f a1       	ldd	r22, Y+39	; 0x27
    324c:	78 a5       	ldd	r23, Y+40	; 0x28
    324e:	89 a5       	ldd	r24, Y+41	; 0x29
    3250:	9a a5       	ldd	r25, Y+42	; 0x2a
    3252:	20 e0       	ldi	r18, 0x00	; 0
    3254:	30 e0       	ldi	r19, 0x00	; 0
    3256:	40 e2       	ldi	r20, 0x20	; 32
    3258:	51 e4       	ldi	r21, 0x41	; 65
    325a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    325e:	dc 01       	movw	r26, r24
    3260:	cb 01       	movw	r24, r22
    3262:	bc 01       	movw	r22, r24
    3264:	cd 01       	movw	r24, r26
    3266:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    326a:	dc 01       	movw	r26, r24
    326c:	cb 01       	movw	r24, r22
    326e:	9a a3       	std	Y+34, r25	; 0x22
    3270:	89 a3       	std	Y+33, r24	; 0x21
    3272:	0f c0       	rjmp	.+30     	; 0x3292 <LCD_KIT_voidRunCommand+0x254>
    3274:	80 e9       	ldi	r24, 0x90	; 144
    3276:	91 e0       	ldi	r25, 0x01	; 1
    3278:	98 a3       	std	Y+32, r25	; 0x20
    327a:	8f 8f       	std	Y+31, r24	; 0x1f
    327c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    327e:	98 a1       	ldd	r25, Y+32	; 0x20
    3280:	01 97       	sbiw	r24, 0x01	; 1
    3282:	f1 f7       	brne	.-4      	; 0x3280 <LCD_KIT_voidRunCommand+0x242>
    3284:	98 a3       	std	Y+32, r25	; 0x20
    3286:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3288:	89 a1       	ldd	r24, Y+33	; 0x21
    328a:	9a a1       	ldd	r25, Y+34	; 0x22
    328c:	01 97       	sbiw	r24, 0x01	; 1
    328e:	9a a3       	std	Y+34, r25	; 0x22
    3290:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3292:	89 a1       	ldd	r24, Y+33	; 0x21
    3294:	9a a1       	ldd	r25, Y+34	; 0x22
    3296:	00 97       	sbiw	r24, 0x00	; 0
    3298:	69 f7       	brne	.-38     	; 0x3274 <LCD_KIT_voidRunCommand+0x236>
    329a:	14 c0       	rjmp	.+40     	; 0x32c4 <LCD_KIT_voidRunCommand+0x286>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    329c:	6b a1       	ldd	r22, Y+35	; 0x23
    329e:	7c a1       	ldd	r23, Y+36	; 0x24
    32a0:	8d a1       	ldd	r24, Y+37	; 0x25
    32a2:	9e a1       	ldd	r25, Y+38	; 0x26
    32a4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    32a8:	dc 01       	movw	r26, r24
    32aa:	cb 01       	movw	r24, r22
    32ac:	9a a3       	std	Y+34, r25	; 0x22
    32ae:	89 a3       	std	Y+33, r24	; 0x21
    32b0:	89 a1       	ldd	r24, Y+33	; 0x21
    32b2:	9a a1       	ldd	r25, Y+34	; 0x22
    32b4:	9e 8f       	std	Y+30, r25	; 0x1e
    32b6:	8d 8f       	std	Y+29, r24	; 0x1d
    32b8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    32ba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    32bc:	01 97       	sbiw	r24, 0x01	; 1
    32be:	f1 f7       	brne	.-4      	; 0x32bc <LCD_KIT_voidRunCommand+0x27e>
    32c0:	9e 8f       	std	Y+30, r25	; 0x1e
    32c2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);

	DIO_voidSetPinValue(PortB,Pin4,GET_BIT(command,Pin3));
    32c4:	89 ad       	ldd	r24, Y+57	; 0x39
    32c6:	88 2f       	mov	r24, r24
    32c8:	90 e0       	ldi	r25, 0x00	; 0
    32ca:	88 70       	andi	r24, 0x08	; 8
    32cc:	90 70       	andi	r25, 0x00	; 0
    32ce:	95 95       	asr	r25
    32d0:	87 95       	ror	r24
    32d2:	95 95       	asr	r25
    32d4:	87 95       	ror	r24
    32d6:	95 95       	asr	r25
    32d8:	87 95       	ror	r24
    32da:	98 2f       	mov	r25, r24
    32dc:	81 e0       	ldi	r24, 0x01	; 1
    32de:	64 e0       	ldi	r22, 0x04	; 4
    32e0:	49 2f       	mov	r20, r25
    32e2:	0e 94 c6 06 	call	0xd8c	; 0xd8c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PortB,Pin2,GET_BIT(command,Pin2));
    32e6:	89 ad       	ldd	r24, Y+57	; 0x39
    32e8:	88 2f       	mov	r24, r24
    32ea:	90 e0       	ldi	r25, 0x00	; 0
    32ec:	84 70       	andi	r24, 0x04	; 4
    32ee:	90 70       	andi	r25, 0x00	; 0
    32f0:	95 95       	asr	r25
    32f2:	87 95       	ror	r24
    32f4:	95 95       	asr	r25
    32f6:	87 95       	ror	r24
    32f8:	98 2f       	mov	r25, r24
    32fa:	81 e0       	ldi	r24, 0x01	; 1
    32fc:	62 e0       	ldi	r22, 0x02	; 2
    32fe:	49 2f       	mov	r20, r25
    3300:	0e 94 c6 06 	call	0xd8c	; 0xd8c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PortB,Pin1,GET_BIT(command,Pin1));
    3304:	89 ad       	ldd	r24, Y+57	; 0x39
    3306:	88 2f       	mov	r24, r24
    3308:	90 e0       	ldi	r25, 0x00	; 0
    330a:	82 70       	andi	r24, 0x02	; 2
    330c:	90 70       	andi	r25, 0x00	; 0
    330e:	95 95       	asr	r25
    3310:	87 95       	ror	r24
    3312:	98 2f       	mov	r25, r24
    3314:	81 e0       	ldi	r24, 0x01	; 1
    3316:	61 e0       	ldi	r22, 0x01	; 1
    3318:	49 2f       	mov	r20, r25
    331a:	0e 94 c6 06 	call	0xd8c	; 0xd8c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PortB,Pin0,GET_BIT(command,Pin0));
    331e:	89 ad       	ldd	r24, Y+57	; 0x39
    3320:	98 2f       	mov	r25, r24
    3322:	91 70       	andi	r25, 0x01	; 1
    3324:	81 e0       	ldi	r24, 0x01	; 1
    3326:	60 e0       	ldi	r22, 0x00	; 0
    3328:	49 2f       	mov	r20, r25
    332a:	0e 94 c6 06 	call	0xd8c	; 0xd8c <DIO_voidSetPinValue>

	DIO_voidSetPinValue(PortA,Pin2,High);
    332e:	80 e0       	ldi	r24, 0x00	; 0
    3330:	62 e0       	ldi	r22, 0x02	; 2
    3332:	41 e0       	ldi	r20, 0x01	; 1
    3334:	0e 94 c6 06 	call	0xd8c	; 0xd8c <DIO_voidSetPinValue>
    3338:	80 e0       	ldi	r24, 0x00	; 0
    333a:	90 e0       	ldi	r25, 0x00	; 0
    333c:	a0 e0       	ldi	r26, 0x00	; 0
    333e:	b0 e4       	ldi	r27, 0x40	; 64
    3340:	89 8f       	std	Y+25, r24	; 0x19
    3342:	9a 8f       	std	Y+26, r25	; 0x1a
    3344:	ab 8f       	std	Y+27, r26	; 0x1b
    3346:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3348:	69 8d       	ldd	r22, Y+25	; 0x19
    334a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    334c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    334e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3350:	20 e0       	ldi	r18, 0x00	; 0
    3352:	30 e0       	ldi	r19, 0x00	; 0
    3354:	4a e7       	ldi	r20, 0x7A	; 122
    3356:	55 e4       	ldi	r21, 0x45	; 69
    3358:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    335c:	dc 01       	movw	r26, r24
    335e:	cb 01       	movw	r24, r22
    3360:	8d 8b       	std	Y+21, r24	; 0x15
    3362:	9e 8b       	std	Y+22, r25	; 0x16
    3364:	af 8b       	std	Y+23, r26	; 0x17
    3366:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3368:	6d 89       	ldd	r22, Y+21	; 0x15
    336a:	7e 89       	ldd	r23, Y+22	; 0x16
    336c:	8f 89       	ldd	r24, Y+23	; 0x17
    336e:	98 8d       	ldd	r25, Y+24	; 0x18
    3370:	20 e0       	ldi	r18, 0x00	; 0
    3372:	30 e0       	ldi	r19, 0x00	; 0
    3374:	40 e8       	ldi	r20, 0x80	; 128
    3376:	5f e3       	ldi	r21, 0x3F	; 63
    3378:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    337c:	88 23       	and	r24, r24
    337e:	2c f4       	brge	.+10     	; 0x338a <LCD_KIT_voidRunCommand+0x34c>
		__ticks = 1;
    3380:	81 e0       	ldi	r24, 0x01	; 1
    3382:	90 e0       	ldi	r25, 0x00	; 0
    3384:	9c 8b       	std	Y+20, r25	; 0x14
    3386:	8b 8b       	std	Y+19, r24	; 0x13
    3388:	3f c0       	rjmp	.+126    	; 0x3408 <LCD_KIT_voidRunCommand+0x3ca>
	else if (__tmp > 65535)
    338a:	6d 89       	ldd	r22, Y+21	; 0x15
    338c:	7e 89       	ldd	r23, Y+22	; 0x16
    338e:	8f 89       	ldd	r24, Y+23	; 0x17
    3390:	98 8d       	ldd	r25, Y+24	; 0x18
    3392:	20 e0       	ldi	r18, 0x00	; 0
    3394:	3f ef       	ldi	r19, 0xFF	; 255
    3396:	4f e7       	ldi	r20, 0x7F	; 127
    3398:	57 e4       	ldi	r21, 0x47	; 71
    339a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    339e:	18 16       	cp	r1, r24
    33a0:	4c f5       	brge	.+82     	; 0x33f4 <LCD_KIT_voidRunCommand+0x3b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33a2:	69 8d       	ldd	r22, Y+25	; 0x19
    33a4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    33a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    33aa:	20 e0       	ldi	r18, 0x00	; 0
    33ac:	30 e0       	ldi	r19, 0x00	; 0
    33ae:	40 e2       	ldi	r20, 0x20	; 32
    33b0:	51 e4       	ldi	r21, 0x41	; 65
    33b2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    33b6:	dc 01       	movw	r26, r24
    33b8:	cb 01       	movw	r24, r22
    33ba:	bc 01       	movw	r22, r24
    33bc:	cd 01       	movw	r24, r26
    33be:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    33c2:	dc 01       	movw	r26, r24
    33c4:	cb 01       	movw	r24, r22
    33c6:	9c 8b       	std	Y+20, r25	; 0x14
    33c8:	8b 8b       	std	Y+19, r24	; 0x13
    33ca:	0f c0       	rjmp	.+30     	; 0x33ea <LCD_KIT_voidRunCommand+0x3ac>
    33cc:	80 e9       	ldi	r24, 0x90	; 144
    33ce:	91 e0       	ldi	r25, 0x01	; 1
    33d0:	9a 8b       	std	Y+18, r25	; 0x12
    33d2:	89 8b       	std	Y+17, r24	; 0x11
    33d4:	89 89       	ldd	r24, Y+17	; 0x11
    33d6:	9a 89       	ldd	r25, Y+18	; 0x12
    33d8:	01 97       	sbiw	r24, 0x01	; 1
    33da:	f1 f7       	brne	.-4      	; 0x33d8 <LCD_KIT_voidRunCommand+0x39a>
    33dc:	9a 8b       	std	Y+18, r25	; 0x12
    33de:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33e0:	8b 89       	ldd	r24, Y+19	; 0x13
    33e2:	9c 89       	ldd	r25, Y+20	; 0x14
    33e4:	01 97       	sbiw	r24, 0x01	; 1
    33e6:	9c 8b       	std	Y+20, r25	; 0x14
    33e8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33ea:	8b 89       	ldd	r24, Y+19	; 0x13
    33ec:	9c 89       	ldd	r25, Y+20	; 0x14
    33ee:	00 97       	sbiw	r24, 0x00	; 0
    33f0:	69 f7       	brne	.-38     	; 0x33cc <LCD_KIT_voidRunCommand+0x38e>
    33f2:	14 c0       	rjmp	.+40     	; 0x341c <LCD_KIT_voidRunCommand+0x3de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33f4:	6d 89       	ldd	r22, Y+21	; 0x15
    33f6:	7e 89       	ldd	r23, Y+22	; 0x16
    33f8:	8f 89       	ldd	r24, Y+23	; 0x17
    33fa:	98 8d       	ldd	r25, Y+24	; 0x18
    33fc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3400:	dc 01       	movw	r26, r24
    3402:	cb 01       	movw	r24, r22
    3404:	9c 8b       	std	Y+20, r25	; 0x14
    3406:	8b 8b       	std	Y+19, r24	; 0x13
    3408:	8b 89       	ldd	r24, Y+19	; 0x13
    340a:	9c 89       	ldd	r25, Y+20	; 0x14
    340c:	98 8b       	std	Y+16, r25	; 0x10
    340e:	8f 87       	std	Y+15, r24	; 0x0f
    3410:	8f 85       	ldd	r24, Y+15	; 0x0f
    3412:	98 89       	ldd	r25, Y+16	; 0x10
    3414:	01 97       	sbiw	r24, 0x01	; 1
    3416:	f1 f7       	brne	.-4      	; 0x3414 <LCD_KIT_voidRunCommand+0x3d6>
    3418:	98 8b       	std	Y+16, r25	; 0x10
    341a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_voidSetPinValue(PortA,Pin2,Low);
    341c:	80 e0       	ldi	r24, 0x00	; 0
    341e:	62 e0       	ldi	r22, 0x02	; 2
    3420:	40 e0       	ldi	r20, 0x00	; 0
    3422:	0e 94 c6 06 	call	0xd8c	; 0xd8c <DIO_voidSetPinValue>
    3426:	80 e0       	ldi	r24, 0x00	; 0
    3428:	90 e0       	ldi	r25, 0x00	; 0
    342a:	a0 e0       	ldi	r26, 0x00	; 0
    342c:	b0 e4       	ldi	r27, 0x40	; 64
    342e:	8b 87       	std	Y+11, r24	; 0x0b
    3430:	9c 87       	std	Y+12, r25	; 0x0c
    3432:	ad 87       	std	Y+13, r26	; 0x0d
    3434:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3436:	6b 85       	ldd	r22, Y+11	; 0x0b
    3438:	7c 85       	ldd	r23, Y+12	; 0x0c
    343a:	8d 85       	ldd	r24, Y+13	; 0x0d
    343c:	9e 85       	ldd	r25, Y+14	; 0x0e
    343e:	20 e0       	ldi	r18, 0x00	; 0
    3440:	30 e0       	ldi	r19, 0x00	; 0
    3442:	4a e7       	ldi	r20, 0x7A	; 122
    3444:	55 e4       	ldi	r21, 0x45	; 69
    3446:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    344a:	dc 01       	movw	r26, r24
    344c:	cb 01       	movw	r24, r22
    344e:	8f 83       	std	Y+7, r24	; 0x07
    3450:	98 87       	std	Y+8, r25	; 0x08
    3452:	a9 87       	std	Y+9, r26	; 0x09
    3454:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3456:	6f 81       	ldd	r22, Y+7	; 0x07
    3458:	78 85       	ldd	r23, Y+8	; 0x08
    345a:	89 85       	ldd	r24, Y+9	; 0x09
    345c:	9a 85       	ldd	r25, Y+10	; 0x0a
    345e:	20 e0       	ldi	r18, 0x00	; 0
    3460:	30 e0       	ldi	r19, 0x00	; 0
    3462:	40 e8       	ldi	r20, 0x80	; 128
    3464:	5f e3       	ldi	r21, 0x3F	; 63
    3466:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    346a:	88 23       	and	r24, r24
    346c:	2c f4       	brge	.+10     	; 0x3478 <LCD_KIT_voidRunCommand+0x43a>
		__ticks = 1;
    346e:	81 e0       	ldi	r24, 0x01	; 1
    3470:	90 e0       	ldi	r25, 0x00	; 0
    3472:	9e 83       	std	Y+6, r25	; 0x06
    3474:	8d 83       	std	Y+5, r24	; 0x05
    3476:	3f c0       	rjmp	.+126    	; 0x34f6 <LCD_KIT_voidRunCommand+0x4b8>
	else if (__tmp > 65535)
    3478:	6f 81       	ldd	r22, Y+7	; 0x07
    347a:	78 85       	ldd	r23, Y+8	; 0x08
    347c:	89 85       	ldd	r24, Y+9	; 0x09
    347e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3480:	20 e0       	ldi	r18, 0x00	; 0
    3482:	3f ef       	ldi	r19, 0xFF	; 255
    3484:	4f e7       	ldi	r20, 0x7F	; 127
    3486:	57 e4       	ldi	r21, 0x47	; 71
    3488:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    348c:	18 16       	cp	r1, r24
    348e:	4c f5       	brge	.+82     	; 0x34e2 <LCD_KIT_voidRunCommand+0x4a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3490:	6b 85       	ldd	r22, Y+11	; 0x0b
    3492:	7c 85       	ldd	r23, Y+12	; 0x0c
    3494:	8d 85       	ldd	r24, Y+13	; 0x0d
    3496:	9e 85       	ldd	r25, Y+14	; 0x0e
    3498:	20 e0       	ldi	r18, 0x00	; 0
    349a:	30 e0       	ldi	r19, 0x00	; 0
    349c:	40 e2       	ldi	r20, 0x20	; 32
    349e:	51 e4       	ldi	r21, 0x41	; 65
    34a0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    34a4:	dc 01       	movw	r26, r24
    34a6:	cb 01       	movw	r24, r22
    34a8:	bc 01       	movw	r22, r24
    34aa:	cd 01       	movw	r24, r26
    34ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    34b0:	dc 01       	movw	r26, r24
    34b2:	cb 01       	movw	r24, r22
    34b4:	9e 83       	std	Y+6, r25	; 0x06
    34b6:	8d 83       	std	Y+5, r24	; 0x05
    34b8:	0f c0       	rjmp	.+30     	; 0x34d8 <LCD_KIT_voidRunCommand+0x49a>
    34ba:	80 e9       	ldi	r24, 0x90	; 144
    34bc:	91 e0       	ldi	r25, 0x01	; 1
    34be:	9c 83       	std	Y+4, r25	; 0x04
    34c0:	8b 83       	std	Y+3, r24	; 0x03
    34c2:	8b 81       	ldd	r24, Y+3	; 0x03
    34c4:	9c 81       	ldd	r25, Y+4	; 0x04
    34c6:	01 97       	sbiw	r24, 0x01	; 1
    34c8:	f1 f7       	brne	.-4      	; 0x34c6 <LCD_KIT_voidRunCommand+0x488>
    34ca:	9c 83       	std	Y+4, r25	; 0x04
    34cc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34ce:	8d 81       	ldd	r24, Y+5	; 0x05
    34d0:	9e 81       	ldd	r25, Y+6	; 0x06
    34d2:	01 97       	sbiw	r24, 0x01	; 1
    34d4:	9e 83       	std	Y+6, r25	; 0x06
    34d6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34d8:	8d 81       	ldd	r24, Y+5	; 0x05
    34da:	9e 81       	ldd	r25, Y+6	; 0x06
    34dc:	00 97       	sbiw	r24, 0x00	; 0
    34de:	69 f7       	brne	.-38     	; 0x34ba <LCD_KIT_voidRunCommand+0x47c>
    34e0:	14 c0       	rjmp	.+40     	; 0x350a <LCD_KIT_voidRunCommand+0x4cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34e2:	6f 81       	ldd	r22, Y+7	; 0x07
    34e4:	78 85       	ldd	r23, Y+8	; 0x08
    34e6:	89 85       	ldd	r24, Y+9	; 0x09
    34e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    34ea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    34ee:	dc 01       	movw	r26, r24
    34f0:	cb 01       	movw	r24, r22
    34f2:	9e 83       	std	Y+6, r25	; 0x06
    34f4:	8d 83       	std	Y+5, r24	; 0x05
    34f6:	8d 81       	ldd	r24, Y+5	; 0x05
    34f8:	9e 81       	ldd	r25, Y+6	; 0x06
    34fa:	9a 83       	std	Y+2, r25	; 0x02
    34fc:	89 83       	std	Y+1, r24	; 0x01
    34fe:	89 81       	ldd	r24, Y+1	; 0x01
    3500:	9a 81       	ldd	r25, Y+2	; 0x02
    3502:	01 97       	sbiw	r24, 0x01	; 1
    3504:	f1 f7       	brne	.-4      	; 0x3502 <LCD_KIT_voidRunCommand+0x4c4>
    3506:	9a 83       	std	Y+2, r25	; 0x02
    3508:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

	return;
}
    350a:	e9 96       	adiw	r28, 0x39	; 57
    350c:	0f b6       	in	r0, 0x3f	; 63
    350e:	f8 94       	cli
    3510:	de bf       	out	0x3e, r29	; 62
    3512:	0f be       	out	0x3f, r0	; 63
    3514:	cd bf       	out	0x3d, r28	; 61
    3516:	cf 91       	pop	r28
    3518:	df 91       	pop	r29
    351a:	08 95       	ret

0000351c <LCD_KIT_voidSetCurser>:

void LCD_KIT_voidSetCurser(u8 Line , u8 Col)
{
    351c:	df 93       	push	r29
    351e:	cf 93       	push	r28
    3520:	00 d0       	rcall	.+0      	; 0x3522 <LCD_KIT_voidSetCurser+0x6>
    3522:	cd b7       	in	r28, 0x3d	; 61
    3524:	de b7       	in	r29, 0x3e	; 62
    3526:	89 83       	std	Y+1, r24	; 0x01
    3528:	6a 83       	std	Y+2, r22	; 0x02
	LCD_KIT_voidRunCommand(Line+Col);
    352a:	89 81       	ldd	r24, Y+1	; 0x01
    352c:	9a 81       	ldd	r25, Y+2	; 0x02
    352e:	89 0f       	add	r24, r25
    3530:	0e 94 1f 18 	call	0x303e	; 0x303e <LCD_KIT_voidRunCommand>

	return;
}
    3534:	0f 90       	pop	r0
    3536:	0f 90       	pop	r0
    3538:	cf 91       	pop	r28
    353a:	df 91       	pop	r29
    353c:	08 95       	ret

0000353e <LCD_KIT_voidDisplayString>:

void LCD_KIT_voidDisplayString(u8 *Str)
{
    353e:	df 93       	push	r29
    3540:	cf 93       	push	r28
    3542:	00 d0       	rcall	.+0      	; 0x3544 <LCD_KIT_voidDisplayString+0x6>
    3544:	0f 92       	push	r0
    3546:	cd b7       	in	r28, 0x3d	; 61
    3548:	de b7       	in	r29, 0x3e	; 62
    354a:	9b 83       	std	Y+3, r25	; 0x03
    354c:	8a 83       	std	Y+2, r24	; 0x02
	for(u8 j=0;Str[j]!='\0';j++)
    354e:	19 82       	std	Y+1, r1	; 0x01
    3550:	0e c0       	rjmp	.+28     	; 0x356e <LCD_KIT_voidDisplayString+0x30>
	{
		LCD_KIT_voidDisplayCharacter(Str[j]);
    3552:	89 81       	ldd	r24, Y+1	; 0x01
    3554:	28 2f       	mov	r18, r24
    3556:	30 e0       	ldi	r19, 0x00	; 0
    3558:	8a 81       	ldd	r24, Y+2	; 0x02
    355a:	9b 81       	ldd	r25, Y+3	; 0x03
    355c:	fc 01       	movw	r30, r24
    355e:	e2 0f       	add	r30, r18
    3560:	f3 1f       	adc	r31, r19
    3562:	80 81       	ld	r24, Z
    3564:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <LCD_KIT_voidDisplayCharacter>
	return;
}

void LCD_KIT_voidDisplayString(u8 *Str)
{
	for(u8 j=0;Str[j]!='\0';j++)
    3568:	89 81       	ldd	r24, Y+1	; 0x01
    356a:	8f 5f       	subi	r24, 0xFF	; 255
    356c:	89 83       	std	Y+1, r24	; 0x01
    356e:	89 81       	ldd	r24, Y+1	; 0x01
    3570:	28 2f       	mov	r18, r24
    3572:	30 e0       	ldi	r19, 0x00	; 0
    3574:	8a 81       	ldd	r24, Y+2	; 0x02
    3576:	9b 81       	ldd	r25, Y+3	; 0x03
    3578:	fc 01       	movw	r30, r24
    357a:	e2 0f       	add	r30, r18
    357c:	f3 1f       	adc	r31, r19
    357e:	80 81       	ld	r24, Z
    3580:	88 23       	and	r24, r24
    3582:	39 f7       	brne	.-50     	; 0x3552 <LCD_KIT_voidDisplayString+0x14>
	{
		LCD_KIT_voidDisplayCharacter(Str[j]);
	}
}
    3584:	0f 90       	pop	r0
    3586:	0f 90       	pop	r0
    3588:	0f 90       	pop	r0
    358a:	cf 91       	pop	r28
    358c:	df 91       	pop	r29
    358e:	08 95       	ret

00003590 <LCD_KIT_voidDisplayBigNumber>:
	}
}
*/

void LCD_KIT_voidDisplayBigNumber(u16 Number)
{
    3590:	df 93       	push	r29
    3592:	cf 93       	push	r28
    3594:	00 d0       	rcall	.+0      	; 0x3596 <LCD_KIT_voidDisplayBigNumber+0x6>
    3596:	cd b7       	in	r28, 0x3d	; 61
    3598:	de b7       	in	r29, 0x3e	; 62
    359a:	9a 83       	std	Y+2, r25	; 0x02
    359c:	89 83       	std	Y+1, r24	; 0x01
	if(Number<=9)
    359e:	89 81       	ldd	r24, Y+1	; 0x01
    35a0:	9a 81       	ldd	r25, Y+2	; 0x02
    35a2:	8a 30       	cpi	r24, 0x0A	; 10
    35a4:	91 05       	cpc	r25, r1
    35a6:	28 f4       	brcc	.+10     	; 0x35b2 <LCD_KIT_voidDisplayBigNumber+0x22>
	{
		LCD_KIT_voidDisplayCharacter(Number+48);
    35a8:	89 81       	ldd	r24, Y+1	; 0x01
    35aa:	80 5d       	subi	r24, 0xD0	; 208
    35ac:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <LCD_KIT_voidDisplayCharacter>
    35b0:	c8 c0       	rjmp	.+400    	; 0x3742 <LCD_KIT_voidDisplayBigNumber+0x1b2>
	}
	else if(Number<=99)
    35b2:	89 81       	ldd	r24, Y+1	; 0x01
    35b4:	9a 81       	ldd	r25, Y+2	; 0x02
    35b6:	84 36       	cpi	r24, 0x64	; 100
    35b8:	91 05       	cpc	r25, r1
    35ba:	b0 f4       	brcc	.+44     	; 0x35e8 <LCD_KIT_voidDisplayBigNumber+0x58>
	{
		LCD_KIT_voidDisplayCharacter(Number/10+48);
    35bc:	89 81       	ldd	r24, Y+1	; 0x01
    35be:	9a 81       	ldd	r25, Y+2	; 0x02
    35c0:	2a e0       	ldi	r18, 0x0A	; 10
    35c2:	30 e0       	ldi	r19, 0x00	; 0
    35c4:	b9 01       	movw	r22, r18
    35c6:	0e 94 0c 22 	call	0x4418	; 0x4418 <__udivmodhi4>
    35ca:	cb 01       	movw	r24, r22
    35cc:	80 5d       	subi	r24, 0xD0	; 208
    35ce:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <LCD_KIT_voidDisplayCharacter>
		LCD_KIT_voidDisplayCharacter(Number%10+48);
    35d2:	89 81       	ldd	r24, Y+1	; 0x01
    35d4:	9a 81       	ldd	r25, Y+2	; 0x02
    35d6:	2a e0       	ldi	r18, 0x0A	; 10
    35d8:	30 e0       	ldi	r19, 0x00	; 0
    35da:	b9 01       	movw	r22, r18
    35dc:	0e 94 0c 22 	call	0x4418	; 0x4418 <__udivmodhi4>
    35e0:	80 5d       	subi	r24, 0xD0	; 208
    35e2:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <LCD_KIT_voidDisplayCharacter>
    35e6:	ad c0       	rjmp	.+346    	; 0x3742 <LCD_KIT_voidDisplayBigNumber+0x1b2>
	}
	else if(Number<=999)
    35e8:	89 81       	ldd	r24, Y+1	; 0x01
    35ea:	9a 81       	ldd	r25, Y+2	; 0x02
    35ec:	23 e0       	ldi	r18, 0x03	; 3
    35ee:	88 3e       	cpi	r24, 0xE8	; 232
    35f0:	92 07       	cpc	r25, r18
    35f2:	30 f5       	brcc	.+76     	; 0x3640 <LCD_KIT_voidDisplayBigNumber+0xb0>
	{
		LCD_KIT_voidDisplayCharacter(Number/100+48);
    35f4:	89 81       	ldd	r24, Y+1	; 0x01
    35f6:	9a 81       	ldd	r25, Y+2	; 0x02
    35f8:	24 e6       	ldi	r18, 0x64	; 100
    35fa:	30 e0       	ldi	r19, 0x00	; 0
    35fc:	b9 01       	movw	r22, r18
    35fe:	0e 94 0c 22 	call	0x4418	; 0x4418 <__udivmodhi4>
    3602:	cb 01       	movw	r24, r22
    3604:	80 5d       	subi	r24, 0xD0	; 208
    3606:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <LCD_KIT_voidDisplayCharacter>
		LCD_KIT_voidDisplayCharacter((Number/10)%10+48);
    360a:	89 81       	ldd	r24, Y+1	; 0x01
    360c:	9a 81       	ldd	r25, Y+2	; 0x02
    360e:	2a e0       	ldi	r18, 0x0A	; 10
    3610:	30 e0       	ldi	r19, 0x00	; 0
    3612:	b9 01       	movw	r22, r18
    3614:	0e 94 0c 22 	call	0x4418	; 0x4418 <__udivmodhi4>
    3618:	cb 01       	movw	r24, r22
    361a:	2a e0       	ldi	r18, 0x0A	; 10
    361c:	30 e0       	ldi	r19, 0x00	; 0
    361e:	b9 01       	movw	r22, r18
    3620:	0e 94 0c 22 	call	0x4418	; 0x4418 <__udivmodhi4>
    3624:	80 5d       	subi	r24, 0xD0	; 208
    3626:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <LCD_KIT_voidDisplayCharacter>
		LCD_KIT_voidDisplayCharacter(Number%10+48);
    362a:	89 81       	ldd	r24, Y+1	; 0x01
    362c:	9a 81       	ldd	r25, Y+2	; 0x02
    362e:	2a e0       	ldi	r18, 0x0A	; 10
    3630:	30 e0       	ldi	r19, 0x00	; 0
    3632:	b9 01       	movw	r22, r18
    3634:	0e 94 0c 22 	call	0x4418	; 0x4418 <__udivmodhi4>
    3638:	80 5d       	subi	r24, 0xD0	; 208
    363a:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <LCD_KIT_voidDisplayCharacter>
    363e:	81 c0       	rjmp	.+258    	; 0x3742 <LCD_KIT_voidDisplayBigNumber+0x1b2>
	}
	else if(Number<=9999)
    3640:	89 81       	ldd	r24, Y+1	; 0x01
    3642:	9a 81       	ldd	r25, Y+2	; 0x02
    3644:	27 e2       	ldi	r18, 0x27	; 39
    3646:	80 31       	cpi	r24, 0x10	; 16
    3648:	92 07       	cpc	r25, r18
    364a:	b0 f5       	brcc	.+108    	; 0x36b8 <LCD_KIT_voidDisplayBigNumber+0x128>
	{
		LCD_KIT_voidDisplayCharacter(Number/1000+48);
    364c:	89 81       	ldd	r24, Y+1	; 0x01
    364e:	9a 81       	ldd	r25, Y+2	; 0x02
    3650:	28 ee       	ldi	r18, 0xE8	; 232
    3652:	33 e0       	ldi	r19, 0x03	; 3
    3654:	b9 01       	movw	r22, r18
    3656:	0e 94 0c 22 	call	0x4418	; 0x4418 <__udivmodhi4>
    365a:	cb 01       	movw	r24, r22
    365c:	80 5d       	subi	r24, 0xD0	; 208
    365e:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <LCD_KIT_voidDisplayCharacter>
		LCD_KIT_voidDisplayCharacter((Number/100)%10+48);
    3662:	89 81       	ldd	r24, Y+1	; 0x01
    3664:	9a 81       	ldd	r25, Y+2	; 0x02
    3666:	24 e6       	ldi	r18, 0x64	; 100
    3668:	30 e0       	ldi	r19, 0x00	; 0
    366a:	b9 01       	movw	r22, r18
    366c:	0e 94 0c 22 	call	0x4418	; 0x4418 <__udivmodhi4>
    3670:	cb 01       	movw	r24, r22
    3672:	2a e0       	ldi	r18, 0x0A	; 10
    3674:	30 e0       	ldi	r19, 0x00	; 0
    3676:	b9 01       	movw	r22, r18
    3678:	0e 94 0c 22 	call	0x4418	; 0x4418 <__udivmodhi4>
    367c:	80 5d       	subi	r24, 0xD0	; 208
    367e:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <LCD_KIT_voidDisplayCharacter>
		LCD_KIT_voidDisplayCharacter((Number/10)%10+48);
    3682:	89 81       	ldd	r24, Y+1	; 0x01
    3684:	9a 81       	ldd	r25, Y+2	; 0x02
    3686:	2a e0       	ldi	r18, 0x0A	; 10
    3688:	30 e0       	ldi	r19, 0x00	; 0
    368a:	b9 01       	movw	r22, r18
    368c:	0e 94 0c 22 	call	0x4418	; 0x4418 <__udivmodhi4>
    3690:	cb 01       	movw	r24, r22
    3692:	2a e0       	ldi	r18, 0x0A	; 10
    3694:	30 e0       	ldi	r19, 0x00	; 0
    3696:	b9 01       	movw	r22, r18
    3698:	0e 94 0c 22 	call	0x4418	; 0x4418 <__udivmodhi4>
    369c:	80 5d       	subi	r24, 0xD0	; 208
    369e:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <LCD_KIT_voidDisplayCharacter>
		LCD_KIT_voidDisplayCharacter(Number%10+48);
    36a2:	89 81       	ldd	r24, Y+1	; 0x01
    36a4:	9a 81       	ldd	r25, Y+2	; 0x02
    36a6:	2a e0       	ldi	r18, 0x0A	; 10
    36a8:	30 e0       	ldi	r19, 0x00	; 0
    36aa:	b9 01       	movw	r22, r18
    36ac:	0e 94 0c 22 	call	0x4418	; 0x4418 <__udivmodhi4>
    36b0:	80 5d       	subi	r24, 0xD0	; 208
    36b2:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <LCD_KIT_voidDisplayCharacter>
    36b6:	45 c0       	rjmp	.+138    	; 0x3742 <LCD_KIT_voidDisplayBigNumber+0x1b2>
	}
	else
	{
		LCD_KIT_voidDisplayCharacter(Number/10000+48);
    36b8:	89 81       	ldd	r24, Y+1	; 0x01
    36ba:	9a 81       	ldd	r25, Y+2	; 0x02
    36bc:	20 e1       	ldi	r18, 0x10	; 16
    36be:	37 e2       	ldi	r19, 0x27	; 39
    36c0:	b9 01       	movw	r22, r18
    36c2:	0e 94 0c 22 	call	0x4418	; 0x4418 <__udivmodhi4>
    36c6:	cb 01       	movw	r24, r22
    36c8:	80 5d       	subi	r24, 0xD0	; 208
    36ca:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <LCD_KIT_voidDisplayCharacter>
		LCD_KIT_voidDisplayCharacter((Number/1000)%10+48);
    36ce:	89 81       	ldd	r24, Y+1	; 0x01
    36d0:	9a 81       	ldd	r25, Y+2	; 0x02
    36d2:	28 ee       	ldi	r18, 0xE8	; 232
    36d4:	33 e0       	ldi	r19, 0x03	; 3
    36d6:	b9 01       	movw	r22, r18
    36d8:	0e 94 0c 22 	call	0x4418	; 0x4418 <__udivmodhi4>
    36dc:	cb 01       	movw	r24, r22
    36de:	2a e0       	ldi	r18, 0x0A	; 10
    36e0:	30 e0       	ldi	r19, 0x00	; 0
    36e2:	b9 01       	movw	r22, r18
    36e4:	0e 94 0c 22 	call	0x4418	; 0x4418 <__udivmodhi4>
    36e8:	80 5d       	subi	r24, 0xD0	; 208
    36ea:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <LCD_KIT_voidDisplayCharacter>
		LCD_KIT_voidDisplayCharacter((Number/100)%10+48);
    36ee:	89 81       	ldd	r24, Y+1	; 0x01
    36f0:	9a 81       	ldd	r25, Y+2	; 0x02
    36f2:	24 e6       	ldi	r18, 0x64	; 100
    36f4:	30 e0       	ldi	r19, 0x00	; 0
    36f6:	b9 01       	movw	r22, r18
    36f8:	0e 94 0c 22 	call	0x4418	; 0x4418 <__udivmodhi4>
    36fc:	cb 01       	movw	r24, r22
    36fe:	2a e0       	ldi	r18, 0x0A	; 10
    3700:	30 e0       	ldi	r19, 0x00	; 0
    3702:	b9 01       	movw	r22, r18
    3704:	0e 94 0c 22 	call	0x4418	; 0x4418 <__udivmodhi4>
    3708:	80 5d       	subi	r24, 0xD0	; 208
    370a:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <LCD_KIT_voidDisplayCharacter>
		LCD_KIT_voidDisplayCharacter((Number/10)%10+48);
    370e:	89 81       	ldd	r24, Y+1	; 0x01
    3710:	9a 81       	ldd	r25, Y+2	; 0x02
    3712:	2a e0       	ldi	r18, 0x0A	; 10
    3714:	30 e0       	ldi	r19, 0x00	; 0
    3716:	b9 01       	movw	r22, r18
    3718:	0e 94 0c 22 	call	0x4418	; 0x4418 <__udivmodhi4>
    371c:	cb 01       	movw	r24, r22
    371e:	2a e0       	ldi	r18, 0x0A	; 10
    3720:	30 e0       	ldi	r19, 0x00	; 0
    3722:	b9 01       	movw	r22, r18
    3724:	0e 94 0c 22 	call	0x4418	; 0x4418 <__udivmodhi4>
    3728:	80 5d       	subi	r24, 0xD0	; 208
    372a:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <LCD_KIT_voidDisplayCharacter>
		LCD_KIT_voidDisplayCharacter(Number%10+48);
    372e:	89 81       	ldd	r24, Y+1	; 0x01
    3730:	9a 81       	ldd	r25, Y+2	; 0x02
    3732:	2a e0       	ldi	r18, 0x0A	; 10
    3734:	30 e0       	ldi	r19, 0x00	; 0
    3736:	b9 01       	movw	r22, r18
    3738:	0e 94 0c 22 	call	0x4418	; 0x4418 <__udivmodhi4>
    373c:	80 5d       	subi	r24, 0xD0	; 208
    373e:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <LCD_KIT_voidDisplayCharacter>
	}

	return;
}
    3742:	0f 90       	pop	r0
    3744:	0f 90       	pop	r0
    3746:	cf 91       	pop	r28
    3748:	df 91       	pop	r29
    374a:	08 95       	ret

0000374c <LCD_KIT_voidStoreCustomCharacter>:

void LCD_KIT_voidStoreCustomCharacter(u8 *Character, u8 Address)
{
    374c:	df 93       	push	r29
    374e:	cf 93       	push	r28
    3750:	00 d0       	rcall	.+0      	; 0x3752 <LCD_KIT_voidStoreCustomCharacter+0x6>
    3752:	00 d0       	rcall	.+0      	; 0x3754 <LCD_KIT_voidStoreCustomCharacter+0x8>
    3754:	cd b7       	in	r28, 0x3d	; 61
    3756:	de b7       	in	r29, 0x3e	; 62
    3758:	9b 83       	std	Y+3, r25	; 0x03
    375a:	8a 83       	std	Y+2, r24	; 0x02
    375c:	6c 83       	std	Y+4, r22	; 0x04
	LCD_KIT_voidRunCommand(Address);
    375e:	8c 81       	ldd	r24, Y+4	; 0x04
    3760:	0e 94 1f 18 	call	0x303e	; 0x303e <LCD_KIT_voidRunCommand>

	for(u8 j=0;j<8;j++)
    3764:	19 82       	std	Y+1, r1	; 0x01
    3766:	0e c0       	rjmp	.+28     	; 0x3784 <LCD_KIT_voidStoreCustomCharacter+0x38>
	{
		LCD_KIT_voidDisplayCharacter(Character[j]);
    3768:	89 81       	ldd	r24, Y+1	; 0x01
    376a:	28 2f       	mov	r18, r24
    376c:	30 e0       	ldi	r19, 0x00	; 0
    376e:	8a 81       	ldd	r24, Y+2	; 0x02
    3770:	9b 81       	ldd	r25, Y+3	; 0x03
    3772:	fc 01       	movw	r30, r24
    3774:	e2 0f       	add	r30, r18
    3776:	f3 1f       	adc	r31, r19
    3778:	80 81       	ld	r24, Z
    377a:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <LCD_KIT_voidDisplayCharacter>

void LCD_KIT_voidStoreCustomCharacter(u8 *Character, u8 Address)
{
	LCD_KIT_voidRunCommand(Address);

	for(u8 j=0;j<8;j++)
    377e:	89 81       	ldd	r24, Y+1	; 0x01
    3780:	8f 5f       	subi	r24, 0xFF	; 255
    3782:	89 83       	std	Y+1, r24	; 0x01
    3784:	89 81       	ldd	r24, Y+1	; 0x01
    3786:	88 30       	cpi	r24, 0x08	; 8
    3788:	78 f3       	brcs	.-34     	; 0x3768 <LCD_KIT_voidStoreCustomCharacter+0x1c>
	{
		LCD_KIT_voidDisplayCharacter(Character[j]);
	}

	return;
}
    378a:	0f 90       	pop	r0
    378c:	0f 90       	pop	r0
    378e:	0f 90       	pop	r0
    3790:	0f 90       	pop	r0
    3792:	cf 91       	pop	r28
    3794:	df 91       	pop	r29
    3796:	08 95       	ret

00003798 <KEYBAD_voidInitialization>:

#include "KEYBAD_int.h"


void KEYBAD_voidInitialization(void)
{
    3798:	df 93       	push	r29
    379a:	cf 93       	push	r28
    379c:	cd b7       	in	r28, 0x3d	; 61
    379e:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(PortC,Pin5,Input);
    37a0:	82 e0       	ldi	r24, 0x02	; 2
    37a2:	65 e0       	ldi	r22, 0x05	; 5
    37a4:	40 e0       	ldi	r20, 0x00	; 0
    37a6:	0e 94 ca 05 	call	0xb94	; 0xb94 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PortC,Pin4,Input);
    37aa:	82 e0       	ldi	r24, 0x02	; 2
    37ac:	64 e0       	ldi	r22, 0x04	; 4
    37ae:	40 e0       	ldi	r20, 0x00	; 0
    37b0:	0e 94 ca 05 	call	0xb94	; 0xb94 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PortC,Pin3,Input);
    37b4:	82 e0       	ldi	r24, 0x02	; 2
    37b6:	63 e0       	ldi	r22, 0x03	; 3
    37b8:	40 e0       	ldi	r20, 0x00	; 0
    37ba:	0e 94 ca 05 	call	0xb94	; 0xb94 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PortC,Pin2,Input);
    37be:	82 e0       	ldi	r24, 0x02	; 2
    37c0:	62 e0       	ldi	r22, 0x02	; 2
    37c2:	40 e0       	ldi	r20, 0x00	; 0
    37c4:	0e 94 ca 05 	call	0xb94	; 0xb94 <DIO_voidSetPinDirection>

	DIO_voidSetPinValue(PortC,Pin5,High);
    37c8:	82 e0       	ldi	r24, 0x02	; 2
    37ca:	65 e0       	ldi	r22, 0x05	; 5
    37cc:	41 e0       	ldi	r20, 0x01	; 1
    37ce:	0e 94 c6 06 	call	0xd8c	; 0xd8c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PortC,Pin4,High);
    37d2:	82 e0       	ldi	r24, 0x02	; 2
    37d4:	64 e0       	ldi	r22, 0x04	; 4
    37d6:	41 e0       	ldi	r20, 0x01	; 1
    37d8:	0e 94 c6 06 	call	0xd8c	; 0xd8c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PortC,Pin3,High);
    37dc:	82 e0       	ldi	r24, 0x02	; 2
    37de:	63 e0       	ldi	r22, 0x03	; 3
    37e0:	41 e0       	ldi	r20, 0x01	; 1
    37e2:	0e 94 c6 06 	call	0xd8c	; 0xd8c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PortC,Pin2,High);
    37e6:	82 e0       	ldi	r24, 0x02	; 2
    37e8:	62 e0       	ldi	r22, 0x02	; 2
    37ea:	41 e0       	ldi	r20, 0x01	; 1
    37ec:	0e 94 c6 06 	call	0xd8c	; 0xd8c <DIO_voidSetPinValue>




	DIO_voidSetPinDirection(PortD,Pin7,Output);
    37f0:	83 e0       	ldi	r24, 0x03	; 3
    37f2:	67 e0       	ldi	r22, 0x07	; 7
    37f4:	41 e0       	ldi	r20, 0x01	; 1
    37f6:	0e 94 ca 05 	call	0xb94	; 0xb94 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PortD,Pin6,Output);
    37fa:	83 e0       	ldi	r24, 0x03	; 3
    37fc:	66 e0       	ldi	r22, 0x06	; 6
    37fe:	41 e0       	ldi	r20, 0x01	; 1
    3800:	0e 94 ca 05 	call	0xb94	; 0xb94 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PortD,Pin5,Output);
    3804:	83 e0       	ldi	r24, 0x03	; 3
    3806:	65 e0       	ldi	r22, 0x05	; 5
    3808:	41 e0       	ldi	r20, 0x01	; 1
    380a:	0e 94 ca 05 	call	0xb94	; 0xb94 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PortD,Pin3,Output);
    380e:	83 e0       	ldi	r24, 0x03	; 3
    3810:	63 e0       	ldi	r22, 0x03	; 3
    3812:	41 e0       	ldi	r20, 0x01	; 1
    3814:	0e 94 ca 05 	call	0xb94	; 0xb94 <DIO_voidSetPinDirection>

	DIO_voidSetPinValue(PortD,Pin7,High);
    3818:	83 e0       	ldi	r24, 0x03	; 3
    381a:	67 e0       	ldi	r22, 0x07	; 7
    381c:	41 e0       	ldi	r20, 0x01	; 1
    381e:	0e 94 c6 06 	call	0xd8c	; 0xd8c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PortD,Pin6,High);
    3822:	83 e0       	ldi	r24, 0x03	; 3
    3824:	66 e0       	ldi	r22, 0x06	; 6
    3826:	41 e0       	ldi	r20, 0x01	; 1
    3828:	0e 94 c6 06 	call	0xd8c	; 0xd8c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PortD,Pin5,High);
    382c:	83 e0       	ldi	r24, 0x03	; 3
    382e:	65 e0       	ldi	r22, 0x05	; 5
    3830:	41 e0       	ldi	r20, 0x01	; 1
    3832:	0e 94 c6 06 	call	0xd8c	; 0xd8c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PortD,Pin3,High);
    3836:	83 e0       	ldi	r24, 0x03	; 3
    3838:	63 e0       	ldi	r22, 0x03	; 3
    383a:	41 e0       	ldi	r20, 0x01	; 1
    383c:	0e 94 c6 06 	call	0xd8c	; 0xd8c <DIO_voidSetPinValue>

	//return;
}
    3840:	cf 91       	pop	r28
    3842:	df 91       	pop	r29
    3844:	08 95       	ret

00003846 <KEYBAD_voidGetPressedKey>:

void KEYBAD_voidGetPressedKey(u8 *Row, u8 *Col,u8 *Flag)
{
    3846:	df 93       	push	r29
    3848:	cf 93       	push	r28
    384a:	cd b7       	in	r28, 0x3d	; 61
    384c:	de b7       	in	r29, 0x3e	; 62
    384e:	28 97       	sbiw	r28, 0x08	; 8
    3850:	0f b6       	in	r0, 0x3f	; 63
    3852:	f8 94       	cli
    3854:	de bf       	out	0x3e, r29	; 62
    3856:	0f be       	out	0x3f, r0	; 63
    3858:	cd bf       	out	0x3d, r28	; 61
    385a:	9c 83       	std	Y+4, r25	; 0x04
    385c:	8b 83       	std	Y+3, r24	; 0x03
    385e:	7e 83       	std	Y+6, r23	; 0x06
    3860:	6d 83       	std	Y+5, r22	; 0x05
    3862:	58 87       	std	Y+8, r21	; 0x08
    3864:	4f 83       	std	Y+7, r20	; 0x07
	for(u8 i=0;i<5;i++)
    3866:	1a 82       	std	Y+2, r1	; 0x02
    3868:	3f c0       	rjmp	.+126    	; 0x38e8 <KEYBAD_voidGetPressedKey+0xa2>
	{
		if(i==1)
    386a:	8a 81       	ldd	r24, Y+2	; 0x02
    386c:	81 30       	cpi	r24, 0x01	; 1
    386e:	c9 f1       	breq	.+114    	; 0x38e2 <KEYBAD_voidGetPressedKey+0x9c>
		{	continue;	}

		DIO_voidSetPortValueMask(PortD,~(1<<(i+3)),0x17);
    3870:	8a 81       	ldd	r24, Y+2	; 0x02
    3872:	88 2f       	mov	r24, r24
    3874:	90 e0       	ldi	r25, 0x00	; 0
    3876:	9c 01       	movw	r18, r24
    3878:	2d 5f       	subi	r18, 0xFD	; 253
    387a:	3f 4f       	sbci	r19, 0xFF	; 255
    387c:	81 e0       	ldi	r24, 0x01	; 1
    387e:	90 e0       	ldi	r25, 0x00	; 0
    3880:	02 c0       	rjmp	.+4      	; 0x3886 <KEYBAD_voidGetPressedKey+0x40>
    3882:	88 0f       	add	r24, r24
    3884:	99 1f       	adc	r25, r25
    3886:	2a 95       	dec	r18
    3888:	e2 f7       	brpl	.-8      	; 0x3882 <KEYBAD_voidGetPressedKey+0x3c>
    388a:	98 2f       	mov	r25, r24
    388c:	90 95       	com	r25
    388e:	83 e0       	ldi	r24, 0x03	; 3
    3890:	69 2f       	mov	r22, r25
    3892:	47 e1       	ldi	r20, 0x17	; 23
    3894:	0e 94 f6 08 	call	0x11ec	; 0x11ec <DIO_voidSetPortValueMask>

		for(u8 j=0;j<4;j++)
    3898:	19 82       	std	Y+1, r1	; 0x01
    389a:	20 c0       	rjmp	.+64     	; 0x38dc <KEYBAD_voidGetPressedKey+0x96>
		{
			if(!DIO_u8GetPinValue(PortC,j+2))
    389c:	89 81       	ldd	r24, Y+1	; 0x01
    389e:	98 2f       	mov	r25, r24
    38a0:	9e 5f       	subi	r25, 0xFE	; 254
    38a2:	82 e0       	ldi	r24, 0x02	; 2
    38a4:	69 2f       	mov	r22, r25
    38a6:	0e 94 ae 09 	call	0x135c	; 0x135c <DIO_u8GetPinValue>
    38aa:	88 23       	and	r24, r24
    38ac:	a1 f4       	brne	.+40     	; 0x38d6 <KEYBAD_voidGetPressedKey+0x90>
			{
				*Row=3-j;
    38ae:	93 e0       	ldi	r25, 0x03	; 3
    38b0:	89 81       	ldd	r24, Y+1	; 0x01
    38b2:	29 2f       	mov	r18, r25
    38b4:	28 1b       	sub	r18, r24
    38b6:	82 2f       	mov	r24, r18
    38b8:	eb 81       	ldd	r30, Y+3	; 0x03
    38ba:	fc 81       	ldd	r31, Y+4	; 0x04
    38bc:	80 83       	st	Z, r24
				*Col=4-i;
    38be:	94 e0       	ldi	r25, 0x04	; 4
    38c0:	8a 81       	ldd	r24, Y+2	; 0x02
    38c2:	29 2f       	mov	r18, r25
    38c4:	28 1b       	sub	r18, r24
    38c6:	82 2f       	mov	r24, r18
    38c8:	ed 81       	ldd	r30, Y+5	; 0x05
    38ca:	fe 81       	ldd	r31, Y+6	; 0x06
    38cc:	80 83       	st	Z, r24

				*Flag=1;
    38ce:	ef 81       	ldd	r30, Y+7	; 0x07
    38d0:	f8 85       	ldd	r31, Y+8	; 0x08
    38d2:	81 e0       	ldi	r24, 0x01	; 1
    38d4:	80 83       	st	Z, r24
		if(i==1)
		{	continue;	}

		DIO_voidSetPortValueMask(PortD,~(1<<(i+3)),0x17);

		for(u8 j=0;j<4;j++)
    38d6:	89 81       	ldd	r24, Y+1	; 0x01
    38d8:	8f 5f       	subi	r24, 0xFF	; 255
    38da:	89 83       	std	Y+1, r24	; 0x01
    38dc:	89 81       	ldd	r24, Y+1	; 0x01
    38de:	84 30       	cpi	r24, 0x04	; 4
    38e0:	e8 f2       	brcs	.-70     	; 0x389c <KEYBAD_voidGetPressedKey+0x56>
	//return;
}

void KEYBAD_voidGetPressedKey(u8 *Row, u8 *Col,u8 *Flag)
{
	for(u8 i=0;i<5;i++)
    38e2:	8a 81       	ldd	r24, Y+2	; 0x02
    38e4:	8f 5f       	subi	r24, 0xFF	; 255
    38e6:	8a 83       	std	Y+2, r24	; 0x02
    38e8:	8a 81       	ldd	r24, Y+2	; 0x02
    38ea:	85 30       	cpi	r24, 0x05	; 5
    38ec:	08 f4       	brcc	.+2      	; 0x38f0 <KEYBAD_voidGetPressedKey+0xaa>
    38ee:	bd cf       	rjmp	.-134    	; 0x386a <KEYBAD_voidGetPressedKey+0x24>
				*Flag=1;
			}
		}
	}

	DIO_voidSetPortValueMask(PortD,0xFF,0x17);
    38f0:	83 e0       	ldi	r24, 0x03	; 3
    38f2:	6f ef       	ldi	r22, 0xFF	; 255
    38f4:	47 e1       	ldi	r20, 0x17	; 23
    38f6:	0e 94 f6 08 	call	0x11ec	; 0x11ec <DIO_voidSetPortValueMask>

	return;
}
    38fa:	28 96       	adiw	r28, 0x08	; 8
    38fc:	0f b6       	in	r0, 0x3f	; 63
    38fe:	f8 94       	cli
    3900:	de bf       	out	0x3e, r29	; 62
    3902:	0f be       	out	0x3f, r0	; 63
    3904:	cd bf       	out	0x3d, r28	; 61
    3906:	cf 91       	pop	r28
    3908:	df 91       	pop	r29
    390a:	08 95       	ret

0000390c <SEG_voidInitialization>:

#include "7SEG_int.h"
#include "7SEG_priv.h"

void SEG_voidInitialization(void)
{
    390c:	df 93       	push	r29
    390e:	cf 93       	push	r28
    3910:	cd b7       	in	r28, 0x3d	; 61
    3912:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPortDirection(SEG_PORT,Output);
    3914:	80 e0       	ldi	r24, 0x00	; 0
    3916:	61 e0       	ldi	r22, 0x01	; 1
    3918:	0e 94 3f 08 	call	0x107e	; 0x107e <DIO_voidSetPortDirection>
}
    391c:	cf 91       	pop	r28
    391e:	df 91       	pop	r29
    3920:	08 95       	ret

00003922 <SEG_voidDisplayNumber>:

void SEG_voidDisplayNumber(u8 Number)
{
    3922:	df 93       	push	r29
    3924:	cf 93       	push	r28
    3926:	00 d0       	rcall	.+0      	; 0x3928 <SEG_voidDisplayNumber+0x6>
    3928:	0f 92       	push	r0
    392a:	cd b7       	in	r28, 0x3d	; 61
    392c:	de b7       	in	r29, 0x3e	; 62
    392e:	89 83       	std	Y+1, r24	; 0x01
	switch(Number)
    3930:	89 81       	ldd	r24, Y+1	; 0x01
    3932:	28 2f       	mov	r18, r24
    3934:	30 e0       	ldi	r19, 0x00	; 0
    3936:	3b 83       	std	Y+3, r19	; 0x03
    3938:	2a 83       	std	Y+2, r18	; 0x02
    393a:	8a 81       	ldd	r24, Y+2	; 0x02
    393c:	9b 81       	ldd	r25, Y+3	; 0x03
    393e:	84 30       	cpi	r24, 0x04	; 4
    3940:	91 05       	cpc	r25, r1
    3942:	09 f4       	brne	.+2      	; 0x3946 <SEG_voidDisplayNumber+0x24>
    3944:	55 c0       	rjmp	.+170    	; 0x39f0 <SEG_voidDisplayNumber+0xce>
    3946:	2a 81       	ldd	r18, Y+2	; 0x02
    3948:	3b 81       	ldd	r19, Y+3	; 0x03
    394a:	25 30       	cpi	r18, 0x05	; 5
    394c:	31 05       	cpc	r19, r1
    394e:	dc f4       	brge	.+54     	; 0x3986 <SEG_voidDisplayNumber+0x64>
    3950:	8a 81       	ldd	r24, Y+2	; 0x02
    3952:	9b 81       	ldd	r25, Y+3	; 0x03
    3954:	81 30       	cpi	r24, 0x01	; 1
    3956:	91 05       	cpc	r25, r1
    3958:	09 f4       	brne	.+2      	; 0x395c <SEG_voidDisplayNumber+0x3a>
    395a:	3b c0       	rjmp	.+118    	; 0x39d2 <SEG_voidDisplayNumber+0xb0>
    395c:	2a 81       	ldd	r18, Y+2	; 0x02
    395e:	3b 81       	ldd	r19, Y+3	; 0x03
    3960:	22 30       	cpi	r18, 0x02	; 2
    3962:	31 05       	cpc	r19, r1
    3964:	2c f4       	brge	.+10     	; 0x3970 <SEG_voidDisplayNumber+0x4e>
    3966:	8a 81       	ldd	r24, Y+2	; 0x02
    3968:	9b 81       	ldd	r25, Y+3	; 0x03
    396a:	00 97       	sbiw	r24, 0x00	; 0
    396c:	69 f1       	breq	.+90     	; 0x39c8 <SEG_voidDisplayNumber+0xa6>
    396e:	5d c0       	rjmp	.+186    	; 0x3a2a <SEG_voidDisplayNumber+0x108>
    3970:	2a 81       	ldd	r18, Y+2	; 0x02
    3972:	3b 81       	ldd	r19, Y+3	; 0x03
    3974:	22 30       	cpi	r18, 0x02	; 2
    3976:	31 05       	cpc	r19, r1
    3978:	89 f1       	breq	.+98     	; 0x39dc <SEG_voidDisplayNumber+0xba>
    397a:	8a 81       	ldd	r24, Y+2	; 0x02
    397c:	9b 81       	ldd	r25, Y+3	; 0x03
    397e:	83 30       	cpi	r24, 0x03	; 3
    3980:	91 05       	cpc	r25, r1
    3982:	89 f1       	breq	.+98     	; 0x39e6 <SEG_voidDisplayNumber+0xc4>
    3984:	52 c0       	rjmp	.+164    	; 0x3a2a <SEG_voidDisplayNumber+0x108>
    3986:	2a 81       	ldd	r18, Y+2	; 0x02
    3988:	3b 81       	ldd	r19, Y+3	; 0x03
    398a:	27 30       	cpi	r18, 0x07	; 7
    398c:	31 05       	cpc	r19, r1
    398e:	09 f4       	brne	.+2      	; 0x3992 <SEG_voidDisplayNumber+0x70>
    3990:	3e c0       	rjmp	.+124    	; 0x3a0e <SEG_voidDisplayNumber+0xec>
    3992:	8a 81       	ldd	r24, Y+2	; 0x02
    3994:	9b 81       	ldd	r25, Y+3	; 0x03
    3996:	88 30       	cpi	r24, 0x08	; 8
    3998:	91 05       	cpc	r25, r1
    399a:	5c f4       	brge	.+22     	; 0x39b2 <SEG_voidDisplayNumber+0x90>
    399c:	2a 81       	ldd	r18, Y+2	; 0x02
    399e:	3b 81       	ldd	r19, Y+3	; 0x03
    39a0:	25 30       	cpi	r18, 0x05	; 5
    39a2:	31 05       	cpc	r19, r1
    39a4:	51 f1       	breq	.+84     	; 0x39fa <SEG_voidDisplayNumber+0xd8>
    39a6:	8a 81       	ldd	r24, Y+2	; 0x02
    39a8:	9b 81       	ldd	r25, Y+3	; 0x03
    39aa:	86 30       	cpi	r24, 0x06	; 6
    39ac:	91 05       	cpc	r25, r1
    39ae:	51 f1       	breq	.+84     	; 0x3a04 <SEG_voidDisplayNumber+0xe2>
    39b0:	3c c0       	rjmp	.+120    	; 0x3a2a <SEG_voidDisplayNumber+0x108>
    39b2:	2a 81       	ldd	r18, Y+2	; 0x02
    39b4:	3b 81       	ldd	r19, Y+3	; 0x03
    39b6:	28 30       	cpi	r18, 0x08	; 8
    39b8:	31 05       	cpc	r19, r1
    39ba:	71 f1       	breq	.+92     	; 0x3a18 <SEG_voidDisplayNumber+0xf6>
    39bc:	8a 81       	ldd	r24, Y+2	; 0x02
    39be:	9b 81       	ldd	r25, Y+3	; 0x03
    39c0:	89 30       	cpi	r24, 0x09	; 9
    39c2:	91 05       	cpc	r25, r1
    39c4:	71 f1       	breq	.+92     	; 0x3a22 <SEG_voidDisplayNumber+0x100>
    39c6:	31 c0       	rjmp	.+98     	; 0x3a2a <SEG_voidDisplayNumber+0x108>
	{
	case 0 : DIO_voidSetPortValue(SEG_PORT,SEG_Display0_Value); break;
    39c8:	80 e0       	ldi	r24, 0x00	; 0
    39ca:	6f e3       	ldi	r22, 0x3F	; 63
    39cc:	0e 94 b5 08 	call	0x116a	; 0x116a <DIO_voidSetPortValue>
    39d0:	2c c0       	rjmp	.+88     	; 0x3a2a <SEG_voidDisplayNumber+0x108>
	case 1 : DIO_voidSetPortValue(SEG_PORT,SEG_Display1_Value); break;
    39d2:	80 e0       	ldi	r24, 0x00	; 0
    39d4:	66 e0       	ldi	r22, 0x06	; 6
    39d6:	0e 94 b5 08 	call	0x116a	; 0x116a <DIO_voidSetPortValue>
    39da:	27 c0       	rjmp	.+78     	; 0x3a2a <SEG_voidDisplayNumber+0x108>
	case 2 : DIO_voidSetPortValue(SEG_PORT,SEG_Display2_Value); break;
    39dc:	80 e0       	ldi	r24, 0x00	; 0
    39de:	6b e5       	ldi	r22, 0x5B	; 91
    39e0:	0e 94 b5 08 	call	0x116a	; 0x116a <DIO_voidSetPortValue>
    39e4:	22 c0       	rjmp	.+68     	; 0x3a2a <SEG_voidDisplayNumber+0x108>
	case 3 : DIO_voidSetPortValue(SEG_PORT,SEG_Display3_Value); break;
    39e6:	80 e0       	ldi	r24, 0x00	; 0
    39e8:	6f e4       	ldi	r22, 0x4F	; 79
    39ea:	0e 94 b5 08 	call	0x116a	; 0x116a <DIO_voidSetPortValue>
    39ee:	1d c0       	rjmp	.+58     	; 0x3a2a <SEG_voidDisplayNumber+0x108>
	case 4 : DIO_voidSetPortValue(SEG_PORT,SEG_Display4_Value); break;
    39f0:	80 e0       	ldi	r24, 0x00	; 0
    39f2:	66 e6       	ldi	r22, 0x66	; 102
    39f4:	0e 94 b5 08 	call	0x116a	; 0x116a <DIO_voidSetPortValue>
    39f8:	18 c0       	rjmp	.+48     	; 0x3a2a <SEG_voidDisplayNumber+0x108>
	case 5 : DIO_voidSetPortValue(SEG_PORT,SEG_Display5_Value); break;
    39fa:	80 e0       	ldi	r24, 0x00	; 0
    39fc:	6d e6       	ldi	r22, 0x6D	; 109
    39fe:	0e 94 b5 08 	call	0x116a	; 0x116a <DIO_voidSetPortValue>
    3a02:	13 c0       	rjmp	.+38     	; 0x3a2a <SEG_voidDisplayNumber+0x108>
	case 6 : DIO_voidSetPortValue(SEG_PORT,SEG_Display6_Value); break;
    3a04:	80 e0       	ldi	r24, 0x00	; 0
    3a06:	6d e7       	ldi	r22, 0x7D	; 125
    3a08:	0e 94 b5 08 	call	0x116a	; 0x116a <DIO_voidSetPortValue>
    3a0c:	0e c0       	rjmp	.+28     	; 0x3a2a <SEG_voidDisplayNumber+0x108>
	case 7 : DIO_voidSetPortValue(SEG_PORT,SEG_Display7_Value); break;
    3a0e:	80 e0       	ldi	r24, 0x00	; 0
    3a10:	67 e4       	ldi	r22, 0x47	; 71
    3a12:	0e 94 b5 08 	call	0x116a	; 0x116a <DIO_voidSetPortValue>
    3a16:	09 c0       	rjmp	.+18     	; 0x3a2a <SEG_voidDisplayNumber+0x108>
	case 8 : DIO_voidSetPortValue(SEG_PORT,SEG_Display8_Value); break;
    3a18:	80 e0       	ldi	r24, 0x00	; 0
    3a1a:	6f e7       	ldi	r22, 0x7F	; 127
    3a1c:	0e 94 b5 08 	call	0x116a	; 0x116a <DIO_voidSetPortValue>
    3a20:	04 c0       	rjmp	.+8      	; 0x3a2a <SEG_voidDisplayNumber+0x108>
	case 9 : DIO_voidSetPortValue(SEG_PORT,SEG_Display9_Value); break;
    3a22:	80 e0       	ldi	r24, 0x00	; 0
    3a24:	6f e6       	ldi	r22, 0x6F	; 111
    3a26:	0e 94 b5 08 	call	0x116a	; 0x116a <DIO_voidSetPortValue>
	}
	return;
}
    3a2a:	0f 90       	pop	r0
    3a2c:	0f 90       	pop	r0
    3a2e:	0f 90       	pop	r0
    3a30:	cf 91       	pop	r28
    3a32:	df 91       	pop	r29
    3a34:	08 95       	ret

00003a36 <main>:
*/

/****************************LCD Application***********************************/

int main(void)
{
    3a36:	0f 93       	push	r16
    3a38:	1f 93       	push	r17
    3a3a:	df 93       	push	r29
    3a3c:	cf 93       	push	r28
    3a3e:	cd b7       	in	r28, 0x3d	; 61
    3a40:	de b7       	in	r29, 0x3e	; 62
    3a42:	cb 55       	subi	r28, 0x5B	; 91
    3a44:	d0 40       	sbci	r29, 0x00	; 0
    3a46:	0f b6       	in	r0, 0x3f	; 63
    3a48:	f8 94       	cli
    3a4a:	de bf       	out	0x3e, r29	; 62
    3a4c:	0f be       	out	0x3f, r0	; 63
    3a4e:	cd bf       	out	0x3d, r28	; 61
	LCD_KIT_voidInitialization();
    3a50:	0e 94 4c 12 	call	0x2498	; 0x2498 <LCD_KIT_voidInitialization>
//	LCD_KIT_voidDisplayCharacter(5);


/***** Game *****/

	u8 Way_Flag, Previous_Way_flag, Col_Index=2, Line_Index=1;
    3a54:	fe 01       	movw	r30, r28
    3a56:	e8 5b       	subi	r30, 0xB8	; 184
    3a58:	ff 4f       	sbci	r31, 0xFF	; 255
    3a5a:	82 e0       	ldi	r24, 0x02	; 2
    3a5c:	80 83       	st	Z, r24
    3a5e:	fe 01       	movw	r30, r28
    3a60:	e9 5b       	subi	r30, 0xB9	; 185
    3a62:	ff 4f       	sbci	r31, 0xFF	; 255
    3a64:	81 e0       	ldi	r24, 0x01	; 1
    3a66:	80 83       	st	Z, r24

		u8 Ball[8]={0x00,0x00,0x0E,0x1F,0x1F,0x1F,0x0E,0x00};
    3a68:	ce 01       	movw	r24, r28
    3a6a:	85 5b       	subi	r24, 0xB5	; 181
    3a6c:	9f 4f       	sbci	r25, 0xFF	; 255
    3a6e:	69 96       	adiw	r28, 0x19	; 25
    3a70:	9f af       	std	Y+63, r25	; 0x3f
    3a72:	8e af       	std	Y+62, r24	; 0x3e
    3a74:	69 97       	sbiw	r28, 0x19	; 25
    3a76:	22 e7       	ldi	r18, 0x72	; 114
    3a78:	30 e0       	ldi	r19, 0x00	; 0
    3a7a:	6b 96       	adiw	r28, 0x1b	; 27
    3a7c:	3f af       	std	Y+63, r19	; 0x3f
    3a7e:	2e af       	std	Y+62, r18	; 0x3e
    3a80:	6b 97       	sbiw	r28, 0x1b	; 27
    3a82:	38 e0       	ldi	r19, 0x08	; 8
    3a84:	6c 96       	adiw	r28, 0x1c	; 28
    3a86:	3f af       	std	Y+63, r19	; 0x3f
    3a88:	6c 97       	sbiw	r28, 0x1c	; 28
    3a8a:	6b 96       	adiw	r28, 0x1b	; 27
    3a8c:	ee ad       	ldd	r30, Y+62	; 0x3e
    3a8e:	ff ad       	ldd	r31, Y+63	; 0x3f
    3a90:	6b 97       	sbiw	r28, 0x1b	; 27
    3a92:	00 80       	ld	r0, Z
    3a94:	6b 96       	adiw	r28, 0x1b	; 27
    3a96:	2e ad       	ldd	r18, Y+62	; 0x3e
    3a98:	3f ad       	ldd	r19, Y+63	; 0x3f
    3a9a:	6b 97       	sbiw	r28, 0x1b	; 27
    3a9c:	2f 5f       	subi	r18, 0xFF	; 255
    3a9e:	3f 4f       	sbci	r19, 0xFF	; 255
    3aa0:	6b 96       	adiw	r28, 0x1b	; 27
    3aa2:	3f af       	std	Y+63, r19	; 0x3f
    3aa4:	2e af       	std	Y+62, r18	; 0x3e
    3aa6:	6b 97       	sbiw	r28, 0x1b	; 27
    3aa8:	69 96       	adiw	r28, 0x19	; 25
    3aaa:	ee ad       	ldd	r30, Y+62	; 0x3e
    3aac:	ff ad       	ldd	r31, Y+63	; 0x3f
    3aae:	69 97       	sbiw	r28, 0x19	; 25
    3ab0:	00 82       	st	Z, r0
    3ab2:	69 96       	adiw	r28, 0x19	; 25
    3ab4:	2e ad       	ldd	r18, Y+62	; 0x3e
    3ab6:	3f ad       	ldd	r19, Y+63	; 0x3f
    3ab8:	69 97       	sbiw	r28, 0x19	; 25
    3aba:	2f 5f       	subi	r18, 0xFF	; 255
    3abc:	3f 4f       	sbci	r19, 0xFF	; 255
    3abe:	69 96       	adiw	r28, 0x19	; 25
    3ac0:	3f af       	std	Y+63, r19	; 0x3f
    3ac2:	2e af       	std	Y+62, r18	; 0x3e
    3ac4:	69 97       	sbiw	r28, 0x19	; 25
    3ac6:	6c 96       	adiw	r28, 0x1c	; 28
    3ac8:	3f ad       	ldd	r19, Y+63	; 0x3f
    3aca:	6c 97       	sbiw	r28, 0x1c	; 28
    3acc:	31 50       	subi	r19, 0x01	; 1
    3ace:	6c 96       	adiw	r28, 0x1c	; 28
    3ad0:	3f af       	std	Y+63, r19	; 0x3f
    3ad2:	6c 97       	sbiw	r28, 0x1c	; 28
    3ad4:	6c 96       	adiw	r28, 0x1c	; 28
    3ad6:	8f ad       	ldd	r24, Y+63	; 0x3f
    3ad8:	6c 97       	sbiw	r28, 0x1c	; 28
    3ada:	88 23       	and	r24, r24
    3adc:	b1 f6       	brne	.-84     	; 0x3a8a <main+0x54>
		LCD_KIT_voidStoreCustomCharacter(Ball,0x40);
    3ade:	ce 01       	movw	r24, r28
    3ae0:	85 5b       	subi	r24, 0xB5	; 181
    3ae2:	9f 4f       	sbci	r25, 0xFF	; 255
    3ae4:	60 e4       	ldi	r22, 0x40	; 64
    3ae6:	0e 94 a6 1b 	call	0x374c	; 0x374c <LCD_KIT_voidStoreCustomCharacter>

		LCD_KIT_voidSetCurser(Line1,Col0);
    3aea:	80 e8       	ldi	r24, 0x80	; 128
    3aec:	60 e0       	ldi	r22, 0x00	; 0
    3aee:	0e 94 8e 1a 	call	0x351c	; 0x351c <LCD_KIT_voidSetCurser>
		LCD_KIT_voidDisplayCharacter(0x00);
    3af2:	80 e0       	ldi	r24, 0x00	; 0
    3af4:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <LCD_KIT_voidDisplayCharacter>

		while(1)
		{
			if(!DIO_u8GetPinValue(Switch_Port,Go_To_Right))
    3af8:	83 e0       	ldi	r24, 0x03	; 3
    3afa:	63 e0       	ldi	r22, 0x03	; 3
    3afc:	0e 94 ae 09 	call	0x135c	; 0x135c <DIO_u8GetPinValue>
    3b00:	88 23       	and	r24, r24
    3b02:	d1 f7       	brne	.-12     	; 0x3af8 <main+0xc2>
			{
				LCD_KIT_voidRunCommand(0x06);
    3b04:	86 e0       	ldi	r24, 0x06	; 6
    3b06:	0e 94 1f 18 	call	0x303e	; 0x303e <LCD_KIT_voidRunCommand>
				LCD_KIT_voidRunCommand(0x10);
    3b0a:	80 e1       	ldi	r24, 0x10	; 16
    3b0c:	0e 94 1f 18 	call	0x303e	; 0x303e <LCD_KIT_voidRunCommand>
				LCD_KIT_voidDisplayCharacter(' ');
    3b10:	80 e2       	ldi	r24, 0x20	; 32
    3b12:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <LCD_KIT_voidDisplayCharacter>
				LCD_KIT_voidDisplayCharacter(0x00);
    3b16:	80 e0       	ldi	r24, 0x00	; 0
    3b18:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <LCD_KIT_voidDisplayCharacter>
				Way_Flag=Right;
    3b1c:	fe 01       	movw	r30, r28
    3b1e:	e6 5b       	subi	r30, 0xB6	; 182
    3b20:	ff 4f       	sbci	r31, 0xFF	; 255
    3b22:	84 e1       	ldi	r24, 0x14	; 20
    3b24:	80 83       	st	Z, r24
				Previous_Way_flag=Right;
    3b26:	fe 01       	movw	r30, r28
    3b28:	e7 5b       	subi	r30, 0xB7	; 183
    3b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b2c:	84 e1       	ldi	r24, 0x14	; 20
    3b2e:	80 83       	st	Z, r24
			}
		}

		while(1)
		{
			if((Col_Index == 0)||(Col_Index == 21))
    3b30:	fe 01       	movw	r30, r28
    3b32:	e8 5b       	subi	r30, 0xB8	; 184
    3b34:	ff 4f       	sbci	r31, 0xFF	; 255
    3b36:	80 81       	ld	r24, Z
    3b38:	88 23       	and	r24, r24
    3b3a:	31 f0       	breq	.+12     	; 0x3b48 <main+0x112>
    3b3c:	fe 01       	movw	r30, r28
    3b3e:	e8 5b       	subi	r30, 0xB8	; 184
    3b40:	ff 4f       	sbci	r31, 0xFF	; 255
    3b42:	80 81       	ld	r24, Z
    3b44:	85 31       	cpi	r24, 0x15	; 21
    3b46:	61 f4       	brne	.+24     	; 0x3b60 <main+0x12a>
			{
				LCD_KIT_voidRunCommand(0x06);
    3b48:	86 e0       	ldi	r24, 0x06	; 6
    3b4a:	0e 94 1f 18 	call	0x303e	; 0x303e <LCD_KIT_voidRunCommand>
				LCD_KIT_voidSetCurser(Line1,Col5);
    3b4e:	80 e8       	ldi	r24, 0x80	; 128
    3b50:	65 e0       	ldi	r22, 0x05	; 5
    3b52:	0e 94 8e 1a 	call	0x351c	; 0x351c <LCD_KIT_voidSetCurser>
				LCD_KIT_voidDisplayString("Game Over");
    3b56:	80 e6       	ldi	r24, 0x60	; 96
    3b58:	90 e0       	ldi	r25, 0x00	; 0
    3b5a:	0e 94 9f 1a 	call	0x353e	; 0x353e <LCD_KIT_voidDisplayString>
    3b5e:	4e c4       	rjmp	.+2204   	; 0x43fc <main+0x9c6>
				break;
    3b60:	fe 01       	movw	r30, r28
    3b62:	ed 5b       	subi	r30, 0xBD	; 189
    3b64:	ff 4f       	sbci	r31, 0xFF	; 255
    3b66:	80 e0       	ldi	r24, 0x00	; 0
    3b68:	90 e0       	ldi	r25, 0x00	; 0
    3b6a:	a8 e4       	ldi	r26, 0x48	; 72
    3b6c:	b3 e4       	ldi	r27, 0x43	; 67
    3b6e:	80 83       	st	Z, r24
    3b70:	91 83       	std	Z+1, r25	; 0x01
    3b72:	a2 83       	std	Z+2, r26	; 0x02
    3b74:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b76:	8e 01       	movw	r16, r28
    3b78:	01 5c       	subi	r16, 0xC1	; 193
    3b7a:	1f 4f       	sbci	r17, 0xFF	; 255
    3b7c:	fe 01       	movw	r30, r28
    3b7e:	ed 5b       	subi	r30, 0xBD	; 189
    3b80:	ff 4f       	sbci	r31, 0xFF	; 255
    3b82:	60 81       	ld	r22, Z
    3b84:	71 81       	ldd	r23, Z+1	; 0x01
    3b86:	82 81       	ldd	r24, Z+2	; 0x02
    3b88:	93 81       	ldd	r25, Z+3	; 0x03
    3b8a:	20 e0       	ldi	r18, 0x00	; 0
    3b8c:	30 e0       	ldi	r19, 0x00	; 0
    3b8e:	4a e7       	ldi	r20, 0x7A	; 122
    3b90:	55 e4       	ldi	r21, 0x45	; 69
    3b92:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3b96:	dc 01       	movw	r26, r24
    3b98:	cb 01       	movw	r24, r22
    3b9a:	f8 01       	movw	r30, r16
    3b9c:	80 83       	st	Z, r24
    3b9e:	91 83       	std	Z+1, r25	; 0x01
    3ba0:	a2 83       	std	Z+2, r26	; 0x02
    3ba2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3ba4:	fe 01       	movw	r30, r28
    3ba6:	ff 96       	adiw	r30, 0x3f	; 63
    3ba8:	60 81       	ld	r22, Z
    3baa:	71 81       	ldd	r23, Z+1	; 0x01
    3bac:	82 81       	ldd	r24, Z+2	; 0x02
    3bae:	93 81       	ldd	r25, Z+3	; 0x03
    3bb0:	20 e0       	ldi	r18, 0x00	; 0
    3bb2:	30 e0       	ldi	r19, 0x00	; 0
    3bb4:	40 e8       	ldi	r20, 0x80	; 128
    3bb6:	5f e3       	ldi	r21, 0x3F	; 63
    3bb8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3bbc:	88 23       	and	r24, r24
    3bbe:	2c f4       	brge	.+10     	; 0x3bca <main+0x194>
		__ticks = 1;
    3bc0:	81 e0       	ldi	r24, 0x01	; 1
    3bc2:	90 e0       	ldi	r25, 0x00	; 0
    3bc4:	9e af       	std	Y+62, r25	; 0x3e
    3bc6:	8d af       	std	Y+61, r24	; 0x3d
    3bc8:	46 c0       	rjmp	.+140    	; 0x3c56 <main+0x220>
	else if (__tmp > 65535)
    3bca:	fe 01       	movw	r30, r28
    3bcc:	ff 96       	adiw	r30, 0x3f	; 63
    3bce:	60 81       	ld	r22, Z
    3bd0:	71 81       	ldd	r23, Z+1	; 0x01
    3bd2:	82 81       	ldd	r24, Z+2	; 0x02
    3bd4:	93 81       	ldd	r25, Z+3	; 0x03
    3bd6:	20 e0       	ldi	r18, 0x00	; 0
    3bd8:	3f ef       	ldi	r19, 0xFF	; 255
    3bda:	4f e7       	ldi	r20, 0x7F	; 127
    3bdc:	57 e4       	ldi	r21, 0x47	; 71
    3bde:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3be2:	18 16       	cp	r1, r24
    3be4:	64 f5       	brge	.+88     	; 0x3c3e <main+0x208>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3be6:	fe 01       	movw	r30, r28
    3be8:	ed 5b       	subi	r30, 0xBD	; 189
    3bea:	ff 4f       	sbci	r31, 0xFF	; 255
    3bec:	60 81       	ld	r22, Z
    3bee:	71 81       	ldd	r23, Z+1	; 0x01
    3bf0:	82 81       	ldd	r24, Z+2	; 0x02
    3bf2:	93 81       	ldd	r25, Z+3	; 0x03
    3bf4:	20 e0       	ldi	r18, 0x00	; 0
    3bf6:	30 e0       	ldi	r19, 0x00	; 0
    3bf8:	40 e2       	ldi	r20, 0x20	; 32
    3bfa:	51 e4       	ldi	r21, 0x41	; 65
    3bfc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3c00:	dc 01       	movw	r26, r24
    3c02:	cb 01       	movw	r24, r22
    3c04:	bc 01       	movw	r22, r24
    3c06:	cd 01       	movw	r24, r26
    3c08:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3c0c:	dc 01       	movw	r26, r24
    3c0e:	cb 01       	movw	r24, r22
    3c10:	9e af       	std	Y+62, r25	; 0x3e
    3c12:	8d af       	std	Y+61, r24	; 0x3d
    3c14:	0f c0       	rjmp	.+30     	; 0x3c34 <main+0x1fe>
    3c16:	80 e9       	ldi	r24, 0x90	; 144
    3c18:	91 e0       	ldi	r25, 0x01	; 1
    3c1a:	9c af       	std	Y+60, r25	; 0x3c
    3c1c:	8b af       	std	Y+59, r24	; 0x3b
    3c1e:	8b ad       	ldd	r24, Y+59	; 0x3b
    3c20:	9c ad       	ldd	r25, Y+60	; 0x3c
    3c22:	01 97       	sbiw	r24, 0x01	; 1
    3c24:	f1 f7       	brne	.-4      	; 0x3c22 <main+0x1ec>
    3c26:	9c af       	std	Y+60, r25	; 0x3c
    3c28:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c2a:	8d ad       	ldd	r24, Y+61	; 0x3d
    3c2c:	9e ad       	ldd	r25, Y+62	; 0x3e
    3c2e:	01 97       	sbiw	r24, 0x01	; 1
    3c30:	9e af       	std	Y+62, r25	; 0x3e
    3c32:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c34:	8d ad       	ldd	r24, Y+61	; 0x3d
    3c36:	9e ad       	ldd	r25, Y+62	; 0x3e
    3c38:	00 97       	sbiw	r24, 0x00	; 0
    3c3a:	69 f7       	brne	.-38     	; 0x3c16 <main+0x1e0>
    3c3c:	16 c0       	rjmp	.+44     	; 0x3c6a <main+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c3e:	fe 01       	movw	r30, r28
    3c40:	ff 96       	adiw	r30, 0x3f	; 63
    3c42:	60 81       	ld	r22, Z
    3c44:	71 81       	ldd	r23, Z+1	; 0x01
    3c46:	82 81       	ldd	r24, Z+2	; 0x02
    3c48:	93 81       	ldd	r25, Z+3	; 0x03
    3c4a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3c4e:	dc 01       	movw	r26, r24
    3c50:	cb 01       	movw	r24, r22
    3c52:	9e af       	std	Y+62, r25	; 0x3e
    3c54:	8d af       	std	Y+61, r24	; 0x3d
    3c56:	8d ad       	ldd	r24, Y+61	; 0x3d
    3c58:	9e ad       	ldd	r25, Y+62	; 0x3e
    3c5a:	9a af       	std	Y+58, r25	; 0x3a
    3c5c:	89 af       	std	Y+57, r24	; 0x39
    3c5e:	89 ad       	ldd	r24, Y+57	; 0x39
    3c60:	9a ad       	ldd	r25, Y+58	; 0x3a
    3c62:	01 97       	sbiw	r24, 0x01	; 1
    3c64:	f1 f7       	brne	.-4      	; 0x3c62 <main+0x22c>
    3c66:	9a af       	std	Y+58, r25	; 0x3a
    3c68:	89 af       	std	Y+57, r24	; 0x39
			}

			_delay_ms(200);

			if(!DIO_u8GetPinValue(Switch_Port,Go_To_Right))
    3c6a:	83 e0       	ldi	r24, 0x03	; 3
    3c6c:	63 e0       	ldi	r22, 0x03	; 3
    3c6e:	0e 94 ae 09 	call	0x135c	; 0x135c <DIO_u8GetPinValue>
    3c72:	88 23       	and	r24, r24
    3c74:	09 f0       	breq	.+2      	; 0x3c78 <main+0x242>
    3c76:	7b c0       	rjmp	.+246    	; 0x3d6e <main+0x338>
			{
				LCD_KIT_voidRunCommand(0x06);
    3c78:	86 e0       	ldi	r24, 0x06	; 6
    3c7a:	0e 94 1f 18 	call	0x303e	; 0x303e <LCD_KIT_voidRunCommand>
				Way_Flag=Right;
    3c7e:	fe 01       	movw	r30, r28
    3c80:	e6 5b       	subi	r30, 0xB6	; 182
    3c82:	ff 4f       	sbci	r31, 0xFF	; 255
    3c84:	84 e1       	ldi	r24, 0x14	; 20
    3c86:	80 83       	st	Z, r24
    3c88:	80 e0       	ldi	r24, 0x00	; 0
    3c8a:	90 e0       	ldi	r25, 0x00	; 0
    3c8c:	a8 e4       	ldi	r26, 0x48	; 72
    3c8e:	b3 e4       	ldi	r27, 0x43	; 67
    3c90:	8d ab       	std	Y+53, r24	; 0x35
    3c92:	9e ab       	std	Y+54, r25	; 0x36
    3c94:	af ab       	std	Y+55, r26	; 0x37
    3c96:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c98:	6d a9       	ldd	r22, Y+53	; 0x35
    3c9a:	7e a9       	ldd	r23, Y+54	; 0x36
    3c9c:	8f a9       	ldd	r24, Y+55	; 0x37
    3c9e:	98 ad       	ldd	r25, Y+56	; 0x38
    3ca0:	20 e0       	ldi	r18, 0x00	; 0
    3ca2:	30 e0       	ldi	r19, 0x00	; 0
    3ca4:	4a e7       	ldi	r20, 0x7A	; 122
    3ca6:	55 e4       	ldi	r21, 0x45	; 69
    3ca8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3cac:	dc 01       	movw	r26, r24
    3cae:	cb 01       	movw	r24, r22
    3cb0:	89 ab       	std	Y+49, r24	; 0x31
    3cb2:	9a ab       	std	Y+50, r25	; 0x32
    3cb4:	ab ab       	std	Y+51, r26	; 0x33
    3cb6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3cb8:	69 a9       	ldd	r22, Y+49	; 0x31
    3cba:	7a a9       	ldd	r23, Y+50	; 0x32
    3cbc:	8b a9       	ldd	r24, Y+51	; 0x33
    3cbe:	9c a9       	ldd	r25, Y+52	; 0x34
    3cc0:	20 e0       	ldi	r18, 0x00	; 0
    3cc2:	30 e0       	ldi	r19, 0x00	; 0
    3cc4:	40 e8       	ldi	r20, 0x80	; 128
    3cc6:	5f e3       	ldi	r21, 0x3F	; 63
    3cc8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3ccc:	88 23       	and	r24, r24
    3cce:	2c f4       	brge	.+10     	; 0x3cda <main+0x2a4>
		__ticks = 1;
    3cd0:	81 e0       	ldi	r24, 0x01	; 1
    3cd2:	90 e0       	ldi	r25, 0x00	; 0
    3cd4:	98 ab       	std	Y+48, r25	; 0x30
    3cd6:	8f a7       	std	Y+47, r24	; 0x2f
    3cd8:	3f c0       	rjmp	.+126    	; 0x3d58 <main+0x322>
	else if (__tmp > 65535)
    3cda:	69 a9       	ldd	r22, Y+49	; 0x31
    3cdc:	7a a9       	ldd	r23, Y+50	; 0x32
    3cde:	8b a9       	ldd	r24, Y+51	; 0x33
    3ce0:	9c a9       	ldd	r25, Y+52	; 0x34
    3ce2:	20 e0       	ldi	r18, 0x00	; 0
    3ce4:	3f ef       	ldi	r19, 0xFF	; 255
    3ce6:	4f e7       	ldi	r20, 0x7F	; 127
    3ce8:	57 e4       	ldi	r21, 0x47	; 71
    3cea:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3cee:	18 16       	cp	r1, r24
    3cf0:	4c f5       	brge	.+82     	; 0x3d44 <main+0x30e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cf2:	6d a9       	ldd	r22, Y+53	; 0x35
    3cf4:	7e a9       	ldd	r23, Y+54	; 0x36
    3cf6:	8f a9       	ldd	r24, Y+55	; 0x37
    3cf8:	98 ad       	ldd	r25, Y+56	; 0x38
    3cfa:	20 e0       	ldi	r18, 0x00	; 0
    3cfc:	30 e0       	ldi	r19, 0x00	; 0
    3cfe:	40 e2       	ldi	r20, 0x20	; 32
    3d00:	51 e4       	ldi	r21, 0x41	; 65
    3d02:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3d06:	dc 01       	movw	r26, r24
    3d08:	cb 01       	movw	r24, r22
    3d0a:	bc 01       	movw	r22, r24
    3d0c:	cd 01       	movw	r24, r26
    3d0e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3d12:	dc 01       	movw	r26, r24
    3d14:	cb 01       	movw	r24, r22
    3d16:	98 ab       	std	Y+48, r25	; 0x30
    3d18:	8f a7       	std	Y+47, r24	; 0x2f
    3d1a:	0f c0       	rjmp	.+30     	; 0x3d3a <main+0x304>
    3d1c:	80 e9       	ldi	r24, 0x90	; 144
    3d1e:	91 e0       	ldi	r25, 0x01	; 1
    3d20:	9e a7       	std	Y+46, r25	; 0x2e
    3d22:	8d a7       	std	Y+45, r24	; 0x2d
    3d24:	8d a5       	ldd	r24, Y+45	; 0x2d
    3d26:	9e a5       	ldd	r25, Y+46	; 0x2e
    3d28:	01 97       	sbiw	r24, 0x01	; 1
    3d2a:	f1 f7       	brne	.-4      	; 0x3d28 <main+0x2f2>
    3d2c:	9e a7       	std	Y+46, r25	; 0x2e
    3d2e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d30:	8f a5       	ldd	r24, Y+47	; 0x2f
    3d32:	98 a9       	ldd	r25, Y+48	; 0x30
    3d34:	01 97       	sbiw	r24, 0x01	; 1
    3d36:	98 ab       	std	Y+48, r25	; 0x30
    3d38:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d3a:	8f a5       	ldd	r24, Y+47	; 0x2f
    3d3c:	98 a9       	ldd	r25, Y+48	; 0x30
    3d3e:	00 97       	sbiw	r24, 0x00	; 0
    3d40:	69 f7       	brne	.-38     	; 0x3d1c <main+0x2e6>
    3d42:	c6 c2       	rjmp	.+1420   	; 0x42d0 <main+0x89a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d44:	69 a9       	ldd	r22, Y+49	; 0x31
    3d46:	7a a9       	ldd	r23, Y+50	; 0x32
    3d48:	8b a9       	ldd	r24, Y+51	; 0x33
    3d4a:	9c a9       	ldd	r25, Y+52	; 0x34
    3d4c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3d50:	dc 01       	movw	r26, r24
    3d52:	cb 01       	movw	r24, r22
    3d54:	98 ab       	std	Y+48, r25	; 0x30
    3d56:	8f a7       	std	Y+47, r24	; 0x2f
    3d58:	8f a5       	ldd	r24, Y+47	; 0x2f
    3d5a:	98 a9       	ldd	r25, Y+48	; 0x30
    3d5c:	9c a7       	std	Y+44, r25	; 0x2c
    3d5e:	8b a7       	std	Y+43, r24	; 0x2b
    3d60:	8b a5       	ldd	r24, Y+43	; 0x2b
    3d62:	9c a5       	ldd	r25, Y+44	; 0x2c
    3d64:	01 97       	sbiw	r24, 0x01	; 1
    3d66:	f1 f7       	brne	.-4      	; 0x3d64 <main+0x32e>
    3d68:	9c a7       	std	Y+44, r25	; 0x2c
    3d6a:	8b a7       	std	Y+43, r24	; 0x2b
    3d6c:	b1 c2       	rjmp	.+1378   	; 0x42d0 <main+0x89a>
				_delay_ms(200);
			}
			else if(!DIO_u8GetPinValue(Switch_Port,Go_To_Left))
    3d6e:	83 e0       	ldi	r24, 0x03	; 3
    3d70:	67 e0       	ldi	r22, 0x07	; 7
    3d72:	0e 94 ae 09 	call	0x135c	; 0x135c <DIO_u8GetPinValue>
    3d76:	88 23       	and	r24, r24
    3d78:	09 f0       	breq	.+2      	; 0x3d7c <main+0x346>
    3d7a:	7b c0       	rjmp	.+246    	; 0x3e72 <main+0x43c>
			{
				LCD_KIT_voidRunCommand(0x04);
    3d7c:	84 e0       	ldi	r24, 0x04	; 4
    3d7e:	0e 94 1f 18 	call	0x303e	; 0x303e <LCD_KIT_voidRunCommand>
				Way_Flag=Left;
    3d82:	fe 01       	movw	r30, r28
    3d84:	e6 5b       	subi	r30, 0xB6	; 182
    3d86:	ff 4f       	sbci	r31, 0xFF	; 255
    3d88:	80 e1       	ldi	r24, 0x10	; 16
    3d8a:	80 83       	st	Z, r24
    3d8c:	80 e0       	ldi	r24, 0x00	; 0
    3d8e:	90 e0       	ldi	r25, 0x00	; 0
    3d90:	a8 e4       	ldi	r26, 0x48	; 72
    3d92:	b3 e4       	ldi	r27, 0x43	; 67
    3d94:	8f a3       	std	Y+39, r24	; 0x27
    3d96:	98 a7       	std	Y+40, r25	; 0x28
    3d98:	a9 a7       	std	Y+41, r26	; 0x29
    3d9a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d9c:	6f a1       	ldd	r22, Y+39	; 0x27
    3d9e:	78 a5       	ldd	r23, Y+40	; 0x28
    3da0:	89 a5       	ldd	r24, Y+41	; 0x29
    3da2:	9a a5       	ldd	r25, Y+42	; 0x2a
    3da4:	20 e0       	ldi	r18, 0x00	; 0
    3da6:	30 e0       	ldi	r19, 0x00	; 0
    3da8:	4a e7       	ldi	r20, 0x7A	; 122
    3daa:	55 e4       	ldi	r21, 0x45	; 69
    3dac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3db0:	dc 01       	movw	r26, r24
    3db2:	cb 01       	movw	r24, r22
    3db4:	8b a3       	std	Y+35, r24	; 0x23
    3db6:	9c a3       	std	Y+36, r25	; 0x24
    3db8:	ad a3       	std	Y+37, r26	; 0x25
    3dba:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3dbc:	6b a1       	ldd	r22, Y+35	; 0x23
    3dbe:	7c a1       	ldd	r23, Y+36	; 0x24
    3dc0:	8d a1       	ldd	r24, Y+37	; 0x25
    3dc2:	9e a1       	ldd	r25, Y+38	; 0x26
    3dc4:	20 e0       	ldi	r18, 0x00	; 0
    3dc6:	30 e0       	ldi	r19, 0x00	; 0
    3dc8:	40 e8       	ldi	r20, 0x80	; 128
    3dca:	5f e3       	ldi	r21, 0x3F	; 63
    3dcc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3dd0:	88 23       	and	r24, r24
    3dd2:	2c f4       	brge	.+10     	; 0x3dde <main+0x3a8>
		__ticks = 1;
    3dd4:	81 e0       	ldi	r24, 0x01	; 1
    3dd6:	90 e0       	ldi	r25, 0x00	; 0
    3dd8:	9a a3       	std	Y+34, r25	; 0x22
    3dda:	89 a3       	std	Y+33, r24	; 0x21
    3ddc:	3f c0       	rjmp	.+126    	; 0x3e5c <main+0x426>
	else if (__tmp > 65535)
    3dde:	6b a1       	ldd	r22, Y+35	; 0x23
    3de0:	7c a1       	ldd	r23, Y+36	; 0x24
    3de2:	8d a1       	ldd	r24, Y+37	; 0x25
    3de4:	9e a1       	ldd	r25, Y+38	; 0x26
    3de6:	20 e0       	ldi	r18, 0x00	; 0
    3de8:	3f ef       	ldi	r19, 0xFF	; 255
    3dea:	4f e7       	ldi	r20, 0x7F	; 127
    3dec:	57 e4       	ldi	r21, 0x47	; 71
    3dee:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3df2:	18 16       	cp	r1, r24
    3df4:	4c f5       	brge	.+82     	; 0x3e48 <main+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3df6:	6f a1       	ldd	r22, Y+39	; 0x27
    3df8:	78 a5       	ldd	r23, Y+40	; 0x28
    3dfa:	89 a5       	ldd	r24, Y+41	; 0x29
    3dfc:	9a a5       	ldd	r25, Y+42	; 0x2a
    3dfe:	20 e0       	ldi	r18, 0x00	; 0
    3e00:	30 e0       	ldi	r19, 0x00	; 0
    3e02:	40 e2       	ldi	r20, 0x20	; 32
    3e04:	51 e4       	ldi	r21, 0x41	; 65
    3e06:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3e0a:	dc 01       	movw	r26, r24
    3e0c:	cb 01       	movw	r24, r22
    3e0e:	bc 01       	movw	r22, r24
    3e10:	cd 01       	movw	r24, r26
    3e12:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3e16:	dc 01       	movw	r26, r24
    3e18:	cb 01       	movw	r24, r22
    3e1a:	9a a3       	std	Y+34, r25	; 0x22
    3e1c:	89 a3       	std	Y+33, r24	; 0x21
    3e1e:	0f c0       	rjmp	.+30     	; 0x3e3e <main+0x408>
    3e20:	80 e9       	ldi	r24, 0x90	; 144
    3e22:	91 e0       	ldi	r25, 0x01	; 1
    3e24:	98 a3       	std	Y+32, r25	; 0x20
    3e26:	8f 8f       	std	Y+31, r24	; 0x1f
    3e28:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3e2a:	98 a1       	ldd	r25, Y+32	; 0x20
    3e2c:	01 97       	sbiw	r24, 0x01	; 1
    3e2e:	f1 f7       	brne	.-4      	; 0x3e2c <main+0x3f6>
    3e30:	98 a3       	std	Y+32, r25	; 0x20
    3e32:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e34:	89 a1       	ldd	r24, Y+33	; 0x21
    3e36:	9a a1       	ldd	r25, Y+34	; 0x22
    3e38:	01 97       	sbiw	r24, 0x01	; 1
    3e3a:	9a a3       	std	Y+34, r25	; 0x22
    3e3c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e3e:	89 a1       	ldd	r24, Y+33	; 0x21
    3e40:	9a a1       	ldd	r25, Y+34	; 0x22
    3e42:	00 97       	sbiw	r24, 0x00	; 0
    3e44:	69 f7       	brne	.-38     	; 0x3e20 <main+0x3ea>
    3e46:	44 c2       	rjmp	.+1160   	; 0x42d0 <main+0x89a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e48:	6b a1       	ldd	r22, Y+35	; 0x23
    3e4a:	7c a1       	ldd	r23, Y+36	; 0x24
    3e4c:	8d a1       	ldd	r24, Y+37	; 0x25
    3e4e:	9e a1       	ldd	r25, Y+38	; 0x26
    3e50:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3e54:	dc 01       	movw	r26, r24
    3e56:	cb 01       	movw	r24, r22
    3e58:	9a a3       	std	Y+34, r25	; 0x22
    3e5a:	89 a3       	std	Y+33, r24	; 0x21
    3e5c:	89 a1       	ldd	r24, Y+33	; 0x21
    3e5e:	9a a1       	ldd	r25, Y+34	; 0x22
    3e60:	9e 8f       	std	Y+30, r25	; 0x1e
    3e62:	8d 8f       	std	Y+29, r24	; 0x1d
    3e64:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3e66:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3e68:	01 97       	sbiw	r24, 0x01	; 1
    3e6a:	f1 f7       	brne	.-4      	; 0x3e68 <main+0x432>
    3e6c:	9e 8f       	std	Y+30, r25	; 0x1e
    3e6e:	8d 8f       	std	Y+29, r24	; 0x1d
    3e70:	2f c2       	rjmp	.+1118   	; 0x42d0 <main+0x89a>
				_delay_ms(200);
			}
			else if(!DIO_u8GetPinValue(PortD,Go_To_Up))
    3e72:	83 e0       	ldi	r24, 0x03	; 3
    3e74:	65 e0       	ldi	r22, 0x05	; 5
    3e76:	0e 94 ae 09 	call	0x135c	; 0x135c <DIO_u8GetPinValue>
    3e7a:	88 23       	and	r24, r24
    3e7c:	09 f0       	breq	.+2      	; 0x3e80 <main+0x44a>
    3e7e:	11 c1       	rjmp	.+546    	; 0x40a2 <main+0x66c>
			{
				if(Way_Flag==Right)
    3e80:	fe 01       	movw	r30, r28
    3e82:	e6 5b       	subi	r30, 0xB6	; 182
    3e84:	ff 4f       	sbci	r31, 0xFF	; 255
    3e86:	80 81       	ld	r24, Z
    3e88:	84 31       	cpi	r24, 0x14	; 20
    3e8a:	39 f4       	brne	.+14     	; 0x3e9a <main+0x464>
				{
					LCD_KIT_voidRunCommand(Left);
    3e8c:	80 e1       	ldi	r24, 0x10	; 16
    3e8e:	0e 94 1f 18 	call	0x303e	; 0x303e <LCD_KIT_voidRunCommand>
					LCD_KIT_voidDisplayCharacter(' ');
    3e92:	80 e2       	ldi	r24, 0x20	; 32
    3e94:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <LCD_KIT_voidDisplayCharacter>
    3e98:	0c c0       	rjmp	.+24     	; 0x3eb2 <main+0x47c>
				}
				else if(Way_Flag==Left)
    3e9a:	fe 01       	movw	r30, r28
    3e9c:	e6 5b       	subi	r30, 0xB6	; 182
    3e9e:	ff 4f       	sbci	r31, 0xFF	; 255
    3ea0:	80 81       	ld	r24, Z
    3ea2:	80 31       	cpi	r24, 0x10	; 16
    3ea4:	31 f4       	brne	.+12     	; 0x3eb2 <main+0x47c>
				{
					LCD_KIT_voidRunCommand(Right);
    3ea6:	84 e1       	ldi	r24, 0x14	; 20
    3ea8:	0e 94 1f 18 	call	0x303e	; 0x303e <LCD_KIT_voidRunCommand>
					LCD_KIT_voidDisplayCharacter(' ');
    3eac:	80 e2       	ldi	r24, 0x20	; 32
    3eae:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <LCD_KIT_voidDisplayCharacter>
				}

				if(Line_Index==1)
    3eb2:	fe 01       	movw	r30, r28
    3eb4:	e9 5b       	subi	r30, 0xB9	; 185
    3eb6:	ff 4f       	sbci	r31, 0xFF	; 255
    3eb8:	80 81       	ld	r24, Z
    3eba:	81 30       	cpi	r24, 0x01	; 1
    3ebc:	61 f4       	brne	.+24     	; 0x3ed6 <main+0x4a0>
				{
					LCD_KIT_voidRunCommand(0x06);
    3ebe:	86 e0       	ldi	r24, 0x06	; 6
    3ec0:	0e 94 1f 18 	call	0x303e	; 0x303e <LCD_KIT_voidRunCommand>
					LCD_KIT_voidSetCurser(Line1,Col5);
    3ec4:	80 e8       	ldi	r24, 0x80	; 128
    3ec6:	65 e0       	ldi	r22, 0x05	; 5
    3ec8:	0e 94 8e 1a 	call	0x351c	; 0x351c <LCD_KIT_voidSetCurser>
					LCD_KIT_voidDisplayString("Game Over");
    3ecc:	80 e6       	ldi	r24, 0x60	; 96
    3ece:	90 e0       	ldi	r25, 0x00	; 0
    3ed0:	0e 94 9f 1a 	call	0x353e	; 0x353e <LCD_KIT_voidDisplayString>
    3ed4:	93 c2       	rjmp	.+1318   	; 0x43fc <main+0x9c6>
					break;
				}

				switch(Line_Index)
    3ed6:	fe 01       	movw	r30, r28
    3ed8:	e9 5b       	subi	r30, 0xB9	; 185
    3eda:	ff 4f       	sbci	r31, 0xFF	; 255
    3edc:	80 81       	ld	r24, Z
    3ede:	28 2f       	mov	r18, r24
    3ee0:	30 e0       	ldi	r19, 0x00	; 0
    3ee2:	67 96       	adiw	r28, 0x17	; 23
    3ee4:	3f af       	std	Y+63, r19	; 0x3f
    3ee6:	2e af       	std	Y+62, r18	; 0x3e
    3ee8:	67 97       	sbiw	r28, 0x17	; 23
    3eea:	67 96       	adiw	r28, 0x17	; 23
    3eec:	8e ad       	ldd	r24, Y+62	; 0x3e
    3eee:	9f ad       	ldd	r25, Y+63	; 0x3f
    3ef0:	67 97       	sbiw	r28, 0x17	; 23
    3ef2:	83 30       	cpi	r24, 0x03	; 3
    3ef4:	91 05       	cpc	r25, r1
    3ef6:	41 f1       	breq	.+80     	; 0x3f48 <main+0x512>
    3ef8:	67 96       	adiw	r28, 0x17	; 23
    3efa:	ee ad       	ldd	r30, Y+62	; 0x3e
    3efc:	ff ad       	ldd	r31, Y+63	; 0x3f
    3efe:	67 97       	sbiw	r28, 0x17	; 23
    3f00:	e4 30       	cpi	r30, 0x04	; 4
    3f02:	f1 05       	cpc	r31, r1
    3f04:	d1 f1       	breq	.+116    	; 0x3f7a <main+0x544>
    3f06:	67 96       	adiw	r28, 0x17	; 23
    3f08:	2e ad       	ldd	r18, Y+62	; 0x3e
    3f0a:	3f ad       	ldd	r19, Y+63	; 0x3f
    3f0c:	67 97       	sbiw	r28, 0x17	; 23
    3f0e:	22 30       	cpi	r18, 0x02	; 2
    3f10:	31 05       	cpc	r19, r1
    3f12:	09 f0       	breq	.+2      	; 0x3f16 <main+0x4e0>
    3f14:	4a c0       	rjmp	.+148    	; 0x3faa <main+0x574>
				{
				case 2:
					if(Way_Flag==Left)
    3f16:	fe 01       	movw	r30, r28
    3f18:	e6 5b       	subi	r30, 0xB6	; 182
    3f1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f1c:	80 81       	ld	r24, Z
    3f1e:	80 31       	cpi	r24, 0x10	; 16
    3f20:	59 f4       	brne	.+22     	; 0x3f38 <main+0x502>
					{
						LCD_KIT_voidSetCurser(Line1,Col_Index-2); break;
    3f22:	fe 01       	movw	r30, r28
    3f24:	e8 5b       	subi	r30, 0xB8	; 184
    3f26:	ff 4f       	sbci	r31, 0xFF	; 255
    3f28:	80 81       	ld	r24, Z
    3f2a:	98 2f       	mov	r25, r24
    3f2c:	92 50       	subi	r25, 0x02	; 2
    3f2e:	80 e8       	ldi	r24, 0x80	; 128
    3f30:	69 2f       	mov	r22, r25
    3f32:	0e 94 8e 1a 	call	0x351c	; 0x351c <LCD_KIT_voidSetCurser>
    3f36:	39 c0       	rjmp	.+114    	; 0x3faa <main+0x574>
					}
					else
					{
						LCD_KIT_voidSetCurser(Line1,Col_Index); break;
    3f38:	fe 01       	movw	r30, r28
    3f3a:	e8 5b       	subi	r30, 0xB8	; 184
    3f3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f3e:	80 e8       	ldi	r24, 0x80	; 128
    3f40:	60 81       	ld	r22, Z
    3f42:	0e 94 8e 1a 	call	0x351c	; 0x351c <LCD_KIT_voidSetCurser>
    3f46:	31 c0       	rjmp	.+98     	; 0x3faa <main+0x574>
					}

				case 3:
					if(Way_Flag==Left)
    3f48:	fe 01       	movw	r30, r28
    3f4a:	e6 5b       	subi	r30, 0xB6	; 182
    3f4c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f4e:	80 81       	ld	r24, Z
    3f50:	80 31       	cpi	r24, 0x10	; 16
    3f52:	59 f4       	brne	.+22     	; 0x3f6a <main+0x534>
					{
						LCD_KIT_voidSetCurser(Line2,Col_Index-2); break;
    3f54:	fe 01       	movw	r30, r28
    3f56:	e8 5b       	subi	r30, 0xB8	; 184
    3f58:	ff 4f       	sbci	r31, 0xFF	; 255
    3f5a:	80 81       	ld	r24, Z
    3f5c:	98 2f       	mov	r25, r24
    3f5e:	92 50       	subi	r25, 0x02	; 2
    3f60:	80 ec       	ldi	r24, 0xC0	; 192
    3f62:	69 2f       	mov	r22, r25
    3f64:	0e 94 8e 1a 	call	0x351c	; 0x351c <LCD_KIT_voidSetCurser>
    3f68:	20 c0       	rjmp	.+64     	; 0x3faa <main+0x574>
					}
					else
					{
						LCD_KIT_voidSetCurser(Line2,Col_Index); break;
    3f6a:	fe 01       	movw	r30, r28
    3f6c:	e8 5b       	subi	r30, 0xB8	; 184
    3f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f70:	80 ec       	ldi	r24, 0xC0	; 192
    3f72:	60 81       	ld	r22, Z
    3f74:	0e 94 8e 1a 	call	0x351c	; 0x351c <LCD_KIT_voidSetCurser>
    3f78:	18 c0       	rjmp	.+48     	; 0x3faa <main+0x574>
					}

				case 4:
					if(Way_Flag==Left)
    3f7a:	fe 01       	movw	r30, r28
    3f7c:	e6 5b       	subi	r30, 0xB6	; 182
    3f7e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f80:	80 81       	ld	r24, Z
    3f82:	80 31       	cpi	r24, 0x10	; 16
    3f84:	59 f4       	brne	.+22     	; 0x3f9c <main+0x566>
					{
						LCD_KIT_voidSetCurser(Line3,Col_Index-2); break;
    3f86:	fe 01       	movw	r30, r28
    3f88:	e8 5b       	subi	r30, 0xB8	; 184
    3f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f8c:	80 81       	ld	r24, Z
    3f8e:	98 2f       	mov	r25, r24
    3f90:	92 50       	subi	r25, 0x02	; 2
    3f92:	84 e9       	ldi	r24, 0x94	; 148
    3f94:	69 2f       	mov	r22, r25
    3f96:	0e 94 8e 1a 	call	0x351c	; 0x351c <LCD_KIT_voidSetCurser>
    3f9a:	07 c0       	rjmp	.+14     	; 0x3faa <main+0x574>
					}
					else
					{
						LCD_KIT_voidSetCurser(Line3,Col_Index); break;
    3f9c:	fe 01       	movw	r30, r28
    3f9e:	e8 5b       	subi	r30, 0xB8	; 184
    3fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    3fa2:	84 e9       	ldi	r24, 0x94	; 148
    3fa4:	60 81       	ld	r22, Z
    3fa6:	0e 94 8e 1a 	call	0x351c	; 0x351c <LCD_KIT_voidSetCurser>
					}
				}
				Line_Index--;
    3faa:	de 01       	movw	r26, r28
    3fac:	a9 5b       	subi	r26, 0xB9	; 185
    3fae:	bf 4f       	sbci	r27, 0xFF	; 255
    3fb0:	fe 01       	movw	r30, r28
    3fb2:	e9 5b       	subi	r30, 0xB9	; 185
    3fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    3fb6:	80 81       	ld	r24, Z
    3fb8:	81 50       	subi	r24, 0x01	; 1
    3fba:	8c 93       	st	X, r24
    3fbc:	80 e0       	ldi	r24, 0x00	; 0
    3fbe:	90 e0       	ldi	r25, 0x00	; 0
    3fc0:	a8 e4       	ldi	r26, 0x48	; 72
    3fc2:	b3 e4       	ldi	r27, 0x43	; 67
    3fc4:	89 8f       	std	Y+25, r24	; 0x19
    3fc6:	9a 8f       	std	Y+26, r25	; 0x1a
    3fc8:	ab 8f       	std	Y+27, r26	; 0x1b
    3fca:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fcc:	69 8d       	ldd	r22, Y+25	; 0x19
    3fce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3fd0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3fd2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3fd4:	20 e0       	ldi	r18, 0x00	; 0
    3fd6:	30 e0       	ldi	r19, 0x00	; 0
    3fd8:	4a e7       	ldi	r20, 0x7A	; 122
    3fda:	55 e4       	ldi	r21, 0x45	; 69
    3fdc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3fe0:	dc 01       	movw	r26, r24
    3fe2:	cb 01       	movw	r24, r22
    3fe4:	8d 8b       	std	Y+21, r24	; 0x15
    3fe6:	9e 8b       	std	Y+22, r25	; 0x16
    3fe8:	af 8b       	std	Y+23, r26	; 0x17
    3fea:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3fec:	6d 89       	ldd	r22, Y+21	; 0x15
    3fee:	7e 89       	ldd	r23, Y+22	; 0x16
    3ff0:	8f 89       	ldd	r24, Y+23	; 0x17
    3ff2:	98 8d       	ldd	r25, Y+24	; 0x18
    3ff4:	20 e0       	ldi	r18, 0x00	; 0
    3ff6:	30 e0       	ldi	r19, 0x00	; 0
    3ff8:	40 e8       	ldi	r20, 0x80	; 128
    3ffa:	5f e3       	ldi	r21, 0x3F	; 63
    3ffc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    4000:	88 23       	and	r24, r24
    4002:	2c f4       	brge	.+10     	; 0x400e <main+0x5d8>
		__ticks = 1;
    4004:	81 e0       	ldi	r24, 0x01	; 1
    4006:	90 e0       	ldi	r25, 0x00	; 0
    4008:	9c 8b       	std	Y+20, r25	; 0x14
    400a:	8b 8b       	std	Y+19, r24	; 0x13
    400c:	3f c0       	rjmp	.+126    	; 0x408c <main+0x656>
	else if (__tmp > 65535)
    400e:	6d 89       	ldd	r22, Y+21	; 0x15
    4010:	7e 89       	ldd	r23, Y+22	; 0x16
    4012:	8f 89       	ldd	r24, Y+23	; 0x17
    4014:	98 8d       	ldd	r25, Y+24	; 0x18
    4016:	20 e0       	ldi	r18, 0x00	; 0
    4018:	3f ef       	ldi	r19, 0xFF	; 255
    401a:	4f e7       	ldi	r20, 0x7F	; 127
    401c:	57 e4       	ldi	r21, 0x47	; 71
    401e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    4022:	18 16       	cp	r1, r24
    4024:	4c f5       	brge	.+82     	; 0x4078 <main+0x642>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4026:	69 8d       	ldd	r22, Y+25	; 0x19
    4028:	7a 8d       	ldd	r23, Y+26	; 0x1a
    402a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    402c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    402e:	20 e0       	ldi	r18, 0x00	; 0
    4030:	30 e0       	ldi	r19, 0x00	; 0
    4032:	40 e2       	ldi	r20, 0x20	; 32
    4034:	51 e4       	ldi	r21, 0x41	; 65
    4036:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    403a:	dc 01       	movw	r26, r24
    403c:	cb 01       	movw	r24, r22
    403e:	bc 01       	movw	r22, r24
    4040:	cd 01       	movw	r24, r26
    4042:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4046:	dc 01       	movw	r26, r24
    4048:	cb 01       	movw	r24, r22
    404a:	9c 8b       	std	Y+20, r25	; 0x14
    404c:	8b 8b       	std	Y+19, r24	; 0x13
    404e:	0f c0       	rjmp	.+30     	; 0x406e <main+0x638>
    4050:	80 e9       	ldi	r24, 0x90	; 144
    4052:	91 e0       	ldi	r25, 0x01	; 1
    4054:	9a 8b       	std	Y+18, r25	; 0x12
    4056:	89 8b       	std	Y+17, r24	; 0x11
    4058:	89 89       	ldd	r24, Y+17	; 0x11
    405a:	9a 89       	ldd	r25, Y+18	; 0x12
    405c:	01 97       	sbiw	r24, 0x01	; 1
    405e:	f1 f7       	brne	.-4      	; 0x405c <main+0x626>
    4060:	9a 8b       	std	Y+18, r25	; 0x12
    4062:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4064:	8b 89       	ldd	r24, Y+19	; 0x13
    4066:	9c 89       	ldd	r25, Y+20	; 0x14
    4068:	01 97       	sbiw	r24, 0x01	; 1
    406a:	9c 8b       	std	Y+20, r25	; 0x14
    406c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    406e:	8b 89       	ldd	r24, Y+19	; 0x13
    4070:	9c 89       	ldd	r25, Y+20	; 0x14
    4072:	00 97       	sbiw	r24, 0x00	; 0
    4074:	69 f7       	brne	.-38     	; 0x4050 <main+0x61a>
    4076:	2c c1       	rjmp	.+600    	; 0x42d0 <main+0x89a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4078:	6d 89       	ldd	r22, Y+21	; 0x15
    407a:	7e 89       	ldd	r23, Y+22	; 0x16
    407c:	8f 89       	ldd	r24, Y+23	; 0x17
    407e:	98 8d       	ldd	r25, Y+24	; 0x18
    4080:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4084:	dc 01       	movw	r26, r24
    4086:	cb 01       	movw	r24, r22
    4088:	9c 8b       	std	Y+20, r25	; 0x14
    408a:	8b 8b       	std	Y+19, r24	; 0x13
    408c:	8b 89       	ldd	r24, Y+19	; 0x13
    408e:	9c 89       	ldd	r25, Y+20	; 0x14
    4090:	98 8b       	std	Y+16, r25	; 0x10
    4092:	8f 87       	std	Y+15, r24	; 0x0f
    4094:	8f 85       	ldd	r24, Y+15	; 0x0f
    4096:	98 89       	ldd	r25, Y+16	; 0x10
    4098:	01 97       	sbiw	r24, 0x01	; 1
    409a:	f1 f7       	brne	.-4      	; 0x4098 <main+0x662>
    409c:	98 8b       	std	Y+16, r25	; 0x10
    409e:	8f 87       	std	Y+15, r24	; 0x0f
    40a0:	17 c1       	rjmp	.+558    	; 0x42d0 <main+0x89a>
				_delay_ms(200);
			}
			else if (!DIO_u8GetPinValue(PortD,Go_To_Down))
    40a2:	83 e0       	ldi	r24, 0x03	; 3
    40a4:	66 e0       	ldi	r22, 0x06	; 6
    40a6:	0e 94 ae 09 	call	0x135c	; 0x135c <DIO_u8GetPinValue>
    40aa:	88 23       	and	r24, r24
    40ac:	09 f0       	breq	.+2      	; 0x40b0 <main+0x67a>
    40ae:	10 c1       	rjmp	.+544    	; 0x42d0 <main+0x89a>
			{
				if(Way_Flag==Right)
    40b0:	fe 01       	movw	r30, r28
    40b2:	e6 5b       	subi	r30, 0xB6	; 182
    40b4:	ff 4f       	sbci	r31, 0xFF	; 255
    40b6:	80 81       	ld	r24, Z
    40b8:	84 31       	cpi	r24, 0x14	; 20
    40ba:	39 f4       	brne	.+14     	; 0x40ca <main+0x694>
				{
					LCD_KIT_voidRunCommand(Left);
    40bc:	80 e1       	ldi	r24, 0x10	; 16
    40be:	0e 94 1f 18 	call	0x303e	; 0x303e <LCD_KIT_voidRunCommand>
					LCD_KIT_voidDisplayCharacter(' ');
    40c2:	80 e2       	ldi	r24, 0x20	; 32
    40c4:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <LCD_KIT_voidDisplayCharacter>
    40c8:	0c c0       	rjmp	.+24     	; 0x40e2 <main+0x6ac>
				}
				else if(Way_Flag==Left)
    40ca:	fe 01       	movw	r30, r28
    40cc:	e6 5b       	subi	r30, 0xB6	; 182
    40ce:	ff 4f       	sbci	r31, 0xFF	; 255
    40d0:	80 81       	ld	r24, Z
    40d2:	80 31       	cpi	r24, 0x10	; 16
    40d4:	31 f4       	brne	.+12     	; 0x40e2 <main+0x6ac>
				{
					LCD_KIT_voidRunCommand(Right);
    40d6:	84 e1       	ldi	r24, 0x14	; 20
    40d8:	0e 94 1f 18 	call	0x303e	; 0x303e <LCD_KIT_voidRunCommand>
					LCD_KIT_voidDisplayCharacter(' ');
    40dc:	80 e2       	ldi	r24, 0x20	; 32
    40de:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <LCD_KIT_voidDisplayCharacter>
				}

				if(Line_Index==4)
    40e2:	fe 01       	movw	r30, r28
    40e4:	e9 5b       	subi	r30, 0xB9	; 185
    40e6:	ff 4f       	sbci	r31, 0xFF	; 255
    40e8:	80 81       	ld	r24, Z
    40ea:	84 30       	cpi	r24, 0x04	; 4
    40ec:	61 f4       	brne	.+24     	; 0x4106 <main+0x6d0>
				{
					LCD_KIT_voidRunCommand(0x06);
    40ee:	86 e0       	ldi	r24, 0x06	; 6
    40f0:	0e 94 1f 18 	call	0x303e	; 0x303e <LCD_KIT_voidRunCommand>
					LCD_KIT_voidSetCurser(Line1,Col5);
    40f4:	80 e8       	ldi	r24, 0x80	; 128
    40f6:	65 e0       	ldi	r22, 0x05	; 5
    40f8:	0e 94 8e 1a 	call	0x351c	; 0x351c <LCD_KIT_voidSetCurser>
					LCD_KIT_voidDisplayString("Game Over");
    40fc:	80 e6       	ldi	r24, 0x60	; 96
    40fe:	90 e0       	ldi	r25, 0x00	; 0
    4100:	0e 94 9f 1a 	call	0x353e	; 0x353e <LCD_KIT_voidDisplayString>
    4104:	7b c1       	rjmp	.+758    	; 0x43fc <main+0x9c6>
					break;
				}

				switch(Line_Index)
    4106:	fe 01       	movw	r30, r28
    4108:	e9 5b       	subi	r30, 0xB9	; 185
    410a:	ff 4f       	sbci	r31, 0xFF	; 255
    410c:	80 81       	ld	r24, Z
    410e:	e8 2f       	mov	r30, r24
    4110:	f0 e0       	ldi	r31, 0x00	; 0
    4112:	65 96       	adiw	r28, 0x15	; 21
    4114:	ff af       	std	Y+63, r31	; 0x3f
    4116:	ee af       	std	Y+62, r30	; 0x3e
    4118:	65 97       	sbiw	r28, 0x15	; 21
    411a:	65 96       	adiw	r28, 0x15	; 21
    411c:	2e ad       	ldd	r18, Y+62	; 0x3e
    411e:	3f ad       	ldd	r19, Y+63	; 0x3f
    4120:	65 97       	sbiw	r28, 0x15	; 21
    4122:	22 30       	cpi	r18, 0x02	; 2
    4124:	31 05       	cpc	r19, r1
    4126:	41 f1       	breq	.+80     	; 0x4178 <main+0x742>
    4128:	65 96       	adiw	r28, 0x15	; 21
    412a:	8e ad       	ldd	r24, Y+62	; 0x3e
    412c:	9f ad       	ldd	r25, Y+63	; 0x3f
    412e:	65 97       	sbiw	r28, 0x15	; 21
    4130:	83 30       	cpi	r24, 0x03	; 3
    4132:	91 05       	cpc	r25, r1
    4134:	d1 f1       	breq	.+116    	; 0x41aa <main+0x774>
    4136:	65 96       	adiw	r28, 0x15	; 21
    4138:	ee ad       	ldd	r30, Y+62	; 0x3e
    413a:	ff ad       	ldd	r31, Y+63	; 0x3f
    413c:	65 97       	sbiw	r28, 0x15	; 21
    413e:	e1 30       	cpi	r30, 0x01	; 1
    4140:	f1 05       	cpc	r31, r1
    4142:	09 f0       	breq	.+2      	; 0x4146 <main+0x710>
    4144:	4a c0       	rjmp	.+148    	; 0x41da <main+0x7a4>
				{
				case 1:
					if(Way_Flag==Left)
    4146:	fe 01       	movw	r30, r28
    4148:	e6 5b       	subi	r30, 0xB6	; 182
    414a:	ff 4f       	sbci	r31, 0xFF	; 255
    414c:	80 81       	ld	r24, Z
    414e:	80 31       	cpi	r24, 0x10	; 16
    4150:	59 f4       	brne	.+22     	; 0x4168 <main+0x732>
					{
						LCD_KIT_voidSetCurser(Line2,Col_Index-2); break;
    4152:	fe 01       	movw	r30, r28
    4154:	e8 5b       	subi	r30, 0xB8	; 184
    4156:	ff 4f       	sbci	r31, 0xFF	; 255
    4158:	80 81       	ld	r24, Z
    415a:	98 2f       	mov	r25, r24
    415c:	92 50       	subi	r25, 0x02	; 2
    415e:	80 ec       	ldi	r24, 0xC0	; 192
    4160:	69 2f       	mov	r22, r25
    4162:	0e 94 8e 1a 	call	0x351c	; 0x351c <LCD_KIT_voidSetCurser>
    4166:	39 c0       	rjmp	.+114    	; 0x41da <main+0x7a4>
					}
					else
					{
						LCD_KIT_voidSetCurser(Line2,Col_Index); break;
    4168:	fe 01       	movw	r30, r28
    416a:	e8 5b       	subi	r30, 0xB8	; 184
    416c:	ff 4f       	sbci	r31, 0xFF	; 255
    416e:	80 ec       	ldi	r24, 0xC0	; 192
    4170:	60 81       	ld	r22, Z
    4172:	0e 94 8e 1a 	call	0x351c	; 0x351c <LCD_KIT_voidSetCurser>
    4176:	31 c0       	rjmp	.+98     	; 0x41da <main+0x7a4>
					}

				case 2:
					if(Way_Flag==Left)
    4178:	fe 01       	movw	r30, r28
    417a:	e6 5b       	subi	r30, 0xB6	; 182
    417c:	ff 4f       	sbci	r31, 0xFF	; 255
    417e:	80 81       	ld	r24, Z
    4180:	80 31       	cpi	r24, 0x10	; 16
    4182:	59 f4       	brne	.+22     	; 0x419a <main+0x764>
					{
						LCD_KIT_voidSetCurser(Line3,Col_Index-2); break;
    4184:	fe 01       	movw	r30, r28
    4186:	e8 5b       	subi	r30, 0xB8	; 184
    4188:	ff 4f       	sbci	r31, 0xFF	; 255
    418a:	80 81       	ld	r24, Z
    418c:	98 2f       	mov	r25, r24
    418e:	92 50       	subi	r25, 0x02	; 2
    4190:	84 e9       	ldi	r24, 0x94	; 148
    4192:	69 2f       	mov	r22, r25
    4194:	0e 94 8e 1a 	call	0x351c	; 0x351c <LCD_KIT_voidSetCurser>
    4198:	20 c0       	rjmp	.+64     	; 0x41da <main+0x7a4>
					}
					else
					{
						LCD_KIT_voidSetCurser(Line3,Col_Index); break;
    419a:	fe 01       	movw	r30, r28
    419c:	e8 5b       	subi	r30, 0xB8	; 184
    419e:	ff 4f       	sbci	r31, 0xFF	; 255
    41a0:	84 e9       	ldi	r24, 0x94	; 148
    41a2:	60 81       	ld	r22, Z
    41a4:	0e 94 8e 1a 	call	0x351c	; 0x351c <LCD_KIT_voidSetCurser>
    41a8:	18 c0       	rjmp	.+48     	; 0x41da <main+0x7a4>
					}

				case 3:
					if(Way_Flag==Left)
    41aa:	fe 01       	movw	r30, r28
    41ac:	e6 5b       	subi	r30, 0xB6	; 182
    41ae:	ff 4f       	sbci	r31, 0xFF	; 255
    41b0:	80 81       	ld	r24, Z
    41b2:	80 31       	cpi	r24, 0x10	; 16
    41b4:	59 f4       	brne	.+22     	; 0x41cc <main+0x796>
					{
						LCD_KIT_voidSetCurser(Line4,Col_Index-2); break;
    41b6:	fe 01       	movw	r30, r28
    41b8:	e8 5b       	subi	r30, 0xB8	; 184
    41ba:	ff 4f       	sbci	r31, 0xFF	; 255
    41bc:	80 81       	ld	r24, Z
    41be:	98 2f       	mov	r25, r24
    41c0:	92 50       	subi	r25, 0x02	; 2
    41c2:	84 ed       	ldi	r24, 0xD4	; 212
    41c4:	69 2f       	mov	r22, r25
    41c6:	0e 94 8e 1a 	call	0x351c	; 0x351c <LCD_KIT_voidSetCurser>
    41ca:	07 c0       	rjmp	.+14     	; 0x41da <main+0x7a4>
					}
					else
					{
						LCD_KIT_voidSetCurser(Line4,Col_Index); break;
    41cc:	fe 01       	movw	r30, r28
    41ce:	e8 5b       	subi	r30, 0xB8	; 184
    41d0:	ff 4f       	sbci	r31, 0xFF	; 255
    41d2:	84 ed       	ldi	r24, 0xD4	; 212
    41d4:	60 81       	ld	r22, Z
    41d6:	0e 94 8e 1a 	call	0x351c	; 0x351c <LCD_KIT_voidSetCurser>
					}
				}
				Line_Index++;
    41da:	de 01       	movw	r26, r28
    41dc:	a9 5b       	subi	r26, 0xB9	; 185
    41de:	bf 4f       	sbci	r27, 0xFF	; 255
    41e0:	fe 01       	movw	r30, r28
    41e2:	e9 5b       	subi	r30, 0xB9	; 185
    41e4:	ff 4f       	sbci	r31, 0xFF	; 255
    41e6:	80 81       	ld	r24, Z
    41e8:	8f 5f       	subi	r24, 0xFF	; 255
    41ea:	8c 93       	st	X, r24
    41ec:	80 e0       	ldi	r24, 0x00	; 0
    41ee:	90 e0       	ldi	r25, 0x00	; 0
    41f0:	a8 e4       	ldi	r26, 0x48	; 72
    41f2:	b3 e4       	ldi	r27, 0x43	; 67
    41f4:	8b 87       	std	Y+11, r24	; 0x0b
    41f6:	9c 87       	std	Y+12, r25	; 0x0c
    41f8:	ad 87       	std	Y+13, r26	; 0x0d
    41fa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    41fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    4200:	8d 85       	ldd	r24, Y+13	; 0x0d
    4202:	9e 85       	ldd	r25, Y+14	; 0x0e
    4204:	20 e0       	ldi	r18, 0x00	; 0
    4206:	30 e0       	ldi	r19, 0x00	; 0
    4208:	4a e7       	ldi	r20, 0x7A	; 122
    420a:	55 e4       	ldi	r21, 0x45	; 69
    420c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4210:	dc 01       	movw	r26, r24
    4212:	cb 01       	movw	r24, r22
    4214:	8f 83       	std	Y+7, r24	; 0x07
    4216:	98 87       	std	Y+8, r25	; 0x08
    4218:	a9 87       	std	Y+9, r26	; 0x09
    421a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    421c:	6f 81       	ldd	r22, Y+7	; 0x07
    421e:	78 85       	ldd	r23, Y+8	; 0x08
    4220:	89 85       	ldd	r24, Y+9	; 0x09
    4222:	9a 85       	ldd	r25, Y+10	; 0x0a
    4224:	20 e0       	ldi	r18, 0x00	; 0
    4226:	30 e0       	ldi	r19, 0x00	; 0
    4228:	40 e8       	ldi	r20, 0x80	; 128
    422a:	5f e3       	ldi	r21, 0x3F	; 63
    422c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    4230:	88 23       	and	r24, r24
    4232:	2c f4       	brge	.+10     	; 0x423e <main+0x808>
		__ticks = 1;
    4234:	81 e0       	ldi	r24, 0x01	; 1
    4236:	90 e0       	ldi	r25, 0x00	; 0
    4238:	9e 83       	std	Y+6, r25	; 0x06
    423a:	8d 83       	std	Y+5, r24	; 0x05
    423c:	3f c0       	rjmp	.+126    	; 0x42bc <main+0x886>
	else if (__tmp > 65535)
    423e:	6f 81       	ldd	r22, Y+7	; 0x07
    4240:	78 85       	ldd	r23, Y+8	; 0x08
    4242:	89 85       	ldd	r24, Y+9	; 0x09
    4244:	9a 85       	ldd	r25, Y+10	; 0x0a
    4246:	20 e0       	ldi	r18, 0x00	; 0
    4248:	3f ef       	ldi	r19, 0xFF	; 255
    424a:	4f e7       	ldi	r20, 0x7F	; 127
    424c:	57 e4       	ldi	r21, 0x47	; 71
    424e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    4252:	18 16       	cp	r1, r24
    4254:	4c f5       	brge	.+82     	; 0x42a8 <main+0x872>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4256:	6b 85       	ldd	r22, Y+11	; 0x0b
    4258:	7c 85       	ldd	r23, Y+12	; 0x0c
    425a:	8d 85       	ldd	r24, Y+13	; 0x0d
    425c:	9e 85       	ldd	r25, Y+14	; 0x0e
    425e:	20 e0       	ldi	r18, 0x00	; 0
    4260:	30 e0       	ldi	r19, 0x00	; 0
    4262:	40 e2       	ldi	r20, 0x20	; 32
    4264:	51 e4       	ldi	r21, 0x41	; 65
    4266:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    426a:	dc 01       	movw	r26, r24
    426c:	cb 01       	movw	r24, r22
    426e:	bc 01       	movw	r22, r24
    4270:	cd 01       	movw	r24, r26
    4272:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4276:	dc 01       	movw	r26, r24
    4278:	cb 01       	movw	r24, r22
    427a:	9e 83       	std	Y+6, r25	; 0x06
    427c:	8d 83       	std	Y+5, r24	; 0x05
    427e:	0f c0       	rjmp	.+30     	; 0x429e <main+0x868>
    4280:	80 e9       	ldi	r24, 0x90	; 144
    4282:	91 e0       	ldi	r25, 0x01	; 1
    4284:	9c 83       	std	Y+4, r25	; 0x04
    4286:	8b 83       	std	Y+3, r24	; 0x03
    4288:	8b 81       	ldd	r24, Y+3	; 0x03
    428a:	9c 81       	ldd	r25, Y+4	; 0x04
    428c:	01 97       	sbiw	r24, 0x01	; 1
    428e:	f1 f7       	brne	.-4      	; 0x428c <main+0x856>
    4290:	9c 83       	std	Y+4, r25	; 0x04
    4292:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4294:	8d 81       	ldd	r24, Y+5	; 0x05
    4296:	9e 81       	ldd	r25, Y+6	; 0x06
    4298:	01 97       	sbiw	r24, 0x01	; 1
    429a:	9e 83       	std	Y+6, r25	; 0x06
    429c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    429e:	8d 81       	ldd	r24, Y+5	; 0x05
    42a0:	9e 81       	ldd	r25, Y+6	; 0x06
    42a2:	00 97       	sbiw	r24, 0x00	; 0
    42a4:	69 f7       	brne	.-38     	; 0x4280 <main+0x84a>
    42a6:	14 c0       	rjmp	.+40     	; 0x42d0 <main+0x89a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42a8:	6f 81       	ldd	r22, Y+7	; 0x07
    42aa:	78 85       	ldd	r23, Y+8	; 0x08
    42ac:	89 85       	ldd	r24, Y+9	; 0x09
    42ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    42b0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    42b4:	dc 01       	movw	r26, r24
    42b6:	cb 01       	movw	r24, r22
    42b8:	9e 83       	std	Y+6, r25	; 0x06
    42ba:	8d 83       	std	Y+5, r24	; 0x05
    42bc:	8d 81       	ldd	r24, Y+5	; 0x05
    42be:	9e 81       	ldd	r25, Y+6	; 0x06
    42c0:	9a 83       	std	Y+2, r25	; 0x02
    42c2:	89 83       	std	Y+1, r24	; 0x01
    42c4:	89 81       	ldd	r24, Y+1	; 0x01
    42c6:	9a 81       	ldd	r25, Y+2	; 0x02
    42c8:	01 97       	sbiw	r24, 0x01	; 1
    42ca:	f1 f7       	brne	.-4      	; 0x42c8 <main+0x892>
    42cc:	9a 83       	std	Y+2, r25	; 0x02
    42ce:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(200);
			}

			if((Way_Flag==Left)&&(Previous_Way_flag==Left))
    42d0:	fe 01       	movw	r30, r28
    42d2:	e6 5b       	subi	r30, 0xB6	; 182
    42d4:	ff 4f       	sbci	r31, 0xFF	; 255
    42d6:	80 81       	ld	r24, Z
    42d8:	80 31       	cpi	r24, 0x10	; 16
    42da:	01 f5       	brne	.+64     	; 0x431c <main+0x8e6>
    42dc:	fe 01       	movw	r30, r28
    42de:	e7 5b       	subi	r30, 0xB7	; 183
    42e0:	ff 4f       	sbci	r31, 0xFF	; 255
    42e2:	80 81       	ld	r24, Z
    42e4:	80 31       	cpi	r24, 0x10	; 16
    42e6:	d1 f4       	brne	.+52     	; 0x431c <main+0x8e6>
			{
				Col_Index--;
    42e8:	de 01       	movw	r26, r28
    42ea:	a8 5b       	subi	r26, 0xB8	; 184
    42ec:	bf 4f       	sbci	r27, 0xFF	; 255
    42ee:	fe 01       	movw	r30, r28
    42f0:	e8 5b       	subi	r30, 0xB8	; 184
    42f2:	ff 4f       	sbci	r31, 0xFF	; 255
    42f4:	80 81       	ld	r24, Z
    42f6:	81 50       	subi	r24, 0x01	; 1
    42f8:	8c 93       	st	X, r24
				LCD_KIT_voidRunCommand(Right);
    42fa:	84 e1       	ldi	r24, 0x14	; 20
    42fc:	0e 94 1f 18 	call	0x303e	; 0x303e <LCD_KIT_voidRunCommand>
				LCD_KIT_voidDisplayCharacter(' ');
    4300:	80 e2       	ldi	r24, 0x20	; 32
    4302:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <LCD_KIT_voidDisplayCharacter>

				if(Col_Index > 0)
    4306:	fe 01       	movw	r30, r28
    4308:	e8 5b       	subi	r30, 0xB8	; 184
    430a:	ff 4f       	sbci	r31, 0xFF	; 255
    430c:	80 81       	ld	r24, Z
    430e:	88 23       	and	r24, r24
    4310:	09 f4       	brne	.+2      	; 0x4314 <main+0x8de>
    4312:	0e cc       	rjmp	.-2020   	; 0x3b30 <main+0xfa>
				{
					LCD_KIT_voidDisplayCharacter(0x00);
    4314:	80 e0       	ldi	r24, 0x00	; 0
    4316:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <LCD_KIT_voidDisplayCharacter>
    431a:	0a cc       	rjmp	.-2028   	; 0x3b30 <main+0xfa>
				}
			}
			else if((Way_Flag==Left)&&(Previous_Way_flag==Right))
    431c:	fe 01       	movw	r30, r28
    431e:	e6 5b       	subi	r30, 0xB6	; 182
    4320:	ff 4f       	sbci	r31, 0xFF	; 255
    4322:	80 81       	ld	r24, Z
    4324:	80 31       	cpi	r24, 0x10	; 16
    4326:	f1 f4       	brne	.+60     	; 0x4364 <main+0x92e>
    4328:	fe 01       	movw	r30, r28
    432a:	e7 5b       	subi	r30, 0xB7	; 183
    432c:	ff 4f       	sbci	r31, 0xFF	; 255
    432e:	80 81       	ld	r24, Z
    4330:	84 31       	cpi	r24, 0x14	; 20
    4332:	c1 f4       	brne	.+48     	; 0x4364 <main+0x92e>
			{
				LCD_KIT_voidRunCommand(Left);
    4334:	80 e1       	ldi	r24, 0x10	; 16
    4336:	0e 94 1f 18 	call	0x303e	; 0x303e <LCD_KIT_voidRunCommand>
				LCD_KIT_voidDisplayCharacter(' ');
    433a:	80 e2       	ldi	r24, 0x20	; 32
    433c:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <LCD_KIT_voidDisplayCharacter>
				LCD_KIT_voidDisplayCharacter(0x00);
    4340:	80 e0       	ldi	r24, 0x00	; 0
    4342:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <LCD_KIT_voidDisplayCharacter>
				Previous_Way_flag=Left;
    4346:	fe 01       	movw	r30, r28
    4348:	e7 5b       	subi	r30, 0xB7	; 183
    434a:	ff 4f       	sbci	r31, 0xFF	; 255
    434c:	80 e1       	ldi	r24, 0x10	; 16
    434e:	80 83       	st	Z, r24
				Col_Index--;
    4350:	de 01       	movw	r26, r28
    4352:	a8 5b       	subi	r26, 0xB8	; 184
    4354:	bf 4f       	sbci	r27, 0xFF	; 255
    4356:	fe 01       	movw	r30, r28
    4358:	e8 5b       	subi	r30, 0xB8	; 184
    435a:	ff 4f       	sbci	r31, 0xFF	; 255
    435c:	80 81       	ld	r24, Z
    435e:	81 50       	subi	r24, 0x01	; 1
    4360:	8c 93       	st	X, r24
    4362:	e6 cb       	rjmp	.-2100   	; 0x3b30 <main+0xfa>
			}
			else if((Way_Flag==Right)&&(Previous_Way_flag==Right))
    4364:	fe 01       	movw	r30, r28
    4366:	e6 5b       	subi	r30, 0xB6	; 182
    4368:	ff 4f       	sbci	r31, 0xFF	; 255
    436a:	80 81       	ld	r24, Z
    436c:	84 31       	cpi	r24, 0x14	; 20
    436e:	01 f5       	brne	.+64     	; 0x43b0 <main+0x97a>
    4370:	fe 01       	movw	r30, r28
    4372:	e7 5b       	subi	r30, 0xB7	; 183
    4374:	ff 4f       	sbci	r31, 0xFF	; 255
    4376:	80 81       	ld	r24, Z
    4378:	84 31       	cpi	r24, 0x14	; 20
    437a:	d1 f4       	brne	.+52     	; 0x43b0 <main+0x97a>
			{
				Col_Index++;
    437c:	de 01       	movw	r26, r28
    437e:	a8 5b       	subi	r26, 0xB8	; 184
    4380:	bf 4f       	sbci	r27, 0xFF	; 255
    4382:	fe 01       	movw	r30, r28
    4384:	e8 5b       	subi	r30, 0xB8	; 184
    4386:	ff 4f       	sbci	r31, 0xFF	; 255
    4388:	80 81       	ld	r24, Z
    438a:	8f 5f       	subi	r24, 0xFF	; 255
    438c:	8c 93       	st	X, r24
				LCD_KIT_voidRunCommand(Left);
    438e:	80 e1       	ldi	r24, 0x10	; 16
    4390:	0e 94 1f 18 	call	0x303e	; 0x303e <LCD_KIT_voidRunCommand>
				LCD_KIT_voidDisplayCharacter(' ');
    4394:	80 e2       	ldi	r24, 0x20	; 32
    4396:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <LCD_KIT_voidDisplayCharacter>

				if(Col_Index<21)
    439a:	fe 01       	movw	r30, r28
    439c:	e8 5b       	subi	r30, 0xB8	; 184
    439e:	ff 4f       	sbci	r31, 0xFF	; 255
    43a0:	80 81       	ld	r24, Z
    43a2:	85 31       	cpi	r24, 0x15	; 21
    43a4:	08 f0       	brcs	.+2      	; 0x43a8 <main+0x972>
    43a6:	c4 cb       	rjmp	.-2168   	; 0x3b30 <main+0xfa>
				{
					LCD_KIT_voidDisplayCharacter(0x00);
    43a8:	80 e0       	ldi	r24, 0x00	; 0
    43aa:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <LCD_KIT_voidDisplayCharacter>
    43ae:	c0 cb       	rjmp	.-2176   	; 0x3b30 <main+0xfa>
				}
			}
			else if((Way_Flag==Right)&&(Previous_Way_flag==Left))
    43b0:	fe 01       	movw	r30, r28
    43b2:	e6 5b       	subi	r30, 0xB6	; 182
    43b4:	ff 4f       	sbci	r31, 0xFF	; 255
    43b6:	80 81       	ld	r24, Z
    43b8:	84 31       	cpi	r24, 0x14	; 20
    43ba:	09 f0       	breq	.+2      	; 0x43be <main+0x988>
    43bc:	b9 cb       	rjmp	.-2190   	; 0x3b30 <main+0xfa>
    43be:	fe 01       	movw	r30, r28
    43c0:	e7 5b       	subi	r30, 0xB7	; 183
    43c2:	ff 4f       	sbci	r31, 0xFF	; 255
    43c4:	80 81       	ld	r24, Z
    43c6:	80 31       	cpi	r24, 0x10	; 16
    43c8:	09 f0       	breq	.+2      	; 0x43cc <main+0x996>
    43ca:	b2 cb       	rjmp	.-2204   	; 0x3b30 <main+0xfa>
			{
				LCD_KIT_voidRunCommand(Right);
    43cc:	84 e1       	ldi	r24, 0x14	; 20
    43ce:	0e 94 1f 18 	call	0x303e	; 0x303e <LCD_KIT_voidRunCommand>
				LCD_KIT_voidDisplayCharacter(' ');
    43d2:	80 e2       	ldi	r24, 0x20	; 32
    43d4:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <LCD_KIT_voidDisplayCharacter>
				LCD_KIT_voidDisplayCharacter(0x00);
    43d8:	80 e0       	ldi	r24, 0x00	; 0
    43da:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <LCD_KIT_voidDisplayCharacter>
				Previous_Way_flag=Right;
    43de:	fe 01       	movw	r30, r28
    43e0:	e7 5b       	subi	r30, 0xB7	; 183
    43e2:	ff 4f       	sbci	r31, 0xFF	; 255
    43e4:	84 e1       	ldi	r24, 0x14	; 20
    43e6:	80 83       	st	Z, r24
				Col_Index++;
    43e8:	de 01       	movw	r26, r28
    43ea:	a8 5b       	subi	r26, 0xB8	; 184
    43ec:	bf 4f       	sbci	r27, 0xFF	; 255
    43ee:	fe 01       	movw	r30, r28
    43f0:	e8 5b       	subi	r30, 0xB8	; 184
    43f2:	ff 4f       	sbci	r31, 0xFF	; 255
    43f4:	80 81       	ld	r24, Z
    43f6:	8f 5f       	subi	r24, 0xFF	; 255
    43f8:	8c 93       	st	X, r24
    43fa:	9a cb       	rjmp	.-2252   	; 0x3b30 <main+0xfa>
			}

	}

	return 0;
    43fc:	80 e0       	ldi	r24, 0x00	; 0
    43fe:	90 e0       	ldi	r25, 0x00	; 0
}
    4400:	c5 5a       	subi	r28, 0xA5	; 165
    4402:	df 4f       	sbci	r29, 0xFF	; 255
    4404:	0f b6       	in	r0, 0x3f	; 63
    4406:	f8 94       	cli
    4408:	de bf       	out	0x3e, r29	; 62
    440a:	0f be       	out	0x3f, r0	; 63
    440c:	cd bf       	out	0x3d, r28	; 61
    440e:	cf 91       	pop	r28
    4410:	df 91       	pop	r29
    4412:	1f 91       	pop	r17
    4414:	0f 91       	pop	r16
    4416:	08 95       	ret

00004418 <__udivmodhi4>:
    4418:	aa 1b       	sub	r26, r26
    441a:	bb 1b       	sub	r27, r27
    441c:	51 e1       	ldi	r21, 0x11	; 17
    441e:	07 c0       	rjmp	.+14     	; 0x442e <__udivmodhi4_ep>

00004420 <__udivmodhi4_loop>:
    4420:	aa 1f       	adc	r26, r26
    4422:	bb 1f       	adc	r27, r27
    4424:	a6 17       	cp	r26, r22
    4426:	b7 07       	cpc	r27, r23
    4428:	10 f0       	brcs	.+4      	; 0x442e <__udivmodhi4_ep>
    442a:	a6 1b       	sub	r26, r22
    442c:	b7 0b       	sbc	r27, r23

0000442e <__udivmodhi4_ep>:
    442e:	88 1f       	adc	r24, r24
    4430:	99 1f       	adc	r25, r25
    4432:	5a 95       	dec	r21
    4434:	a9 f7       	brne	.-22     	; 0x4420 <__udivmodhi4_loop>
    4436:	80 95       	com	r24
    4438:	90 95       	com	r25
    443a:	bc 01       	movw	r22, r24
    443c:	cd 01       	movw	r24, r26
    443e:	08 95       	ret

00004440 <__prologue_saves__>:
    4440:	2f 92       	push	r2
    4442:	3f 92       	push	r3
    4444:	4f 92       	push	r4
    4446:	5f 92       	push	r5
    4448:	6f 92       	push	r6
    444a:	7f 92       	push	r7
    444c:	8f 92       	push	r8
    444e:	9f 92       	push	r9
    4450:	af 92       	push	r10
    4452:	bf 92       	push	r11
    4454:	cf 92       	push	r12
    4456:	df 92       	push	r13
    4458:	ef 92       	push	r14
    445a:	ff 92       	push	r15
    445c:	0f 93       	push	r16
    445e:	1f 93       	push	r17
    4460:	cf 93       	push	r28
    4462:	df 93       	push	r29
    4464:	cd b7       	in	r28, 0x3d	; 61
    4466:	de b7       	in	r29, 0x3e	; 62
    4468:	ca 1b       	sub	r28, r26
    446a:	db 0b       	sbc	r29, r27
    446c:	0f b6       	in	r0, 0x3f	; 63
    446e:	f8 94       	cli
    4470:	de bf       	out	0x3e, r29	; 62
    4472:	0f be       	out	0x3f, r0	; 63
    4474:	cd bf       	out	0x3d, r28	; 61
    4476:	09 94       	ijmp

00004478 <__epilogue_restores__>:
    4478:	2a 88       	ldd	r2, Y+18	; 0x12
    447a:	39 88       	ldd	r3, Y+17	; 0x11
    447c:	48 88       	ldd	r4, Y+16	; 0x10
    447e:	5f 84       	ldd	r5, Y+15	; 0x0f
    4480:	6e 84       	ldd	r6, Y+14	; 0x0e
    4482:	7d 84       	ldd	r7, Y+13	; 0x0d
    4484:	8c 84       	ldd	r8, Y+12	; 0x0c
    4486:	9b 84       	ldd	r9, Y+11	; 0x0b
    4488:	aa 84       	ldd	r10, Y+10	; 0x0a
    448a:	b9 84       	ldd	r11, Y+9	; 0x09
    448c:	c8 84       	ldd	r12, Y+8	; 0x08
    448e:	df 80       	ldd	r13, Y+7	; 0x07
    4490:	ee 80       	ldd	r14, Y+6	; 0x06
    4492:	fd 80       	ldd	r15, Y+5	; 0x05
    4494:	0c 81       	ldd	r16, Y+4	; 0x04
    4496:	1b 81       	ldd	r17, Y+3	; 0x03
    4498:	aa 81       	ldd	r26, Y+2	; 0x02
    449a:	b9 81       	ldd	r27, Y+1	; 0x01
    449c:	ce 0f       	add	r28, r30
    449e:	d1 1d       	adc	r29, r1
    44a0:	0f b6       	in	r0, 0x3f	; 63
    44a2:	f8 94       	cli
    44a4:	de bf       	out	0x3e, r29	; 62
    44a6:	0f be       	out	0x3f, r0	; 63
    44a8:	cd bf       	out	0x3d, r28	; 61
    44aa:	ed 01       	movw	r28, r26
    44ac:	08 95       	ret

000044ae <_exit>:
    44ae:	f8 94       	cli

000044b0 <__stop_program>:
    44b0:	ff cf       	rjmp	.-2      	; 0x44b0 <__stop_program>
