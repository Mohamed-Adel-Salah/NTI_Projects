
COTS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000501e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011c  00800060  0000501e  000050b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000029  0080017c  0080017c  000051ce  2**0
                  ALLOC
  3 .stab         00003d8c  00000000  00000000  000051d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000154b  00000000  00000000  00008f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000a4a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000a647  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000a839  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000cc44  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000dfca  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000f1a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000f360  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000f656  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ffc4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 c2 0a 	jmp	0x1584	; 0x1584 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 2f 09 	jmp	0x125e	; 0x125e <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 6e 09 	jmp	0x12dc	; 0x12dc <__vector_9>
      28:	0c 94 28 0a 	jmp	0x1450	; 0x1450 <__vector_10>
      2c:	0c 94 e9 09 	jmp	0x13d2	; 0x13d2 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 c0 07 	jmp	0xf80	; 0xf80 <__vector_13>
      38:	0c 94 de 07 	jmp	0xfbc	; 0xfbc <__vector_14>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 16 12 	jmp	0x242c	; 0x242c <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e1       	ldi	r30, 0x1E	; 30
      68:	f0 e5       	ldi	r31, 0x50	; 80
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e7       	ldi	r26, 0x7C	; 124
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 3a       	cpi	r26, 0xA5	; 165
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 7c 27 	call	0x4ef8	; 0x4ef8 <main>
      8a:	0c 94 0d 28 	jmp	0x501a	; 0x501a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d6 27 	jmp	0x4fac	; 0x4fac <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f2 27 	jmp	0x4fe4	; 0x4fe4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e2 27 	jmp	0x4fc4	; 0x4fc4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 fe 27 	jmp	0x4ffc	; 0x4ffc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e2 27 	jmp	0x4fc4	; 0x4fc4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 fe 27 	jmp	0x4ffc	; 0x4ffc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d6 27 	jmp	0x4fac	; 0x4fac <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f2 27 	jmp	0x4fe4	; 0x4fe4 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 de 27 	jmp	0x4fbc	; 0x4fbc <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 fa 27 	jmp	0x4ff4	; 0x4ff4 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 e2 27 	jmp	0x4fc4	; 0x4fc4 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 fe 27 	jmp	0x4ffc	; 0x4ffc <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 e2 27 	jmp	0x4fc4	; 0x4fc4 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 fe 27 	jmp	0x4ffc	; 0x4ffc <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 e2 27 	jmp	0x4fc4	; 0x4fc4 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 fe 27 	jmp	0x4ffc	; 0x4ffc <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 e6 27 	jmp	0x4fcc	; 0x4fcc <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 02 28 	jmp	0x5004	; 0x5004 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 de 27 	jmp	0x4fbc	; 0x4fbc <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 fa 27 	jmp	0x4ff4	; 0x4ff4 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <USART_voidInitialization>:
#include "USART_int.h"
#include "USART_priv.h"


void USART_voidInitialization(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(UCSRA,U2X);
     e36:	ab e2       	ldi	r26, 0x2B	; 43
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	eb e2       	ldi	r30, 0x2B	; 43
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	8d 7f       	andi	r24, 0xFD	; 253
     e42:	8c 93       	st	X, r24
	CLR_BIT(UCSRA,MPCM);
     e44:	ab e2       	ldi	r26, 0x2B	; 43
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	eb e2       	ldi	r30, 0x2B	; 43
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	8e 7f       	andi	r24, 0xFE	; 254
     e50:	8c 93       	st	X, r24

	UCSRB=0X80;
     e52:	ea e2       	ldi	r30, 0x2A	; 42
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 e8       	ldi	r24, 0x80	; 128
     e58:	80 83       	st	Z, r24

	SET_BIT(UCSRC,URSEL);
     e5a:	a0 e4       	ldi	r26, 0x40	; 64
     e5c:	b0 e0       	ldi	r27, 0x00	; 0
     e5e:	e0 e4       	ldi	r30, 0x40	; 64
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	80 81       	ld	r24, Z
     e64:	80 68       	ori	r24, 0x80	; 128
     e66:	8c 93       	st	X, r24
	CLR_BIT(UCSRC,UMSEL);
     e68:	a0 e4       	ldi	r26, 0x40	; 64
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	e0 e4       	ldi	r30, 0x40	; 64
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	8f 7b       	andi	r24, 0xBF	; 191
     e74:	8c 93       	st	X, r24
	SET_BIT(UCSRC,UPM1);
     e76:	a0 e4       	ldi	r26, 0x40	; 64
     e78:	b0 e0       	ldi	r27, 0x00	; 0
     e7a:	e0 e4       	ldi	r30, 0x40	; 64
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	80 81       	ld	r24, Z
     e80:	80 62       	ori	r24, 0x20	; 32
     e82:	8c 93       	st	X, r24
	SET_BIT(UCSRC,UPM0);
     e84:	a0 e4       	ldi	r26, 0x40	; 64
     e86:	b0 e0       	ldi	r27, 0x00	; 0
     e88:	e0 e4       	ldi	r30, 0x40	; 64
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	80 81       	ld	r24, Z
     e8e:	80 61       	ori	r24, 0x10	; 16
     e90:	8c 93       	st	X, r24
	CLR_BIT(UCSRC,USBS);
     e92:	a0 e4       	ldi	r26, 0x40	; 64
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	e0 e4       	ldi	r30, 0x40	; 64
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	87 7f       	andi	r24, 0xF7	; 247
     e9e:	8c 93       	st	X, r24
	SET_BIT(UCSRC,UCSZ1);
     ea0:	a0 e4       	ldi	r26, 0x40	; 64
     ea2:	b0 e0       	ldi	r27, 0x00	; 0
     ea4:	e0 e4       	ldi	r30, 0x40	; 64
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	80 81       	ld	r24, Z
     eaa:	84 60       	ori	r24, 0x04	; 4
     eac:	8c 93       	st	X, r24
	SET_BIT(UCSRC,UCSZ0);
     eae:	a0 e4       	ldi	r26, 0x40	; 64
     eb0:	b0 e0       	ldi	r27, 0x00	; 0
     eb2:	e0 e4       	ldi	r30, 0x40	; 64
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	82 60       	ori	r24, 0x02	; 2
     eba:	8c 93       	st	X, r24
	CLR_BIT(UCSRC,UCPOL);
     ebc:	a0 e4       	ldi	r26, 0x40	; 64
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	e0 e4       	ldi	r30, 0x40	; 64
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	8e 7f       	andi	r24, 0xFE	; 254
     ec8:	8c 93       	st	X, r24

	UBRRL=51;
     eca:	e9 e2       	ldi	r30, 0x29	; 41
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	83 e3       	ldi	r24, 0x33	; 51
     ed0:	80 83       	st	Z, r24

	SET_BIT(UCSRB,RXEN);
     ed2:	aa e2       	ldi	r26, 0x2A	; 42
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	ea e2       	ldi	r30, 0x2A	; 42
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	80 61       	ori	r24, 0x10	; 16
     ede:	8c 93       	st	X, r24
	SET_BIT(UCSRB,TXEN);
     ee0:	aa e2       	ldi	r26, 0x2A	; 42
     ee2:	b0 e0       	ldi	r27, 0x00	; 0
     ee4:	ea e2       	ldi	r30, 0x2A	; 42
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 81       	ld	r24, Z
     eea:	88 60       	ori	r24, 0x08	; 8
     eec:	8c 93       	st	X, r24

	return;
}
     eee:	cf 91       	pop	r28
     ef0:	df 91       	pop	r29
     ef2:	08 95       	ret

00000ef4 <USART_voidSendData_Polling>:

void USART_voidSendData_Polling(u8 Character)
{
     ef4:	df 93       	push	r29
     ef6:	cf 93       	push	r28
     ef8:	0f 92       	push	r0
     efa:	cd b7       	in	r28, 0x3d	; 61
     efc:	de b7       	in	r29, 0x3e	; 62
     efe:	89 83       	std	Y+1, r24	; 0x01
	while(!GET_BIT(UCSRA,UDRE));
     f00:	eb e2       	ldi	r30, 0x2B	; 43
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	88 2f       	mov	r24, r24
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	80 72       	andi	r24, 0x20	; 32
     f0c:	90 70       	andi	r25, 0x00	; 0
     f0e:	95 95       	asr	r25
     f10:	87 95       	ror	r24
     f12:	95 95       	asr	r25
     f14:	87 95       	ror	r24
     f16:	95 95       	asr	r25
     f18:	87 95       	ror	r24
     f1a:	95 95       	asr	r25
     f1c:	87 95       	ror	r24
     f1e:	95 95       	asr	r25
     f20:	87 95       	ror	r24
     f22:	00 97       	sbiw	r24, 0x00	; 0
     f24:	69 f3       	breq	.-38     	; 0xf00 <USART_voidSendData_Polling+0xc>

	UDR=Character;
     f26:	ec e2       	ldi	r30, 0x2C	; 44
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	89 81       	ldd	r24, Y+1	; 0x01
     f2c:	80 83       	st	Z, r24

	CLR_BIT(UCSRA,UDRE);
     f2e:	ab e2       	ldi	r26, 0x2B	; 43
     f30:	b0 e0       	ldi	r27, 0x00	; 0
     f32:	eb e2       	ldi	r30, 0x2B	; 43
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	80 81       	ld	r24, Z
     f38:	8f 7d       	andi	r24, 0xDF	; 223
     f3a:	8c 93       	st	X, r24

	return;
}
     f3c:	0f 90       	pop	r0
     f3e:	cf 91       	pop	r28
     f40:	df 91       	pop	r29
     f42:	08 95       	ret

00000f44 <USART_voidRecieveData_Polling>:

extern u8 UDR_Global;
void USART_voidRecieveData_Polling(void)
{
     f44:	df 93       	push	r29
     f46:	cf 93       	push	r28
     f48:	cd b7       	in	r28, 0x3d	; 61
     f4a:	de b7       	in	r29, 0x3e	; 62
	while(!GET_BIT(UCSRA,RXC));
     f4c:	eb e2       	ldi	r30, 0x2B	; 43
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 81       	ld	r24, Z
     f52:	88 1f       	adc	r24, r24
     f54:	88 27       	eor	r24, r24
     f56:	88 1f       	adc	r24, r24
     f58:	88 2f       	mov	r24, r24
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	90 70       	andi	r25, 0x00	; 0
     f5e:	00 97       	sbiw	r24, 0x00	; 0
     f60:	a9 f3       	breq	.-22     	; 0xf4c <USART_voidRecieveData_Polling+0x8>

	UDR_Global=UDR;
     f62:	ec e2       	ldi	r30, 0x2C	; 44
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	80 93 98 01 	sts	0x0198, r24

	CLR_BIT(UCSRA,RXC);
     f6c:	ab e2       	ldi	r26, 0x2B	; 43
     f6e:	b0 e0       	ldi	r27, 0x00	; 0
     f70:	eb e2       	ldi	r30, 0x2B	; 43
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 81       	ld	r24, Z
     f76:	8f 77       	andi	r24, 0x7F	; 127
     f78:	8c 93       	st	X, r24

	return;
}
     f7a:	cf 91       	pop	r28
     f7c:	df 91       	pop	r29
     f7e:	08 95       	ret

00000f80 <__vector_13>:


void (*USART_Recieve_ISR)(void)=NULL;
void __vector_13(void)
{
     f80:	df 93       	push	r29
     f82:	cf 93       	push	r28
     f84:	cd b7       	in	r28, 0x3d	; 61
     f86:	de b7       	in	r29, 0x3e	; 62
	USART_Recieve_ISR();
     f88:	e0 91 7c 01 	lds	r30, 0x017C
     f8c:	f0 91 7d 01 	lds	r31, 0x017D
     f90:	09 95       	icall
}
     f92:	cf 91       	pop	r28
     f94:	df 91       	pop	r29
     f96:	08 95       	ret

00000f98 <USART_RecieveCallBack>:
void USART_RecieveCallBack(void (*PF_USART_Recieve)(void))
{
     f98:	df 93       	push	r29
     f9a:	cf 93       	push	r28
     f9c:	00 d0       	rcall	.+0      	; 0xf9e <USART_RecieveCallBack+0x6>
     f9e:	cd b7       	in	r28, 0x3d	; 61
     fa0:	de b7       	in	r29, 0x3e	; 62
     fa2:	9a 83       	std	Y+2, r25	; 0x02
     fa4:	89 83       	std	Y+1, r24	; 0x01
	USART_Recieve_ISR=PF_USART_Recieve;
     fa6:	89 81       	ldd	r24, Y+1	; 0x01
     fa8:	9a 81       	ldd	r25, Y+2	; 0x02
     faa:	90 93 7d 01 	sts	0x017D, r25
     fae:	80 93 7c 01 	sts	0x017C, r24
}
     fb2:	0f 90       	pop	r0
     fb4:	0f 90       	pop	r0
     fb6:	cf 91       	pop	r28
     fb8:	df 91       	pop	r29
     fba:	08 95       	ret

00000fbc <__vector_14>:

void (*USART_Send_ISR)(void)=NULL;
void __vector_14(void)
{
     fbc:	df 93       	push	r29
     fbe:	cf 93       	push	r28
     fc0:	cd b7       	in	r28, 0x3d	; 61
     fc2:	de b7       	in	r29, 0x3e	; 62
	USART_Send_ISR();
     fc4:	e0 91 7e 01 	lds	r30, 0x017E
     fc8:	f0 91 7f 01 	lds	r31, 0x017F
     fcc:	09 95       	icall
}
     fce:	cf 91       	pop	r28
     fd0:	df 91       	pop	r29
     fd2:	08 95       	ret

00000fd4 <USART_SendCallBack>:
void USART_SendCallBack(void (*PF_USART_Send)(void))
{
     fd4:	df 93       	push	r29
     fd6:	cf 93       	push	r28
     fd8:	00 d0       	rcall	.+0      	; 0xfda <USART_SendCallBack+0x6>
     fda:	cd b7       	in	r28, 0x3d	; 61
     fdc:	de b7       	in	r29, 0x3e	; 62
     fde:	9a 83       	std	Y+2, r25	; 0x02
     fe0:	89 83       	std	Y+1, r24	; 0x01
	USART_Send_ISR=PF_USART_Send;
     fe2:	89 81       	ldd	r24, Y+1	; 0x01
     fe4:	9a 81       	ldd	r25, Y+2	; 0x02
     fe6:	90 93 7f 01 	sts	0x017F, r25
     fea:	80 93 7e 01 	sts	0x017E, r24
}
     fee:	0f 90       	pop	r0
     ff0:	0f 90       	pop	r0
     ff2:	cf 91       	pop	r28
     ff4:	df 91       	pop	r29
     ff6:	08 95       	ret

00000ff8 <Timer1_voidInitialization>:
#include "Timer1_int.h"
#include "Timer1_priv.h"
#include "Timer1_confg.h"

void Timer1_voidInitialization(void)
{
     ff8:	df 93       	push	r29
     ffa:	cf 93       	push	r28
     ffc:	cd b7       	in	r28, 0x3d	; 61
     ffe:	de b7       	in	r29, 0x3e	; 62

	#endif

#ifdef ICU
	// Set Normal Mode
	CLR_BIT(TCCR1B,TCCR1B_WGM13);
    1000:	ae e4       	ldi	r26, 0x4E	; 78
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	ee e4       	ldi	r30, 0x4E	; 78
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	8f 7e       	andi	r24, 0xEF	; 239
    100c:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,TCCR1A_WGM10);
    100e:	af e4       	ldi	r26, 0x4F	; 79
    1010:	b0 e0       	ldi	r27, 0x00	; 0
    1012:	ef e4       	ldi	r30, 0x4F	; 79
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	80 81       	ld	r24, Z
    1018:	8e 7f       	andi	r24, 0xFE	; 254
    101a:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,TCCR1A_WGM11);
    101c:	af e4       	ldi	r26, 0x4F	; 79
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	ef e4       	ldi	r30, 0x4F	; 79
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	80 81       	ld	r24, Z
    1026:	8d 7f       	andi	r24, 0xFD	; 253
    1028:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_WGM12);
    102a:	ae e4       	ldi	r26, 0x4E	; 78
    102c:	b0 e0       	ldi	r27, 0x00	; 0
    102e:	ee e4       	ldi	r30, 0x4E	; 78
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	87 7f       	andi	r24, 0xF7	; 247
    1036:	8c 93       	st	X, r24

	// Setting Prescaler
	SET_BIT(TCCR1B,TCCR1B_CS10);
    1038:	ae e4       	ldi	r26, 0x4E	; 78
    103a:	b0 e0       	ldi	r27, 0x00	; 0
    103c:	ee e4       	ldi	r30, 0x4E	; 78
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	81 60       	ori	r24, 0x01	; 1
    1044:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_CS11);
    1046:	ae e4       	ldi	r26, 0x4E	; 78
    1048:	b0 e0       	ldi	r27, 0x00	; 0
    104a:	ee e4       	ldi	r30, 0x4E	; 78
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	80 81       	ld	r24, Z
    1050:	8d 7f       	andi	r24, 0xFD	; 253
    1052:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_CS12);
    1054:	ae e4       	ldi	r26, 0x4E	; 78
    1056:	b0 e0       	ldi	r27, 0x00	; 0
    1058:	ee e4       	ldi	r30, 0x4E	; 78
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	80 81       	ld	r24, Z
    105e:	8b 7f       	andi	r24, 0xFB	; 251
    1060:	8c 93       	st	X, r24

	//SET_BIT(TIMSK,TOIE1);

	TCNT1 = 0;
    1062:	ec e4       	ldi	r30, 0x4C	; 76
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	11 82       	std	Z+1, r1	; 0x01
    1068:	10 82       	st	Z, r1
	ICR1=0;
    106a:	e6 e4       	ldi	r30, 0x46	; 70
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	11 82       	std	Z+1, r1	; 0x01
    1070:	10 82       	st	Z, r1
#endif
}
    1072:	cf 91       	pop	r28
    1074:	df 91       	pop	r29
    1076:	08 95       	ret

00001078 <Timer1_voidSetFrequency>:


void Timer1_voidSetFrequency(u8 Freq)
{
    1078:	0f 93       	push	r16
    107a:	1f 93       	push	r17
    107c:	df 93       	push	r29
    107e:	cf 93       	push	r28
    1080:	0f 92       	push	r0
    1082:	cd b7       	in	r28, 0x3d	; 61
    1084:	de b7       	in	r29, 0x3e	; 62
    1086:	89 83       	std	Y+1, r24	; 0x01
	ICR1=1000000/(2*Freq);
    1088:	06 e4       	ldi	r16, 0x46	; 70
    108a:	10 e0       	ldi	r17, 0x00	; 0
    108c:	89 81       	ldd	r24, Y+1	; 0x01
    108e:	88 2f       	mov	r24, r24
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	88 0f       	add	r24, r24
    1094:	99 1f       	adc	r25, r25
    1096:	9c 01       	movw	r18, r24
    1098:	44 27       	eor	r20, r20
    109a:	37 fd       	sbrc	r19, 7
    109c:	40 95       	com	r20
    109e:	54 2f       	mov	r21, r20
    10a0:	80 e4       	ldi	r24, 0x40	; 64
    10a2:	92 e4       	ldi	r25, 0x42	; 66
    10a4:	af e0       	ldi	r26, 0x0F	; 15
    10a6:	b0 e0       	ldi	r27, 0x00	; 0
    10a8:	bc 01       	movw	r22, r24
    10aa:	cd 01       	movw	r24, r26
    10ac:	0e 94 bb 27 	call	0x4f76	; 0x4f76 <__divmodsi4>
    10b0:	da 01       	movw	r26, r20
    10b2:	c9 01       	movw	r24, r18
    10b4:	f8 01       	movw	r30, r16
    10b6:	91 83       	std	Z+1, r25	; 0x01
    10b8:	80 83       	st	Z, r24

	//ICR1=1000000/2*(float)((float)20/1000);
}
    10ba:	0f 90       	pop	r0
    10bc:	cf 91       	pop	r28
    10be:	df 91       	pop	r29
    10c0:	1f 91       	pop	r17
    10c2:	0f 91       	pop	r16
    10c4:	08 95       	ret

000010c6 <Timer1_voidSetDutyCycle>:
void Timer1_voidSetDutyCycle(u8 Duty)
{
    10c6:	cf 92       	push	r12
    10c8:	df 92       	push	r13
    10ca:	ef 92       	push	r14
    10cc:	ff 92       	push	r15
    10ce:	0f 93       	push	r16
    10d0:	1f 93       	push	r17
    10d2:	df 93       	push	r29
    10d4:	cf 93       	push	r28
    10d6:	0f 92       	push	r0
    10d8:	cd b7       	in	r28, 0x3d	; 61
    10da:	de b7       	in	r29, 0x3e	; 62
    10dc:	89 83       	std	Y+1, r24	; 0x01
	OCR1A=ICR1*(float)((float)Duty/1000);
    10de:	0f 2e       	mov	r0, r31
    10e0:	fa e4       	ldi	r31, 0x4A	; 74
    10e2:	cf 2e       	mov	r12, r31
    10e4:	dd 24       	eor	r13, r13
    10e6:	f0 2d       	mov	r31, r0
    10e8:	e6 e4       	ldi	r30, 0x46	; 70
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	91 81       	ldd	r25, Z+1	; 0x01
    10f0:	cc 01       	movw	r24, r24
    10f2:	a0 e0       	ldi	r26, 0x00	; 0
    10f4:	b0 e0       	ldi	r27, 0x00	; 0
    10f6:	bc 01       	movw	r22, r24
    10f8:	cd 01       	movw	r24, r26
    10fa:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    10fe:	7b 01       	movw	r14, r22
    1100:	8c 01       	movw	r16, r24
    1102:	89 81       	ldd	r24, Y+1	; 0x01
    1104:	88 2f       	mov	r24, r24
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	a0 e0       	ldi	r26, 0x00	; 0
    110a:	b0 e0       	ldi	r27, 0x00	; 0
    110c:	bc 01       	movw	r22, r24
    110e:	cd 01       	movw	r24, r26
    1110:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1114:	dc 01       	movw	r26, r24
    1116:	cb 01       	movw	r24, r22
    1118:	bc 01       	movw	r22, r24
    111a:	cd 01       	movw	r24, r26
    111c:	20 e0       	ldi	r18, 0x00	; 0
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	4a e7       	ldi	r20, 0x7A	; 122
    1122:	54 e4       	ldi	r21, 0x44	; 68
    1124:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1128:	dc 01       	movw	r26, r24
    112a:	cb 01       	movw	r24, r22
    112c:	9c 01       	movw	r18, r24
    112e:	ad 01       	movw	r20, r26
    1130:	c8 01       	movw	r24, r16
    1132:	b7 01       	movw	r22, r14
    1134:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1138:	dc 01       	movw	r26, r24
    113a:	cb 01       	movw	r24, r22
    113c:	bc 01       	movw	r22, r24
    113e:	cd 01       	movw	r24, r26
    1140:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1144:	dc 01       	movw	r26, r24
    1146:	cb 01       	movw	r24, r22
    1148:	f6 01       	movw	r30, r12
    114a:	91 83       	std	Z+1, r25	; 0x01
    114c:	80 83       	st	Z, r24

	//OCR1A=ICR1*(float)((float)Duty/100);
}
    114e:	0f 90       	pop	r0
    1150:	cf 91       	pop	r28
    1152:	df 91       	pop	r29
    1154:	1f 91       	pop	r17
    1156:	0f 91       	pop	r16
    1158:	ff 90       	pop	r15
    115a:	ef 90       	pop	r14
    115c:	df 90       	pop	r13
    115e:	cf 90       	pop	r12
    1160:	08 95       	ret

00001162 <Timer1_voidCaptureEdgeSelect>:


void Timer1_voidCaptureEdgeSelect(u8 Edge_Select)
{
    1162:	df 93       	push	r29
    1164:	cf 93       	push	r28
    1166:	00 d0       	rcall	.+0      	; 0x1168 <Timer1_voidCaptureEdgeSelect+0x6>
    1168:	0f 92       	push	r0
    116a:	cd b7       	in	r28, 0x3d	; 61
    116c:	de b7       	in	r29, 0x3e	; 62
    116e:	89 83       	std	Y+1, r24	; 0x01
	switch(Edge_Select)
    1170:	89 81       	ldd	r24, Y+1	; 0x01
    1172:	28 2f       	mov	r18, r24
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	3b 83       	std	Y+3, r19	; 0x03
    1178:	2a 83       	std	Y+2, r18	; 0x02
    117a:	8a 81       	ldd	r24, Y+2	; 0x02
    117c:	9b 81       	ldd	r25, Y+3	; 0x03
    117e:	00 97       	sbiw	r24, 0x00	; 0
    1180:	31 f0       	breq	.+12     	; 0x118e <Timer1_voidCaptureEdgeSelect+0x2c>
    1182:	2a 81       	ldd	r18, Y+2	; 0x02
    1184:	3b 81       	ldd	r19, Y+3	; 0x03
    1186:	21 30       	cpi	r18, 0x01	; 1
    1188:	31 05       	cpc	r19, r1
    118a:	49 f0       	breq	.+18     	; 0x119e <Timer1_voidCaptureEdgeSelect+0x3c>
    118c:	0f c0       	rjmp	.+30     	; 0x11ac <Timer1_voidCaptureEdgeSelect+0x4a>
	{
	case 0: CLR_BIT(TCCR1B,TCCR1B_ICES1);break;
    118e:	ae e4       	ldi	r26, 0x4E	; 78
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	ee e4       	ldi	r30, 0x4E	; 78
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	8f 7b       	andi	r24, 0xBF	; 191
    119a:	8c 93       	st	X, r24
    119c:	07 c0       	rjmp	.+14     	; 0x11ac <Timer1_voidCaptureEdgeSelect+0x4a>
	case 1: SET_BIT(TCCR1B,TCCR1B_ICES1);break;
    119e:	ae e4       	ldi	r26, 0x4E	; 78
    11a0:	b0 e0       	ldi	r27, 0x00	; 0
    11a2:	ee e4       	ldi	r30, 0x4E	; 78
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	80 81       	ld	r24, Z
    11a8:	80 64       	ori	r24, 0x40	; 64
    11aa:	8c 93       	st	X, r24
	}
}
    11ac:	0f 90       	pop	r0
    11ae:	0f 90       	pop	r0
    11b0:	0f 90       	pop	r0
    11b2:	cf 91       	pop	r28
    11b4:	df 91       	pop	r29
    11b6:	08 95       	ret

000011b8 <Timer1_voidSetTimervalue>:
void Timer1_voidSetTimervalue(u16 Value)
{
    11b8:	df 93       	push	r29
    11ba:	cf 93       	push	r28
    11bc:	00 d0       	rcall	.+0      	; 0x11be <Timer1_voidSetTimervalue+0x6>
    11be:	cd b7       	in	r28, 0x3d	; 61
    11c0:	de b7       	in	r29, 0x3e	; 62
    11c2:	9a 83       	std	Y+2, r25	; 0x02
    11c4:	89 83       	std	Y+1, r24	; 0x01
	ICR1=0;
    11c6:	e6 e4       	ldi	r30, 0x46	; 70
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	11 82       	std	Z+1, r1	; 0x01
    11cc:	10 82       	st	Z, r1
}
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	cf 91       	pop	r28
    11d4:	df 91       	pop	r29
    11d6:	08 95       	ret

000011d8 <Timer1_voidGetTimervalue>:
u16 Timer1_voidGetTimervalue(void)
{
    11d8:	df 93       	push	r29
    11da:	cf 93       	push	r28
    11dc:	cd b7       	in	r28, 0x3d	; 61
    11de:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    11e0:	e6 e4       	ldi	r30, 0x46	; 70
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	80 81       	ld	r24, Z
    11e6:	91 81       	ldd	r25, Z+1	; 0x01
}
    11e8:	cf 91       	pop	r28
    11ea:	df 91       	pop	r29
    11ec:	08 95       	ret

000011ee <Timer1_voidICRInterruptEnable>:
void Timer1_voidICRInterruptEnable(void)
{
    11ee:	df 93       	push	r29
    11f0:	cf 93       	push	r28
    11f2:	cd b7       	in	r28, 0x3d	; 61
    11f4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TICIE1);
    11f6:	a9 e5       	ldi	r26, 0x59	; 89
    11f8:	b0 e0       	ldi	r27, 0x00	; 0
    11fa:	e9 e5       	ldi	r30, 0x59	; 89
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	80 81       	ld	r24, Z
    1200:	80 62       	ori	r24, 0x20	; 32
    1202:	8c 93       	st	X, r24
}
    1204:	cf 91       	pop	r28
    1206:	df 91       	pop	r29
    1208:	08 95       	ret

0000120a <Timer1_voidICRInterruptDisable>:
void Timer1_voidICRInterruptDisable(void)
{
    120a:	df 93       	push	r29
    120c:	cf 93       	push	r28
    120e:	cd b7       	in	r28, 0x3d	; 61
    1210:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TICIE1);
    1212:	a9 e5       	ldi	r26, 0x59	; 89
    1214:	b0 e0       	ldi	r27, 0x00	; 0
    1216:	e9 e5       	ldi	r30, 0x59	; 89
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	80 81       	ld	r24, Z
    121c:	8f 7d       	andi	r24, 0xDF	; 223
    121e:	8c 93       	st	X, r24
}
    1220:	cf 91       	pop	r28
    1222:	df 91       	pop	r29
    1224:	08 95       	ret

00001226 <Timer1_voidOVFInterruptEnable>:

void Timer1_voidOVFInterruptEnable(void)
{
    1226:	df 93       	push	r29
    1228:	cf 93       	push	r28
    122a:	cd b7       	in	r28, 0x3d	; 61
    122c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TOIE1);
    122e:	a9 e5       	ldi	r26, 0x59	; 89
    1230:	b0 e0       	ldi	r27, 0x00	; 0
    1232:	e9 e5       	ldi	r30, 0x59	; 89
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	80 81       	ld	r24, Z
    1238:	84 60       	ori	r24, 0x04	; 4
    123a:	8c 93       	st	X, r24
}
    123c:	cf 91       	pop	r28
    123e:	df 91       	pop	r29
    1240:	08 95       	ret

00001242 <Timer1_voidOVFInterruptDisable>:
void Timer1_voidOVFInterruptDisable(void)
{
    1242:	df 93       	push	r29
    1244:	cf 93       	push	r28
    1246:	cd b7       	in	r28, 0x3d	; 61
    1248:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TOIE1);
    124a:	a9 e5       	ldi	r26, 0x59	; 89
    124c:	b0 e0       	ldi	r27, 0x00	; 0
    124e:	e9 e5       	ldi	r30, 0x59	; 89
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	80 81       	ld	r24, Z
    1254:	8b 7f       	andi	r24, 0xFB	; 251
    1256:	8c 93       	st	X, r24
}
    1258:	cf 91       	pop	r28
    125a:	df 91       	pop	r29
    125c:	08 95       	ret

0000125e <__vector_6>:

void (*Timer1ICR_ISR)(void)=NULL;
void __vector_6(void)
{
    125e:	1f 92       	push	r1
    1260:	0f 92       	push	r0
    1262:	0f b6       	in	r0, 0x3f	; 63
    1264:	0f 92       	push	r0
    1266:	11 24       	eor	r1, r1
    1268:	2f 93       	push	r18
    126a:	3f 93       	push	r19
    126c:	4f 93       	push	r20
    126e:	5f 93       	push	r21
    1270:	6f 93       	push	r22
    1272:	7f 93       	push	r23
    1274:	8f 93       	push	r24
    1276:	9f 93       	push	r25
    1278:	af 93       	push	r26
    127a:	bf 93       	push	r27
    127c:	ef 93       	push	r30
    127e:	ff 93       	push	r31
    1280:	df 93       	push	r29
    1282:	cf 93       	push	r28
    1284:	cd b7       	in	r28, 0x3d	; 61
    1286:	de b7       	in	r29, 0x3e	; 62
	Timer1ICR_ISR();
    1288:	e0 91 80 01 	lds	r30, 0x0180
    128c:	f0 91 81 01 	lds	r31, 0x0181
    1290:	09 95       	icall
}
    1292:	cf 91       	pop	r28
    1294:	df 91       	pop	r29
    1296:	ff 91       	pop	r31
    1298:	ef 91       	pop	r30
    129a:	bf 91       	pop	r27
    129c:	af 91       	pop	r26
    129e:	9f 91       	pop	r25
    12a0:	8f 91       	pop	r24
    12a2:	7f 91       	pop	r23
    12a4:	6f 91       	pop	r22
    12a6:	5f 91       	pop	r21
    12a8:	4f 91       	pop	r20
    12aa:	3f 91       	pop	r19
    12ac:	2f 91       	pop	r18
    12ae:	0f 90       	pop	r0
    12b0:	0f be       	out	0x3f, r0	; 63
    12b2:	0f 90       	pop	r0
    12b4:	1f 90       	pop	r1
    12b6:	18 95       	reti

000012b8 <Timer1ICR_CallBack>:
void Timer1ICR_CallBack(void (*PF_Timer1ICR)(void))
{
    12b8:	df 93       	push	r29
    12ba:	cf 93       	push	r28
    12bc:	00 d0       	rcall	.+0      	; 0x12be <Timer1ICR_CallBack+0x6>
    12be:	cd b7       	in	r28, 0x3d	; 61
    12c0:	de b7       	in	r29, 0x3e	; 62
    12c2:	9a 83       	std	Y+2, r25	; 0x02
    12c4:	89 83       	std	Y+1, r24	; 0x01
	Timer1ICR_ISR=PF_Timer1ICR;
    12c6:	89 81       	ldd	r24, Y+1	; 0x01
    12c8:	9a 81       	ldd	r25, Y+2	; 0x02
    12ca:	90 93 81 01 	sts	0x0181, r25
    12ce:	80 93 80 01 	sts	0x0180, r24
}
    12d2:	0f 90       	pop	r0
    12d4:	0f 90       	pop	r0
    12d6:	cf 91       	pop	r28
    12d8:	df 91       	pop	r29
    12da:	08 95       	ret

000012dc <__vector_9>:

void (*Timer1OVF_ISR)(void)=NULL;
void __vector_9(void)
{
    12dc:	1f 92       	push	r1
    12de:	0f 92       	push	r0
    12e0:	0f b6       	in	r0, 0x3f	; 63
    12e2:	0f 92       	push	r0
    12e4:	11 24       	eor	r1, r1
    12e6:	2f 93       	push	r18
    12e8:	3f 93       	push	r19
    12ea:	4f 93       	push	r20
    12ec:	5f 93       	push	r21
    12ee:	6f 93       	push	r22
    12f0:	7f 93       	push	r23
    12f2:	8f 93       	push	r24
    12f4:	9f 93       	push	r25
    12f6:	af 93       	push	r26
    12f8:	bf 93       	push	r27
    12fa:	ef 93       	push	r30
    12fc:	ff 93       	push	r31
    12fe:	df 93       	push	r29
    1300:	cf 93       	push	r28
    1302:	cd b7       	in	r28, 0x3d	; 61
    1304:	de b7       	in	r29, 0x3e	; 62
	Timer1OVF_ISR();
    1306:	e0 91 82 01 	lds	r30, 0x0182
    130a:	f0 91 83 01 	lds	r31, 0x0183
    130e:	09 95       	icall
}
    1310:	cf 91       	pop	r28
    1312:	df 91       	pop	r29
    1314:	ff 91       	pop	r31
    1316:	ef 91       	pop	r30
    1318:	bf 91       	pop	r27
    131a:	af 91       	pop	r26
    131c:	9f 91       	pop	r25
    131e:	8f 91       	pop	r24
    1320:	7f 91       	pop	r23
    1322:	6f 91       	pop	r22
    1324:	5f 91       	pop	r21
    1326:	4f 91       	pop	r20
    1328:	3f 91       	pop	r19
    132a:	2f 91       	pop	r18
    132c:	0f 90       	pop	r0
    132e:	0f be       	out	0x3f, r0	; 63
    1330:	0f 90       	pop	r0
    1332:	1f 90       	pop	r1
    1334:	18 95       	reti

00001336 <Timer1OVF_CallBack>:
void Timer1OVF_CallBack(void (*PF_Timer1OVF)(void))
{
    1336:	df 93       	push	r29
    1338:	cf 93       	push	r28
    133a:	00 d0       	rcall	.+0      	; 0x133c <Timer1OVF_CallBack+0x6>
    133c:	cd b7       	in	r28, 0x3d	; 61
    133e:	de b7       	in	r29, 0x3e	; 62
    1340:	9a 83       	std	Y+2, r25	; 0x02
    1342:	89 83       	std	Y+1, r24	; 0x01
	Timer1OVF_ISR=PF_Timer1OVF;
    1344:	89 81       	ldd	r24, Y+1	; 0x01
    1346:	9a 81       	ldd	r25, Y+2	; 0x02
    1348:	90 93 83 01 	sts	0x0183, r25
    134c:	80 93 82 01 	sts	0x0182, r24
}
    1350:	0f 90       	pop	r0
    1352:	0f 90       	pop	r0
    1354:	cf 91       	pop	r28
    1356:	df 91       	pop	r29
    1358:	08 95       	ret

0000135a <Timer0_voidInitialization>:




void Timer0_voidInitialization(void)
{
    135a:	df 93       	push	r29
    135c:	cf 93       	push	r28
    135e:	cd b7       	in	r28, 0x3d	; 61
    1360:	de b7       	in	r29, 0x3e	; 62

		OCR0=249;
	#endif

	#ifdef PWM_PhasaCorrect
		SET_BIT(TCCR0,WGM00);
    1362:	a3 e5       	ldi	r26, 0x53	; 83
    1364:	b0 e0       	ldi	r27, 0x00	; 0
    1366:	e3 e5       	ldi	r30, 0x53	; 83
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	80 81       	ld	r24, Z
    136c:	80 64       	ori	r24, 0x40	; 64
    136e:	8c 93       	st	X, r24
		SET_BIT(TCCR0,WGM01);
    1370:	a3 e5       	ldi	r26, 0x53	; 83
    1372:	b0 e0       	ldi	r27, 0x00	; 0
    1374:	e3 e5       	ldi	r30, 0x53	; 83
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	80 81       	ld	r24, Z
    137a:	88 60       	ori	r24, 0x08	; 8
    137c:	8c 93       	st	X, r24

		// NonInverted PWM
		SET_BIT(TCCR0,COM01);
    137e:	a3 e5       	ldi	r26, 0x53	; 83
    1380:	b0 e0       	ldi	r27, 0x00	; 0
    1382:	e3 e5       	ldi	r30, 0x53	; 83
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	80 81       	ld	r24, Z
    1388:	80 62       	ori	r24, 0x20	; 32
    138a:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,COM00);
    138c:	a3 e5       	ldi	r26, 0x53	; 83
    138e:	b0 e0       	ldi	r27, 0x00	; 0
    1390:	e3 e5       	ldi	r30, 0x53	; 83
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	80 81       	ld	r24, Z
    1396:	8f 7e       	andi	r24, 0xEF	; 239
    1398:	8c 93       	st	X, r24

		// Setting Prescaler
		SET_BIT(TCCR0,CS00);
    139a:	a3 e5       	ldi	r26, 0x53	; 83
    139c:	b0 e0       	ldi	r27, 0x00	; 0
    139e:	e3 e5       	ldi	r30, 0x53	; 83
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	80 81       	ld	r24, Z
    13a4:	81 60       	ori	r24, 0x01	; 1
    13a6:	8c 93       	st	X, r24
		SET_BIT(TCCR0,CS01);
    13a8:	a3 e5       	ldi	r26, 0x53	; 83
    13aa:	b0 e0       	ldi	r27, 0x00	; 0
    13ac:	e3 e5       	ldi	r30, 0x53	; 83
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	80 81       	ld	r24, Z
    13b2:	82 60       	ori	r24, 0x02	; 2
    13b4:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,CS02);
    13b6:	a3 e5       	ldi	r26, 0x53	; 83
    13b8:	b0 e0       	ldi	r27, 0x00	; 0
    13ba:	e3 e5       	ldi	r30, 0x53	; 83
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	80 81       	ld	r24, Z
    13c0:	8b 7f       	andi	r24, 0xFB	; 251
    13c2:	8c 93       	st	X, r24

		OCR0=63;
    13c4:	ec e5       	ldi	r30, 0x5C	; 92
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	8f e3       	ldi	r24, 0x3F	; 63
    13ca:	80 83       	st	Z, r24

	#endif

#endif

}
    13cc:	cf 91       	pop	r28
    13ce:	df 91       	pop	r29
    13d0:	08 95       	ret

000013d2 <__vector_11>:

void (*Timer0OVF_ISR)(void)=NULL;
void __vector_11(void)
{
    13d2:	1f 92       	push	r1
    13d4:	0f 92       	push	r0
    13d6:	0f b6       	in	r0, 0x3f	; 63
    13d8:	0f 92       	push	r0
    13da:	11 24       	eor	r1, r1
    13dc:	2f 93       	push	r18
    13de:	3f 93       	push	r19
    13e0:	4f 93       	push	r20
    13e2:	5f 93       	push	r21
    13e4:	6f 93       	push	r22
    13e6:	7f 93       	push	r23
    13e8:	8f 93       	push	r24
    13ea:	9f 93       	push	r25
    13ec:	af 93       	push	r26
    13ee:	bf 93       	push	r27
    13f0:	ef 93       	push	r30
    13f2:	ff 93       	push	r31
    13f4:	df 93       	push	r29
    13f6:	cf 93       	push	r28
    13f8:	cd b7       	in	r28, 0x3d	; 61
    13fa:	de b7       	in	r29, 0x3e	; 62
	Timer0OVF_ISR();
    13fc:	e0 91 84 01 	lds	r30, 0x0184
    1400:	f0 91 85 01 	lds	r31, 0x0185
    1404:	09 95       	icall
}
    1406:	cf 91       	pop	r28
    1408:	df 91       	pop	r29
    140a:	ff 91       	pop	r31
    140c:	ef 91       	pop	r30
    140e:	bf 91       	pop	r27
    1410:	af 91       	pop	r26
    1412:	9f 91       	pop	r25
    1414:	8f 91       	pop	r24
    1416:	7f 91       	pop	r23
    1418:	6f 91       	pop	r22
    141a:	5f 91       	pop	r21
    141c:	4f 91       	pop	r20
    141e:	3f 91       	pop	r19
    1420:	2f 91       	pop	r18
    1422:	0f 90       	pop	r0
    1424:	0f be       	out	0x3f, r0	; 63
    1426:	0f 90       	pop	r0
    1428:	1f 90       	pop	r1
    142a:	18 95       	reti

0000142c <Timer0OVF_CallBack>:

void Timer0OVF_CallBack(void (*PF_Timer0OVF)(void))
{
    142c:	df 93       	push	r29
    142e:	cf 93       	push	r28
    1430:	00 d0       	rcall	.+0      	; 0x1432 <Timer0OVF_CallBack+0x6>
    1432:	cd b7       	in	r28, 0x3d	; 61
    1434:	de b7       	in	r29, 0x3e	; 62
    1436:	9a 83       	std	Y+2, r25	; 0x02
    1438:	89 83       	std	Y+1, r24	; 0x01
	Timer0OVF_ISR=PF_Timer0OVF;
    143a:	89 81       	ldd	r24, Y+1	; 0x01
    143c:	9a 81       	ldd	r25, Y+2	; 0x02
    143e:	90 93 85 01 	sts	0x0185, r25
    1442:	80 93 84 01 	sts	0x0184, r24
}
    1446:	0f 90       	pop	r0
    1448:	0f 90       	pop	r0
    144a:	cf 91       	pop	r28
    144c:	df 91       	pop	r29
    144e:	08 95       	ret

00001450 <__vector_10>:


void (*Timer0CTC_ISR)(void)=NULL;
void __vector_10(void)
{
    1450:	1f 92       	push	r1
    1452:	0f 92       	push	r0
    1454:	0f b6       	in	r0, 0x3f	; 63
    1456:	0f 92       	push	r0
    1458:	11 24       	eor	r1, r1
    145a:	2f 93       	push	r18
    145c:	3f 93       	push	r19
    145e:	4f 93       	push	r20
    1460:	5f 93       	push	r21
    1462:	6f 93       	push	r22
    1464:	7f 93       	push	r23
    1466:	8f 93       	push	r24
    1468:	9f 93       	push	r25
    146a:	af 93       	push	r26
    146c:	bf 93       	push	r27
    146e:	ef 93       	push	r30
    1470:	ff 93       	push	r31
    1472:	df 93       	push	r29
    1474:	cf 93       	push	r28
    1476:	cd b7       	in	r28, 0x3d	; 61
    1478:	de b7       	in	r29, 0x3e	; 62
	Timer0CTC_ISR();
    147a:	e0 91 86 01 	lds	r30, 0x0186
    147e:	f0 91 87 01 	lds	r31, 0x0187
    1482:	09 95       	icall
}
    1484:	cf 91       	pop	r28
    1486:	df 91       	pop	r29
    1488:	ff 91       	pop	r31
    148a:	ef 91       	pop	r30
    148c:	bf 91       	pop	r27
    148e:	af 91       	pop	r26
    1490:	9f 91       	pop	r25
    1492:	8f 91       	pop	r24
    1494:	7f 91       	pop	r23
    1496:	6f 91       	pop	r22
    1498:	5f 91       	pop	r21
    149a:	4f 91       	pop	r20
    149c:	3f 91       	pop	r19
    149e:	2f 91       	pop	r18
    14a0:	0f 90       	pop	r0
    14a2:	0f be       	out	0x3f, r0	; 63
    14a4:	0f 90       	pop	r0
    14a6:	1f 90       	pop	r1
    14a8:	18 95       	reti

000014aa <Timer0CTC_CallBack>:

void Timer0CTC_CallBack(void (*PF_Timer0CTC)(void))
{
    14aa:	df 93       	push	r29
    14ac:	cf 93       	push	r28
    14ae:	00 d0       	rcall	.+0      	; 0x14b0 <Timer0CTC_CallBack+0x6>
    14b0:	cd b7       	in	r28, 0x3d	; 61
    14b2:	de b7       	in	r29, 0x3e	; 62
    14b4:	9a 83       	std	Y+2, r25	; 0x02
    14b6:	89 83       	std	Y+1, r24	; 0x01
	Timer0CTC_ISR=PF_Timer0CTC;
    14b8:	89 81       	ldd	r24, Y+1	; 0x01
    14ba:	9a 81       	ldd	r25, Y+2	; 0x02
    14bc:	90 93 87 01 	sts	0x0187, r25
    14c0:	80 93 86 01 	sts	0x0186, r24
}
    14c4:	0f 90       	pop	r0
    14c6:	0f 90       	pop	r0
    14c8:	cf 91       	pop	r28
    14ca:	df 91       	pop	r29
    14cc:	08 95       	ret

000014ce <GIE_Enable>:

#include "GIE_int.h"
#include "GIE_priv.h"

void GIE_Enable (void)
{
    14ce:	df 93       	push	r29
    14d0:	cf 93       	push	r28
    14d2:	cd b7       	in	r28, 0x3d	; 61
    14d4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,GIE);
    14d6:	af e5       	ldi	r26, 0x5F	; 95
    14d8:	b0 e0       	ldi	r27, 0x00	; 0
    14da:	ef e5       	ldi	r30, 0x5F	; 95
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 81       	ld	r24, Z
    14e0:	80 68       	ori	r24, 0x80	; 128
    14e2:	8c 93       	st	X, r24
}
    14e4:	cf 91       	pop	r28
    14e6:	df 91       	pop	r29
    14e8:	08 95       	ret

000014ea <GIE_Disable>:

void GIE_Disable(void)
{
    14ea:	df 93       	push	r29
    14ec:	cf 93       	push	r28
    14ee:	cd b7       	in	r28, 0x3d	; 61
    14f0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,GIE);
    14f2:	af e5       	ldi	r26, 0x5F	; 95
    14f4:	b0 e0       	ldi	r27, 0x00	; 0
    14f6:	ef e5       	ldi	r30, 0x5F	; 95
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	80 81       	ld	r24, Z
    14fc:	8f 77       	andi	r24, 0x7F	; 127
    14fe:	8c 93       	st	X, r24
}
    1500:	cf 91       	pop	r28
    1502:	df 91       	pop	r29
    1504:	08 95       	ret

00001506 <EXT_INT_voidInitialization>:
#include "EXT_INT_int.h"
#include "EXT_INT_priv.h"


void EXT_INT_voidInitialization(void)
{
    1506:	df 93       	push	r29
    1508:	cf 93       	push	r28
    150a:	cd b7       	in	r28, 0x3d	; 61
    150c:	de b7       	in	r29, 0x3e	; 62
		CLR_BIT(GICR,INTE1);
		SET_BIT(GIFR,INTF1);
	#endif

	#ifdef EXTI1_Falling_Edge
		CLR_BIT(MCUCR,MCUCR_ISC10);
    150e:	a5 e5       	ldi	r26, 0x55	; 85
    1510:	b0 e0       	ldi	r27, 0x00	; 0
    1512:	e5 e5       	ldi	r30, 0x55	; 85
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	80 81       	ld	r24, Z
    1518:	8b 7f       	andi	r24, 0xFB	; 251
    151a:	8c 93       	st	X, r24
		SET_BIT(MCUCR,MCUCR_ISC11);
    151c:	a5 e5       	ldi	r26, 0x55	; 85
    151e:	b0 e0       	ldi	r27, 0x00	; 0
    1520:	e5 e5       	ldi	r30, 0x55	; 85
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 81       	ld	r24, Z
    1526:	88 60       	ori	r24, 0x08	; 8
    1528:	8c 93       	st	X, r24

		CLR_BIT(GICR,INTE1);
    152a:	ab e5       	ldi	r26, 0x5B	; 91
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	eb e5       	ldi	r30, 0x5B	; 91
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	80 81       	ld	r24, Z
    1534:	8f 77       	andi	r24, 0x7F	; 127
    1536:	8c 93       	st	X, r24
		SET_BIT(GIFR,INTF1);
    1538:	aa e5       	ldi	r26, 0x5A	; 90
    153a:	b0 e0       	ldi	r27, 0x00	; 0
    153c:	ea e5       	ldi	r30, 0x5A	; 90
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	80 81       	ld	r24, Z
    1542:	80 68       	ori	r24, 0x80	; 128
    1544:	8c 93       	st	X, r24
		CLR_BIT(GICR,INTE2);
		SET_BIT(GIFR,INTF2);
	#endif
#endif

}
    1546:	cf 91       	pop	r28
    1548:	df 91       	pop	r29
    154a:	08 95       	ret

0000154c <EXTI1_Enable>:
}
#endif

#ifdef EXTI1
void EXTI1_Enable(void)
{
    154c:	df 93       	push	r29
    154e:	cf 93       	push	r28
    1550:	cd b7       	in	r28, 0x3d	; 61
    1552:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR,INTE1);
    1554:	ab e5       	ldi	r26, 0x5B	; 91
    1556:	b0 e0       	ldi	r27, 0x00	; 0
    1558:	eb e5       	ldi	r30, 0x5B	; 91
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	80 81       	ld	r24, Z
    155e:	80 68       	ori	r24, 0x80	; 128
    1560:	8c 93       	st	X, r24
}
    1562:	cf 91       	pop	r28
    1564:	df 91       	pop	r29
    1566:	08 95       	ret

00001568 <EXTI1_Disable>:

void EXTI1_Disable(void)
{
    1568:	df 93       	push	r29
    156a:	cf 93       	push	r28
    156c:	cd b7       	in	r28, 0x3d	; 61
    156e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GICR,INTE1);
    1570:	ab e5       	ldi	r26, 0x5B	; 91
    1572:	b0 e0       	ldi	r27, 0x00	; 0
    1574:	eb e5       	ldi	r30, 0x5B	; 91
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	80 81       	ld	r24, Z
    157a:	8f 77       	andi	r24, 0x7F	; 127
    157c:	8c 93       	st	X, r24
}
    157e:	cf 91       	pop	r28
    1580:	df 91       	pop	r29
    1582:	08 95       	ret

00001584 <__vector_2>:
#endif


void (*EXTI1_ISR)(void)=NULL;
void __vector_2(void)
{
    1584:	1f 92       	push	r1
    1586:	0f 92       	push	r0
    1588:	0f b6       	in	r0, 0x3f	; 63
    158a:	0f 92       	push	r0
    158c:	11 24       	eor	r1, r1
    158e:	2f 93       	push	r18
    1590:	3f 93       	push	r19
    1592:	4f 93       	push	r20
    1594:	5f 93       	push	r21
    1596:	6f 93       	push	r22
    1598:	7f 93       	push	r23
    159a:	8f 93       	push	r24
    159c:	9f 93       	push	r25
    159e:	af 93       	push	r26
    15a0:	bf 93       	push	r27
    15a2:	ef 93       	push	r30
    15a4:	ff 93       	push	r31
    15a6:	df 93       	push	r29
    15a8:	cf 93       	push	r28
    15aa:	cd b7       	in	r28, 0x3d	; 61
    15ac:	de b7       	in	r29, 0x3e	; 62
	EXTI1_ISR();
    15ae:	e0 91 88 01 	lds	r30, 0x0188
    15b2:	f0 91 89 01 	lds	r31, 0x0189
    15b6:	09 95       	icall
}
    15b8:	cf 91       	pop	r28
    15ba:	df 91       	pop	r29
    15bc:	ff 91       	pop	r31
    15be:	ef 91       	pop	r30
    15c0:	bf 91       	pop	r27
    15c2:	af 91       	pop	r26
    15c4:	9f 91       	pop	r25
    15c6:	8f 91       	pop	r24
    15c8:	7f 91       	pop	r23
    15ca:	6f 91       	pop	r22
    15cc:	5f 91       	pop	r21
    15ce:	4f 91       	pop	r20
    15d0:	3f 91       	pop	r19
    15d2:	2f 91       	pop	r18
    15d4:	0f 90       	pop	r0
    15d6:	0f be       	out	0x3f, r0	; 63
    15d8:	0f 90       	pop	r0
    15da:	1f 90       	pop	r1
    15dc:	18 95       	reti

000015de <EXTI1_CallBack>:
void EXTI1_CallBack(void (*PF_EXTI1)(void))
{
    15de:	df 93       	push	r29
    15e0:	cf 93       	push	r28
    15e2:	00 d0       	rcall	.+0      	; 0x15e4 <EXTI1_CallBack+0x6>
    15e4:	cd b7       	in	r28, 0x3d	; 61
    15e6:	de b7       	in	r29, 0x3e	; 62
    15e8:	9a 83       	std	Y+2, r25	; 0x02
    15ea:	89 83       	std	Y+1, r24	; 0x01
	EXTI1_ISR=PF_EXTI1;
    15ec:	89 81       	ldd	r24, Y+1	; 0x01
    15ee:	9a 81       	ldd	r25, Y+2	; 0x02
    15f0:	90 93 89 01 	sts	0x0189, r25
    15f4:	80 93 88 01 	sts	0x0188, r24
}
    15f8:	0f 90       	pop	r0
    15fa:	0f 90       	pop	r0
    15fc:	cf 91       	pop	r28
    15fe:	df 91       	pop	r29
    1600:	08 95       	ret

00001602 <DIO_voidInitialization>:
#include "DIO_int.h"
#include "DIO_priv.h"
#include "DIO_reg.h"

void DIO_voidInitialization (void)
{
    1602:	df 93       	push	r29
    1604:	cf 93       	push	r28
    1606:	cd b7       	in	r28, 0x3d	; 61
    1608:	de b7       	in	r29, 0x3e	; 62
//	DIO_voidSetPinDirection(PortB,Pin5,Output);
//	DIO_voidSetPinValue(PortB,Pin5,High);

/***** Timer1 OC1 Pin*****/
//	// OC1A Pin
	DIO_voidSetPinDirection(PortD,Pin5,Output);
    160a:	83 e0       	ldi	r24, 0x03	; 3
    160c:	65 e0       	ldi	r22, 0x05	; 5
    160e:	41 e0       	ldi	r20, 0x01	; 1
    1610:	0e 94 17 0b 	call	0x162e	; 0x162e <DIO_voidSetPinDirection>

	DIO_voidSetPinDirection(PortB,Pin3,Output);
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	63 e0       	ldi	r22, 0x03	; 3
    1618:	41 e0       	ldi	r20, 0x01	; 1
    161a:	0e 94 17 0b 	call	0x162e	; 0x162e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PortD,Pin6,Input);
    161e:	83 e0       	ldi	r24, 0x03	; 3
    1620:	66 e0       	ldi	r22, 0x06	; 6
    1622:	40 e0       	ldi	r20, 0x00	; 0
    1624:	0e 94 17 0b 	call	0x162e	; 0x162e <DIO_voidSetPinDirection>
}
    1628:	cf 91       	pop	r28
    162a:	df 91       	pop	r29
    162c:	08 95       	ret

0000162e <DIO_voidSetPinDirection>:

void 	DIO_voidSetPinDirection (u8 PortId,u8 PinId,u8 Direction)
{
    162e:	df 93       	push	r29
    1630:	cf 93       	push	r28
    1632:	cd b7       	in	r28, 0x3d	; 61
    1634:	de b7       	in	r29, 0x3e	; 62
    1636:	27 97       	sbiw	r28, 0x07	; 7
    1638:	0f b6       	in	r0, 0x3f	; 63
    163a:	f8 94       	cli
    163c:	de bf       	out	0x3e, r29	; 62
    163e:	0f be       	out	0x3f, r0	; 63
    1640:	cd bf       	out	0x3d, r28	; 61
    1642:	89 83       	std	Y+1, r24	; 0x01
    1644:	6a 83       	std	Y+2, r22	; 0x02
    1646:	4b 83       	std	Y+3, r20	; 0x03
	if(Direction==Output)
    1648:	8b 81       	ldd	r24, Y+3	; 0x03
    164a:	81 30       	cpi	r24, 0x01	; 1
    164c:	09 f0       	breq	.+2      	; 0x1650 <DIO_voidSetPinDirection+0x22>
    164e:	6f c0       	rjmp	.+222    	; 0x172e <DIO_voidSetPinDirection+0x100>
	{
		switch(PortId)
    1650:	89 81       	ldd	r24, Y+1	; 0x01
    1652:	28 2f       	mov	r18, r24
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	3f 83       	std	Y+7, r19	; 0x07
    1658:	2e 83       	std	Y+6, r18	; 0x06
    165a:	8e 81       	ldd	r24, Y+6	; 0x06
    165c:	9f 81       	ldd	r25, Y+7	; 0x07
    165e:	81 30       	cpi	r24, 0x01	; 1
    1660:	91 05       	cpc	r25, r1
    1662:	49 f1       	breq	.+82     	; 0x16b6 <DIO_voidSetPinDirection+0x88>
    1664:	2e 81       	ldd	r18, Y+6	; 0x06
    1666:	3f 81       	ldd	r19, Y+7	; 0x07
    1668:	22 30       	cpi	r18, 0x02	; 2
    166a:	31 05       	cpc	r19, r1
    166c:	2c f4       	brge	.+10     	; 0x1678 <DIO_voidSetPinDirection+0x4a>
    166e:	8e 81       	ldd	r24, Y+6	; 0x06
    1670:	9f 81       	ldd	r25, Y+7	; 0x07
    1672:	00 97       	sbiw	r24, 0x00	; 0
    1674:	61 f0       	breq	.+24     	; 0x168e <DIO_voidSetPinDirection+0x60>
    1676:	ce c0       	rjmp	.+412    	; 0x1814 <DIO_voidSetPinDirection+0x1e6>
    1678:	2e 81       	ldd	r18, Y+6	; 0x06
    167a:	3f 81       	ldd	r19, Y+7	; 0x07
    167c:	22 30       	cpi	r18, 0x02	; 2
    167e:	31 05       	cpc	r19, r1
    1680:	71 f1       	breq	.+92     	; 0x16de <DIO_voidSetPinDirection+0xb0>
    1682:	8e 81       	ldd	r24, Y+6	; 0x06
    1684:	9f 81       	ldd	r25, Y+7	; 0x07
    1686:	83 30       	cpi	r24, 0x03	; 3
    1688:	91 05       	cpc	r25, r1
    168a:	e9 f1       	breq	.+122    	; 0x1706 <DIO_voidSetPinDirection+0xd8>
    168c:	c3 c0       	rjmp	.+390    	; 0x1814 <DIO_voidSetPinDirection+0x1e6>
		{
			case 0: SET_BIT(DDRA,PinId); break;
    168e:	aa e3       	ldi	r26, 0x3A	; 58
    1690:	b0 e0       	ldi	r27, 0x00	; 0
    1692:	ea e3       	ldi	r30, 0x3A	; 58
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	80 81       	ld	r24, Z
    1698:	48 2f       	mov	r20, r24
    169a:	8a 81       	ldd	r24, Y+2	; 0x02
    169c:	28 2f       	mov	r18, r24
    169e:	30 e0       	ldi	r19, 0x00	; 0
    16a0:	81 e0       	ldi	r24, 0x01	; 1
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	02 2e       	mov	r0, r18
    16a6:	02 c0       	rjmp	.+4      	; 0x16ac <DIO_voidSetPinDirection+0x7e>
    16a8:	88 0f       	add	r24, r24
    16aa:	99 1f       	adc	r25, r25
    16ac:	0a 94       	dec	r0
    16ae:	e2 f7       	brpl	.-8      	; 0x16a8 <DIO_voidSetPinDirection+0x7a>
    16b0:	84 2b       	or	r24, r20
    16b2:	8c 93       	st	X, r24
    16b4:	af c0       	rjmp	.+350    	; 0x1814 <DIO_voidSetPinDirection+0x1e6>
			case 1: SET_BIT(DDRB,PinId); break;
    16b6:	a7 e3       	ldi	r26, 0x37	; 55
    16b8:	b0 e0       	ldi	r27, 0x00	; 0
    16ba:	e7 e3       	ldi	r30, 0x37	; 55
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
    16be:	80 81       	ld	r24, Z
    16c0:	48 2f       	mov	r20, r24
    16c2:	8a 81       	ldd	r24, Y+2	; 0x02
    16c4:	28 2f       	mov	r18, r24
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	81 e0       	ldi	r24, 0x01	; 1
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	02 2e       	mov	r0, r18
    16ce:	02 c0       	rjmp	.+4      	; 0x16d4 <DIO_voidSetPinDirection+0xa6>
    16d0:	88 0f       	add	r24, r24
    16d2:	99 1f       	adc	r25, r25
    16d4:	0a 94       	dec	r0
    16d6:	e2 f7       	brpl	.-8      	; 0x16d0 <DIO_voidSetPinDirection+0xa2>
    16d8:	84 2b       	or	r24, r20
    16da:	8c 93       	st	X, r24
    16dc:	9b c0       	rjmp	.+310    	; 0x1814 <DIO_voidSetPinDirection+0x1e6>
			case 2: SET_BIT(DDRC,PinId); break;
    16de:	a4 e3       	ldi	r26, 0x34	; 52
    16e0:	b0 e0       	ldi	r27, 0x00	; 0
    16e2:	e4 e3       	ldi	r30, 0x34	; 52
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	80 81       	ld	r24, Z
    16e8:	48 2f       	mov	r20, r24
    16ea:	8a 81       	ldd	r24, Y+2	; 0x02
    16ec:	28 2f       	mov	r18, r24
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	81 e0       	ldi	r24, 0x01	; 1
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	02 2e       	mov	r0, r18
    16f6:	02 c0       	rjmp	.+4      	; 0x16fc <DIO_voidSetPinDirection+0xce>
    16f8:	88 0f       	add	r24, r24
    16fa:	99 1f       	adc	r25, r25
    16fc:	0a 94       	dec	r0
    16fe:	e2 f7       	brpl	.-8      	; 0x16f8 <DIO_voidSetPinDirection+0xca>
    1700:	84 2b       	or	r24, r20
    1702:	8c 93       	st	X, r24
    1704:	87 c0       	rjmp	.+270    	; 0x1814 <DIO_voidSetPinDirection+0x1e6>
			case 3: SET_BIT(DDRD,PinId); break;
    1706:	a1 e3       	ldi	r26, 0x31	; 49
    1708:	b0 e0       	ldi	r27, 0x00	; 0
    170a:	e1 e3       	ldi	r30, 0x31	; 49
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	80 81       	ld	r24, Z
    1710:	48 2f       	mov	r20, r24
    1712:	8a 81       	ldd	r24, Y+2	; 0x02
    1714:	28 2f       	mov	r18, r24
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	81 e0       	ldi	r24, 0x01	; 1
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	02 2e       	mov	r0, r18
    171e:	02 c0       	rjmp	.+4      	; 0x1724 <DIO_voidSetPinDirection+0xf6>
    1720:	88 0f       	add	r24, r24
    1722:	99 1f       	adc	r25, r25
    1724:	0a 94       	dec	r0
    1726:	e2 f7       	brpl	.-8      	; 0x1720 <DIO_voidSetPinDirection+0xf2>
    1728:	84 2b       	or	r24, r20
    172a:	8c 93       	st	X, r24
    172c:	73 c0       	rjmp	.+230    	; 0x1814 <DIO_voidSetPinDirection+0x1e6>
		}
	}
	else
	{
		switch(PortId)
    172e:	89 81       	ldd	r24, Y+1	; 0x01
    1730:	28 2f       	mov	r18, r24
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	3d 83       	std	Y+5, r19	; 0x05
    1736:	2c 83       	std	Y+4, r18	; 0x04
    1738:	8c 81       	ldd	r24, Y+4	; 0x04
    173a:	9d 81       	ldd	r25, Y+5	; 0x05
    173c:	81 30       	cpi	r24, 0x01	; 1
    173e:	91 05       	cpc	r25, r1
    1740:	59 f1       	breq	.+86     	; 0x1798 <DIO_voidSetPinDirection+0x16a>
    1742:	2c 81       	ldd	r18, Y+4	; 0x04
    1744:	3d 81       	ldd	r19, Y+5	; 0x05
    1746:	22 30       	cpi	r18, 0x02	; 2
    1748:	31 05       	cpc	r19, r1
    174a:	2c f4       	brge	.+10     	; 0x1756 <DIO_voidSetPinDirection+0x128>
    174c:	8c 81       	ldd	r24, Y+4	; 0x04
    174e:	9d 81       	ldd	r25, Y+5	; 0x05
    1750:	00 97       	sbiw	r24, 0x00	; 0
    1752:	69 f0       	breq	.+26     	; 0x176e <DIO_voidSetPinDirection+0x140>
    1754:	5f c0       	rjmp	.+190    	; 0x1814 <DIO_voidSetPinDirection+0x1e6>
    1756:	2c 81       	ldd	r18, Y+4	; 0x04
    1758:	3d 81       	ldd	r19, Y+5	; 0x05
    175a:	22 30       	cpi	r18, 0x02	; 2
    175c:	31 05       	cpc	r19, r1
    175e:	89 f1       	breq	.+98     	; 0x17c2 <DIO_voidSetPinDirection+0x194>
    1760:	8c 81       	ldd	r24, Y+4	; 0x04
    1762:	9d 81       	ldd	r25, Y+5	; 0x05
    1764:	83 30       	cpi	r24, 0x03	; 3
    1766:	91 05       	cpc	r25, r1
    1768:	09 f4       	brne	.+2      	; 0x176c <DIO_voidSetPinDirection+0x13e>
    176a:	40 c0       	rjmp	.+128    	; 0x17ec <DIO_voidSetPinDirection+0x1be>
    176c:	53 c0       	rjmp	.+166    	; 0x1814 <DIO_voidSetPinDirection+0x1e6>
		{
			case 0: CLR_BIT(DDRA,PinId); break;
    176e:	aa e3       	ldi	r26, 0x3A	; 58
    1770:	b0 e0       	ldi	r27, 0x00	; 0
    1772:	ea e3       	ldi	r30, 0x3A	; 58
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	80 81       	ld	r24, Z
    1778:	48 2f       	mov	r20, r24
    177a:	8a 81       	ldd	r24, Y+2	; 0x02
    177c:	28 2f       	mov	r18, r24
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	81 e0       	ldi	r24, 0x01	; 1
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	02 2e       	mov	r0, r18
    1786:	02 c0       	rjmp	.+4      	; 0x178c <DIO_voidSetPinDirection+0x15e>
    1788:	88 0f       	add	r24, r24
    178a:	99 1f       	adc	r25, r25
    178c:	0a 94       	dec	r0
    178e:	e2 f7       	brpl	.-8      	; 0x1788 <DIO_voidSetPinDirection+0x15a>
    1790:	80 95       	com	r24
    1792:	84 23       	and	r24, r20
    1794:	8c 93       	st	X, r24
    1796:	3e c0       	rjmp	.+124    	; 0x1814 <DIO_voidSetPinDirection+0x1e6>
			case 1: CLR_BIT(DDRB,PinId); break;
    1798:	a7 e3       	ldi	r26, 0x37	; 55
    179a:	b0 e0       	ldi	r27, 0x00	; 0
    179c:	e7 e3       	ldi	r30, 0x37	; 55
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	80 81       	ld	r24, Z
    17a2:	48 2f       	mov	r20, r24
    17a4:	8a 81       	ldd	r24, Y+2	; 0x02
    17a6:	28 2f       	mov	r18, r24
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	81 e0       	ldi	r24, 0x01	; 1
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	02 2e       	mov	r0, r18
    17b0:	02 c0       	rjmp	.+4      	; 0x17b6 <DIO_voidSetPinDirection+0x188>
    17b2:	88 0f       	add	r24, r24
    17b4:	99 1f       	adc	r25, r25
    17b6:	0a 94       	dec	r0
    17b8:	e2 f7       	brpl	.-8      	; 0x17b2 <DIO_voidSetPinDirection+0x184>
    17ba:	80 95       	com	r24
    17bc:	84 23       	and	r24, r20
    17be:	8c 93       	st	X, r24
    17c0:	29 c0       	rjmp	.+82     	; 0x1814 <DIO_voidSetPinDirection+0x1e6>
			case 2: CLR_BIT(DDRC,PinId); break;
    17c2:	a4 e3       	ldi	r26, 0x34	; 52
    17c4:	b0 e0       	ldi	r27, 0x00	; 0
    17c6:	e4 e3       	ldi	r30, 0x34	; 52
    17c8:	f0 e0       	ldi	r31, 0x00	; 0
    17ca:	80 81       	ld	r24, Z
    17cc:	48 2f       	mov	r20, r24
    17ce:	8a 81       	ldd	r24, Y+2	; 0x02
    17d0:	28 2f       	mov	r18, r24
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	81 e0       	ldi	r24, 0x01	; 1
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	02 2e       	mov	r0, r18
    17da:	02 c0       	rjmp	.+4      	; 0x17e0 <DIO_voidSetPinDirection+0x1b2>
    17dc:	88 0f       	add	r24, r24
    17de:	99 1f       	adc	r25, r25
    17e0:	0a 94       	dec	r0
    17e2:	e2 f7       	brpl	.-8      	; 0x17dc <DIO_voidSetPinDirection+0x1ae>
    17e4:	80 95       	com	r24
    17e6:	84 23       	and	r24, r20
    17e8:	8c 93       	st	X, r24
    17ea:	14 c0       	rjmp	.+40     	; 0x1814 <DIO_voidSetPinDirection+0x1e6>
			case 3: CLR_BIT(DDRD,PinId); break;
    17ec:	a1 e3       	ldi	r26, 0x31	; 49
    17ee:	b0 e0       	ldi	r27, 0x00	; 0
    17f0:	e1 e3       	ldi	r30, 0x31	; 49
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	80 81       	ld	r24, Z
    17f6:	48 2f       	mov	r20, r24
    17f8:	8a 81       	ldd	r24, Y+2	; 0x02
    17fa:	28 2f       	mov	r18, r24
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	81 e0       	ldi	r24, 0x01	; 1
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	02 2e       	mov	r0, r18
    1804:	02 c0       	rjmp	.+4      	; 0x180a <DIO_voidSetPinDirection+0x1dc>
    1806:	88 0f       	add	r24, r24
    1808:	99 1f       	adc	r25, r25
    180a:	0a 94       	dec	r0
    180c:	e2 f7       	brpl	.-8      	; 0x1806 <DIO_voidSetPinDirection+0x1d8>
    180e:	80 95       	com	r24
    1810:	84 23       	and	r24, r20
    1812:	8c 93       	st	X, r24
		}
	}
}
    1814:	27 96       	adiw	r28, 0x07	; 7
    1816:	0f b6       	in	r0, 0x3f	; 63
    1818:	f8 94       	cli
    181a:	de bf       	out	0x3e, r29	; 62
    181c:	0f be       	out	0x3f, r0	; 63
    181e:	cd bf       	out	0x3d, r28	; 61
    1820:	cf 91       	pop	r28
    1822:	df 91       	pop	r29
    1824:	08 95       	ret

00001826 <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(u8 PortId,u8 PinId,u8 Value)
{
    1826:	df 93       	push	r29
    1828:	cf 93       	push	r28
    182a:	cd b7       	in	r28, 0x3d	; 61
    182c:	de b7       	in	r29, 0x3e	; 62
    182e:	27 97       	sbiw	r28, 0x07	; 7
    1830:	0f b6       	in	r0, 0x3f	; 63
    1832:	f8 94       	cli
    1834:	de bf       	out	0x3e, r29	; 62
    1836:	0f be       	out	0x3f, r0	; 63
    1838:	cd bf       	out	0x3d, r28	; 61
    183a:	89 83       	std	Y+1, r24	; 0x01
    183c:	6a 83       	std	Y+2, r22	; 0x02
    183e:	4b 83       	std	Y+3, r20	; 0x03
	if(Value==High)
    1840:	8b 81       	ldd	r24, Y+3	; 0x03
    1842:	81 30       	cpi	r24, 0x01	; 1
    1844:	09 f0       	breq	.+2      	; 0x1848 <DIO_voidSetPinValue+0x22>
    1846:	6f c0       	rjmp	.+222    	; 0x1926 <DIO_voidSetPinValue+0x100>
	{
		switch(PortId)
    1848:	89 81       	ldd	r24, Y+1	; 0x01
    184a:	28 2f       	mov	r18, r24
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	3f 83       	std	Y+7, r19	; 0x07
    1850:	2e 83       	std	Y+6, r18	; 0x06
    1852:	8e 81       	ldd	r24, Y+6	; 0x06
    1854:	9f 81       	ldd	r25, Y+7	; 0x07
    1856:	81 30       	cpi	r24, 0x01	; 1
    1858:	91 05       	cpc	r25, r1
    185a:	49 f1       	breq	.+82     	; 0x18ae <DIO_voidSetPinValue+0x88>
    185c:	2e 81       	ldd	r18, Y+6	; 0x06
    185e:	3f 81       	ldd	r19, Y+7	; 0x07
    1860:	22 30       	cpi	r18, 0x02	; 2
    1862:	31 05       	cpc	r19, r1
    1864:	2c f4       	brge	.+10     	; 0x1870 <DIO_voidSetPinValue+0x4a>
    1866:	8e 81       	ldd	r24, Y+6	; 0x06
    1868:	9f 81       	ldd	r25, Y+7	; 0x07
    186a:	00 97       	sbiw	r24, 0x00	; 0
    186c:	61 f0       	breq	.+24     	; 0x1886 <DIO_voidSetPinValue+0x60>
    186e:	ce c0       	rjmp	.+412    	; 0x1a0c <DIO_voidSetPinValue+0x1e6>
    1870:	2e 81       	ldd	r18, Y+6	; 0x06
    1872:	3f 81       	ldd	r19, Y+7	; 0x07
    1874:	22 30       	cpi	r18, 0x02	; 2
    1876:	31 05       	cpc	r19, r1
    1878:	71 f1       	breq	.+92     	; 0x18d6 <DIO_voidSetPinValue+0xb0>
    187a:	8e 81       	ldd	r24, Y+6	; 0x06
    187c:	9f 81       	ldd	r25, Y+7	; 0x07
    187e:	83 30       	cpi	r24, 0x03	; 3
    1880:	91 05       	cpc	r25, r1
    1882:	e9 f1       	breq	.+122    	; 0x18fe <DIO_voidSetPinValue+0xd8>
    1884:	c3 c0       	rjmp	.+390    	; 0x1a0c <DIO_voidSetPinValue+0x1e6>
		{
			case 0: SET_BIT(PORTA,PinId); break;
    1886:	ab e3       	ldi	r26, 0x3B	; 59
    1888:	b0 e0       	ldi	r27, 0x00	; 0
    188a:	eb e3       	ldi	r30, 0x3B	; 59
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	80 81       	ld	r24, Z
    1890:	48 2f       	mov	r20, r24
    1892:	8a 81       	ldd	r24, Y+2	; 0x02
    1894:	28 2f       	mov	r18, r24
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	81 e0       	ldi	r24, 0x01	; 1
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	02 2e       	mov	r0, r18
    189e:	02 c0       	rjmp	.+4      	; 0x18a4 <DIO_voidSetPinValue+0x7e>
    18a0:	88 0f       	add	r24, r24
    18a2:	99 1f       	adc	r25, r25
    18a4:	0a 94       	dec	r0
    18a6:	e2 f7       	brpl	.-8      	; 0x18a0 <DIO_voidSetPinValue+0x7a>
    18a8:	84 2b       	or	r24, r20
    18aa:	8c 93       	st	X, r24
    18ac:	af c0       	rjmp	.+350    	; 0x1a0c <DIO_voidSetPinValue+0x1e6>
			case 1: SET_BIT(PORTB,PinId); break;
    18ae:	a8 e3       	ldi	r26, 0x38	; 56
    18b0:	b0 e0       	ldi	r27, 0x00	; 0
    18b2:	e8 e3       	ldi	r30, 0x38	; 56
    18b4:	f0 e0       	ldi	r31, 0x00	; 0
    18b6:	80 81       	ld	r24, Z
    18b8:	48 2f       	mov	r20, r24
    18ba:	8a 81       	ldd	r24, Y+2	; 0x02
    18bc:	28 2f       	mov	r18, r24
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	81 e0       	ldi	r24, 0x01	; 1
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	02 2e       	mov	r0, r18
    18c6:	02 c0       	rjmp	.+4      	; 0x18cc <DIO_voidSetPinValue+0xa6>
    18c8:	88 0f       	add	r24, r24
    18ca:	99 1f       	adc	r25, r25
    18cc:	0a 94       	dec	r0
    18ce:	e2 f7       	brpl	.-8      	; 0x18c8 <DIO_voidSetPinValue+0xa2>
    18d0:	84 2b       	or	r24, r20
    18d2:	8c 93       	st	X, r24
    18d4:	9b c0       	rjmp	.+310    	; 0x1a0c <DIO_voidSetPinValue+0x1e6>
			case 2: SET_BIT(PORTC,PinId); break;
    18d6:	a5 e3       	ldi	r26, 0x35	; 53
    18d8:	b0 e0       	ldi	r27, 0x00	; 0
    18da:	e5 e3       	ldi	r30, 0x35	; 53
    18dc:	f0 e0       	ldi	r31, 0x00	; 0
    18de:	80 81       	ld	r24, Z
    18e0:	48 2f       	mov	r20, r24
    18e2:	8a 81       	ldd	r24, Y+2	; 0x02
    18e4:	28 2f       	mov	r18, r24
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	81 e0       	ldi	r24, 0x01	; 1
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	02 2e       	mov	r0, r18
    18ee:	02 c0       	rjmp	.+4      	; 0x18f4 <DIO_voidSetPinValue+0xce>
    18f0:	88 0f       	add	r24, r24
    18f2:	99 1f       	adc	r25, r25
    18f4:	0a 94       	dec	r0
    18f6:	e2 f7       	brpl	.-8      	; 0x18f0 <DIO_voidSetPinValue+0xca>
    18f8:	84 2b       	or	r24, r20
    18fa:	8c 93       	st	X, r24
    18fc:	87 c0       	rjmp	.+270    	; 0x1a0c <DIO_voidSetPinValue+0x1e6>
			case 3: SET_BIT(PORTD,PinId); break;
    18fe:	a2 e3       	ldi	r26, 0x32	; 50
    1900:	b0 e0       	ldi	r27, 0x00	; 0
    1902:	e2 e3       	ldi	r30, 0x32	; 50
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	80 81       	ld	r24, Z
    1908:	48 2f       	mov	r20, r24
    190a:	8a 81       	ldd	r24, Y+2	; 0x02
    190c:	28 2f       	mov	r18, r24
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	81 e0       	ldi	r24, 0x01	; 1
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	02 2e       	mov	r0, r18
    1916:	02 c0       	rjmp	.+4      	; 0x191c <DIO_voidSetPinValue+0xf6>
    1918:	88 0f       	add	r24, r24
    191a:	99 1f       	adc	r25, r25
    191c:	0a 94       	dec	r0
    191e:	e2 f7       	brpl	.-8      	; 0x1918 <DIO_voidSetPinValue+0xf2>
    1920:	84 2b       	or	r24, r20
    1922:	8c 93       	st	X, r24
    1924:	73 c0       	rjmp	.+230    	; 0x1a0c <DIO_voidSetPinValue+0x1e6>
		}
	}
	else
	{
		switch(PortId)
    1926:	89 81       	ldd	r24, Y+1	; 0x01
    1928:	28 2f       	mov	r18, r24
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	3d 83       	std	Y+5, r19	; 0x05
    192e:	2c 83       	std	Y+4, r18	; 0x04
    1930:	8c 81       	ldd	r24, Y+4	; 0x04
    1932:	9d 81       	ldd	r25, Y+5	; 0x05
    1934:	81 30       	cpi	r24, 0x01	; 1
    1936:	91 05       	cpc	r25, r1
    1938:	59 f1       	breq	.+86     	; 0x1990 <DIO_voidSetPinValue+0x16a>
    193a:	2c 81       	ldd	r18, Y+4	; 0x04
    193c:	3d 81       	ldd	r19, Y+5	; 0x05
    193e:	22 30       	cpi	r18, 0x02	; 2
    1940:	31 05       	cpc	r19, r1
    1942:	2c f4       	brge	.+10     	; 0x194e <DIO_voidSetPinValue+0x128>
    1944:	8c 81       	ldd	r24, Y+4	; 0x04
    1946:	9d 81       	ldd	r25, Y+5	; 0x05
    1948:	00 97       	sbiw	r24, 0x00	; 0
    194a:	69 f0       	breq	.+26     	; 0x1966 <DIO_voidSetPinValue+0x140>
    194c:	5f c0       	rjmp	.+190    	; 0x1a0c <DIO_voidSetPinValue+0x1e6>
    194e:	2c 81       	ldd	r18, Y+4	; 0x04
    1950:	3d 81       	ldd	r19, Y+5	; 0x05
    1952:	22 30       	cpi	r18, 0x02	; 2
    1954:	31 05       	cpc	r19, r1
    1956:	89 f1       	breq	.+98     	; 0x19ba <DIO_voidSetPinValue+0x194>
    1958:	8c 81       	ldd	r24, Y+4	; 0x04
    195a:	9d 81       	ldd	r25, Y+5	; 0x05
    195c:	83 30       	cpi	r24, 0x03	; 3
    195e:	91 05       	cpc	r25, r1
    1960:	09 f4       	brne	.+2      	; 0x1964 <DIO_voidSetPinValue+0x13e>
    1962:	40 c0       	rjmp	.+128    	; 0x19e4 <DIO_voidSetPinValue+0x1be>
    1964:	53 c0       	rjmp	.+166    	; 0x1a0c <DIO_voidSetPinValue+0x1e6>
		{
			case 0: CLR_BIT(PORTA,PinId); break;
    1966:	ab e3       	ldi	r26, 0x3B	; 59
    1968:	b0 e0       	ldi	r27, 0x00	; 0
    196a:	eb e3       	ldi	r30, 0x3B	; 59
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	80 81       	ld	r24, Z
    1970:	48 2f       	mov	r20, r24
    1972:	8a 81       	ldd	r24, Y+2	; 0x02
    1974:	28 2f       	mov	r18, r24
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	81 e0       	ldi	r24, 0x01	; 1
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	02 2e       	mov	r0, r18
    197e:	02 c0       	rjmp	.+4      	; 0x1984 <DIO_voidSetPinValue+0x15e>
    1980:	88 0f       	add	r24, r24
    1982:	99 1f       	adc	r25, r25
    1984:	0a 94       	dec	r0
    1986:	e2 f7       	brpl	.-8      	; 0x1980 <DIO_voidSetPinValue+0x15a>
    1988:	80 95       	com	r24
    198a:	84 23       	and	r24, r20
    198c:	8c 93       	st	X, r24
    198e:	3e c0       	rjmp	.+124    	; 0x1a0c <DIO_voidSetPinValue+0x1e6>
			case 1: CLR_BIT(PORTB,PinId); break;
    1990:	a8 e3       	ldi	r26, 0x38	; 56
    1992:	b0 e0       	ldi	r27, 0x00	; 0
    1994:	e8 e3       	ldi	r30, 0x38	; 56
    1996:	f0 e0       	ldi	r31, 0x00	; 0
    1998:	80 81       	ld	r24, Z
    199a:	48 2f       	mov	r20, r24
    199c:	8a 81       	ldd	r24, Y+2	; 0x02
    199e:	28 2f       	mov	r18, r24
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	81 e0       	ldi	r24, 0x01	; 1
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	02 2e       	mov	r0, r18
    19a8:	02 c0       	rjmp	.+4      	; 0x19ae <DIO_voidSetPinValue+0x188>
    19aa:	88 0f       	add	r24, r24
    19ac:	99 1f       	adc	r25, r25
    19ae:	0a 94       	dec	r0
    19b0:	e2 f7       	brpl	.-8      	; 0x19aa <DIO_voidSetPinValue+0x184>
    19b2:	80 95       	com	r24
    19b4:	84 23       	and	r24, r20
    19b6:	8c 93       	st	X, r24
    19b8:	29 c0       	rjmp	.+82     	; 0x1a0c <DIO_voidSetPinValue+0x1e6>
			case 2: CLR_BIT(PORTC,PinId); break;
    19ba:	a5 e3       	ldi	r26, 0x35	; 53
    19bc:	b0 e0       	ldi	r27, 0x00	; 0
    19be:	e5 e3       	ldi	r30, 0x35	; 53
    19c0:	f0 e0       	ldi	r31, 0x00	; 0
    19c2:	80 81       	ld	r24, Z
    19c4:	48 2f       	mov	r20, r24
    19c6:	8a 81       	ldd	r24, Y+2	; 0x02
    19c8:	28 2f       	mov	r18, r24
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	02 2e       	mov	r0, r18
    19d2:	02 c0       	rjmp	.+4      	; 0x19d8 <DIO_voidSetPinValue+0x1b2>
    19d4:	88 0f       	add	r24, r24
    19d6:	99 1f       	adc	r25, r25
    19d8:	0a 94       	dec	r0
    19da:	e2 f7       	brpl	.-8      	; 0x19d4 <DIO_voidSetPinValue+0x1ae>
    19dc:	80 95       	com	r24
    19de:	84 23       	and	r24, r20
    19e0:	8c 93       	st	X, r24
    19e2:	14 c0       	rjmp	.+40     	; 0x1a0c <DIO_voidSetPinValue+0x1e6>
			case 3: CLR_BIT(PORTD,PinId); break;
    19e4:	a2 e3       	ldi	r26, 0x32	; 50
    19e6:	b0 e0       	ldi	r27, 0x00	; 0
    19e8:	e2 e3       	ldi	r30, 0x32	; 50
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	80 81       	ld	r24, Z
    19ee:	48 2f       	mov	r20, r24
    19f0:	8a 81       	ldd	r24, Y+2	; 0x02
    19f2:	28 2f       	mov	r18, r24
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	02 2e       	mov	r0, r18
    19fc:	02 c0       	rjmp	.+4      	; 0x1a02 <DIO_voidSetPinValue+0x1dc>
    19fe:	88 0f       	add	r24, r24
    1a00:	99 1f       	adc	r25, r25
    1a02:	0a 94       	dec	r0
    1a04:	e2 f7       	brpl	.-8      	; 0x19fe <DIO_voidSetPinValue+0x1d8>
    1a06:	80 95       	com	r24
    1a08:	84 23       	and	r24, r20
    1a0a:	8c 93       	st	X, r24
		}
	}
}
    1a0c:	27 96       	adiw	r28, 0x07	; 7
    1a0e:	0f b6       	in	r0, 0x3f	; 63
    1a10:	f8 94       	cli
    1a12:	de bf       	out	0x3e, r29	; 62
    1a14:	0f be       	out	0x3f, r0	; 63
    1a16:	cd bf       	out	0x3d, r28	; 61
    1a18:	cf 91       	pop	r28
    1a1a:	df 91       	pop	r29
    1a1c:	08 95       	ret

00001a1e <DIO_voidTogglePin>:

void DIO_voidTogglePin (u8 PortId,u8 PinId)
{
    1a1e:	df 93       	push	r29
    1a20:	cf 93       	push	r28
    1a22:	00 d0       	rcall	.+0      	; 0x1a24 <DIO_voidTogglePin+0x6>
    1a24:	00 d0       	rcall	.+0      	; 0x1a26 <DIO_voidTogglePin+0x8>
    1a26:	cd b7       	in	r28, 0x3d	; 61
    1a28:	de b7       	in	r29, 0x3e	; 62
    1a2a:	89 83       	std	Y+1, r24	; 0x01
    1a2c:	6a 83       	std	Y+2, r22	; 0x02
	switch(PortId)
    1a2e:	89 81       	ldd	r24, Y+1	; 0x01
    1a30:	28 2f       	mov	r18, r24
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	3c 83       	std	Y+4, r19	; 0x04
    1a36:	2b 83       	std	Y+3, r18	; 0x03
    1a38:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a3c:	81 30       	cpi	r24, 0x01	; 1
    1a3e:	91 05       	cpc	r25, r1
    1a40:	49 f1       	breq	.+82     	; 0x1a94 <DIO_voidTogglePin+0x76>
    1a42:	2b 81       	ldd	r18, Y+3	; 0x03
    1a44:	3c 81       	ldd	r19, Y+4	; 0x04
    1a46:	22 30       	cpi	r18, 0x02	; 2
    1a48:	31 05       	cpc	r19, r1
    1a4a:	2c f4       	brge	.+10     	; 0x1a56 <DIO_voidTogglePin+0x38>
    1a4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a50:	00 97       	sbiw	r24, 0x00	; 0
    1a52:	61 f0       	breq	.+24     	; 0x1a6c <DIO_voidTogglePin+0x4e>
    1a54:	5a c0       	rjmp	.+180    	; 0x1b0a <DIO_voidTogglePin+0xec>
    1a56:	2b 81       	ldd	r18, Y+3	; 0x03
    1a58:	3c 81       	ldd	r19, Y+4	; 0x04
    1a5a:	22 30       	cpi	r18, 0x02	; 2
    1a5c:	31 05       	cpc	r19, r1
    1a5e:	71 f1       	breq	.+92     	; 0x1abc <DIO_voidTogglePin+0x9e>
    1a60:	8b 81       	ldd	r24, Y+3	; 0x03
    1a62:	9c 81       	ldd	r25, Y+4	; 0x04
    1a64:	83 30       	cpi	r24, 0x03	; 3
    1a66:	91 05       	cpc	r25, r1
    1a68:	e9 f1       	breq	.+122    	; 0x1ae4 <DIO_voidTogglePin+0xc6>
    1a6a:	4f c0       	rjmp	.+158    	; 0x1b0a <DIO_voidTogglePin+0xec>
	{
		case 0: TOG_BIT(PORTA,PinId); break;
    1a6c:	ab e3       	ldi	r26, 0x3B	; 59
    1a6e:	b0 e0       	ldi	r27, 0x00	; 0
    1a70:	eb e3       	ldi	r30, 0x3B	; 59
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	80 81       	ld	r24, Z
    1a76:	48 2f       	mov	r20, r24
    1a78:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7a:	28 2f       	mov	r18, r24
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	81 e0       	ldi	r24, 0x01	; 1
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	02 2e       	mov	r0, r18
    1a84:	02 c0       	rjmp	.+4      	; 0x1a8a <DIO_voidTogglePin+0x6c>
    1a86:	88 0f       	add	r24, r24
    1a88:	99 1f       	adc	r25, r25
    1a8a:	0a 94       	dec	r0
    1a8c:	e2 f7       	brpl	.-8      	; 0x1a86 <DIO_voidTogglePin+0x68>
    1a8e:	84 27       	eor	r24, r20
    1a90:	8c 93       	st	X, r24
    1a92:	3b c0       	rjmp	.+118    	; 0x1b0a <DIO_voidTogglePin+0xec>
		case 1: TOG_BIT(PORTB,PinId); break;
    1a94:	a8 e3       	ldi	r26, 0x38	; 56
    1a96:	b0 e0       	ldi	r27, 0x00	; 0
    1a98:	e8 e3       	ldi	r30, 0x38	; 56
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	80 81       	ld	r24, Z
    1a9e:	48 2f       	mov	r20, r24
    1aa0:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa2:	28 2f       	mov	r18, r24
    1aa4:	30 e0       	ldi	r19, 0x00	; 0
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	02 2e       	mov	r0, r18
    1aac:	02 c0       	rjmp	.+4      	; 0x1ab2 <DIO_voidTogglePin+0x94>
    1aae:	88 0f       	add	r24, r24
    1ab0:	99 1f       	adc	r25, r25
    1ab2:	0a 94       	dec	r0
    1ab4:	e2 f7       	brpl	.-8      	; 0x1aae <DIO_voidTogglePin+0x90>
    1ab6:	84 27       	eor	r24, r20
    1ab8:	8c 93       	st	X, r24
    1aba:	27 c0       	rjmp	.+78     	; 0x1b0a <DIO_voidTogglePin+0xec>
		case 2: TOG_BIT(PORTC,PinId); break;
    1abc:	a5 e3       	ldi	r26, 0x35	; 53
    1abe:	b0 e0       	ldi	r27, 0x00	; 0
    1ac0:	e5 e3       	ldi	r30, 0x35	; 53
    1ac2:	f0 e0       	ldi	r31, 0x00	; 0
    1ac4:	80 81       	ld	r24, Z
    1ac6:	48 2f       	mov	r20, r24
    1ac8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aca:	28 2f       	mov	r18, r24
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	81 e0       	ldi	r24, 0x01	; 1
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	02 2e       	mov	r0, r18
    1ad4:	02 c0       	rjmp	.+4      	; 0x1ada <DIO_voidTogglePin+0xbc>
    1ad6:	88 0f       	add	r24, r24
    1ad8:	99 1f       	adc	r25, r25
    1ada:	0a 94       	dec	r0
    1adc:	e2 f7       	brpl	.-8      	; 0x1ad6 <DIO_voidTogglePin+0xb8>
    1ade:	84 27       	eor	r24, r20
    1ae0:	8c 93       	st	X, r24
    1ae2:	13 c0       	rjmp	.+38     	; 0x1b0a <DIO_voidTogglePin+0xec>
		case 3: TOG_BIT(PORTD,PinId); break;
    1ae4:	a2 e3       	ldi	r26, 0x32	; 50
    1ae6:	b0 e0       	ldi	r27, 0x00	; 0
    1ae8:	e2 e3       	ldi	r30, 0x32	; 50
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	80 81       	ld	r24, Z
    1aee:	48 2f       	mov	r20, r24
    1af0:	8a 81       	ldd	r24, Y+2	; 0x02
    1af2:	28 2f       	mov	r18, r24
    1af4:	30 e0       	ldi	r19, 0x00	; 0
    1af6:	81 e0       	ldi	r24, 0x01	; 1
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	02 2e       	mov	r0, r18
    1afc:	02 c0       	rjmp	.+4      	; 0x1b02 <DIO_voidTogglePin+0xe4>
    1afe:	88 0f       	add	r24, r24
    1b00:	99 1f       	adc	r25, r25
    1b02:	0a 94       	dec	r0
    1b04:	e2 f7       	brpl	.-8      	; 0x1afe <DIO_voidTogglePin+0xe0>
    1b06:	84 27       	eor	r24, r20
    1b08:	8c 93       	st	X, r24
	}
}
    1b0a:	0f 90       	pop	r0
    1b0c:	0f 90       	pop	r0
    1b0e:	0f 90       	pop	r0
    1b10:	0f 90       	pop	r0
    1b12:	cf 91       	pop	r28
    1b14:	df 91       	pop	r29
    1b16:	08 95       	ret

00001b18 <DIO_voidSetPortDirection>:

void DIO_voidSetPortDirection (u8 PortId,u8 Direction)
{
    1b18:	df 93       	push	r29
    1b1a:	cf 93       	push	r28
    1b1c:	00 d0       	rcall	.+0      	; 0x1b1e <DIO_voidSetPortDirection+0x6>
    1b1e:	00 d0       	rcall	.+0      	; 0x1b20 <DIO_voidSetPortDirection+0x8>
    1b20:	00 d0       	rcall	.+0      	; 0x1b22 <DIO_voidSetPortDirection+0xa>
    1b22:	cd b7       	in	r28, 0x3d	; 61
    1b24:	de b7       	in	r29, 0x3e	; 62
    1b26:	89 83       	std	Y+1, r24	; 0x01
    1b28:	6a 83       	std	Y+2, r22	; 0x02
	if(Direction==Output)
    1b2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2c:	81 30       	cpi	r24, 0x01	; 1
    1b2e:	99 f5       	brne	.+102    	; 0x1b96 <DIO_voidSetPortDirection+0x7e>
	{
		switch(PortId)
    1b30:	89 81       	ldd	r24, Y+1	; 0x01
    1b32:	28 2f       	mov	r18, r24
    1b34:	30 e0       	ldi	r19, 0x00	; 0
    1b36:	3e 83       	std	Y+6, r19	; 0x06
    1b38:	2d 83       	std	Y+5, r18	; 0x05
    1b3a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b3c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b3e:	81 30       	cpi	r24, 0x01	; 1
    1b40:	91 05       	cpc	r25, r1
    1b42:	d1 f0       	breq	.+52     	; 0x1b78 <DIO_voidSetPortDirection+0x60>
    1b44:	2d 81       	ldd	r18, Y+5	; 0x05
    1b46:	3e 81       	ldd	r19, Y+6	; 0x06
    1b48:	22 30       	cpi	r18, 0x02	; 2
    1b4a:	31 05       	cpc	r19, r1
    1b4c:	2c f4       	brge	.+10     	; 0x1b58 <DIO_voidSetPortDirection+0x40>
    1b4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b50:	9e 81       	ldd	r25, Y+6	; 0x06
    1b52:	00 97       	sbiw	r24, 0x00	; 0
    1b54:	61 f0       	breq	.+24     	; 0x1b6e <DIO_voidSetPortDirection+0x56>
    1b56:	4d c0       	rjmp	.+154    	; 0x1bf2 <DIO_voidSetPortDirection+0xda>
    1b58:	2d 81       	ldd	r18, Y+5	; 0x05
    1b5a:	3e 81       	ldd	r19, Y+6	; 0x06
    1b5c:	22 30       	cpi	r18, 0x02	; 2
    1b5e:	31 05       	cpc	r19, r1
    1b60:	81 f0       	breq	.+32     	; 0x1b82 <DIO_voidSetPortDirection+0x6a>
    1b62:	8d 81       	ldd	r24, Y+5	; 0x05
    1b64:	9e 81       	ldd	r25, Y+6	; 0x06
    1b66:	83 30       	cpi	r24, 0x03	; 3
    1b68:	91 05       	cpc	r25, r1
    1b6a:	81 f0       	breq	.+32     	; 0x1b8c <DIO_voidSetPortDirection+0x74>
    1b6c:	42 c0       	rjmp	.+132    	; 0x1bf2 <DIO_voidSetPortDirection+0xda>
		{
			case 0: SET_BYTE(DDRA,0xFF); break;
    1b6e:	ea e3       	ldi	r30, 0x3A	; 58
    1b70:	f0 e0       	ldi	r31, 0x00	; 0
    1b72:	8f ef       	ldi	r24, 0xFF	; 255
    1b74:	80 83       	st	Z, r24
    1b76:	3d c0       	rjmp	.+122    	; 0x1bf2 <DIO_voidSetPortDirection+0xda>
			case 1: SET_BYTE(DDRB,0xFF); break;
    1b78:	e7 e3       	ldi	r30, 0x37	; 55
    1b7a:	f0 e0       	ldi	r31, 0x00	; 0
    1b7c:	8f ef       	ldi	r24, 0xFF	; 255
    1b7e:	80 83       	st	Z, r24
    1b80:	38 c0       	rjmp	.+112    	; 0x1bf2 <DIO_voidSetPortDirection+0xda>
			case 2: SET_BYTE(DDRC,0xFF); break;
    1b82:	e4 e3       	ldi	r30, 0x34	; 52
    1b84:	f0 e0       	ldi	r31, 0x00	; 0
    1b86:	8f ef       	ldi	r24, 0xFF	; 255
    1b88:	80 83       	st	Z, r24
    1b8a:	33 c0       	rjmp	.+102    	; 0x1bf2 <DIO_voidSetPortDirection+0xda>
			case 3: SET_BYTE(DDRD,0xFF); break;
    1b8c:	e1 e3       	ldi	r30, 0x31	; 49
    1b8e:	f0 e0       	ldi	r31, 0x00	; 0
    1b90:	8f ef       	ldi	r24, 0xFF	; 255
    1b92:	80 83       	st	Z, r24
    1b94:	2e c0       	rjmp	.+92     	; 0x1bf2 <DIO_voidSetPortDirection+0xda>
		}
	}
	else
	{
		switch(PortId)
    1b96:	89 81       	ldd	r24, Y+1	; 0x01
    1b98:	28 2f       	mov	r18, r24
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	3c 83       	std	Y+4, r19	; 0x04
    1b9e:	2b 83       	std	Y+3, r18	; 0x03
    1ba0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba4:	81 30       	cpi	r24, 0x01	; 1
    1ba6:	91 05       	cpc	r25, r1
    1ba8:	c9 f0       	breq	.+50     	; 0x1bdc <DIO_voidSetPortDirection+0xc4>
    1baa:	2b 81       	ldd	r18, Y+3	; 0x03
    1bac:	3c 81       	ldd	r19, Y+4	; 0x04
    1bae:	22 30       	cpi	r18, 0x02	; 2
    1bb0:	31 05       	cpc	r19, r1
    1bb2:	2c f4       	brge	.+10     	; 0x1bbe <DIO_voidSetPortDirection+0xa6>
    1bb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb8:	00 97       	sbiw	r24, 0x00	; 0
    1bba:	61 f0       	breq	.+24     	; 0x1bd4 <DIO_voidSetPortDirection+0xbc>
    1bbc:	1a c0       	rjmp	.+52     	; 0x1bf2 <DIO_voidSetPortDirection+0xda>
    1bbe:	2b 81       	ldd	r18, Y+3	; 0x03
    1bc0:	3c 81       	ldd	r19, Y+4	; 0x04
    1bc2:	22 30       	cpi	r18, 0x02	; 2
    1bc4:	31 05       	cpc	r19, r1
    1bc6:	71 f0       	breq	.+28     	; 0x1be4 <DIO_voidSetPortDirection+0xcc>
    1bc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bca:	9c 81       	ldd	r25, Y+4	; 0x04
    1bcc:	83 30       	cpi	r24, 0x03	; 3
    1bce:	91 05       	cpc	r25, r1
    1bd0:	69 f0       	breq	.+26     	; 0x1bec <DIO_voidSetPortDirection+0xd4>
    1bd2:	0f c0       	rjmp	.+30     	; 0x1bf2 <DIO_voidSetPortDirection+0xda>
		{
			case 0: SET_BYTE(DDRA,0x00); break;
    1bd4:	ea e3       	ldi	r30, 0x3A	; 58
    1bd6:	f0 e0       	ldi	r31, 0x00	; 0
    1bd8:	10 82       	st	Z, r1
    1bda:	0b c0       	rjmp	.+22     	; 0x1bf2 <DIO_voidSetPortDirection+0xda>
			case 1: SET_BYTE(DDRB,0x00); break;
    1bdc:	e7 e3       	ldi	r30, 0x37	; 55
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	10 82       	st	Z, r1
    1be2:	07 c0       	rjmp	.+14     	; 0x1bf2 <DIO_voidSetPortDirection+0xda>
			case 2: SET_BYTE(DDRC,0x00); break;
    1be4:	e4 e3       	ldi	r30, 0x34	; 52
    1be6:	f0 e0       	ldi	r31, 0x00	; 0
    1be8:	10 82       	st	Z, r1
    1bea:	03 c0       	rjmp	.+6      	; 0x1bf2 <DIO_voidSetPortDirection+0xda>
			case 3: SET_BYTE(DDRD,0x00); break;
    1bec:	e1 e3       	ldi	r30, 0x31	; 49
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	10 82       	st	Z, r1
		}
	}
}
    1bf2:	26 96       	adiw	r28, 0x06	; 6
    1bf4:	0f b6       	in	r0, 0x3f	; 63
    1bf6:	f8 94       	cli
    1bf8:	de bf       	out	0x3e, r29	; 62
    1bfa:	0f be       	out	0x3f, r0	; 63
    1bfc:	cd bf       	out	0x3d, r28	; 61
    1bfe:	cf 91       	pop	r28
    1c00:	df 91       	pop	r29
    1c02:	08 95       	ret

00001c04 <DIO_voidSetPortValue>:

void DIO_voidSetPortValue (u8 PortId,u8 Value)
{
    1c04:	df 93       	push	r29
    1c06:	cf 93       	push	r28
    1c08:	00 d0       	rcall	.+0      	; 0x1c0a <DIO_voidSetPortValue+0x6>
    1c0a:	00 d0       	rcall	.+0      	; 0x1c0c <DIO_voidSetPortValue+0x8>
    1c0c:	cd b7       	in	r28, 0x3d	; 61
    1c0e:	de b7       	in	r29, 0x3e	; 62
    1c10:	89 83       	std	Y+1, r24	; 0x01
    1c12:	6a 83       	std	Y+2, r22	; 0x02
	switch(PortId)
    1c14:	89 81       	ldd	r24, Y+1	; 0x01
    1c16:	28 2f       	mov	r18, r24
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	3c 83       	std	Y+4, r19	; 0x04
    1c1c:	2b 83       	std	Y+3, r18	; 0x03
    1c1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c20:	9c 81       	ldd	r25, Y+4	; 0x04
    1c22:	81 30       	cpi	r24, 0x01	; 1
    1c24:	91 05       	cpc	r25, r1
    1c26:	d1 f0       	breq	.+52     	; 0x1c5c <DIO_voidSetPortValue+0x58>
    1c28:	2b 81       	ldd	r18, Y+3	; 0x03
    1c2a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c2c:	22 30       	cpi	r18, 0x02	; 2
    1c2e:	31 05       	cpc	r19, r1
    1c30:	2c f4       	brge	.+10     	; 0x1c3c <DIO_voidSetPortValue+0x38>
    1c32:	8b 81       	ldd	r24, Y+3	; 0x03
    1c34:	9c 81       	ldd	r25, Y+4	; 0x04
    1c36:	00 97       	sbiw	r24, 0x00	; 0
    1c38:	61 f0       	breq	.+24     	; 0x1c52 <DIO_voidSetPortValue+0x4e>
    1c3a:	1e c0       	rjmp	.+60     	; 0x1c78 <DIO_voidSetPortValue+0x74>
    1c3c:	2b 81       	ldd	r18, Y+3	; 0x03
    1c3e:	3c 81       	ldd	r19, Y+4	; 0x04
    1c40:	22 30       	cpi	r18, 0x02	; 2
    1c42:	31 05       	cpc	r19, r1
    1c44:	81 f0       	breq	.+32     	; 0x1c66 <DIO_voidSetPortValue+0x62>
    1c46:	8b 81       	ldd	r24, Y+3	; 0x03
    1c48:	9c 81       	ldd	r25, Y+4	; 0x04
    1c4a:	83 30       	cpi	r24, 0x03	; 3
    1c4c:	91 05       	cpc	r25, r1
    1c4e:	81 f0       	breq	.+32     	; 0x1c70 <DIO_voidSetPortValue+0x6c>
    1c50:	13 c0       	rjmp	.+38     	; 0x1c78 <DIO_voidSetPortValue+0x74>
	{
		case 0: SET_BYTE(PORTA,Value); break;
    1c52:	eb e3       	ldi	r30, 0x3B	; 59
    1c54:	f0 e0       	ldi	r31, 0x00	; 0
    1c56:	8a 81       	ldd	r24, Y+2	; 0x02
    1c58:	80 83       	st	Z, r24
    1c5a:	0e c0       	rjmp	.+28     	; 0x1c78 <DIO_voidSetPortValue+0x74>
		case 1: SET_BYTE(PORTB,Value); break;
    1c5c:	e8 e3       	ldi	r30, 0x38	; 56
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	8a 81       	ldd	r24, Y+2	; 0x02
    1c62:	80 83       	st	Z, r24
    1c64:	09 c0       	rjmp	.+18     	; 0x1c78 <DIO_voidSetPortValue+0x74>
		case 2: SET_BYTE(PORTC,Value); break;
    1c66:	e5 e3       	ldi	r30, 0x35	; 53
    1c68:	f0 e0       	ldi	r31, 0x00	; 0
    1c6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6c:	80 83       	st	Z, r24
    1c6e:	04 c0       	rjmp	.+8      	; 0x1c78 <DIO_voidSetPortValue+0x74>
		case 3: SET_BYTE(PORTD,Value); break;
    1c70:	e2 e3       	ldi	r30, 0x32	; 50
    1c72:	f0 e0       	ldi	r31, 0x00	; 0
    1c74:	8a 81       	ldd	r24, Y+2	; 0x02
    1c76:	80 83       	st	Z, r24
	}
}
    1c78:	0f 90       	pop	r0
    1c7a:	0f 90       	pop	r0
    1c7c:	0f 90       	pop	r0
    1c7e:	0f 90       	pop	r0
    1c80:	cf 91       	pop	r28
    1c82:	df 91       	pop	r29
    1c84:	08 95       	ret

00001c86 <DIO_voidSetPortValueMask>:

void	DIO_voidSetPortValueMask		(u8 PortId,u8 Value,u8 Mask)
{
    1c86:	df 93       	push	r29
    1c88:	cf 93       	push	r28
    1c8a:	00 d0       	rcall	.+0      	; 0x1c8c <DIO_voidSetPortValueMask+0x6>
    1c8c:	00 d0       	rcall	.+0      	; 0x1c8e <DIO_voidSetPortValueMask+0x8>
    1c8e:	0f 92       	push	r0
    1c90:	cd b7       	in	r28, 0x3d	; 61
    1c92:	de b7       	in	r29, 0x3e	; 62
    1c94:	89 83       	std	Y+1, r24	; 0x01
    1c96:	6a 83       	std	Y+2, r22	; 0x02
    1c98:	4b 83       	std	Y+3, r20	; 0x03
	switch(PortId)
    1c9a:	89 81       	ldd	r24, Y+1	; 0x01
    1c9c:	28 2f       	mov	r18, r24
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	3d 83       	std	Y+5, r19	; 0x05
    1ca2:	2c 83       	std	Y+4, r18	; 0x04
    1ca4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ca6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ca8:	81 30       	cpi	r24, 0x01	; 1
    1caa:	91 05       	cpc	r25, r1
    1cac:	01 f1       	breq	.+64     	; 0x1cee <DIO_voidSetPortValueMask+0x68>
    1cae:	2c 81       	ldd	r18, Y+4	; 0x04
    1cb0:	3d 81       	ldd	r19, Y+5	; 0x05
    1cb2:	22 30       	cpi	r18, 0x02	; 2
    1cb4:	31 05       	cpc	r19, r1
    1cb6:	2c f4       	brge	.+10     	; 0x1cc2 <DIO_voidSetPortValueMask+0x3c>
    1cb8:	8c 81       	ldd	r24, Y+4	; 0x04
    1cba:	9d 81       	ldd	r25, Y+5	; 0x05
    1cbc:	00 97       	sbiw	r24, 0x00	; 0
    1cbe:	61 f0       	breq	.+24     	; 0x1cd8 <DIO_voidSetPortValueMask+0x52>
    1cc0:	36 c0       	rjmp	.+108    	; 0x1d2e <DIO_voidSetPortValueMask+0xa8>
    1cc2:	2c 81       	ldd	r18, Y+4	; 0x04
    1cc4:	3d 81       	ldd	r19, Y+5	; 0x05
    1cc6:	22 30       	cpi	r18, 0x02	; 2
    1cc8:	31 05       	cpc	r19, r1
    1cca:	e1 f0       	breq	.+56     	; 0x1d04 <DIO_voidSetPortValueMask+0x7e>
    1ccc:	8c 81       	ldd	r24, Y+4	; 0x04
    1cce:	9d 81       	ldd	r25, Y+5	; 0x05
    1cd0:	83 30       	cpi	r24, 0x03	; 3
    1cd2:	91 05       	cpc	r25, r1
    1cd4:	11 f1       	breq	.+68     	; 0x1d1a <DIO_voidSetPortValueMask+0x94>
    1cd6:	2b c0       	rjmp	.+86     	; 0x1d2e <DIO_voidSetPortValueMask+0xa8>
	{
		case 0: PORTA=((Value)|(PORTA & Mask)); break;
    1cd8:	ab e3       	ldi	r26, 0x3B	; 59
    1cda:	b0 e0       	ldi	r27, 0x00	; 0
    1cdc:	eb e3       	ldi	r30, 0x3B	; 59
    1cde:	f0 e0       	ldi	r31, 0x00	; 0
    1ce0:	90 81       	ld	r25, Z
    1ce2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce4:	98 23       	and	r25, r24
    1ce6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce8:	89 2b       	or	r24, r25
    1cea:	8c 93       	st	X, r24
    1cec:	20 c0       	rjmp	.+64     	; 0x1d2e <DIO_voidSetPortValueMask+0xa8>
		case 1: PORTB=((Value)|(PORTB & Mask)); break;
    1cee:	a8 e3       	ldi	r26, 0x38	; 56
    1cf0:	b0 e0       	ldi	r27, 0x00	; 0
    1cf2:	e8 e3       	ldi	r30, 0x38	; 56
    1cf4:	f0 e0       	ldi	r31, 0x00	; 0
    1cf6:	90 81       	ld	r25, Z
    1cf8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfa:	98 23       	and	r25, r24
    1cfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfe:	89 2b       	or	r24, r25
    1d00:	8c 93       	st	X, r24
    1d02:	15 c0       	rjmp	.+42     	; 0x1d2e <DIO_voidSetPortValueMask+0xa8>
		case 2: PORTC=((Value)|(PORTC & Mask)); break;
    1d04:	a5 e3       	ldi	r26, 0x35	; 53
    1d06:	b0 e0       	ldi	r27, 0x00	; 0
    1d08:	e5 e3       	ldi	r30, 0x35	; 53
    1d0a:	f0 e0       	ldi	r31, 0x00	; 0
    1d0c:	90 81       	ld	r25, Z
    1d0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d10:	98 23       	and	r25, r24
    1d12:	8a 81       	ldd	r24, Y+2	; 0x02
    1d14:	89 2b       	or	r24, r25
    1d16:	8c 93       	st	X, r24
    1d18:	0a c0       	rjmp	.+20     	; 0x1d2e <DIO_voidSetPortValueMask+0xa8>
		case 3: PORTD=((Value)|(PORTD & Mask)); break;
    1d1a:	a2 e3       	ldi	r26, 0x32	; 50
    1d1c:	b0 e0       	ldi	r27, 0x00	; 0
    1d1e:	e2 e3       	ldi	r30, 0x32	; 50
    1d20:	f0 e0       	ldi	r31, 0x00	; 0
    1d22:	90 81       	ld	r25, Z
    1d24:	8b 81       	ldd	r24, Y+3	; 0x03
    1d26:	98 23       	and	r25, r24
    1d28:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2a:	89 2b       	or	r24, r25
    1d2c:	8c 93       	st	X, r24
	}
}
    1d2e:	0f 90       	pop	r0
    1d30:	0f 90       	pop	r0
    1d32:	0f 90       	pop	r0
    1d34:	0f 90       	pop	r0
    1d36:	0f 90       	pop	r0
    1d38:	cf 91       	pop	r28
    1d3a:	df 91       	pop	r29
    1d3c:	08 95       	ret

00001d3e <DIO_voidSetPortDirectionMask>:

void	DIO_voidSetPortDirectionMask	(u8 PortId,u8 Direction,u8 Mask)
{
    1d3e:	df 93       	push	r29
    1d40:	cf 93       	push	r28
    1d42:	00 d0       	rcall	.+0      	; 0x1d44 <DIO_voidSetPortDirectionMask+0x6>
    1d44:	00 d0       	rcall	.+0      	; 0x1d46 <DIO_voidSetPortDirectionMask+0x8>
    1d46:	0f 92       	push	r0
    1d48:	cd b7       	in	r28, 0x3d	; 61
    1d4a:	de b7       	in	r29, 0x3e	; 62
    1d4c:	89 83       	std	Y+1, r24	; 0x01
    1d4e:	6a 83       	std	Y+2, r22	; 0x02
    1d50:	4b 83       	std	Y+3, r20	; 0x03
	switch(PortId)
    1d52:	89 81       	ldd	r24, Y+1	; 0x01
    1d54:	28 2f       	mov	r18, r24
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	3d 83       	std	Y+5, r19	; 0x05
    1d5a:	2c 83       	std	Y+4, r18	; 0x04
    1d5c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d5e:	9d 81       	ldd	r25, Y+5	; 0x05
    1d60:	81 30       	cpi	r24, 0x01	; 1
    1d62:	91 05       	cpc	r25, r1
    1d64:	01 f1       	breq	.+64     	; 0x1da6 <DIO_voidSetPortDirectionMask+0x68>
    1d66:	2c 81       	ldd	r18, Y+4	; 0x04
    1d68:	3d 81       	ldd	r19, Y+5	; 0x05
    1d6a:	22 30       	cpi	r18, 0x02	; 2
    1d6c:	31 05       	cpc	r19, r1
    1d6e:	2c f4       	brge	.+10     	; 0x1d7a <DIO_voidSetPortDirectionMask+0x3c>
    1d70:	8c 81       	ldd	r24, Y+4	; 0x04
    1d72:	9d 81       	ldd	r25, Y+5	; 0x05
    1d74:	00 97       	sbiw	r24, 0x00	; 0
    1d76:	61 f0       	breq	.+24     	; 0x1d90 <DIO_voidSetPortDirectionMask+0x52>
    1d78:	36 c0       	rjmp	.+108    	; 0x1de6 <DIO_voidSetPortDirectionMask+0xa8>
    1d7a:	2c 81       	ldd	r18, Y+4	; 0x04
    1d7c:	3d 81       	ldd	r19, Y+5	; 0x05
    1d7e:	22 30       	cpi	r18, 0x02	; 2
    1d80:	31 05       	cpc	r19, r1
    1d82:	e1 f0       	breq	.+56     	; 0x1dbc <DIO_voidSetPortDirectionMask+0x7e>
    1d84:	8c 81       	ldd	r24, Y+4	; 0x04
    1d86:	9d 81       	ldd	r25, Y+5	; 0x05
    1d88:	83 30       	cpi	r24, 0x03	; 3
    1d8a:	91 05       	cpc	r25, r1
    1d8c:	11 f1       	breq	.+68     	; 0x1dd2 <DIO_voidSetPortDirectionMask+0x94>
    1d8e:	2b c0       	rjmp	.+86     	; 0x1de6 <DIO_voidSetPortDirectionMask+0xa8>
	{
		case 0: PORTA=((Direction)|(DDRA & Mask)); break;
    1d90:	ab e3       	ldi	r26, 0x3B	; 59
    1d92:	b0 e0       	ldi	r27, 0x00	; 0
    1d94:	ea e3       	ldi	r30, 0x3A	; 58
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	90 81       	ld	r25, Z
    1d9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9c:	98 23       	and	r25, r24
    1d9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1da0:	89 2b       	or	r24, r25
    1da2:	8c 93       	st	X, r24
    1da4:	20 c0       	rjmp	.+64     	; 0x1de6 <DIO_voidSetPortDirectionMask+0xa8>
		case 1: PORTB=((Direction)|(DDRB & Mask)); break;
    1da6:	a8 e3       	ldi	r26, 0x38	; 56
    1da8:	b0 e0       	ldi	r27, 0x00	; 0
    1daa:	e7 e3       	ldi	r30, 0x37	; 55
    1dac:	f0 e0       	ldi	r31, 0x00	; 0
    1dae:	90 81       	ld	r25, Z
    1db0:	8b 81       	ldd	r24, Y+3	; 0x03
    1db2:	98 23       	and	r25, r24
    1db4:	8a 81       	ldd	r24, Y+2	; 0x02
    1db6:	89 2b       	or	r24, r25
    1db8:	8c 93       	st	X, r24
    1dba:	15 c0       	rjmp	.+42     	; 0x1de6 <DIO_voidSetPortDirectionMask+0xa8>
		case 2: PORTC=((Direction)|(DDRC & Mask)); break;
    1dbc:	a5 e3       	ldi	r26, 0x35	; 53
    1dbe:	b0 e0       	ldi	r27, 0x00	; 0
    1dc0:	e4 e3       	ldi	r30, 0x34	; 52
    1dc2:	f0 e0       	ldi	r31, 0x00	; 0
    1dc4:	90 81       	ld	r25, Z
    1dc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc8:	98 23       	and	r25, r24
    1dca:	8a 81       	ldd	r24, Y+2	; 0x02
    1dcc:	89 2b       	or	r24, r25
    1dce:	8c 93       	st	X, r24
    1dd0:	0a c0       	rjmp	.+20     	; 0x1de6 <DIO_voidSetPortDirectionMask+0xa8>
		case 3: PORTD=((Direction)|(DDRD & Mask)); break;
    1dd2:	a2 e3       	ldi	r26, 0x32	; 50
    1dd4:	b0 e0       	ldi	r27, 0x00	; 0
    1dd6:	e1 e3       	ldi	r30, 0x31	; 49
    1dd8:	f0 e0       	ldi	r31, 0x00	; 0
    1dda:	90 81       	ld	r25, Z
    1ddc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dde:	98 23       	and	r25, r24
    1de0:	8a 81       	ldd	r24, Y+2	; 0x02
    1de2:	89 2b       	or	r24, r25
    1de4:	8c 93       	st	X, r24
	}
}
    1de6:	0f 90       	pop	r0
    1de8:	0f 90       	pop	r0
    1dea:	0f 90       	pop	r0
    1dec:	0f 90       	pop	r0
    1dee:	0f 90       	pop	r0
    1df0:	cf 91       	pop	r28
    1df2:	df 91       	pop	r29
    1df4:	08 95       	ret

00001df6 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue (u8 PortId,u8 PinId)
{
    1df6:	df 93       	push	r29
    1df8:	cf 93       	push	r28
    1dfa:	00 d0       	rcall	.+0      	; 0x1dfc <DIO_u8GetPinValue+0x6>
    1dfc:	00 d0       	rcall	.+0      	; 0x1dfe <DIO_u8GetPinValue+0x8>
    1dfe:	0f 92       	push	r0
    1e00:	cd b7       	in	r28, 0x3d	; 61
    1e02:	de b7       	in	r29, 0x3e	; 62
    1e04:	8a 83       	std	Y+2, r24	; 0x02
    1e06:	6b 83       	std	Y+3, r22	; 0x03
	u8 DIO_u8ReturnPinValue;
	switch(PortId)
    1e08:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0a:	28 2f       	mov	r18, r24
    1e0c:	30 e0       	ldi	r19, 0x00	; 0
    1e0e:	3d 83       	std	Y+5, r19	; 0x05
    1e10:	2c 83       	std	Y+4, r18	; 0x04
    1e12:	4c 81       	ldd	r20, Y+4	; 0x04
    1e14:	5d 81       	ldd	r21, Y+5	; 0x05
    1e16:	41 30       	cpi	r20, 0x01	; 1
    1e18:	51 05       	cpc	r21, r1
    1e1a:	b1 f1       	breq	.+108    	; 0x1e88 <DIO_u8GetPinValue+0x92>
    1e1c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e1e:	9d 81       	ldd	r25, Y+5	; 0x05
    1e20:	82 30       	cpi	r24, 0x02	; 2
    1e22:	91 05       	cpc	r25, r1
    1e24:	34 f4       	brge	.+12     	; 0x1e32 <DIO_u8GetPinValue+0x3c>
    1e26:	2c 81       	ldd	r18, Y+4	; 0x04
    1e28:	3d 81       	ldd	r19, Y+5	; 0x05
    1e2a:	21 15       	cp	r18, r1
    1e2c:	31 05       	cpc	r19, r1
    1e2e:	71 f0       	breq	.+28     	; 0x1e4c <DIO_u8GetPinValue+0x56>
    1e30:	85 c0       	rjmp	.+266    	; 0x1f3c <DIO_u8GetPinValue+0x146>
    1e32:	4c 81       	ldd	r20, Y+4	; 0x04
    1e34:	5d 81       	ldd	r21, Y+5	; 0x05
    1e36:	42 30       	cpi	r20, 0x02	; 2
    1e38:	51 05       	cpc	r21, r1
    1e3a:	09 f4       	brne	.+2      	; 0x1e3e <DIO_u8GetPinValue+0x48>
    1e3c:	43 c0       	rjmp	.+134    	; 0x1ec4 <DIO_u8GetPinValue+0xce>
    1e3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e40:	9d 81       	ldd	r25, Y+5	; 0x05
    1e42:	83 30       	cpi	r24, 0x03	; 3
    1e44:	91 05       	cpc	r25, r1
    1e46:	09 f4       	brne	.+2      	; 0x1e4a <DIO_u8GetPinValue+0x54>
    1e48:	5b c0       	rjmp	.+182    	; 0x1f00 <DIO_u8GetPinValue+0x10a>
    1e4a:	78 c0       	rjmp	.+240    	; 0x1f3c <DIO_u8GetPinValue+0x146>
	{
	case 0: DIO_u8ReturnPinValue = GET_BIT(PINA,PinId); break;
    1e4c:	e9 e3       	ldi	r30, 0x39	; 57
    1e4e:	f0 e0       	ldi	r31, 0x00	; 0
    1e50:	80 81       	ld	r24, Z
    1e52:	48 2f       	mov	r20, r24
    1e54:	50 e0       	ldi	r21, 0x00	; 0
    1e56:	8b 81       	ldd	r24, Y+3	; 0x03
    1e58:	28 2f       	mov	r18, r24
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	81 e0       	ldi	r24, 0x01	; 1
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	02 c0       	rjmp	.+4      	; 0x1e66 <DIO_u8GetPinValue+0x70>
    1e62:	88 0f       	add	r24, r24
    1e64:	99 1f       	adc	r25, r25
    1e66:	2a 95       	dec	r18
    1e68:	e2 f7       	brpl	.-8      	; 0x1e62 <DIO_u8GetPinValue+0x6c>
    1e6a:	9a 01       	movw	r18, r20
    1e6c:	28 23       	and	r18, r24
    1e6e:	39 23       	and	r19, r25
    1e70:	8b 81       	ldd	r24, Y+3	; 0x03
    1e72:	88 2f       	mov	r24, r24
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	a9 01       	movw	r20, r18
    1e78:	02 c0       	rjmp	.+4      	; 0x1e7e <DIO_u8GetPinValue+0x88>
    1e7a:	55 95       	asr	r21
    1e7c:	47 95       	ror	r20
    1e7e:	8a 95       	dec	r24
    1e80:	e2 f7       	brpl	.-8      	; 0x1e7a <DIO_u8GetPinValue+0x84>
    1e82:	ca 01       	movw	r24, r20
    1e84:	89 83       	std	Y+1, r24	; 0x01
    1e86:	75 c0       	rjmp	.+234    	; 0x1f72 <DIO_u8GetPinValue+0x17c>
	case 1: DIO_u8ReturnPinValue = GET_BIT(PINB,PinId); break;
    1e88:	e6 e3       	ldi	r30, 0x36	; 54
    1e8a:	f0 e0       	ldi	r31, 0x00	; 0
    1e8c:	80 81       	ld	r24, Z
    1e8e:	48 2f       	mov	r20, r24
    1e90:	50 e0       	ldi	r21, 0x00	; 0
    1e92:	8b 81       	ldd	r24, Y+3	; 0x03
    1e94:	28 2f       	mov	r18, r24
    1e96:	30 e0       	ldi	r19, 0x00	; 0
    1e98:	81 e0       	ldi	r24, 0x01	; 1
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	02 c0       	rjmp	.+4      	; 0x1ea2 <DIO_u8GetPinValue+0xac>
    1e9e:	88 0f       	add	r24, r24
    1ea0:	99 1f       	adc	r25, r25
    1ea2:	2a 95       	dec	r18
    1ea4:	e2 f7       	brpl	.-8      	; 0x1e9e <DIO_u8GetPinValue+0xa8>
    1ea6:	9a 01       	movw	r18, r20
    1ea8:	28 23       	and	r18, r24
    1eaa:	39 23       	and	r19, r25
    1eac:	8b 81       	ldd	r24, Y+3	; 0x03
    1eae:	88 2f       	mov	r24, r24
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	a9 01       	movw	r20, r18
    1eb4:	02 c0       	rjmp	.+4      	; 0x1eba <DIO_u8GetPinValue+0xc4>
    1eb6:	55 95       	asr	r21
    1eb8:	47 95       	ror	r20
    1eba:	8a 95       	dec	r24
    1ebc:	e2 f7       	brpl	.-8      	; 0x1eb6 <DIO_u8GetPinValue+0xc0>
    1ebe:	ca 01       	movw	r24, r20
    1ec0:	89 83       	std	Y+1, r24	; 0x01
    1ec2:	57 c0       	rjmp	.+174    	; 0x1f72 <DIO_u8GetPinValue+0x17c>
	case 2: DIO_u8ReturnPinValue = GET_BIT(PINC,PinId); break;
    1ec4:	e3 e3       	ldi	r30, 0x33	; 51
    1ec6:	f0 e0       	ldi	r31, 0x00	; 0
    1ec8:	80 81       	ld	r24, Z
    1eca:	48 2f       	mov	r20, r24
    1ecc:	50 e0       	ldi	r21, 0x00	; 0
    1ece:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed0:	28 2f       	mov	r18, r24
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	81 e0       	ldi	r24, 0x01	; 1
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	02 c0       	rjmp	.+4      	; 0x1ede <DIO_u8GetPinValue+0xe8>
    1eda:	88 0f       	add	r24, r24
    1edc:	99 1f       	adc	r25, r25
    1ede:	2a 95       	dec	r18
    1ee0:	e2 f7       	brpl	.-8      	; 0x1eda <DIO_u8GetPinValue+0xe4>
    1ee2:	9a 01       	movw	r18, r20
    1ee4:	28 23       	and	r18, r24
    1ee6:	39 23       	and	r19, r25
    1ee8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eea:	88 2f       	mov	r24, r24
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	a9 01       	movw	r20, r18
    1ef0:	02 c0       	rjmp	.+4      	; 0x1ef6 <DIO_u8GetPinValue+0x100>
    1ef2:	55 95       	asr	r21
    1ef4:	47 95       	ror	r20
    1ef6:	8a 95       	dec	r24
    1ef8:	e2 f7       	brpl	.-8      	; 0x1ef2 <DIO_u8GetPinValue+0xfc>
    1efa:	ca 01       	movw	r24, r20
    1efc:	89 83       	std	Y+1, r24	; 0x01
    1efe:	39 c0       	rjmp	.+114    	; 0x1f72 <DIO_u8GetPinValue+0x17c>
	case 3: DIO_u8ReturnPinValue = GET_BIT(PIND,PinId); break;
    1f00:	e0 e3       	ldi	r30, 0x30	; 48
    1f02:	f0 e0       	ldi	r31, 0x00	; 0
    1f04:	80 81       	ld	r24, Z
    1f06:	48 2f       	mov	r20, r24
    1f08:	50 e0       	ldi	r21, 0x00	; 0
    1f0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0c:	28 2f       	mov	r18, r24
    1f0e:	30 e0       	ldi	r19, 0x00	; 0
    1f10:	81 e0       	ldi	r24, 0x01	; 1
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	02 c0       	rjmp	.+4      	; 0x1f1a <DIO_u8GetPinValue+0x124>
    1f16:	88 0f       	add	r24, r24
    1f18:	99 1f       	adc	r25, r25
    1f1a:	2a 95       	dec	r18
    1f1c:	e2 f7       	brpl	.-8      	; 0x1f16 <DIO_u8GetPinValue+0x120>
    1f1e:	9a 01       	movw	r18, r20
    1f20:	28 23       	and	r18, r24
    1f22:	39 23       	and	r19, r25
    1f24:	8b 81       	ldd	r24, Y+3	; 0x03
    1f26:	88 2f       	mov	r24, r24
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	a9 01       	movw	r20, r18
    1f2c:	02 c0       	rjmp	.+4      	; 0x1f32 <DIO_u8GetPinValue+0x13c>
    1f2e:	55 95       	asr	r21
    1f30:	47 95       	ror	r20
    1f32:	8a 95       	dec	r24
    1f34:	e2 f7       	brpl	.-8      	; 0x1f2e <DIO_u8GetPinValue+0x138>
    1f36:	ca 01       	movw	r24, r20
    1f38:	89 83       	std	Y+1, r24	; 0x01
    1f3a:	1b c0       	rjmp	.+54     	; 0x1f72 <DIO_u8GetPinValue+0x17c>
	default : DIO_u8ReturnPinValue = GET_BIT(PortId,PinId); break;
    1f3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f3e:	48 2f       	mov	r20, r24
    1f40:	50 e0       	ldi	r21, 0x00	; 0
    1f42:	8b 81       	ldd	r24, Y+3	; 0x03
    1f44:	28 2f       	mov	r18, r24
    1f46:	30 e0       	ldi	r19, 0x00	; 0
    1f48:	81 e0       	ldi	r24, 0x01	; 1
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	02 c0       	rjmp	.+4      	; 0x1f52 <DIO_u8GetPinValue+0x15c>
    1f4e:	88 0f       	add	r24, r24
    1f50:	99 1f       	adc	r25, r25
    1f52:	2a 95       	dec	r18
    1f54:	e2 f7       	brpl	.-8      	; 0x1f4e <DIO_u8GetPinValue+0x158>
    1f56:	9a 01       	movw	r18, r20
    1f58:	28 23       	and	r18, r24
    1f5a:	39 23       	and	r19, r25
    1f5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5e:	88 2f       	mov	r24, r24
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	a9 01       	movw	r20, r18
    1f64:	02 c0       	rjmp	.+4      	; 0x1f6a <DIO_u8GetPinValue+0x174>
    1f66:	55 95       	asr	r21
    1f68:	47 95       	ror	r20
    1f6a:	8a 95       	dec	r24
    1f6c:	e2 f7       	brpl	.-8      	; 0x1f66 <DIO_u8GetPinValue+0x170>
    1f6e:	ca 01       	movw	r24, r20
    1f70:	89 83       	std	Y+1, r24	; 0x01
	}
	return DIO_u8ReturnPinValue;
    1f72:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f74:	0f 90       	pop	r0
    1f76:	0f 90       	pop	r0
    1f78:	0f 90       	pop	r0
    1f7a:	0f 90       	pop	r0
    1f7c:	0f 90       	pop	r0
    1f7e:	cf 91       	pop	r28
    1f80:	df 91       	pop	r29
    1f82:	08 95       	ret

00001f84 <DIO_voidGetPinValue>:

void DIO_voidGetPinValue (u8 PortId,u8 PinId, u8 * ptr)
{
    1f84:	df 93       	push	r29
    1f86:	cf 93       	push	r28
    1f88:	00 d0       	rcall	.+0      	; 0x1f8a <DIO_voidGetPinValue+0x6>
    1f8a:	00 d0       	rcall	.+0      	; 0x1f8c <DIO_voidGetPinValue+0x8>
    1f8c:	00 d0       	rcall	.+0      	; 0x1f8e <DIO_voidGetPinValue+0xa>
    1f8e:	cd b7       	in	r28, 0x3d	; 61
    1f90:	de b7       	in	r29, 0x3e	; 62
    1f92:	89 83       	std	Y+1, r24	; 0x01
    1f94:	6a 83       	std	Y+2, r22	; 0x02
    1f96:	5c 83       	std	Y+4, r21	; 0x04
    1f98:	4b 83       	std	Y+3, r20	; 0x03
	switch(PortId)
    1f9a:	89 81       	ldd	r24, Y+1	; 0x01
    1f9c:	28 2f       	mov	r18, r24
    1f9e:	30 e0       	ldi	r19, 0x00	; 0
    1fa0:	3e 83       	std	Y+6, r19	; 0x06
    1fa2:	2d 83       	std	Y+5, r18	; 0x05
    1fa4:	4d 81       	ldd	r20, Y+5	; 0x05
    1fa6:	5e 81       	ldd	r21, Y+6	; 0x06
    1fa8:	41 30       	cpi	r20, 0x01	; 1
    1faa:	51 05       	cpc	r21, r1
    1fac:	c1 f1       	breq	.+112    	; 0x201e <DIO_voidGetPinValue+0x9a>
    1fae:	8d 81       	ldd	r24, Y+5	; 0x05
    1fb0:	9e 81       	ldd	r25, Y+6	; 0x06
    1fb2:	82 30       	cpi	r24, 0x02	; 2
    1fb4:	91 05       	cpc	r25, r1
    1fb6:	34 f4       	brge	.+12     	; 0x1fc4 <DIO_voidGetPinValue+0x40>
    1fb8:	2d 81       	ldd	r18, Y+5	; 0x05
    1fba:	3e 81       	ldd	r19, Y+6	; 0x06
    1fbc:	21 15       	cp	r18, r1
    1fbe:	31 05       	cpc	r19, r1
    1fc0:	71 f0       	breq	.+28     	; 0x1fde <DIO_voidGetPinValue+0x5a>
    1fc2:	8c c0       	rjmp	.+280    	; 0x20dc <DIO_voidGetPinValue+0x158>
    1fc4:	4d 81       	ldd	r20, Y+5	; 0x05
    1fc6:	5e 81       	ldd	r21, Y+6	; 0x06
    1fc8:	42 30       	cpi	r20, 0x02	; 2
    1fca:	51 05       	cpc	r21, r1
    1fcc:	09 f4       	brne	.+2      	; 0x1fd0 <DIO_voidGetPinValue+0x4c>
    1fce:	47 c0       	rjmp	.+142    	; 0x205e <DIO_voidGetPinValue+0xda>
    1fd0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fd2:	9e 81       	ldd	r25, Y+6	; 0x06
    1fd4:	83 30       	cpi	r24, 0x03	; 3
    1fd6:	91 05       	cpc	r25, r1
    1fd8:	09 f4       	brne	.+2      	; 0x1fdc <DIO_voidGetPinValue+0x58>
    1fda:	61 c0       	rjmp	.+194    	; 0x209e <DIO_voidGetPinValue+0x11a>
    1fdc:	7f c0       	rjmp	.+254    	; 0x20dc <DIO_voidGetPinValue+0x158>
	{
	case 0: *ptr = GET_BIT(DDRA,PinId); break;
    1fde:	ea e3       	ldi	r30, 0x3A	; 58
    1fe0:	f0 e0       	ldi	r31, 0x00	; 0
    1fe2:	80 81       	ld	r24, Z
    1fe4:	48 2f       	mov	r20, r24
    1fe6:	50 e0       	ldi	r21, 0x00	; 0
    1fe8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fea:	28 2f       	mov	r18, r24
    1fec:	30 e0       	ldi	r19, 0x00	; 0
    1fee:	81 e0       	ldi	r24, 0x01	; 1
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	02 c0       	rjmp	.+4      	; 0x1ff8 <DIO_voidGetPinValue+0x74>
    1ff4:	88 0f       	add	r24, r24
    1ff6:	99 1f       	adc	r25, r25
    1ff8:	2a 95       	dec	r18
    1ffa:	e2 f7       	brpl	.-8      	; 0x1ff4 <DIO_voidGetPinValue+0x70>
    1ffc:	9a 01       	movw	r18, r20
    1ffe:	28 23       	and	r18, r24
    2000:	39 23       	and	r19, r25
    2002:	8a 81       	ldd	r24, Y+2	; 0x02
    2004:	88 2f       	mov	r24, r24
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	a9 01       	movw	r20, r18
    200a:	02 c0       	rjmp	.+4      	; 0x2010 <DIO_voidGetPinValue+0x8c>
    200c:	55 95       	asr	r21
    200e:	47 95       	ror	r20
    2010:	8a 95       	dec	r24
    2012:	e2 f7       	brpl	.-8      	; 0x200c <DIO_voidGetPinValue+0x88>
    2014:	ca 01       	movw	r24, r20
    2016:	eb 81       	ldd	r30, Y+3	; 0x03
    2018:	fc 81       	ldd	r31, Y+4	; 0x04
    201a:	80 83       	st	Z, r24
    201c:	5f c0       	rjmp	.+190    	; 0x20dc <DIO_voidGetPinValue+0x158>
	case 1: *ptr = GET_BIT(DDRB,PinId); break;
    201e:	e7 e3       	ldi	r30, 0x37	; 55
    2020:	f0 e0       	ldi	r31, 0x00	; 0
    2022:	80 81       	ld	r24, Z
    2024:	48 2f       	mov	r20, r24
    2026:	50 e0       	ldi	r21, 0x00	; 0
    2028:	8a 81       	ldd	r24, Y+2	; 0x02
    202a:	28 2f       	mov	r18, r24
    202c:	30 e0       	ldi	r19, 0x00	; 0
    202e:	81 e0       	ldi	r24, 0x01	; 1
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	02 c0       	rjmp	.+4      	; 0x2038 <DIO_voidGetPinValue+0xb4>
    2034:	88 0f       	add	r24, r24
    2036:	99 1f       	adc	r25, r25
    2038:	2a 95       	dec	r18
    203a:	e2 f7       	brpl	.-8      	; 0x2034 <DIO_voidGetPinValue+0xb0>
    203c:	9a 01       	movw	r18, r20
    203e:	28 23       	and	r18, r24
    2040:	39 23       	and	r19, r25
    2042:	8a 81       	ldd	r24, Y+2	; 0x02
    2044:	88 2f       	mov	r24, r24
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	a9 01       	movw	r20, r18
    204a:	02 c0       	rjmp	.+4      	; 0x2050 <DIO_voidGetPinValue+0xcc>
    204c:	55 95       	asr	r21
    204e:	47 95       	ror	r20
    2050:	8a 95       	dec	r24
    2052:	e2 f7       	brpl	.-8      	; 0x204c <DIO_voidGetPinValue+0xc8>
    2054:	ca 01       	movw	r24, r20
    2056:	eb 81       	ldd	r30, Y+3	; 0x03
    2058:	fc 81       	ldd	r31, Y+4	; 0x04
    205a:	80 83       	st	Z, r24
    205c:	3f c0       	rjmp	.+126    	; 0x20dc <DIO_voidGetPinValue+0x158>
	case 2: *ptr = GET_BIT(DDRC,PinId); break;
    205e:	e4 e3       	ldi	r30, 0x34	; 52
    2060:	f0 e0       	ldi	r31, 0x00	; 0
    2062:	80 81       	ld	r24, Z
    2064:	48 2f       	mov	r20, r24
    2066:	50 e0       	ldi	r21, 0x00	; 0
    2068:	8a 81       	ldd	r24, Y+2	; 0x02
    206a:	28 2f       	mov	r18, r24
    206c:	30 e0       	ldi	r19, 0x00	; 0
    206e:	81 e0       	ldi	r24, 0x01	; 1
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	02 c0       	rjmp	.+4      	; 0x2078 <DIO_voidGetPinValue+0xf4>
    2074:	88 0f       	add	r24, r24
    2076:	99 1f       	adc	r25, r25
    2078:	2a 95       	dec	r18
    207a:	e2 f7       	brpl	.-8      	; 0x2074 <DIO_voidGetPinValue+0xf0>
    207c:	9a 01       	movw	r18, r20
    207e:	28 23       	and	r18, r24
    2080:	39 23       	and	r19, r25
    2082:	8a 81       	ldd	r24, Y+2	; 0x02
    2084:	88 2f       	mov	r24, r24
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	a9 01       	movw	r20, r18
    208a:	02 c0       	rjmp	.+4      	; 0x2090 <DIO_voidGetPinValue+0x10c>
    208c:	55 95       	asr	r21
    208e:	47 95       	ror	r20
    2090:	8a 95       	dec	r24
    2092:	e2 f7       	brpl	.-8      	; 0x208c <DIO_voidGetPinValue+0x108>
    2094:	ca 01       	movw	r24, r20
    2096:	eb 81       	ldd	r30, Y+3	; 0x03
    2098:	fc 81       	ldd	r31, Y+4	; 0x04
    209a:	80 83       	st	Z, r24
    209c:	1f c0       	rjmp	.+62     	; 0x20dc <DIO_voidGetPinValue+0x158>
	case 3: *ptr = GET_BIT(DDRD,PinId); break;
    209e:	e1 e3       	ldi	r30, 0x31	; 49
    20a0:	f0 e0       	ldi	r31, 0x00	; 0
    20a2:	80 81       	ld	r24, Z
    20a4:	48 2f       	mov	r20, r24
    20a6:	50 e0       	ldi	r21, 0x00	; 0
    20a8:	8a 81       	ldd	r24, Y+2	; 0x02
    20aa:	28 2f       	mov	r18, r24
    20ac:	30 e0       	ldi	r19, 0x00	; 0
    20ae:	81 e0       	ldi	r24, 0x01	; 1
    20b0:	90 e0       	ldi	r25, 0x00	; 0
    20b2:	02 c0       	rjmp	.+4      	; 0x20b8 <DIO_voidGetPinValue+0x134>
    20b4:	88 0f       	add	r24, r24
    20b6:	99 1f       	adc	r25, r25
    20b8:	2a 95       	dec	r18
    20ba:	e2 f7       	brpl	.-8      	; 0x20b4 <DIO_voidGetPinValue+0x130>
    20bc:	9a 01       	movw	r18, r20
    20be:	28 23       	and	r18, r24
    20c0:	39 23       	and	r19, r25
    20c2:	8a 81       	ldd	r24, Y+2	; 0x02
    20c4:	88 2f       	mov	r24, r24
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	a9 01       	movw	r20, r18
    20ca:	02 c0       	rjmp	.+4      	; 0x20d0 <DIO_voidGetPinValue+0x14c>
    20cc:	55 95       	asr	r21
    20ce:	47 95       	ror	r20
    20d0:	8a 95       	dec	r24
    20d2:	e2 f7       	brpl	.-8      	; 0x20cc <DIO_voidGetPinValue+0x148>
    20d4:	ca 01       	movw	r24, r20
    20d6:	eb 81       	ldd	r30, Y+3	; 0x03
    20d8:	fc 81       	ldd	r31, Y+4	; 0x04
    20da:	80 83       	st	Z, r24
	}
	return;
}
    20dc:	26 96       	adiw	r28, 0x06	; 6
    20de:	0f b6       	in	r0, 0x3f	; 63
    20e0:	f8 94       	cli
    20e2:	de bf       	out	0x3e, r29	; 62
    20e4:	0f be       	out	0x3f, r0	; 63
    20e6:	cd bf       	out	0x3d, r28	; 61
    20e8:	cf 91       	pop	r28
    20ea:	df 91       	pop	r29
    20ec:	08 95       	ret

000020ee <ADC_voidInitialization>:

#include "ADC_int.h"
#include "ADC_priv.h"

void ADC_voidInitialization(void)
{
    20ee:	df 93       	push	r29
    20f0:	cf 93       	push	r28
    20f2:	cd b7       	in	r28, 0x3d	; 61
    20f4:	de b7       	in	r29, 0x3e	; 62
	// AVCC as a REF
	CLR_BIT(ADMUX,REFS1);
    20f6:	a7 e2       	ldi	r26, 0x27	; 39
    20f8:	b0 e0       	ldi	r27, 0x00	; 0
    20fa:	e7 e2       	ldi	r30, 0x27	; 39
    20fc:	f0 e0       	ldi	r31, 0x00	; 0
    20fe:	80 81       	ld	r24, Z
    2100:	8f 77       	andi	r24, 0x7F	; 127
    2102:	8c 93       	st	X, r24
	SET_BIT(ADMUX,REFS0);
    2104:	a7 e2       	ldi	r26, 0x27	; 39
    2106:	b0 e0       	ldi	r27, 0x00	; 0
    2108:	e7 e2       	ldi	r30, 0x27	; 39
    210a:	f0 e0       	ldi	r31, 0x00	; 0
    210c:	80 81       	ld	r24, Z
    210e:	80 64       	ori	r24, 0x40	; 64
    2110:	8c 93       	st	X, r24

	// Right Adjusting
	DIO_voidSetPinValue(ADMUX,ADLAR,Low);
    2112:	e7 e2       	ldi	r30, 0x27	; 39
    2114:	f0 e0       	ldi	r31, 0x00	; 0
    2116:	80 81       	ld	r24, Z
    2118:	65 e0       	ldi	r22, 0x05	; 5
    211a:	40 e0       	ldi	r20, 0x00	; 0
    211c:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_voidSetPinValue>
//	CLR_BIT(ADMUX,MUX2);
//	CLR_BIT(ADMUX,MUX1);
//	CLR_BIT(ADMUX,MUX0);

	// Enabling ADC
	SET_BIT(ADCSRA,ADEN);
    2120:	a6 e2       	ldi	r26, 0x26	; 38
    2122:	b0 e0       	ldi	r27, 0x00	; 0
    2124:	e6 e2       	ldi	r30, 0x26	; 38
    2126:	f0 e0       	ldi	r31, 0x00	; 0
    2128:	80 81       	ld	r24, Z
    212a:	80 68       	ori	r24, 0x80	; 128
    212c:	8c 93       	st	X, r24

	// Auto Trigger Disable
	SET_BIT(ADCSRA,ADATE);
    212e:	a6 e2       	ldi	r26, 0x26	; 38
    2130:	b0 e0       	ldi	r27, 0x00	; 0
    2132:	e6 e2       	ldi	r30, 0x26	; 38
    2134:	f0 e0       	ldi	r31, 0x00	; 0
    2136:	80 81       	ld	r24, Z
    2138:	80 62       	ori	r24, 0x20	; 32
    213a:	8c 93       	st	X, r24

	// ADC Prescaler is 64
	SET_BIT(ADCSRA,ADPS2);
    213c:	a6 e2       	ldi	r26, 0x26	; 38
    213e:	b0 e0       	ldi	r27, 0x00	; 0
    2140:	e6 e2       	ldi	r30, 0x26	; 38
    2142:	f0 e0       	ldi	r31, 0x00	; 0
    2144:	80 81       	ld	r24, Z
    2146:	84 60       	ori	r24, 0x04	; 4
    2148:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADPS1);
    214a:	a6 e2       	ldi	r26, 0x26	; 38
    214c:	b0 e0       	ldi	r27, 0x00	; 0
    214e:	e6 e2       	ldi	r30, 0x26	; 38
    2150:	f0 e0       	ldi	r31, 0x00	; 0
    2152:	80 81       	ld	r24, Z
    2154:	82 60       	ori	r24, 0x02	; 2
    2156:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA,ADPS0);
    2158:	a6 e2       	ldi	r26, 0x26	; 38
    215a:	b0 e0       	ldi	r27, 0x00	; 0
    215c:	e6 e2       	ldi	r30, 0x26	; 38
    215e:	f0 e0       	ldi	r31, 0x00	; 0
    2160:	80 81       	ld	r24, Z
    2162:	8e 7f       	andi	r24, 0xFE	; 254
    2164:	8c 93       	st	X, r24

	CLR_BIT(ADCSRA,ADIE);
    2166:	a6 e2       	ldi	r26, 0x26	; 38
    2168:	b0 e0       	ldi	r27, 0x00	; 0
    216a:	e6 e2       	ldi	r30, 0x26	; 38
    216c:	f0 e0       	ldi	r31, 0x00	; 0
    216e:	80 81       	ld	r24, Z
    2170:	87 7f       	andi	r24, 0xF7	; 247
    2172:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADIF);
    2174:	a6 e2       	ldi	r26, 0x26	; 38
    2176:	b0 e0       	ldi	r27, 0x00	; 0
    2178:	e6 e2       	ldi	r30, 0x26	; 38
    217a:	f0 e0       	ldi	r31, 0x00	; 0
    217c:	80 81       	ld	r24, Z
    217e:	80 61       	ori	r24, 0x10	; 16
    2180:	8c 93       	st	X, r24
}
    2182:	cf 91       	pop	r28
    2184:	df 91       	pop	r29
    2186:	08 95       	ret

00002188 <ADC_voidInterruptEnable>:

void ADC_voidInterruptEnable(void)
{
    2188:	df 93       	push	r29
    218a:	cf 93       	push	r28
    218c:	cd b7       	in	r28, 0x3d	; 61
    218e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADIE);
    2190:	a6 e2       	ldi	r26, 0x26	; 38
    2192:	b0 e0       	ldi	r27, 0x00	; 0
    2194:	e6 e2       	ldi	r30, 0x26	; 38
    2196:	f0 e0       	ldi	r31, 0x00	; 0
    2198:	80 81       	ld	r24, Z
    219a:	88 60       	ori	r24, 0x08	; 8
    219c:	8c 93       	st	X, r24
}
    219e:	cf 91       	pop	r28
    21a0:	df 91       	pop	r29
    21a2:	08 95       	ret

000021a4 <ADC_voidInterruptDisable>:

void ADC_voidInterruptDisable(void)
{
    21a4:	df 93       	push	r29
    21a6:	cf 93       	push	r28
    21a8:	cd b7       	in	r28, 0x3d	; 61
    21aa:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA,ADIE);
    21ac:	a6 e2       	ldi	r26, 0x26	; 38
    21ae:	b0 e0       	ldi	r27, 0x00	; 0
    21b0:	e6 e2       	ldi	r30, 0x26	; 38
    21b2:	f0 e0       	ldi	r31, 0x00	; 0
    21b4:	80 81       	ld	r24, Z
    21b6:	87 7f       	andi	r24, 0xF7	; 247
    21b8:	8c 93       	st	X, r24
}
    21ba:	cf 91       	pop	r28
    21bc:	df 91       	pop	r29
    21be:	08 95       	ret

000021c0 <ADC_voidStartConversion>:

void ADC_voidStartConversion(u8 Channel)
{
    21c0:	df 93       	push	r29
    21c2:	cf 93       	push	r28
    21c4:	00 d0       	rcall	.+0      	; 0x21c6 <ADC_voidStartConversion+0x6>
    21c6:	0f 92       	push	r0
    21c8:	cd b7       	in	r28, 0x3d	; 61
    21ca:	de b7       	in	r29, 0x3e	; 62
    21cc:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(ADMUX,MUX4);
    21ce:	a7 e2       	ldi	r26, 0x27	; 39
    21d0:	b0 e0       	ldi	r27, 0x00	; 0
    21d2:	e7 e2       	ldi	r30, 0x27	; 39
    21d4:	f0 e0       	ldi	r31, 0x00	; 0
    21d6:	80 81       	ld	r24, Z
    21d8:	8f 7e       	andi	r24, 0xEF	; 239
    21da:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,MUX3);
    21dc:	a7 e2       	ldi	r26, 0x27	; 39
    21de:	b0 e0       	ldi	r27, 0x00	; 0
    21e0:	e7 e2       	ldi	r30, 0x27	; 39
    21e2:	f0 e0       	ldi	r31, 0x00	; 0
    21e4:	80 81       	ld	r24, Z
    21e6:	87 7f       	andi	r24, 0xF7	; 247
    21e8:	8c 93       	st	X, r24

	switch(Channel)
    21ea:	89 81       	ldd	r24, Y+1	; 0x01
    21ec:	28 2f       	mov	r18, r24
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	3b 83       	std	Y+3, r19	; 0x03
    21f2:	2a 83       	std	Y+2, r18	; 0x02
    21f4:	8a 81       	ldd	r24, Y+2	; 0x02
    21f6:	9b 81       	ldd	r25, Y+3	; 0x03
    21f8:	83 30       	cpi	r24, 0x03	; 3
    21fa:	91 05       	cpc	r25, r1
    21fc:	09 f4       	brne	.+2      	; 0x2200 <ADC_voidStartConversion+0x40>
    21fe:	70 c0       	rjmp	.+224    	; 0x22e0 <ADC_voidStartConversion+0x120>
    2200:	2a 81       	ldd	r18, Y+2	; 0x02
    2202:	3b 81       	ldd	r19, Y+3	; 0x03
    2204:	24 30       	cpi	r18, 0x04	; 4
    2206:	31 05       	cpc	r19, r1
    2208:	84 f4       	brge	.+32     	; 0x222a <ADC_voidStartConversion+0x6a>
    220a:	8a 81       	ldd	r24, Y+2	; 0x02
    220c:	9b 81       	ldd	r25, Y+3	; 0x03
    220e:	81 30       	cpi	r24, 0x01	; 1
    2210:	91 05       	cpc	r25, r1
    2212:	d1 f1       	breq	.+116    	; 0x2288 <ADC_voidStartConversion+0xc8>
    2214:	2a 81       	ldd	r18, Y+2	; 0x02
    2216:	3b 81       	ldd	r19, Y+3	; 0x03
    2218:	22 30       	cpi	r18, 0x02	; 2
    221a:	31 05       	cpc	r19, r1
    221c:	0c f0       	brlt	.+2      	; 0x2220 <ADC_voidStartConversion+0x60>
    221e:	4a c0       	rjmp	.+148    	; 0x22b4 <ADC_voidStartConversion+0xf4>
    2220:	8a 81       	ldd	r24, Y+2	; 0x02
    2222:	9b 81       	ldd	r25, Y+3	; 0x03
    2224:	00 97       	sbiw	r24, 0x00	; 0
    2226:	d1 f0       	breq	.+52     	; 0x225c <ADC_voidStartConversion+0x9c>
    2228:	c8 c0       	rjmp	.+400    	; 0x23ba <ADC_voidStartConversion+0x1fa>
    222a:	2a 81       	ldd	r18, Y+2	; 0x02
    222c:	3b 81       	ldd	r19, Y+3	; 0x03
    222e:	25 30       	cpi	r18, 0x05	; 5
    2230:	31 05       	cpc	r19, r1
    2232:	09 f4       	brne	.+2      	; 0x2236 <ADC_voidStartConversion+0x76>
    2234:	81 c0       	rjmp	.+258    	; 0x2338 <ADC_voidStartConversion+0x178>
    2236:	8a 81       	ldd	r24, Y+2	; 0x02
    2238:	9b 81       	ldd	r25, Y+3	; 0x03
    223a:	85 30       	cpi	r24, 0x05	; 5
    223c:	91 05       	cpc	r25, r1
    223e:	0c f4       	brge	.+2      	; 0x2242 <ADC_voidStartConversion+0x82>
    2240:	65 c0       	rjmp	.+202    	; 0x230c <ADC_voidStartConversion+0x14c>
    2242:	2a 81       	ldd	r18, Y+2	; 0x02
    2244:	3b 81       	ldd	r19, Y+3	; 0x03
    2246:	26 30       	cpi	r18, 0x06	; 6
    2248:	31 05       	cpc	r19, r1
    224a:	09 f4       	brne	.+2      	; 0x224e <ADC_voidStartConversion+0x8e>
    224c:	8b c0       	rjmp	.+278    	; 0x2364 <ADC_voidStartConversion+0x1a4>
    224e:	8a 81       	ldd	r24, Y+2	; 0x02
    2250:	9b 81       	ldd	r25, Y+3	; 0x03
    2252:	87 30       	cpi	r24, 0x07	; 7
    2254:	91 05       	cpc	r25, r1
    2256:	09 f4       	brne	.+2      	; 0x225a <ADC_voidStartConversion+0x9a>
    2258:	9b c0       	rjmp	.+310    	; 0x2390 <ADC_voidStartConversion+0x1d0>
    225a:	af c0       	rjmp	.+350    	; 0x23ba <ADC_voidStartConversion+0x1fa>
	{
		case 0 : CLR_BIT(ADMUX,MUX2);CLR_BIT(ADMUX,MUX1);CLR_BIT(ADMUX,MUX0);break;
    225c:	a7 e2       	ldi	r26, 0x27	; 39
    225e:	b0 e0       	ldi	r27, 0x00	; 0
    2260:	e7 e2       	ldi	r30, 0x27	; 39
    2262:	f0 e0       	ldi	r31, 0x00	; 0
    2264:	80 81       	ld	r24, Z
    2266:	8b 7f       	andi	r24, 0xFB	; 251
    2268:	8c 93       	st	X, r24
    226a:	a7 e2       	ldi	r26, 0x27	; 39
    226c:	b0 e0       	ldi	r27, 0x00	; 0
    226e:	e7 e2       	ldi	r30, 0x27	; 39
    2270:	f0 e0       	ldi	r31, 0x00	; 0
    2272:	80 81       	ld	r24, Z
    2274:	8d 7f       	andi	r24, 0xFD	; 253
    2276:	8c 93       	st	X, r24
    2278:	a7 e2       	ldi	r26, 0x27	; 39
    227a:	b0 e0       	ldi	r27, 0x00	; 0
    227c:	e7 e2       	ldi	r30, 0x27	; 39
    227e:	f0 e0       	ldi	r31, 0x00	; 0
    2280:	80 81       	ld	r24, Z
    2282:	8e 7f       	andi	r24, 0xFE	; 254
    2284:	8c 93       	st	X, r24
    2286:	99 c0       	rjmp	.+306    	; 0x23ba <ADC_voidStartConversion+0x1fa>
		case 1 : CLR_BIT(ADMUX,MUX2);CLR_BIT(ADMUX,MUX1);SET_BIT(ADMUX,MUX0);break;
    2288:	a7 e2       	ldi	r26, 0x27	; 39
    228a:	b0 e0       	ldi	r27, 0x00	; 0
    228c:	e7 e2       	ldi	r30, 0x27	; 39
    228e:	f0 e0       	ldi	r31, 0x00	; 0
    2290:	80 81       	ld	r24, Z
    2292:	8b 7f       	andi	r24, 0xFB	; 251
    2294:	8c 93       	st	X, r24
    2296:	a7 e2       	ldi	r26, 0x27	; 39
    2298:	b0 e0       	ldi	r27, 0x00	; 0
    229a:	e7 e2       	ldi	r30, 0x27	; 39
    229c:	f0 e0       	ldi	r31, 0x00	; 0
    229e:	80 81       	ld	r24, Z
    22a0:	8d 7f       	andi	r24, 0xFD	; 253
    22a2:	8c 93       	st	X, r24
    22a4:	a7 e2       	ldi	r26, 0x27	; 39
    22a6:	b0 e0       	ldi	r27, 0x00	; 0
    22a8:	e7 e2       	ldi	r30, 0x27	; 39
    22aa:	f0 e0       	ldi	r31, 0x00	; 0
    22ac:	80 81       	ld	r24, Z
    22ae:	81 60       	ori	r24, 0x01	; 1
    22b0:	8c 93       	st	X, r24
    22b2:	83 c0       	rjmp	.+262    	; 0x23ba <ADC_voidStartConversion+0x1fa>
		case 2 : CLR_BIT(ADMUX,MUX2);SET_BIT(ADMUX,MUX1);CLR_BIT(ADMUX,MUX0);break;
    22b4:	a7 e2       	ldi	r26, 0x27	; 39
    22b6:	b0 e0       	ldi	r27, 0x00	; 0
    22b8:	e7 e2       	ldi	r30, 0x27	; 39
    22ba:	f0 e0       	ldi	r31, 0x00	; 0
    22bc:	80 81       	ld	r24, Z
    22be:	8b 7f       	andi	r24, 0xFB	; 251
    22c0:	8c 93       	st	X, r24
    22c2:	a7 e2       	ldi	r26, 0x27	; 39
    22c4:	b0 e0       	ldi	r27, 0x00	; 0
    22c6:	e7 e2       	ldi	r30, 0x27	; 39
    22c8:	f0 e0       	ldi	r31, 0x00	; 0
    22ca:	80 81       	ld	r24, Z
    22cc:	82 60       	ori	r24, 0x02	; 2
    22ce:	8c 93       	st	X, r24
    22d0:	a7 e2       	ldi	r26, 0x27	; 39
    22d2:	b0 e0       	ldi	r27, 0x00	; 0
    22d4:	e7 e2       	ldi	r30, 0x27	; 39
    22d6:	f0 e0       	ldi	r31, 0x00	; 0
    22d8:	80 81       	ld	r24, Z
    22da:	8e 7f       	andi	r24, 0xFE	; 254
    22dc:	8c 93       	st	X, r24
    22de:	6d c0       	rjmp	.+218    	; 0x23ba <ADC_voidStartConversion+0x1fa>
		case 3 : CLR_BIT(ADMUX,MUX2);SET_BIT(ADMUX,MUX1);SET_BIT(ADMUX,MUX0);break;
    22e0:	a7 e2       	ldi	r26, 0x27	; 39
    22e2:	b0 e0       	ldi	r27, 0x00	; 0
    22e4:	e7 e2       	ldi	r30, 0x27	; 39
    22e6:	f0 e0       	ldi	r31, 0x00	; 0
    22e8:	80 81       	ld	r24, Z
    22ea:	8b 7f       	andi	r24, 0xFB	; 251
    22ec:	8c 93       	st	X, r24
    22ee:	a7 e2       	ldi	r26, 0x27	; 39
    22f0:	b0 e0       	ldi	r27, 0x00	; 0
    22f2:	e7 e2       	ldi	r30, 0x27	; 39
    22f4:	f0 e0       	ldi	r31, 0x00	; 0
    22f6:	80 81       	ld	r24, Z
    22f8:	82 60       	ori	r24, 0x02	; 2
    22fa:	8c 93       	st	X, r24
    22fc:	a7 e2       	ldi	r26, 0x27	; 39
    22fe:	b0 e0       	ldi	r27, 0x00	; 0
    2300:	e7 e2       	ldi	r30, 0x27	; 39
    2302:	f0 e0       	ldi	r31, 0x00	; 0
    2304:	80 81       	ld	r24, Z
    2306:	81 60       	ori	r24, 0x01	; 1
    2308:	8c 93       	st	X, r24
    230a:	57 c0       	rjmp	.+174    	; 0x23ba <ADC_voidStartConversion+0x1fa>
		case 4 : SET_BIT(ADMUX,MUX2);CLR_BIT(ADMUX,MUX1);CLR_BIT(ADMUX,MUX0);break;
    230c:	a7 e2       	ldi	r26, 0x27	; 39
    230e:	b0 e0       	ldi	r27, 0x00	; 0
    2310:	e7 e2       	ldi	r30, 0x27	; 39
    2312:	f0 e0       	ldi	r31, 0x00	; 0
    2314:	80 81       	ld	r24, Z
    2316:	84 60       	ori	r24, 0x04	; 4
    2318:	8c 93       	st	X, r24
    231a:	a7 e2       	ldi	r26, 0x27	; 39
    231c:	b0 e0       	ldi	r27, 0x00	; 0
    231e:	e7 e2       	ldi	r30, 0x27	; 39
    2320:	f0 e0       	ldi	r31, 0x00	; 0
    2322:	80 81       	ld	r24, Z
    2324:	8d 7f       	andi	r24, 0xFD	; 253
    2326:	8c 93       	st	X, r24
    2328:	a7 e2       	ldi	r26, 0x27	; 39
    232a:	b0 e0       	ldi	r27, 0x00	; 0
    232c:	e7 e2       	ldi	r30, 0x27	; 39
    232e:	f0 e0       	ldi	r31, 0x00	; 0
    2330:	80 81       	ld	r24, Z
    2332:	8e 7f       	andi	r24, 0xFE	; 254
    2334:	8c 93       	st	X, r24
    2336:	41 c0       	rjmp	.+130    	; 0x23ba <ADC_voidStartConversion+0x1fa>
		case 5 : SET_BIT(ADMUX,MUX2);CLR_BIT(ADMUX,MUX1);SET_BIT(ADMUX,MUX0);break;
    2338:	a7 e2       	ldi	r26, 0x27	; 39
    233a:	b0 e0       	ldi	r27, 0x00	; 0
    233c:	e7 e2       	ldi	r30, 0x27	; 39
    233e:	f0 e0       	ldi	r31, 0x00	; 0
    2340:	80 81       	ld	r24, Z
    2342:	84 60       	ori	r24, 0x04	; 4
    2344:	8c 93       	st	X, r24
    2346:	a7 e2       	ldi	r26, 0x27	; 39
    2348:	b0 e0       	ldi	r27, 0x00	; 0
    234a:	e7 e2       	ldi	r30, 0x27	; 39
    234c:	f0 e0       	ldi	r31, 0x00	; 0
    234e:	80 81       	ld	r24, Z
    2350:	8d 7f       	andi	r24, 0xFD	; 253
    2352:	8c 93       	st	X, r24
    2354:	a7 e2       	ldi	r26, 0x27	; 39
    2356:	b0 e0       	ldi	r27, 0x00	; 0
    2358:	e7 e2       	ldi	r30, 0x27	; 39
    235a:	f0 e0       	ldi	r31, 0x00	; 0
    235c:	80 81       	ld	r24, Z
    235e:	81 60       	ori	r24, 0x01	; 1
    2360:	8c 93       	st	X, r24
    2362:	2b c0       	rjmp	.+86     	; 0x23ba <ADC_voidStartConversion+0x1fa>
		case 6 : SET_BIT(ADMUX,MUX2);SET_BIT(ADMUX,MUX1);CLR_BIT(ADMUX,MUX0);break;
    2364:	a7 e2       	ldi	r26, 0x27	; 39
    2366:	b0 e0       	ldi	r27, 0x00	; 0
    2368:	e7 e2       	ldi	r30, 0x27	; 39
    236a:	f0 e0       	ldi	r31, 0x00	; 0
    236c:	80 81       	ld	r24, Z
    236e:	84 60       	ori	r24, 0x04	; 4
    2370:	8c 93       	st	X, r24
    2372:	a7 e2       	ldi	r26, 0x27	; 39
    2374:	b0 e0       	ldi	r27, 0x00	; 0
    2376:	e7 e2       	ldi	r30, 0x27	; 39
    2378:	f0 e0       	ldi	r31, 0x00	; 0
    237a:	80 81       	ld	r24, Z
    237c:	82 60       	ori	r24, 0x02	; 2
    237e:	8c 93       	st	X, r24
    2380:	a7 e2       	ldi	r26, 0x27	; 39
    2382:	b0 e0       	ldi	r27, 0x00	; 0
    2384:	e7 e2       	ldi	r30, 0x27	; 39
    2386:	f0 e0       	ldi	r31, 0x00	; 0
    2388:	80 81       	ld	r24, Z
    238a:	8e 7f       	andi	r24, 0xFE	; 254
    238c:	8c 93       	st	X, r24
    238e:	15 c0       	rjmp	.+42     	; 0x23ba <ADC_voidStartConversion+0x1fa>
		case 7 : SET_BIT(ADMUX,MUX2);SET_BIT(ADMUX,MUX1);SET_BIT(ADMUX,MUX0);break;
    2390:	a7 e2       	ldi	r26, 0x27	; 39
    2392:	b0 e0       	ldi	r27, 0x00	; 0
    2394:	e7 e2       	ldi	r30, 0x27	; 39
    2396:	f0 e0       	ldi	r31, 0x00	; 0
    2398:	80 81       	ld	r24, Z
    239a:	84 60       	ori	r24, 0x04	; 4
    239c:	8c 93       	st	X, r24
    239e:	a7 e2       	ldi	r26, 0x27	; 39
    23a0:	b0 e0       	ldi	r27, 0x00	; 0
    23a2:	e7 e2       	ldi	r30, 0x27	; 39
    23a4:	f0 e0       	ldi	r31, 0x00	; 0
    23a6:	80 81       	ld	r24, Z
    23a8:	82 60       	ori	r24, 0x02	; 2
    23aa:	8c 93       	st	X, r24
    23ac:	a7 e2       	ldi	r26, 0x27	; 39
    23ae:	b0 e0       	ldi	r27, 0x00	; 0
    23b0:	e7 e2       	ldi	r30, 0x27	; 39
    23b2:	f0 e0       	ldi	r31, 0x00	; 0
    23b4:	80 81       	ld	r24, Z
    23b6:	81 60       	ori	r24, 0x01	; 1
    23b8:	8c 93       	st	X, r24
	}

	SET_BIT(ADCSRA,ADSC);
    23ba:	a6 e2       	ldi	r26, 0x26	; 38
    23bc:	b0 e0       	ldi	r27, 0x00	; 0
    23be:	e6 e2       	ldi	r30, 0x26	; 38
    23c0:	f0 e0       	ldi	r31, 0x00	; 0
    23c2:	80 81       	ld	r24, Z
    23c4:	80 64       	ori	r24, 0x40	; 64
    23c6:	8c 93       	st	X, r24
}
    23c8:	0f 90       	pop	r0
    23ca:	0f 90       	pop	r0
    23cc:	0f 90       	pop	r0
    23ce:	cf 91       	pop	r28
    23d0:	df 91       	pop	r29
    23d2:	08 95       	ret

000023d4 <ADC_voidReadConversionValue_Polling>:

void ADC_voidReadConversionValue_Polling(void)
{
    23d4:	df 93       	push	r29
    23d6:	cf 93       	push	r28
    23d8:	cd b7       	in	r28, 0x3d	; 61
    23da:	de b7       	in	r29, 0x3e	; 62
	while(!GET_BIT(ADCSRA,ADIF));
    23dc:	e6 e2       	ldi	r30, 0x26	; 38
    23de:	f0 e0       	ldi	r31, 0x00	; 0
    23e0:	80 81       	ld	r24, Z
    23e2:	88 2f       	mov	r24, r24
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	80 71       	andi	r24, 0x10	; 16
    23e8:	90 70       	andi	r25, 0x00	; 0
    23ea:	95 95       	asr	r25
    23ec:	87 95       	ror	r24
    23ee:	95 95       	asr	r25
    23f0:	87 95       	ror	r24
    23f2:	95 95       	asr	r25
    23f4:	87 95       	ror	r24
    23f6:	95 95       	asr	r25
    23f8:	87 95       	ror	r24
    23fa:	00 97       	sbiw	r24, 0x00	; 0
    23fc:	79 f3       	breq	.-34     	; 0x23dc <ADC_voidReadConversionValue_Polling+0x8>
	LCD_KIT_voidRunCommand(0x01);
    23fe:	81 e0       	ldi	r24, 0x01	; 1
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	0e 94 4a 1f 	call	0x3e94	; 0x3e94 <LCD_KIT_voidRunCommand>
	LCD_KIT_voidDisplayBigNumber((u16)(ADCL|(ADCH<<8)));
    2406:	e4 e2       	ldi	r30, 0x24	; 36
    2408:	f0 e0       	ldi	r31, 0x00	; 0
    240a:	80 81       	ld	r24, Z
    240c:	28 2f       	mov	r18, r24
    240e:	30 e0       	ldi	r19, 0x00	; 0
    2410:	e5 e2       	ldi	r30, 0x25	; 37
    2412:	f0 e0       	ldi	r31, 0x00	; 0
    2414:	80 81       	ld	r24, Z
    2416:	88 2f       	mov	r24, r24
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	98 2f       	mov	r25, r24
    241c:	88 27       	eor	r24, r24
    241e:	82 2b       	or	r24, r18
    2420:	93 2b       	or	r25, r19
    2422:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <LCD_KIT_voidDisplayBigNumber>
}
    2426:	cf 91       	pop	r28
    2428:	df 91       	pop	r29
    242a:	08 95       	ret

0000242c <__vector_16>:

void (*ADC_ISR)(void)=NULL;
void __vector_16(void)
{
    242c:	1f 92       	push	r1
    242e:	0f 92       	push	r0
    2430:	0f b6       	in	r0, 0x3f	; 63
    2432:	0f 92       	push	r0
    2434:	11 24       	eor	r1, r1
    2436:	2f 93       	push	r18
    2438:	3f 93       	push	r19
    243a:	4f 93       	push	r20
    243c:	5f 93       	push	r21
    243e:	6f 93       	push	r22
    2440:	7f 93       	push	r23
    2442:	8f 93       	push	r24
    2444:	9f 93       	push	r25
    2446:	af 93       	push	r26
    2448:	bf 93       	push	r27
    244a:	ef 93       	push	r30
    244c:	ff 93       	push	r31
    244e:	df 93       	push	r29
    2450:	cf 93       	push	r28
    2452:	cd b7       	in	r28, 0x3d	; 61
    2454:	de b7       	in	r29, 0x3e	; 62
	ADC_ISR();
    2456:	e0 91 8a 01 	lds	r30, 0x018A
    245a:	f0 91 8b 01 	lds	r31, 0x018B
    245e:	09 95       	icall
}
    2460:	cf 91       	pop	r28
    2462:	df 91       	pop	r29
    2464:	ff 91       	pop	r31
    2466:	ef 91       	pop	r30
    2468:	bf 91       	pop	r27
    246a:	af 91       	pop	r26
    246c:	9f 91       	pop	r25
    246e:	8f 91       	pop	r24
    2470:	7f 91       	pop	r23
    2472:	6f 91       	pop	r22
    2474:	5f 91       	pop	r21
    2476:	4f 91       	pop	r20
    2478:	3f 91       	pop	r19
    247a:	2f 91       	pop	r18
    247c:	0f 90       	pop	r0
    247e:	0f be       	out	0x3f, r0	; 63
    2480:	0f 90       	pop	r0
    2482:	1f 90       	pop	r1
    2484:	18 95       	reti

00002486 <ADC_CallBack>:
void ADC_CallBack(void (*PF_ADC)(void))
{
    2486:	df 93       	push	r29
    2488:	cf 93       	push	r28
    248a:	00 d0       	rcall	.+0      	; 0x248c <ADC_CallBack+0x6>
    248c:	cd b7       	in	r28, 0x3d	; 61
    248e:	de b7       	in	r29, 0x3e	; 62
    2490:	9a 83       	std	Y+2, r25	; 0x02
    2492:	89 83       	std	Y+1, r24	; 0x01
	ADC_ISR=PF_ADC;
    2494:	89 81       	ldd	r24, Y+1	; 0x01
    2496:	9a 81       	ldd	r25, Y+2	; 0x02
    2498:	90 93 8b 01 	sts	0x018B, r25
    249c:	80 93 8a 01 	sts	0x018A, r24
}
    24a0:	0f 90       	pop	r0
    24a2:	0f 90       	pop	r0
    24a4:	cf 91       	pop	r28
    24a6:	df 91       	pop	r29
    24a8:	08 95       	ret

000024aa <SEG_KIT_voidInitialization>:
#include "SEG_KIT_int.h"

#include <util/delay.h>

void SEG_KIT_voidInitialization(void)
{
    24aa:	df 93       	push	r29
    24ac:	cf 93       	push	r28
    24ae:	cd b7       	in	r28, 0x3d	; 61
    24b0:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(PortA,Pin3,Output);
    24b2:	80 e0       	ldi	r24, 0x00	; 0
    24b4:	63 e0       	ldi	r22, 0x03	; 3
    24b6:	41 e0       	ldi	r20, 0x01	; 1
    24b8:	0e 94 17 0b 	call	0x162e	; 0x162e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PortA,Pin2,Output);
    24bc:	80 e0       	ldi	r24, 0x00	; 0
    24be:	62 e0       	ldi	r22, 0x02	; 2
    24c0:	41 e0       	ldi	r20, 0x01	; 1
    24c2:	0e 94 17 0b 	call	0x162e	; 0x162e <DIO_voidSetPinDirection>

	DIO_voidSetPinDirection(PortB,Pin5,Output);
    24c6:	81 e0       	ldi	r24, 0x01	; 1
    24c8:	65 e0       	ldi	r22, 0x05	; 5
    24ca:	41 e0       	ldi	r20, 0x01	; 1
    24cc:	0e 94 17 0b 	call	0x162e	; 0x162e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PortB,Pin6,Output);
    24d0:	81 e0       	ldi	r24, 0x01	; 1
    24d2:	66 e0       	ldi	r22, 0x06	; 6
    24d4:	41 e0       	ldi	r20, 0x01	; 1
    24d6:	0e 94 17 0b 	call	0x162e	; 0x162e <DIO_voidSetPinDirection>

	DIO_voidSetPinDirection(PortB,Pin0,Output);
    24da:	81 e0       	ldi	r24, 0x01	; 1
    24dc:	60 e0       	ldi	r22, 0x00	; 0
    24de:	41 e0       	ldi	r20, 0x01	; 1
    24e0:	0e 94 17 0b 	call	0x162e	; 0x162e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PortB,Pin1,Output);
    24e4:	81 e0       	ldi	r24, 0x01	; 1
    24e6:	61 e0       	ldi	r22, 0x01	; 1
    24e8:	41 e0       	ldi	r20, 0x01	; 1
    24ea:	0e 94 17 0b 	call	0x162e	; 0x162e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PortB,Pin2,Output);
    24ee:	81 e0       	ldi	r24, 0x01	; 1
    24f0:	62 e0       	ldi	r22, 0x02	; 2
    24f2:	41 e0       	ldi	r20, 0x01	; 1
    24f4:	0e 94 17 0b 	call	0x162e	; 0x162e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PortB,Pin4,Output);
    24f8:	81 e0       	ldi	r24, 0x01	; 1
    24fa:	64 e0       	ldi	r22, 0x04	; 4
    24fc:	41 e0       	ldi	r20, 0x01	; 1
    24fe:	0e 94 17 0b 	call	0x162e	; 0x162e <DIO_voidSetPinDirection>


	DIO_voidSetPinValue(PortA,Pin3,High);
    2502:	80 e0       	ldi	r24, 0x00	; 0
    2504:	63 e0       	ldi	r22, 0x03	; 3
    2506:	41 e0       	ldi	r20, 0x01	; 1
    2508:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PortA,Pin2,High);
    250c:	80 e0       	ldi	r24, 0x00	; 0
    250e:	62 e0       	ldi	r22, 0x02	; 2
    2510:	41 e0       	ldi	r20, 0x01	; 1
    2512:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_voidSetPinValue>

	DIO_voidSetPinValue(PortB,Pin5,High);
    2516:	81 e0       	ldi	r24, 0x01	; 1
    2518:	65 e0       	ldi	r22, 0x05	; 5
    251a:	41 e0       	ldi	r20, 0x01	; 1
    251c:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PortB,Pin6,High);
    2520:	81 e0       	ldi	r24, 0x01	; 1
    2522:	66 e0       	ldi	r22, 0x06	; 6
    2524:	41 e0       	ldi	r20, 0x01	; 1
    2526:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_voidSetPinValue>

	DIO_voidSetPinValue(PortB,Pin0,Low);
    252a:	81 e0       	ldi	r24, 0x01	; 1
    252c:	60 e0       	ldi	r22, 0x00	; 0
    252e:	40 e0       	ldi	r20, 0x00	; 0
    2530:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PortB,Pin1,Low);
    2534:	81 e0       	ldi	r24, 0x01	; 1
    2536:	61 e0       	ldi	r22, 0x01	; 1
    2538:	40 e0       	ldi	r20, 0x00	; 0
    253a:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PortB,Pin2,Low);
    253e:	81 e0       	ldi	r24, 0x01	; 1
    2540:	62 e0       	ldi	r22, 0x02	; 2
    2542:	40 e0       	ldi	r20, 0x00	; 0
    2544:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PortB,Pin4,Low);
    2548:	81 e0       	ldi	r24, 0x01	; 1
    254a:	64 e0       	ldi	r22, 0x04	; 4
    254c:	40 e0       	ldi	r20, 0x00	; 0
    254e:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_voidSetPinValue>
}
    2552:	cf 91       	pop	r28
    2554:	df 91       	pop	r29
    2556:	08 95       	ret

00002558 <SEG_KIT_voidDisplayNumber>:

void SEG_KIT_voidDisplayNumber(u8 Number,u8 SEGNumber)
{
    2558:	df 93       	push	r29
    255a:	cf 93       	push	r28
    255c:	00 d0       	rcall	.+0      	; 0x255e <SEG_KIT_voidDisplayNumber+0x6>
    255e:	00 d0       	rcall	.+0      	; 0x2560 <SEG_KIT_voidDisplayNumber+0x8>
    2560:	00 d0       	rcall	.+0      	; 0x2562 <SEG_KIT_voidDisplayNumber+0xa>
    2562:	cd b7       	in	r28, 0x3d	; 61
    2564:	de b7       	in	r29, 0x3e	; 62
    2566:	89 83       	std	Y+1, r24	; 0x01
    2568:	6a 83       	std	Y+2, r22	; 0x02
	switch(Number)
    256a:	89 81       	ldd	r24, Y+1	; 0x01
    256c:	28 2f       	mov	r18, r24
    256e:	30 e0       	ldi	r19, 0x00	; 0
    2570:	3e 83       	std	Y+6, r19	; 0x06
    2572:	2d 83       	std	Y+5, r18	; 0x05
    2574:	8d 81       	ldd	r24, Y+5	; 0x05
    2576:	9e 81       	ldd	r25, Y+6	; 0x06
    2578:	84 30       	cpi	r24, 0x04	; 4
    257a:	91 05       	cpc	r25, r1
    257c:	09 f4       	brne	.+2      	; 0x2580 <SEG_KIT_voidDisplayNumber+0x28>
    257e:	59 c0       	rjmp	.+178    	; 0x2632 <SEG_KIT_voidDisplayNumber+0xda>
    2580:	2d 81       	ldd	r18, Y+5	; 0x05
    2582:	3e 81       	ldd	r19, Y+6	; 0x06
    2584:	25 30       	cpi	r18, 0x05	; 5
    2586:	31 05       	cpc	r19, r1
    2588:	dc f4       	brge	.+54     	; 0x25c0 <SEG_KIT_voidDisplayNumber+0x68>
    258a:	8d 81       	ldd	r24, Y+5	; 0x05
    258c:	9e 81       	ldd	r25, Y+6	; 0x06
    258e:	81 30       	cpi	r24, 0x01	; 1
    2590:	91 05       	cpc	r25, r1
    2592:	09 f4       	brne	.+2      	; 0x2596 <SEG_KIT_voidDisplayNumber+0x3e>
    2594:	3c c0       	rjmp	.+120    	; 0x260e <SEG_KIT_voidDisplayNumber+0xb6>
    2596:	2d 81       	ldd	r18, Y+5	; 0x05
    2598:	3e 81       	ldd	r19, Y+6	; 0x06
    259a:	22 30       	cpi	r18, 0x02	; 2
    259c:	31 05       	cpc	r19, r1
    259e:	2c f4       	brge	.+10     	; 0x25aa <SEG_KIT_voidDisplayNumber+0x52>
    25a0:	8d 81       	ldd	r24, Y+5	; 0x05
    25a2:	9e 81       	ldd	r25, Y+6	; 0x06
    25a4:	00 97       	sbiw	r24, 0x00	; 0
    25a6:	69 f1       	breq	.+90     	; 0x2602 <SEG_KIT_voidDisplayNumber+0xaa>
    25a8:	67 c0       	rjmp	.+206    	; 0x2678 <SEG_KIT_voidDisplayNumber+0x120>
    25aa:	2d 81       	ldd	r18, Y+5	; 0x05
    25ac:	3e 81       	ldd	r19, Y+6	; 0x06
    25ae:	22 30       	cpi	r18, 0x02	; 2
    25b0:	31 05       	cpc	r19, r1
    25b2:	99 f1       	breq	.+102    	; 0x261a <SEG_KIT_voidDisplayNumber+0xc2>
    25b4:	8d 81       	ldd	r24, Y+5	; 0x05
    25b6:	9e 81       	ldd	r25, Y+6	; 0x06
    25b8:	83 30       	cpi	r24, 0x03	; 3
    25ba:	91 05       	cpc	r25, r1
    25bc:	a1 f1       	breq	.+104    	; 0x2626 <SEG_KIT_voidDisplayNumber+0xce>
    25be:	5c c0       	rjmp	.+184    	; 0x2678 <SEG_KIT_voidDisplayNumber+0x120>
    25c0:	2d 81       	ldd	r18, Y+5	; 0x05
    25c2:	3e 81       	ldd	r19, Y+6	; 0x06
    25c4:	27 30       	cpi	r18, 0x07	; 7
    25c6:	31 05       	cpc	r19, r1
    25c8:	09 f4       	brne	.+2      	; 0x25cc <SEG_KIT_voidDisplayNumber+0x74>
    25ca:	45 c0       	rjmp	.+138    	; 0x2656 <SEG_KIT_voidDisplayNumber+0xfe>
    25cc:	8d 81       	ldd	r24, Y+5	; 0x05
    25ce:	9e 81       	ldd	r25, Y+6	; 0x06
    25d0:	88 30       	cpi	r24, 0x08	; 8
    25d2:	91 05       	cpc	r25, r1
    25d4:	5c f4       	brge	.+22     	; 0x25ec <SEG_KIT_voidDisplayNumber+0x94>
    25d6:	2d 81       	ldd	r18, Y+5	; 0x05
    25d8:	3e 81       	ldd	r19, Y+6	; 0x06
    25da:	25 30       	cpi	r18, 0x05	; 5
    25dc:	31 05       	cpc	r19, r1
    25de:	79 f1       	breq	.+94     	; 0x263e <SEG_KIT_voidDisplayNumber+0xe6>
    25e0:	8d 81       	ldd	r24, Y+5	; 0x05
    25e2:	9e 81       	ldd	r25, Y+6	; 0x06
    25e4:	86 30       	cpi	r24, 0x06	; 6
    25e6:	91 05       	cpc	r25, r1
    25e8:	81 f1       	breq	.+96     	; 0x264a <SEG_KIT_voidDisplayNumber+0xf2>
    25ea:	46 c0       	rjmp	.+140    	; 0x2678 <SEG_KIT_voidDisplayNumber+0x120>
    25ec:	2d 81       	ldd	r18, Y+5	; 0x05
    25ee:	3e 81       	ldd	r19, Y+6	; 0x06
    25f0:	28 30       	cpi	r18, 0x08	; 8
    25f2:	31 05       	cpc	r19, r1
    25f4:	b1 f1       	breq	.+108    	; 0x2662 <SEG_KIT_voidDisplayNumber+0x10a>
    25f6:	8d 81       	ldd	r24, Y+5	; 0x05
    25f8:	9e 81       	ldd	r25, Y+6	; 0x06
    25fa:	89 30       	cpi	r24, 0x09	; 9
    25fc:	91 05       	cpc	r25, r1
    25fe:	b9 f1       	breq	.+110    	; 0x266e <SEG_KIT_voidDisplayNumber+0x116>
    2600:	3b c0       	rjmp	.+118    	; 0x2678 <SEG_KIT_voidDisplayNumber+0x120>
	{
	case 0: DIO_voidSetPortValueMask(PortB,0,0xE8); break;
    2602:	81 e0       	ldi	r24, 0x01	; 1
    2604:	60 e0       	ldi	r22, 0x00	; 0
    2606:	48 ee       	ldi	r20, 0xE8	; 232
    2608:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <DIO_voidSetPortValueMask>
    260c:	35 c0       	rjmp	.+106    	; 0x2678 <SEG_KIT_voidDisplayNumber+0x120>
	case 1: DIO_voidSetPortValueMask(PortB,1,0xE8); break;
    260e:	81 e0       	ldi	r24, 0x01	; 1
    2610:	61 e0       	ldi	r22, 0x01	; 1
    2612:	48 ee       	ldi	r20, 0xE8	; 232
    2614:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <DIO_voidSetPortValueMask>
    2618:	2f c0       	rjmp	.+94     	; 0x2678 <SEG_KIT_voidDisplayNumber+0x120>
	case 2: DIO_voidSetPortValueMask(PortB,2,0xE8); break;
    261a:	81 e0       	ldi	r24, 0x01	; 1
    261c:	62 e0       	ldi	r22, 0x02	; 2
    261e:	48 ee       	ldi	r20, 0xE8	; 232
    2620:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <DIO_voidSetPortValueMask>
    2624:	29 c0       	rjmp	.+82     	; 0x2678 <SEG_KIT_voidDisplayNumber+0x120>
	case 3: DIO_voidSetPortValueMask(PortB,3,0xE8); break;
    2626:	81 e0       	ldi	r24, 0x01	; 1
    2628:	63 e0       	ldi	r22, 0x03	; 3
    262a:	48 ee       	ldi	r20, 0xE8	; 232
    262c:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <DIO_voidSetPortValueMask>
    2630:	23 c0       	rjmp	.+70     	; 0x2678 <SEG_KIT_voidDisplayNumber+0x120>
	case 4: DIO_voidSetPortValueMask(PortB,4,0xE8); break;
    2632:	81 e0       	ldi	r24, 0x01	; 1
    2634:	64 e0       	ldi	r22, 0x04	; 4
    2636:	48 ee       	ldi	r20, 0xE8	; 232
    2638:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <DIO_voidSetPortValueMask>
    263c:	1d c0       	rjmp	.+58     	; 0x2678 <SEG_KIT_voidDisplayNumber+0x120>
	case 5: DIO_voidSetPortValueMask(PortB,5,0xE8); break;
    263e:	81 e0       	ldi	r24, 0x01	; 1
    2640:	65 e0       	ldi	r22, 0x05	; 5
    2642:	48 ee       	ldi	r20, 0xE8	; 232
    2644:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <DIO_voidSetPortValueMask>
    2648:	17 c0       	rjmp	.+46     	; 0x2678 <SEG_KIT_voidDisplayNumber+0x120>
	case 6: DIO_voidSetPortValueMask(PortB,6,0xE8); break;
    264a:	81 e0       	ldi	r24, 0x01	; 1
    264c:	66 e0       	ldi	r22, 0x06	; 6
    264e:	48 ee       	ldi	r20, 0xE8	; 232
    2650:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <DIO_voidSetPortValueMask>
    2654:	11 c0       	rjmp	.+34     	; 0x2678 <SEG_KIT_voidDisplayNumber+0x120>
	case 7: DIO_voidSetPortValueMask(PortB,7,0xE8); break;
    2656:	81 e0       	ldi	r24, 0x01	; 1
    2658:	67 e0       	ldi	r22, 0x07	; 7
    265a:	48 ee       	ldi	r20, 0xE8	; 232
    265c:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <DIO_voidSetPortValueMask>
    2660:	0b c0       	rjmp	.+22     	; 0x2678 <SEG_KIT_voidDisplayNumber+0x120>
	case 8: DIO_voidSetPortValueMask(PortB,8+8,0xE8); break;
    2662:	81 e0       	ldi	r24, 0x01	; 1
    2664:	60 e1       	ldi	r22, 0x10	; 16
    2666:	48 ee       	ldi	r20, 0xE8	; 232
    2668:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <DIO_voidSetPortValueMask>
    266c:	05 c0       	rjmp	.+10     	; 0x2678 <SEG_KIT_voidDisplayNumber+0x120>
	case 9: DIO_voidSetPortValueMask(PortB,9+8,0xE8); break;
    266e:	81 e0       	ldi	r24, 0x01	; 1
    2670:	61 e1       	ldi	r22, 0x11	; 17
    2672:	48 ee       	ldi	r20, 0xE8	; 232
    2674:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <DIO_voidSetPortValueMask>
	}
	switch(SEGNumber)
    2678:	8a 81       	ldd	r24, Y+2	; 0x02
    267a:	28 2f       	mov	r18, r24
    267c:	30 e0       	ldi	r19, 0x00	; 0
    267e:	3c 83       	std	Y+4, r19	; 0x04
    2680:	2b 83       	std	Y+3, r18	; 0x03
    2682:	8b 81       	ldd	r24, Y+3	; 0x03
    2684:	9c 81       	ldd	r25, Y+4	; 0x04
    2686:	82 30       	cpi	r24, 0x02	; 2
    2688:	91 05       	cpc	r25, r1
    268a:	09 f1       	breq	.+66     	; 0x26ce <SEG_KIT_voidDisplayNumber+0x176>
    268c:	2b 81       	ldd	r18, Y+3	; 0x03
    268e:	3c 81       	ldd	r19, Y+4	; 0x04
    2690:	23 30       	cpi	r18, 0x03	; 3
    2692:	31 05       	cpc	r19, r1
    2694:	34 f4       	brge	.+12     	; 0x26a2 <SEG_KIT_voidDisplayNumber+0x14a>
    2696:	8b 81       	ldd	r24, Y+3	; 0x03
    2698:	9c 81       	ldd	r25, Y+4	; 0x04
    269a:	81 30       	cpi	r24, 0x01	; 1
    269c:	91 05       	cpc	r25, r1
    269e:	61 f0       	breq	.+24     	; 0x26b8 <SEG_KIT_voidDisplayNumber+0x160>
    26a0:	36 c0       	rjmp	.+108    	; 0x270e <SEG_KIT_voidDisplayNumber+0x1b6>
    26a2:	2b 81       	ldd	r18, Y+3	; 0x03
    26a4:	3c 81       	ldd	r19, Y+4	; 0x04
    26a6:	23 30       	cpi	r18, 0x03	; 3
    26a8:	31 05       	cpc	r19, r1
    26aa:	e1 f0       	breq	.+56     	; 0x26e4 <SEG_KIT_voidDisplayNumber+0x18c>
    26ac:	8b 81       	ldd	r24, Y+3	; 0x03
    26ae:	9c 81       	ldd	r25, Y+4	; 0x04
    26b0:	84 30       	cpi	r24, 0x04	; 4
    26b2:	91 05       	cpc	r25, r1
    26b4:	11 f1       	breq	.+68     	; 0x26fa <SEG_KIT_voidDisplayNumber+0x1a2>
    26b6:	2b c0       	rjmp	.+86     	; 0x270e <SEG_KIT_voidDisplayNumber+0x1b6>
	{
	case 1: DIO_voidSetPortValueMask(PortA,0x04,0xF3);DIO_voidSetPortValueMask(PortB,0x60,0x9F);break;
    26b8:	80 e0       	ldi	r24, 0x00	; 0
    26ba:	64 e0       	ldi	r22, 0x04	; 4
    26bc:	43 ef       	ldi	r20, 0xF3	; 243
    26be:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <DIO_voidSetPortValueMask>
    26c2:	81 e0       	ldi	r24, 0x01	; 1
    26c4:	60 e6       	ldi	r22, 0x60	; 96
    26c6:	4f e9       	ldi	r20, 0x9F	; 159
    26c8:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <DIO_voidSetPortValueMask>
    26cc:	20 c0       	rjmp	.+64     	; 0x270e <SEG_KIT_voidDisplayNumber+0x1b6>
	case 2: DIO_voidSetPortValueMask(PortA,0x08,0xF3);DIO_voidSetPortValueMask(PortB,0x60,0x9F);break;
    26ce:	80 e0       	ldi	r24, 0x00	; 0
    26d0:	68 e0       	ldi	r22, 0x08	; 8
    26d2:	43 ef       	ldi	r20, 0xF3	; 243
    26d4:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <DIO_voidSetPortValueMask>
    26d8:	81 e0       	ldi	r24, 0x01	; 1
    26da:	60 e6       	ldi	r22, 0x60	; 96
    26dc:	4f e9       	ldi	r20, 0x9F	; 159
    26de:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <DIO_voidSetPortValueMask>
    26e2:	15 c0       	rjmp	.+42     	; 0x270e <SEG_KIT_voidDisplayNumber+0x1b6>
	case 3: DIO_voidSetPortValueMask(PortA,0x0C,0xF3);DIO_voidSetPortValueMask(PortB,0x40,0x9F);break;
    26e4:	80 e0       	ldi	r24, 0x00	; 0
    26e6:	6c e0       	ldi	r22, 0x0C	; 12
    26e8:	43 ef       	ldi	r20, 0xF3	; 243
    26ea:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <DIO_voidSetPortValueMask>
    26ee:	81 e0       	ldi	r24, 0x01	; 1
    26f0:	60 e4       	ldi	r22, 0x40	; 64
    26f2:	4f e9       	ldi	r20, 0x9F	; 159
    26f4:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <DIO_voidSetPortValueMask>
    26f8:	0a c0       	rjmp	.+20     	; 0x270e <SEG_KIT_voidDisplayNumber+0x1b6>
	case 4: DIO_voidSetPortValueMask(PortA,0x0C,0xF3);DIO_voidSetPortValueMask(PortB,0x20,0x9F);break;
    26fa:	80 e0       	ldi	r24, 0x00	; 0
    26fc:	6c e0       	ldi	r22, 0x0C	; 12
    26fe:	43 ef       	ldi	r20, 0xF3	; 243
    2700:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <DIO_voidSetPortValueMask>
    2704:	81 e0       	ldi	r24, 0x01	; 1
    2706:	60 e2       	ldi	r22, 0x20	; 32
    2708:	4f e9       	ldi	r20, 0x9F	; 159
    270a:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <DIO_voidSetPortValueMask>
	}
}
    270e:	26 96       	adiw	r28, 0x06	; 6
    2710:	0f b6       	in	r0, 0x3f	; 63
    2712:	f8 94       	cli
    2714:	de bf       	out	0x3e, r29	; 62
    2716:	0f be       	out	0x3f, r0	; 63
    2718:	cd bf       	out	0x3d, r28	; 61
    271a:	cf 91       	pop	r28
    271c:	df 91       	pop	r29
    271e:	08 95       	ret

00002720 <SEG_KIT_voidDisplayBigNumber>:

void SEG_KIT_voidDisplayBigNumber(u16 Number)
{
    2720:	0f 93       	push	r16
    2722:	1f 93       	push	r17
    2724:	df 93       	push	r29
    2726:	cf 93       	push	r28
    2728:	cd b7       	in	r28, 0x3d	; 61
    272a:	de b7       	in	r29, 0x3e	; 62
    272c:	c0 58       	subi	r28, 0x80	; 128
    272e:	d0 40       	sbci	r29, 0x00	; 0
    2730:	0f b6       	in	r0, 0x3f	; 63
    2732:	f8 94       	cli
    2734:	de bf       	out	0x3e, r29	; 62
    2736:	0f be       	out	0x3f, r0	; 63
    2738:	cd bf       	out	0x3d, r28	; 61
    273a:	fe 01       	movw	r30, r28
    273c:	e1 58       	subi	r30, 0x81	; 129
    273e:	ff 4f       	sbci	r31, 0xFF	; 255
    2740:	91 83       	std	Z+1, r25	; 0x01
    2742:	80 83       	st	Z, r24
	if(Number<=9)
    2744:	fe 01       	movw	r30, r28
    2746:	e1 58       	subi	r30, 0x81	; 129
    2748:	ff 4f       	sbci	r31, 0xFF	; 255
    274a:	80 81       	ld	r24, Z
    274c:	91 81       	ldd	r25, Z+1	; 0x01
    274e:	8a 30       	cpi	r24, 0x0A	; 10
    2750:	91 05       	cpc	r25, r1
    2752:	40 f4       	brcc	.+16     	; 0x2764 <SEG_KIT_voidDisplayBigNumber+0x44>
	{
		SEG_KIT_voidDisplayNumber(Number,SEG1);
    2754:	fe 01       	movw	r30, r28
    2756:	e1 58       	subi	r30, 0x81	; 129
    2758:	ff 4f       	sbci	r31, 0xFF	; 255
    275a:	80 81       	ld	r24, Z
    275c:	61 e0       	ldi	r22, 0x01	; 1
    275e:	0e 94 ac 12 	call	0x2558	; 0x2558 <SEG_KIT_voidDisplayNumber>
    2762:	b9 c5       	rjmp	.+2930   	; 0x32d6 <SEG_KIT_voidDisplayBigNumber+0xbb6>
	}
	else if(Number<=99)
    2764:	fe 01       	movw	r30, r28
    2766:	e1 58       	subi	r30, 0x81	; 129
    2768:	ff 4f       	sbci	r31, 0xFF	; 255
    276a:	80 81       	ld	r24, Z
    276c:	91 81       	ldd	r25, Z+1	; 0x01
    276e:	84 36       	cpi	r24, 0x64	; 100
    2770:	91 05       	cpc	r25, r1
    2772:	08 f0       	brcs	.+2      	; 0x2776 <SEG_KIT_voidDisplayBigNumber+0x56>
    2774:	83 c1       	rjmp	.+774    	; 0x2a7c <SEG_KIT_voidDisplayBigNumber+0x35c>
	{
		SEG_KIT_voidDisplayNumber(Number%10,SEG1);
    2776:	fe 01       	movw	r30, r28
    2778:	e1 58       	subi	r30, 0x81	; 129
    277a:	ff 4f       	sbci	r31, 0xFF	; 255
    277c:	80 81       	ld	r24, Z
    277e:	91 81       	ldd	r25, Z+1	; 0x01
    2780:	2a e0       	ldi	r18, 0x0A	; 10
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	b9 01       	movw	r22, r18
    2786:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <__udivmodhi4>
    278a:	61 e0       	ldi	r22, 0x01	; 1
    278c:	0e 94 ac 12 	call	0x2558	; 0x2558 <SEG_KIT_voidDisplayNumber>
    2790:	fe 01       	movw	r30, r28
    2792:	e5 58       	subi	r30, 0x85	; 133
    2794:	ff 4f       	sbci	r31, 0xFF	; 255
    2796:	80 e0       	ldi	r24, 0x00	; 0
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	a0 e0       	ldi	r26, 0x00	; 0
    279c:	b0 e4       	ldi	r27, 0x40	; 64
    279e:	80 83       	st	Z, r24
    27a0:	91 83       	std	Z+1, r25	; 0x01
    27a2:	a2 83       	std	Z+2, r26	; 0x02
    27a4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27a6:	8e 01       	movw	r16, r28
    27a8:	09 58       	subi	r16, 0x89	; 137
    27aa:	1f 4f       	sbci	r17, 0xFF	; 255
    27ac:	fe 01       	movw	r30, r28
    27ae:	e5 58       	subi	r30, 0x85	; 133
    27b0:	ff 4f       	sbci	r31, 0xFF	; 255
    27b2:	60 81       	ld	r22, Z
    27b4:	71 81       	ldd	r23, Z+1	; 0x01
    27b6:	82 81       	ldd	r24, Z+2	; 0x02
    27b8:	93 81       	ldd	r25, Z+3	; 0x03
    27ba:	20 e0       	ldi	r18, 0x00	; 0
    27bc:	30 e0       	ldi	r19, 0x00	; 0
    27be:	4a e7       	ldi	r20, 0x7A	; 122
    27c0:	55 e4       	ldi	r21, 0x45	; 69
    27c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27c6:	dc 01       	movw	r26, r24
    27c8:	cb 01       	movw	r24, r22
    27ca:	f8 01       	movw	r30, r16
    27cc:	80 83       	st	Z, r24
    27ce:	91 83       	std	Z+1, r25	; 0x01
    27d0:	a2 83       	std	Z+2, r26	; 0x02
    27d2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    27d4:	fe 01       	movw	r30, r28
    27d6:	e9 58       	subi	r30, 0x89	; 137
    27d8:	ff 4f       	sbci	r31, 0xFF	; 255
    27da:	60 81       	ld	r22, Z
    27dc:	71 81       	ldd	r23, Z+1	; 0x01
    27de:	82 81       	ldd	r24, Z+2	; 0x02
    27e0:	93 81       	ldd	r25, Z+3	; 0x03
    27e2:	20 e0       	ldi	r18, 0x00	; 0
    27e4:	30 e0       	ldi	r19, 0x00	; 0
    27e6:	40 e8       	ldi	r20, 0x80	; 128
    27e8:	5f e3       	ldi	r21, 0x3F	; 63
    27ea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27ee:	88 23       	and	r24, r24
    27f0:	44 f4       	brge	.+16     	; 0x2802 <SEG_KIT_voidDisplayBigNumber+0xe2>
		__ticks = 1;
    27f2:	fe 01       	movw	r30, r28
    27f4:	eb 58       	subi	r30, 0x8B	; 139
    27f6:	ff 4f       	sbci	r31, 0xFF	; 255
    27f8:	81 e0       	ldi	r24, 0x01	; 1
    27fa:	90 e0       	ldi	r25, 0x00	; 0
    27fc:	91 83       	std	Z+1, r25	; 0x01
    27fe:	80 83       	st	Z, r24
    2800:	64 c0       	rjmp	.+200    	; 0x28ca <SEG_KIT_voidDisplayBigNumber+0x1aa>
	else if (__tmp > 65535)
    2802:	fe 01       	movw	r30, r28
    2804:	e9 58       	subi	r30, 0x89	; 137
    2806:	ff 4f       	sbci	r31, 0xFF	; 255
    2808:	60 81       	ld	r22, Z
    280a:	71 81       	ldd	r23, Z+1	; 0x01
    280c:	82 81       	ldd	r24, Z+2	; 0x02
    280e:	93 81       	ldd	r25, Z+3	; 0x03
    2810:	20 e0       	ldi	r18, 0x00	; 0
    2812:	3f ef       	ldi	r19, 0xFF	; 255
    2814:	4f e7       	ldi	r20, 0x7F	; 127
    2816:	57 e4       	ldi	r21, 0x47	; 71
    2818:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    281c:	18 16       	cp	r1, r24
    281e:	0c f0       	brlt	.+2      	; 0x2822 <SEG_KIT_voidDisplayBigNumber+0x102>
    2820:	43 c0       	rjmp	.+134    	; 0x28a8 <SEG_KIT_voidDisplayBigNumber+0x188>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2822:	fe 01       	movw	r30, r28
    2824:	e5 58       	subi	r30, 0x85	; 133
    2826:	ff 4f       	sbci	r31, 0xFF	; 255
    2828:	60 81       	ld	r22, Z
    282a:	71 81       	ldd	r23, Z+1	; 0x01
    282c:	82 81       	ldd	r24, Z+2	; 0x02
    282e:	93 81       	ldd	r25, Z+3	; 0x03
    2830:	20 e0       	ldi	r18, 0x00	; 0
    2832:	30 e0       	ldi	r19, 0x00	; 0
    2834:	40 e2       	ldi	r20, 0x20	; 32
    2836:	51 e4       	ldi	r21, 0x41	; 65
    2838:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    283c:	dc 01       	movw	r26, r24
    283e:	cb 01       	movw	r24, r22
    2840:	8e 01       	movw	r16, r28
    2842:	0b 58       	subi	r16, 0x8B	; 139
    2844:	1f 4f       	sbci	r17, 0xFF	; 255
    2846:	bc 01       	movw	r22, r24
    2848:	cd 01       	movw	r24, r26
    284a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    284e:	dc 01       	movw	r26, r24
    2850:	cb 01       	movw	r24, r22
    2852:	f8 01       	movw	r30, r16
    2854:	91 83       	std	Z+1, r25	; 0x01
    2856:	80 83       	st	Z, r24
    2858:	1f c0       	rjmp	.+62     	; 0x2898 <SEG_KIT_voidDisplayBigNumber+0x178>
    285a:	fe 01       	movw	r30, r28
    285c:	ed 58       	subi	r30, 0x8D	; 141
    285e:	ff 4f       	sbci	r31, 0xFF	; 255
    2860:	80 e9       	ldi	r24, 0x90	; 144
    2862:	91 e0       	ldi	r25, 0x01	; 1
    2864:	91 83       	std	Z+1, r25	; 0x01
    2866:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2868:	fe 01       	movw	r30, r28
    286a:	ed 58       	subi	r30, 0x8D	; 141
    286c:	ff 4f       	sbci	r31, 0xFF	; 255
    286e:	80 81       	ld	r24, Z
    2870:	91 81       	ldd	r25, Z+1	; 0x01
    2872:	01 97       	sbiw	r24, 0x01	; 1
    2874:	f1 f7       	brne	.-4      	; 0x2872 <SEG_KIT_voidDisplayBigNumber+0x152>
    2876:	fe 01       	movw	r30, r28
    2878:	ed 58       	subi	r30, 0x8D	; 141
    287a:	ff 4f       	sbci	r31, 0xFF	; 255
    287c:	91 83       	std	Z+1, r25	; 0x01
    287e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2880:	de 01       	movw	r26, r28
    2882:	ab 58       	subi	r26, 0x8B	; 139
    2884:	bf 4f       	sbci	r27, 0xFF	; 255
    2886:	fe 01       	movw	r30, r28
    2888:	eb 58       	subi	r30, 0x8B	; 139
    288a:	ff 4f       	sbci	r31, 0xFF	; 255
    288c:	80 81       	ld	r24, Z
    288e:	91 81       	ldd	r25, Z+1	; 0x01
    2890:	01 97       	sbiw	r24, 0x01	; 1
    2892:	11 96       	adiw	r26, 0x01	; 1
    2894:	9c 93       	st	X, r25
    2896:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2898:	fe 01       	movw	r30, r28
    289a:	eb 58       	subi	r30, 0x8B	; 139
    289c:	ff 4f       	sbci	r31, 0xFF	; 255
    289e:	80 81       	ld	r24, Z
    28a0:	91 81       	ldd	r25, Z+1	; 0x01
    28a2:	00 97       	sbiw	r24, 0x00	; 0
    28a4:	d1 f6       	brne	.-76     	; 0x285a <SEG_KIT_voidDisplayBigNumber+0x13a>
    28a6:	27 c0       	rjmp	.+78     	; 0x28f6 <SEG_KIT_voidDisplayBigNumber+0x1d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28a8:	8e 01       	movw	r16, r28
    28aa:	0b 58       	subi	r16, 0x8B	; 139
    28ac:	1f 4f       	sbci	r17, 0xFF	; 255
    28ae:	fe 01       	movw	r30, r28
    28b0:	e9 58       	subi	r30, 0x89	; 137
    28b2:	ff 4f       	sbci	r31, 0xFF	; 255
    28b4:	60 81       	ld	r22, Z
    28b6:	71 81       	ldd	r23, Z+1	; 0x01
    28b8:	82 81       	ldd	r24, Z+2	; 0x02
    28ba:	93 81       	ldd	r25, Z+3	; 0x03
    28bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28c0:	dc 01       	movw	r26, r24
    28c2:	cb 01       	movw	r24, r22
    28c4:	f8 01       	movw	r30, r16
    28c6:	91 83       	std	Z+1, r25	; 0x01
    28c8:	80 83       	st	Z, r24
    28ca:	de 01       	movw	r26, r28
    28cc:	af 58       	subi	r26, 0x8F	; 143
    28ce:	bf 4f       	sbci	r27, 0xFF	; 255
    28d0:	fe 01       	movw	r30, r28
    28d2:	eb 58       	subi	r30, 0x8B	; 139
    28d4:	ff 4f       	sbci	r31, 0xFF	; 255
    28d6:	80 81       	ld	r24, Z
    28d8:	91 81       	ldd	r25, Z+1	; 0x01
    28da:	8d 93       	st	X+, r24
    28dc:	9c 93       	st	X, r25
    28de:	fe 01       	movw	r30, r28
    28e0:	ef 58       	subi	r30, 0x8F	; 143
    28e2:	ff 4f       	sbci	r31, 0xFF	; 255
    28e4:	80 81       	ld	r24, Z
    28e6:	91 81       	ldd	r25, Z+1	; 0x01
    28e8:	01 97       	sbiw	r24, 0x01	; 1
    28ea:	f1 f7       	brne	.-4      	; 0x28e8 <SEG_KIT_voidDisplayBigNumber+0x1c8>
    28ec:	fe 01       	movw	r30, r28
    28ee:	ef 58       	subi	r30, 0x8F	; 143
    28f0:	ff 4f       	sbci	r31, 0xFF	; 255
    28f2:	91 83       	std	Z+1, r25	; 0x01
    28f4:	80 83       	st	Z, r24
		_delay_ms(2);
		SEG_KIT_voidDisplayNumber(Number/10,SEG2);
    28f6:	fe 01       	movw	r30, r28
    28f8:	e1 58       	subi	r30, 0x81	; 129
    28fa:	ff 4f       	sbci	r31, 0xFF	; 255
    28fc:	80 81       	ld	r24, Z
    28fe:	91 81       	ldd	r25, Z+1	; 0x01
    2900:	2a e0       	ldi	r18, 0x0A	; 10
    2902:	30 e0       	ldi	r19, 0x00	; 0
    2904:	b9 01       	movw	r22, r18
    2906:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <__udivmodhi4>
    290a:	cb 01       	movw	r24, r22
    290c:	62 e0       	ldi	r22, 0x02	; 2
    290e:	0e 94 ac 12 	call	0x2558	; 0x2558 <SEG_KIT_voidDisplayNumber>
    2912:	fe 01       	movw	r30, r28
    2914:	e3 59       	subi	r30, 0x93	; 147
    2916:	ff 4f       	sbci	r31, 0xFF	; 255
    2918:	80 e0       	ldi	r24, 0x00	; 0
    291a:	90 e0       	ldi	r25, 0x00	; 0
    291c:	a0 e0       	ldi	r26, 0x00	; 0
    291e:	b0 e4       	ldi	r27, 0x40	; 64
    2920:	80 83       	st	Z, r24
    2922:	91 83       	std	Z+1, r25	; 0x01
    2924:	a2 83       	std	Z+2, r26	; 0x02
    2926:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2928:	8e 01       	movw	r16, r28
    292a:	07 59       	subi	r16, 0x97	; 151
    292c:	1f 4f       	sbci	r17, 0xFF	; 255
    292e:	fe 01       	movw	r30, r28
    2930:	e3 59       	subi	r30, 0x93	; 147
    2932:	ff 4f       	sbci	r31, 0xFF	; 255
    2934:	60 81       	ld	r22, Z
    2936:	71 81       	ldd	r23, Z+1	; 0x01
    2938:	82 81       	ldd	r24, Z+2	; 0x02
    293a:	93 81       	ldd	r25, Z+3	; 0x03
    293c:	20 e0       	ldi	r18, 0x00	; 0
    293e:	30 e0       	ldi	r19, 0x00	; 0
    2940:	4a e7       	ldi	r20, 0x7A	; 122
    2942:	55 e4       	ldi	r21, 0x45	; 69
    2944:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2948:	dc 01       	movw	r26, r24
    294a:	cb 01       	movw	r24, r22
    294c:	f8 01       	movw	r30, r16
    294e:	80 83       	st	Z, r24
    2950:	91 83       	std	Z+1, r25	; 0x01
    2952:	a2 83       	std	Z+2, r26	; 0x02
    2954:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2956:	fe 01       	movw	r30, r28
    2958:	e7 59       	subi	r30, 0x97	; 151
    295a:	ff 4f       	sbci	r31, 0xFF	; 255
    295c:	60 81       	ld	r22, Z
    295e:	71 81       	ldd	r23, Z+1	; 0x01
    2960:	82 81       	ldd	r24, Z+2	; 0x02
    2962:	93 81       	ldd	r25, Z+3	; 0x03
    2964:	20 e0       	ldi	r18, 0x00	; 0
    2966:	30 e0       	ldi	r19, 0x00	; 0
    2968:	40 e8       	ldi	r20, 0x80	; 128
    296a:	5f e3       	ldi	r21, 0x3F	; 63
    296c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2970:	88 23       	and	r24, r24
    2972:	44 f4       	brge	.+16     	; 0x2984 <SEG_KIT_voidDisplayBigNumber+0x264>
		__ticks = 1;
    2974:	fe 01       	movw	r30, r28
    2976:	e9 59       	subi	r30, 0x99	; 153
    2978:	ff 4f       	sbci	r31, 0xFF	; 255
    297a:	81 e0       	ldi	r24, 0x01	; 1
    297c:	90 e0       	ldi	r25, 0x00	; 0
    297e:	91 83       	std	Z+1, r25	; 0x01
    2980:	80 83       	st	Z, r24
    2982:	64 c0       	rjmp	.+200    	; 0x2a4c <SEG_KIT_voidDisplayBigNumber+0x32c>
	else if (__tmp > 65535)
    2984:	fe 01       	movw	r30, r28
    2986:	e7 59       	subi	r30, 0x97	; 151
    2988:	ff 4f       	sbci	r31, 0xFF	; 255
    298a:	60 81       	ld	r22, Z
    298c:	71 81       	ldd	r23, Z+1	; 0x01
    298e:	82 81       	ldd	r24, Z+2	; 0x02
    2990:	93 81       	ldd	r25, Z+3	; 0x03
    2992:	20 e0       	ldi	r18, 0x00	; 0
    2994:	3f ef       	ldi	r19, 0xFF	; 255
    2996:	4f e7       	ldi	r20, 0x7F	; 127
    2998:	57 e4       	ldi	r21, 0x47	; 71
    299a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    299e:	18 16       	cp	r1, r24
    29a0:	0c f0       	brlt	.+2      	; 0x29a4 <SEG_KIT_voidDisplayBigNumber+0x284>
    29a2:	43 c0       	rjmp	.+134    	; 0x2a2a <SEG_KIT_voidDisplayBigNumber+0x30a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29a4:	fe 01       	movw	r30, r28
    29a6:	e3 59       	subi	r30, 0x93	; 147
    29a8:	ff 4f       	sbci	r31, 0xFF	; 255
    29aa:	60 81       	ld	r22, Z
    29ac:	71 81       	ldd	r23, Z+1	; 0x01
    29ae:	82 81       	ldd	r24, Z+2	; 0x02
    29b0:	93 81       	ldd	r25, Z+3	; 0x03
    29b2:	20 e0       	ldi	r18, 0x00	; 0
    29b4:	30 e0       	ldi	r19, 0x00	; 0
    29b6:	40 e2       	ldi	r20, 0x20	; 32
    29b8:	51 e4       	ldi	r21, 0x41	; 65
    29ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29be:	dc 01       	movw	r26, r24
    29c0:	cb 01       	movw	r24, r22
    29c2:	8e 01       	movw	r16, r28
    29c4:	09 59       	subi	r16, 0x99	; 153
    29c6:	1f 4f       	sbci	r17, 0xFF	; 255
    29c8:	bc 01       	movw	r22, r24
    29ca:	cd 01       	movw	r24, r26
    29cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29d0:	dc 01       	movw	r26, r24
    29d2:	cb 01       	movw	r24, r22
    29d4:	f8 01       	movw	r30, r16
    29d6:	91 83       	std	Z+1, r25	; 0x01
    29d8:	80 83       	st	Z, r24
    29da:	1f c0       	rjmp	.+62     	; 0x2a1a <SEG_KIT_voidDisplayBigNumber+0x2fa>
    29dc:	fe 01       	movw	r30, r28
    29de:	eb 59       	subi	r30, 0x9B	; 155
    29e0:	ff 4f       	sbci	r31, 0xFF	; 255
    29e2:	80 e9       	ldi	r24, 0x90	; 144
    29e4:	91 e0       	ldi	r25, 0x01	; 1
    29e6:	91 83       	std	Z+1, r25	; 0x01
    29e8:	80 83       	st	Z, r24
    29ea:	fe 01       	movw	r30, r28
    29ec:	eb 59       	subi	r30, 0x9B	; 155
    29ee:	ff 4f       	sbci	r31, 0xFF	; 255
    29f0:	80 81       	ld	r24, Z
    29f2:	91 81       	ldd	r25, Z+1	; 0x01
    29f4:	01 97       	sbiw	r24, 0x01	; 1
    29f6:	f1 f7       	brne	.-4      	; 0x29f4 <SEG_KIT_voidDisplayBigNumber+0x2d4>
    29f8:	fe 01       	movw	r30, r28
    29fa:	eb 59       	subi	r30, 0x9B	; 155
    29fc:	ff 4f       	sbci	r31, 0xFF	; 255
    29fe:	91 83       	std	Z+1, r25	; 0x01
    2a00:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a02:	de 01       	movw	r26, r28
    2a04:	a9 59       	subi	r26, 0x99	; 153
    2a06:	bf 4f       	sbci	r27, 0xFF	; 255
    2a08:	fe 01       	movw	r30, r28
    2a0a:	e9 59       	subi	r30, 0x99	; 153
    2a0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a0e:	80 81       	ld	r24, Z
    2a10:	91 81       	ldd	r25, Z+1	; 0x01
    2a12:	01 97       	sbiw	r24, 0x01	; 1
    2a14:	11 96       	adiw	r26, 0x01	; 1
    2a16:	9c 93       	st	X, r25
    2a18:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a1a:	fe 01       	movw	r30, r28
    2a1c:	e9 59       	subi	r30, 0x99	; 153
    2a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a20:	80 81       	ld	r24, Z
    2a22:	91 81       	ldd	r25, Z+1	; 0x01
    2a24:	00 97       	sbiw	r24, 0x00	; 0
    2a26:	d1 f6       	brne	.-76     	; 0x29dc <SEG_KIT_voidDisplayBigNumber+0x2bc>
    2a28:	56 c4       	rjmp	.+2220   	; 0x32d6 <SEG_KIT_voidDisplayBigNumber+0xbb6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a2a:	8e 01       	movw	r16, r28
    2a2c:	09 59       	subi	r16, 0x99	; 153
    2a2e:	1f 4f       	sbci	r17, 0xFF	; 255
    2a30:	fe 01       	movw	r30, r28
    2a32:	e7 59       	subi	r30, 0x97	; 151
    2a34:	ff 4f       	sbci	r31, 0xFF	; 255
    2a36:	60 81       	ld	r22, Z
    2a38:	71 81       	ldd	r23, Z+1	; 0x01
    2a3a:	82 81       	ldd	r24, Z+2	; 0x02
    2a3c:	93 81       	ldd	r25, Z+3	; 0x03
    2a3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a42:	dc 01       	movw	r26, r24
    2a44:	cb 01       	movw	r24, r22
    2a46:	f8 01       	movw	r30, r16
    2a48:	91 83       	std	Z+1, r25	; 0x01
    2a4a:	80 83       	st	Z, r24
    2a4c:	de 01       	movw	r26, r28
    2a4e:	ad 59       	subi	r26, 0x9D	; 157
    2a50:	bf 4f       	sbci	r27, 0xFF	; 255
    2a52:	fe 01       	movw	r30, r28
    2a54:	e9 59       	subi	r30, 0x99	; 153
    2a56:	ff 4f       	sbci	r31, 0xFF	; 255
    2a58:	80 81       	ld	r24, Z
    2a5a:	91 81       	ldd	r25, Z+1	; 0x01
    2a5c:	11 96       	adiw	r26, 0x01	; 1
    2a5e:	9c 93       	st	X, r25
    2a60:	8e 93       	st	-X, r24
    2a62:	fe 01       	movw	r30, r28
    2a64:	ed 59       	subi	r30, 0x9D	; 157
    2a66:	ff 4f       	sbci	r31, 0xFF	; 255
    2a68:	80 81       	ld	r24, Z
    2a6a:	91 81       	ldd	r25, Z+1	; 0x01
    2a6c:	01 97       	sbiw	r24, 0x01	; 1
    2a6e:	f1 f7       	brne	.-4      	; 0x2a6c <SEG_KIT_voidDisplayBigNumber+0x34c>
    2a70:	fe 01       	movw	r30, r28
    2a72:	ed 59       	subi	r30, 0x9D	; 157
    2a74:	ff 4f       	sbci	r31, 0xFF	; 255
    2a76:	91 83       	std	Z+1, r25	; 0x01
    2a78:	80 83       	st	Z, r24
    2a7a:	2d c4       	rjmp	.+2138   	; 0x32d6 <SEG_KIT_voidDisplayBigNumber+0xbb6>
		_delay_ms(2);
	}
	else if(Number<=999)
    2a7c:	fe 01       	movw	r30, r28
    2a7e:	e1 58       	subi	r30, 0x81	; 129
    2a80:	ff 4f       	sbci	r31, 0xFF	; 255
    2a82:	80 81       	ld	r24, Z
    2a84:	91 81       	ldd	r25, Z+1	; 0x01
    2a86:	f3 e0       	ldi	r31, 0x03	; 3
    2a88:	88 3e       	cpi	r24, 0xE8	; 232
    2a8a:	9f 07       	cpc	r25, r31
    2a8c:	08 f0       	brcs	.+2      	; 0x2a90 <SEG_KIT_voidDisplayBigNumber+0x370>
    2a8e:	1a c2       	rjmp	.+1076   	; 0x2ec4 <SEG_KIT_voidDisplayBigNumber+0x7a4>
		{
			SEG_KIT_voidDisplayNumber(Number%10,SEG1);
    2a90:	fe 01       	movw	r30, r28
    2a92:	e1 58       	subi	r30, 0x81	; 129
    2a94:	ff 4f       	sbci	r31, 0xFF	; 255
    2a96:	80 81       	ld	r24, Z
    2a98:	91 81       	ldd	r25, Z+1	; 0x01
    2a9a:	2a e0       	ldi	r18, 0x0A	; 10
    2a9c:	30 e0       	ldi	r19, 0x00	; 0
    2a9e:	b9 01       	movw	r22, r18
    2aa0:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <__udivmodhi4>
    2aa4:	61 e0       	ldi	r22, 0x01	; 1
    2aa6:	0e 94 ac 12 	call	0x2558	; 0x2558 <SEG_KIT_voidDisplayNumber>
    2aaa:	fe 01       	movw	r30, r28
    2aac:	e1 5a       	subi	r30, 0xA1	; 161
    2aae:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab0:	80 e0       	ldi	r24, 0x00	; 0
    2ab2:	90 e0       	ldi	r25, 0x00	; 0
    2ab4:	a0 e0       	ldi	r26, 0x00	; 0
    2ab6:	b0 e4       	ldi	r27, 0x40	; 64
    2ab8:	80 83       	st	Z, r24
    2aba:	91 83       	std	Z+1, r25	; 0x01
    2abc:	a2 83       	std	Z+2, r26	; 0x02
    2abe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ac0:	8e 01       	movw	r16, r28
    2ac2:	05 5a       	subi	r16, 0xA5	; 165
    2ac4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ac6:	fe 01       	movw	r30, r28
    2ac8:	e1 5a       	subi	r30, 0xA1	; 161
    2aca:	ff 4f       	sbci	r31, 0xFF	; 255
    2acc:	60 81       	ld	r22, Z
    2ace:	71 81       	ldd	r23, Z+1	; 0x01
    2ad0:	82 81       	ldd	r24, Z+2	; 0x02
    2ad2:	93 81       	ldd	r25, Z+3	; 0x03
    2ad4:	20 e0       	ldi	r18, 0x00	; 0
    2ad6:	30 e0       	ldi	r19, 0x00	; 0
    2ad8:	4a e7       	ldi	r20, 0x7A	; 122
    2ada:	55 e4       	ldi	r21, 0x45	; 69
    2adc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ae0:	dc 01       	movw	r26, r24
    2ae2:	cb 01       	movw	r24, r22
    2ae4:	f8 01       	movw	r30, r16
    2ae6:	80 83       	st	Z, r24
    2ae8:	91 83       	std	Z+1, r25	; 0x01
    2aea:	a2 83       	std	Z+2, r26	; 0x02
    2aec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2aee:	fe 01       	movw	r30, r28
    2af0:	e5 5a       	subi	r30, 0xA5	; 165
    2af2:	ff 4f       	sbci	r31, 0xFF	; 255
    2af4:	60 81       	ld	r22, Z
    2af6:	71 81       	ldd	r23, Z+1	; 0x01
    2af8:	82 81       	ldd	r24, Z+2	; 0x02
    2afa:	93 81       	ldd	r25, Z+3	; 0x03
    2afc:	20 e0       	ldi	r18, 0x00	; 0
    2afe:	30 e0       	ldi	r19, 0x00	; 0
    2b00:	40 e8       	ldi	r20, 0x80	; 128
    2b02:	5f e3       	ldi	r21, 0x3F	; 63
    2b04:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b08:	88 23       	and	r24, r24
    2b0a:	44 f4       	brge	.+16     	; 0x2b1c <SEG_KIT_voidDisplayBigNumber+0x3fc>
		__ticks = 1;
    2b0c:	fe 01       	movw	r30, r28
    2b0e:	e7 5a       	subi	r30, 0xA7	; 167
    2b10:	ff 4f       	sbci	r31, 0xFF	; 255
    2b12:	81 e0       	ldi	r24, 0x01	; 1
    2b14:	90 e0       	ldi	r25, 0x00	; 0
    2b16:	91 83       	std	Z+1, r25	; 0x01
    2b18:	80 83       	st	Z, r24
    2b1a:	64 c0       	rjmp	.+200    	; 0x2be4 <SEG_KIT_voidDisplayBigNumber+0x4c4>
	else if (__tmp > 65535)
    2b1c:	fe 01       	movw	r30, r28
    2b1e:	e5 5a       	subi	r30, 0xA5	; 165
    2b20:	ff 4f       	sbci	r31, 0xFF	; 255
    2b22:	60 81       	ld	r22, Z
    2b24:	71 81       	ldd	r23, Z+1	; 0x01
    2b26:	82 81       	ldd	r24, Z+2	; 0x02
    2b28:	93 81       	ldd	r25, Z+3	; 0x03
    2b2a:	20 e0       	ldi	r18, 0x00	; 0
    2b2c:	3f ef       	ldi	r19, 0xFF	; 255
    2b2e:	4f e7       	ldi	r20, 0x7F	; 127
    2b30:	57 e4       	ldi	r21, 0x47	; 71
    2b32:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b36:	18 16       	cp	r1, r24
    2b38:	0c f0       	brlt	.+2      	; 0x2b3c <SEG_KIT_voidDisplayBigNumber+0x41c>
    2b3a:	43 c0       	rjmp	.+134    	; 0x2bc2 <SEG_KIT_voidDisplayBigNumber+0x4a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b3c:	fe 01       	movw	r30, r28
    2b3e:	e1 5a       	subi	r30, 0xA1	; 161
    2b40:	ff 4f       	sbci	r31, 0xFF	; 255
    2b42:	60 81       	ld	r22, Z
    2b44:	71 81       	ldd	r23, Z+1	; 0x01
    2b46:	82 81       	ldd	r24, Z+2	; 0x02
    2b48:	93 81       	ldd	r25, Z+3	; 0x03
    2b4a:	20 e0       	ldi	r18, 0x00	; 0
    2b4c:	30 e0       	ldi	r19, 0x00	; 0
    2b4e:	40 e2       	ldi	r20, 0x20	; 32
    2b50:	51 e4       	ldi	r21, 0x41	; 65
    2b52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b56:	dc 01       	movw	r26, r24
    2b58:	cb 01       	movw	r24, r22
    2b5a:	8e 01       	movw	r16, r28
    2b5c:	07 5a       	subi	r16, 0xA7	; 167
    2b5e:	1f 4f       	sbci	r17, 0xFF	; 255
    2b60:	bc 01       	movw	r22, r24
    2b62:	cd 01       	movw	r24, r26
    2b64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b68:	dc 01       	movw	r26, r24
    2b6a:	cb 01       	movw	r24, r22
    2b6c:	f8 01       	movw	r30, r16
    2b6e:	91 83       	std	Z+1, r25	; 0x01
    2b70:	80 83       	st	Z, r24
    2b72:	1f c0       	rjmp	.+62     	; 0x2bb2 <SEG_KIT_voidDisplayBigNumber+0x492>
    2b74:	fe 01       	movw	r30, r28
    2b76:	e9 5a       	subi	r30, 0xA9	; 169
    2b78:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7a:	80 e9       	ldi	r24, 0x90	; 144
    2b7c:	91 e0       	ldi	r25, 0x01	; 1
    2b7e:	91 83       	std	Z+1, r25	; 0x01
    2b80:	80 83       	st	Z, r24
    2b82:	fe 01       	movw	r30, r28
    2b84:	e9 5a       	subi	r30, 0xA9	; 169
    2b86:	ff 4f       	sbci	r31, 0xFF	; 255
    2b88:	80 81       	ld	r24, Z
    2b8a:	91 81       	ldd	r25, Z+1	; 0x01
    2b8c:	01 97       	sbiw	r24, 0x01	; 1
    2b8e:	f1 f7       	brne	.-4      	; 0x2b8c <SEG_KIT_voidDisplayBigNumber+0x46c>
    2b90:	fe 01       	movw	r30, r28
    2b92:	e9 5a       	subi	r30, 0xA9	; 169
    2b94:	ff 4f       	sbci	r31, 0xFF	; 255
    2b96:	91 83       	std	Z+1, r25	; 0x01
    2b98:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b9a:	de 01       	movw	r26, r28
    2b9c:	a7 5a       	subi	r26, 0xA7	; 167
    2b9e:	bf 4f       	sbci	r27, 0xFF	; 255
    2ba0:	fe 01       	movw	r30, r28
    2ba2:	e7 5a       	subi	r30, 0xA7	; 167
    2ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba6:	80 81       	ld	r24, Z
    2ba8:	91 81       	ldd	r25, Z+1	; 0x01
    2baa:	01 97       	sbiw	r24, 0x01	; 1
    2bac:	11 96       	adiw	r26, 0x01	; 1
    2bae:	9c 93       	st	X, r25
    2bb0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bb2:	fe 01       	movw	r30, r28
    2bb4:	e7 5a       	subi	r30, 0xA7	; 167
    2bb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb8:	80 81       	ld	r24, Z
    2bba:	91 81       	ldd	r25, Z+1	; 0x01
    2bbc:	00 97       	sbiw	r24, 0x00	; 0
    2bbe:	d1 f6       	brne	.-76     	; 0x2b74 <SEG_KIT_voidDisplayBigNumber+0x454>
    2bc0:	27 c0       	rjmp	.+78     	; 0x2c10 <SEG_KIT_voidDisplayBigNumber+0x4f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bc2:	8e 01       	movw	r16, r28
    2bc4:	07 5a       	subi	r16, 0xA7	; 167
    2bc6:	1f 4f       	sbci	r17, 0xFF	; 255
    2bc8:	fe 01       	movw	r30, r28
    2bca:	e5 5a       	subi	r30, 0xA5	; 165
    2bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bce:	60 81       	ld	r22, Z
    2bd0:	71 81       	ldd	r23, Z+1	; 0x01
    2bd2:	82 81       	ldd	r24, Z+2	; 0x02
    2bd4:	93 81       	ldd	r25, Z+3	; 0x03
    2bd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bda:	dc 01       	movw	r26, r24
    2bdc:	cb 01       	movw	r24, r22
    2bde:	f8 01       	movw	r30, r16
    2be0:	91 83       	std	Z+1, r25	; 0x01
    2be2:	80 83       	st	Z, r24
    2be4:	de 01       	movw	r26, r28
    2be6:	ab 5a       	subi	r26, 0xAB	; 171
    2be8:	bf 4f       	sbci	r27, 0xFF	; 255
    2bea:	fe 01       	movw	r30, r28
    2bec:	e7 5a       	subi	r30, 0xA7	; 167
    2bee:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf0:	80 81       	ld	r24, Z
    2bf2:	91 81       	ldd	r25, Z+1	; 0x01
    2bf4:	8d 93       	st	X+, r24
    2bf6:	9c 93       	st	X, r25
    2bf8:	fe 01       	movw	r30, r28
    2bfa:	eb 5a       	subi	r30, 0xAB	; 171
    2bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bfe:	80 81       	ld	r24, Z
    2c00:	91 81       	ldd	r25, Z+1	; 0x01
    2c02:	01 97       	sbiw	r24, 0x01	; 1
    2c04:	f1 f7       	brne	.-4      	; 0x2c02 <SEG_KIT_voidDisplayBigNumber+0x4e2>
    2c06:	fe 01       	movw	r30, r28
    2c08:	eb 5a       	subi	r30, 0xAB	; 171
    2c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0c:	91 83       	std	Z+1, r25	; 0x01
    2c0e:	80 83       	st	Z, r24
			_delay_ms(2);
			SEG_KIT_voidDisplayNumber((Number/10)%10,SEG2);
    2c10:	fe 01       	movw	r30, r28
    2c12:	e1 58       	subi	r30, 0x81	; 129
    2c14:	ff 4f       	sbci	r31, 0xFF	; 255
    2c16:	80 81       	ld	r24, Z
    2c18:	91 81       	ldd	r25, Z+1	; 0x01
    2c1a:	2a e0       	ldi	r18, 0x0A	; 10
    2c1c:	30 e0       	ldi	r19, 0x00	; 0
    2c1e:	b9 01       	movw	r22, r18
    2c20:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <__udivmodhi4>
    2c24:	cb 01       	movw	r24, r22
    2c26:	2a e0       	ldi	r18, 0x0A	; 10
    2c28:	30 e0       	ldi	r19, 0x00	; 0
    2c2a:	b9 01       	movw	r22, r18
    2c2c:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <__udivmodhi4>
    2c30:	62 e0       	ldi	r22, 0x02	; 2
    2c32:	0e 94 ac 12 	call	0x2558	; 0x2558 <SEG_KIT_voidDisplayNumber>
    2c36:	fe 01       	movw	r30, r28
    2c38:	ef 5a       	subi	r30, 0xAF	; 175
    2c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c3c:	80 e0       	ldi	r24, 0x00	; 0
    2c3e:	90 e0       	ldi	r25, 0x00	; 0
    2c40:	a0 e0       	ldi	r26, 0x00	; 0
    2c42:	b0 e4       	ldi	r27, 0x40	; 64
    2c44:	80 83       	st	Z, r24
    2c46:	91 83       	std	Z+1, r25	; 0x01
    2c48:	a2 83       	std	Z+2, r26	; 0x02
    2c4a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c4c:	8e 01       	movw	r16, r28
    2c4e:	03 5b       	subi	r16, 0xB3	; 179
    2c50:	1f 4f       	sbci	r17, 0xFF	; 255
    2c52:	fe 01       	movw	r30, r28
    2c54:	ef 5a       	subi	r30, 0xAF	; 175
    2c56:	ff 4f       	sbci	r31, 0xFF	; 255
    2c58:	60 81       	ld	r22, Z
    2c5a:	71 81       	ldd	r23, Z+1	; 0x01
    2c5c:	82 81       	ldd	r24, Z+2	; 0x02
    2c5e:	93 81       	ldd	r25, Z+3	; 0x03
    2c60:	20 e0       	ldi	r18, 0x00	; 0
    2c62:	30 e0       	ldi	r19, 0x00	; 0
    2c64:	4a e7       	ldi	r20, 0x7A	; 122
    2c66:	55 e4       	ldi	r21, 0x45	; 69
    2c68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c6c:	dc 01       	movw	r26, r24
    2c6e:	cb 01       	movw	r24, r22
    2c70:	f8 01       	movw	r30, r16
    2c72:	80 83       	st	Z, r24
    2c74:	91 83       	std	Z+1, r25	; 0x01
    2c76:	a2 83       	std	Z+2, r26	; 0x02
    2c78:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c7a:	fe 01       	movw	r30, r28
    2c7c:	e3 5b       	subi	r30, 0xB3	; 179
    2c7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c80:	60 81       	ld	r22, Z
    2c82:	71 81       	ldd	r23, Z+1	; 0x01
    2c84:	82 81       	ldd	r24, Z+2	; 0x02
    2c86:	93 81       	ldd	r25, Z+3	; 0x03
    2c88:	20 e0       	ldi	r18, 0x00	; 0
    2c8a:	30 e0       	ldi	r19, 0x00	; 0
    2c8c:	40 e8       	ldi	r20, 0x80	; 128
    2c8e:	5f e3       	ldi	r21, 0x3F	; 63
    2c90:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c94:	88 23       	and	r24, r24
    2c96:	44 f4       	brge	.+16     	; 0x2ca8 <SEG_KIT_voidDisplayBigNumber+0x588>
		__ticks = 1;
    2c98:	fe 01       	movw	r30, r28
    2c9a:	e5 5b       	subi	r30, 0xB5	; 181
    2c9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9e:	81 e0       	ldi	r24, 0x01	; 1
    2ca0:	90 e0       	ldi	r25, 0x00	; 0
    2ca2:	91 83       	std	Z+1, r25	; 0x01
    2ca4:	80 83       	st	Z, r24
    2ca6:	64 c0       	rjmp	.+200    	; 0x2d70 <SEG_KIT_voidDisplayBigNumber+0x650>
	else if (__tmp > 65535)
    2ca8:	fe 01       	movw	r30, r28
    2caa:	e3 5b       	subi	r30, 0xB3	; 179
    2cac:	ff 4f       	sbci	r31, 0xFF	; 255
    2cae:	60 81       	ld	r22, Z
    2cb0:	71 81       	ldd	r23, Z+1	; 0x01
    2cb2:	82 81       	ldd	r24, Z+2	; 0x02
    2cb4:	93 81       	ldd	r25, Z+3	; 0x03
    2cb6:	20 e0       	ldi	r18, 0x00	; 0
    2cb8:	3f ef       	ldi	r19, 0xFF	; 255
    2cba:	4f e7       	ldi	r20, 0x7F	; 127
    2cbc:	57 e4       	ldi	r21, 0x47	; 71
    2cbe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cc2:	18 16       	cp	r1, r24
    2cc4:	0c f0       	brlt	.+2      	; 0x2cc8 <SEG_KIT_voidDisplayBigNumber+0x5a8>
    2cc6:	43 c0       	rjmp	.+134    	; 0x2d4e <SEG_KIT_voidDisplayBigNumber+0x62e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cc8:	fe 01       	movw	r30, r28
    2cca:	ef 5a       	subi	r30, 0xAF	; 175
    2ccc:	ff 4f       	sbci	r31, 0xFF	; 255
    2cce:	60 81       	ld	r22, Z
    2cd0:	71 81       	ldd	r23, Z+1	; 0x01
    2cd2:	82 81       	ldd	r24, Z+2	; 0x02
    2cd4:	93 81       	ldd	r25, Z+3	; 0x03
    2cd6:	20 e0       	ldi	r18, 0x00	; 0
    2cd8:	30 e0       	ldi	r19, 0x00	; 0
    2cda:	40 e2       	ldi	r20, 0x20	; 32
    2cdc:	51 e4       	ldi	r21, 0x41	; 65
    2cde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ce2:	dc 01       	movw	r26, r24
    2ce4:	cb 01       	movw	r24, r22
    2ce6:	8e 01       	movw	r16, r28
    2ce8:	05 5b       	subi	r16, 0xB5	; 181
    2cea:	1f 4f       	sbci	r17, 0xFF	; 255
    2cec:	bc 01       	movw	r22, r24
    2cee:	cd 01       	movw	r24, r26
    2cf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cf4:	dc 01       	movw	r26, r24
    2cf6:	cb 01       	movw	r24, r22
    2cf8:	f8 01       	movw	r30, r16
    2cfa:	91 83       	std	Z+1, r25	; 0x01
    2cfc:	80 83       	st	Z, r24
    2cfe:	1f c0       	rjmp	.+62     	; 0x2d3e <SEG_KIT_voidDisplayBigNumber+0x61e>
    2d00:	fe 01       	movw	r30, r28
    2d02:	e7 5b       	subi	r30, 0xB7	; 183
    2d04:	ff 4f       	sbci	r31, 0xFF	; 255
    2d06:	80 e9       	ldi	r24, 0x90	; 144
    2d08:	91 e0       	ldi	r25, 0x01	; 1
    2d0a:	91 83       	std	Z+1, r25	; 0x01
    2d0c:	80 83       	st	Z, r24
    2d0e:	fe 01       	movw	r30, r28
    2d10:	e7 5b       	subi	r30, 0xB7	; 183
    2d12:	ff 4f       	sbci	r31, 0xFF	; 255
    2d14:	80 81       	ld	r24, Z
    2d16:	91 81       	ldd	r25, Z+1	; 0x01
    2d18:	01 97       	sbiw	r24, 0x01	; 1
    2d1a:	f1 f7       	brne	.-4      	; 0x2d18 <SEG_KIT_voidDisplayBigNumber+0x5f8>
    2d1c:	fe 01       	movw	r30, r28
    2d1e:	e7 5b       	subi	r30, 0xB7	; 183
    2d20:	ff 4f       	sbci	r31, 0xFF	; 255
    2d22:	91 83       	std	Z+1, r25	; 0x01
    2d24:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d26:	de 01       	movw	r26, r28
    2d28:	a5 5b       	subi	r26, 0xB5	; 181
    2d2a:	bf 4f       	sbci	r27, 0xFF	; 255
    2d2c:	fe 01       	movw	r30, r28
    2d2e:	e5 5b       	subi	r30, 0xB5	; 181
    2d30:	ff 4f       	sbci	r31, 0xFF	; 255
    2d32:	80 81       	ld	r24, Z
    2d34:	91 81       	ldd	r25, Z+1	; 0x01
    2d36:	01 97       	sbiw	r24, 0x01	; 1
    2d38:	11 96       	adiw	r26, 0x01	; 1
    2d3a:	9c 93       	st	X, r25
    2d3c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d3e:	fe 01       	movw	r30, r28
    2d40:	e5 5b       	subi	r30, 0xB5	; 181
    2d42:	ff 4f       	sbci	r31, 0xFF	; 255
    2d44:	80 81       	ld	r24, Z
    2d46:	91 81       	ldd	r25, Z+1	; 0x01
    2d48:	00 97       	sbiw	r24, 0x00	; 0
    2d4a:	d1 f6       	brne	.-76     	; 0x2d00 <SEG_KIT_voidDisplayBigNumber+0x5e0>
    2d4c:	27 c0       	rjmp	.+78     	; 0x2d9c <SEG_KIT_voidDisplayBigNumber+0x67c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d4e:	8e 01       	movw	r16, r28
    2d50:	05 5b       	subi	r16, 0xB5	; 181
    2d52:	1f 4f       	sbci	r17, 0xFF	; 255
    2d54:	fe 01       	movw	r30, r28
    2d56:	e3 5b       	subi	r30, 0xB3	; 179
    2d58:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5a:	60 81       	ld	r22, Z
    2d5c:	71 81       	ldd	r23, Z+1	; 0x01
    2d5e:	82 81       	ldd	r24, Z+2	; 0x02
    2d60:	93 81       	ldd	r25, Z+3	; 0x03
    2d62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d66:	dc 01       	movw	r26, r24
    2d68:	cb 01       	movw	r24, r22
    2d6a:	f8 01       	movw	r30, r16
    2d6c:	91 83       	std	Z+1, r25	; 0x01
    2d6e:	80 83       	st	Z, r24
    2d70:	de 01       	movw	r26, r28
    2d72:	a9 5b       	subi	r26, 0xB9	; 185
    2d74:	bf 4f       	sbci	r27, 0xFF	; 255
    2d76:	fe 01       	movw	r30, r28
    2d78:	e5 5b       	subi	r30, 0xB5	; 181
    2d7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d7c:	80 81       	ld	r24, Z
    2d7e:	91 81       	ldd	r25, Z+1	; 0x01
    2d80:	8d 93       	st	X+, r24
    2d82:	9c 93       	st	X, r25
    2d84:	fe 01       	movw	r30, r28
    2d86:	e9 5b       	subi	r30, 0xB9	; 185
    2d88:	ff 4f       	sbci	r31, 0xFF	; 255
    2d8a:	80 81       	ld	r24, Z
    2d8c:	91 81       	ldd	r25, Z+1	; 0x01
    2d8e:	01 97       	sbiw	r24, 0x01	; 1
    2d90:	f1 f7       	brne	.-4      	; 0x2d8e <SEG_KIT_voidDisplayBigNumber+0x66e>
    2d92:	fe 01       	movw	r30, r28
    2d94:	e9 5b       	subi	r30, 0xB9	; 185
    2d96:	ff 4f       	sbci	r31, 0xFF	; 255
    2d98:	91 83       	std	Z+1, r25	; 0x01
    2d9a:	80 83       	st	Z, r24
			_delay_ms(2);
			SEG_KIT_voidDisplayNumber(Number/100,SEG3);
    2d9c:	fe 01       	movw	r30, r28
    2d9e:	e1 58       	subi	r30, 0x81	; 129
    2da0:	ff 4f       	sbci	r31, 0xFF	; 255
    2da2:	80 81       	ld	r24, Z
    2da4:	91 81       	ldd	r25, Z+1	; 0x01
    2da6:	24 e6       	ldi	r18, 0x64	; 100
    2da8:	30 e0       	ldi	r19, 0x00	; 0
    2daa:	b9 01       	movw	r22, r18
    2dac:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <__udivmodhi4>
    2db0:	cb 01       	movw	r24, r22
    2db2:	63 e0       	ldi	r22, 0x03	; 3
    2db4:	0e 94 ac 12 	call	0x2558	; 0x2558 <SEG_KIT_voidDisplayNumber>
    2db8:	fe 01       	movw	r30, r28
    2dba:	ed 5b       	subi	r30, 0xBD	; 189
    2dbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dbe:	80 e0       	ldi	r24, 0x00	; 0
    2dc0:	90 e0       	ldi	r25, 0x00	; 0
    2dc2:	a0 e0       	ldi	r26, 0x00	; 0
    2dc4:	b0 e4       	ldi	r27, 0x40	; 64
    2dc6:	80 83       	st	Z, r24
    2dc8:	91 83       	std	Z+1, r25	; 0x01
    2dca:	a2 83       	std	Z+2, r26	; 0x02
    2dcc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dce:	8e 01       	movw	r16, r28
    2dd0:	01 5c       	subi	r16, 0xC1	; 193
    2dd2:	1f 4f       	sbci	r17, 0xFF	; 255
    2dd4:	fe 01       	movw	r30, r28
    2dd6:	ed 5b       	subi	r30, 0xBD	; 189
    2dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dda:	60 81       	ld	r22, Z
    2ddc:	71 81       	ldd	r23, Z+1	; 0x01
    2dde:	82 81       	ldd	r24, Z+2	; 0x02
    2de0:	93 81       	ldd	r25, Z+3	; 0x03
    2de2:	20 e0       	ldi	r18, 0x00	; 0
    2de4:	30 e0       	ldi	r19, 0x00	; 0
    2de6:	4a e7       	ldi	r20, 0x7A	; 122
    2de8:	55 e4       	ldi	r21, 0x45	; 69
    2dea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dee:	dc 01       	movw	r26, r24
    2df0:	cb 01       	movw	r24, r22
    2df2:	f8 01       	movw	r30, r16
    2df4:	80 83       	st	Z, r24
    2df6:	91 83       	std	Z+1, r25	; 0x01
    2df8:	a2 83       	std	Z+2, r26	; 0x02
    2dfa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2dfc:	fe 01       	movw	r30, r28
    2dfe:	ff 96       	adiw	r30, 0x3f	; 63
    2e00:	60 81       	ld	r22, Z
    2e02:	71 81       	ldd	r23, Z+1	; 0x01
    2e04:	82 81       	ldd	r24, Z+2	; 0x02
    2e06:	93 81       	ldd	r25, Z+3	; 0x03
    2e08:	20 e0       	ldi	r18, 0x00	; 0
    2e0a:	30 e0       	ldi	r19, 0x00	; 0
    2e0c:	40 e8       	ldi	r20, 0x80	; 128
    2e0e:	5f e3       	ldi	r21, 0x3F	; 63
    2e10:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e14:	88 23       	and	r24, r24
    2e16:	2c f4       	brge	.+10     	; 0x2e22 <SEG_KIT_voidDisplayBigNumber+0x702>
		__ticks = 1;
    2e18:	81 e0       	ldi	r24, 0x01	; 1
    2e1a:	90 e0       	ldi	r25, 0x00	; 0
    2e1c:	9e af       	std	Y+62, r25	; 0x3e
    2e1e:	8d af       	std	Y+61, r24	; 0x3d
    2e20:	46 c0       	rjmp	.+140    	; 0x2eae <SEG_KIT_voidDisplayBigNumber+0x78e>
	else if (__tmp > 65535)
    2e22:	fe 01       	movw	r30, r28
    2e24:	ff 96       	adiw	r30, 0x3f	; 63
    2e26:	60 81       	ld	r22, Z
    2e28:	71 81       	ldd	r23, Z+1	; 0x01
    2e2a:	82 81       	ldd	r24, Z+2	; 0x02
    2e2c:	93 81       	ldd	r25, Z+3	; 0x03
    2e2e:	20 e0       	ldi	r18, 0x00	; 0
    2e30:	3f ef       	ldi	r19, 0xFF	; 255
    2e32:	4f e7       	ldi	r20, 0x7F	; 127
    2e34:	57 e4       	ldi	r21, 0x47	; 71
    2e36:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e3a:	18 16       	cp	r1, r24
    2e3c:	64 f5       	brge	.+88     	; 0x2e96 <SEG_KIT_voidDisplayBigNumber+0x776>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e3e:	fe 01       	movw	r30, r28
    2e40:	ed 5b       	subi	r30, 0xBD	; 189
    2e42:	ff 4f       	sbci	r31, 0xFF	; 255
    2e44:	60 81       	ld	r22, Z
    2e46:	71 81       	ldd	r23, Z+1	; 0x01
    2e48:	82 81       	ldd	r24, Z+2	; 0x02
    2e4a:	93 81       	ldd	r25, Z+3	; 0x03
    2e4c:	20 e0       	ldi	r18, 0x00	; 0
    2e4e:	30 e0       	ldi	r19, 0x00	; 0
    2e50:	40 e2       	ldi	r20, 0x20	; 32
    2e52:	51 e4       	ldi	r21, 0x41	; 65
    2e54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e58:	dc 01       	movw	r26, r24
    2e5a:	cb 01       	movw	r24, r22
    2e5c:	bc 01       	movw	r22, r24
    2e5e:	cd 01       	movw	r24, r26
    2e60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e64:	dc 01       	movw	r26, r24
    2e66:	cb 01       	movw	r24, r22
    2e68:	9e af       	std	Y+62, r25	; 0x3e
    2e6a:	8d af       	std	Y+61, r24	; 0x3d
    2e6c:	0f c0       	rjmp	.+30     	; 0x2e8c <SEG_KIT_voidDisplayBigNumber+0x76c>
    2e6e:	80 e9       	ldi	r24, 0x90	; 144
    2e70:	91 e0       	ldi	r25, 0x01	; 1
    2e72:	9c af       	std	Y+60, r25	; 0x3c
    2e74:	8b af       	std	Y+59, r24	; 0x3b
    2e76:	8b ad       	ldd	r24, Y+59	; 0x3b
    2e78:	9c ad       	ldd	r25, Y+60	; 0x3c
    2e7a:	01 97       	sbiw	r24, 0x01	; 1
    2e7c:	f1 f7       	brne	.-4      	; 0x2e7a <SEG_KIT_voidDisplayBigNumber+0x75a>
    2e7e:	9c af       	std	Y+60, r25	; 0x3c
    2e80:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e82:	8d ad       	ldd	r24, Y+61	; 0x3d
    2e84:	9e ad       	ldd	r25, Y+62	; 0x3e
    2e86:	01 97       	sbiw	r24, 0x01	; 1
    2e88:	9e af       	std	Y+62, r25	; 0x3e
    2e8a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e8c:	8d ad       	ldd	r24, Y+61	; 0x3d
    2e8e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2e90:	00 97       	sbiw	r24, 0x00	; 0
    2e92:	69 f7       	brne	.-38     	; 0x2e6e <SEG_KIT_voidDisplayBigNumber+0x74e>
    2e94:	20 c2       	rjmp	.+1088   	; 0x32d6 <SEG_KIT_voidDisplayBigNumber+0xbb6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e96:	fe 01       	movw	r30, r28
    2e98:	ff 96       	adiw	r30, 0x3f	; 63
    2e9a:	60 81       	ld	r22, Z
    2e9c:	71 81       	ldd	r23, Z+1	; 0x01
    2e9e:	82 81       	ldd	r24, Z+2	; 0x02
    2ea0:	93 81       	ldd	r25, Z+3	; 0x03
    2ea2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ea6:	dc 01       	movw	r26, r24
    2ea8:	cb 01       	movw	r24, r22
    2eaa:	9e af       	std	Y+62, r25	; 0x3e
    2eac:	8d af       	std	Y+61, r24	; 0x3d
    2eae:	8d ad       	ldd	r24, Y+61	; 0x3d
    2eb0:	9e ad       	ldd	r25, Y+62	; 0x3e
    2eb2:	9a af       	std	Y+58, r25	; 0x3a
    2eb4:	89 af       	std	Y+57, r24	; 0x39
    2eb6:	89 ad       	ldd	r24, Y+57	; 0x39
    2eb8:	9a ad       	ldd	r25, Y+58	; 0x3a
    2eba:	01 97       	sbiw	r24, 0x01	; 1
    2ebc:	f1 f7       	brne	.-4      	; 0x2eba <SEG_KIT_voidDisplayBigNumber+0x79a>
    2ebe:	9a af       	std	Y+58, r25	; 0x3a
    2ec0:	89 af       	std	Y+57, r24	; 0x39
    2ec2:	09 c2       	rjmp	.+1042   	; 0x32d6 <SEG_KIT_voidDisplayBigNumber+0xbb6>
			_delay_ms(2);
		}
	else
		{
			SEG_KIT_voidDisplayNumber(Number%10,SEG1);
    2ec4:	fe 01       	movw	r30, r28
    2ec6:	e1 58       	subi	r30, 0x81	; 129
    2ec8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eca:	80 81       	ld	r24, Z
    2ecc:	91 81       	ldd	r25, Z+1	; 0x01
    2ece:	2a e0       	ldi	r18, 0x0A	; 10
    2ed0:	30 e0       	ldi	r19, 0x00	; 0
    2ed2:	b9 01       	movw	r22, r18
    2ed4:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <__udivmodhi4>
    2ed8:	61 e0       	ldi	r22, 0x01	; 1
    2eda:	0e 94 ac 12 	call	0x2558	; 0x2558 <SEG_KIT_voidDisplayNumber>
    2ede:	80 e0       	ldi	r24, 0x00	; 0
    2ee0:	90 e0       	ldi	r25, 0x00	; 0
    2ee2:	a0 e0       	ldi	r26, 0x00	; 0
    2ee4:	b0 e4       	ldi	r27, 0x40	; 64
    2ee6:	8d ab       	std	Y+53, r24	; 0x35
    2ee8:	9e ab       	std	Y+54, r25	; 0x36
    2eea:	af ab       	std	Y+55, r26	; 0x37
    2eec:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2eee:	6d a9       	ldd	r22, Y+53	; 0x35
    2ef0:	7e a9       	ldd	r23, Y+54	; 0x36
    2ef2:	8f a9       	ldd	r24, Y+55	; 0x37
    2ef4:	98 ad       	ldd	r25, Y+56	; 0x38
    2ef6:	20 e0       	ldi	r18, 0x00	; 0
    2ef8:	30 e0       	ldi	r19, 0x00	; 0
    2efa:	4a e7       	ldi	r20, 0x7A	; 122
    2efc:	55 e4       	ldi	r21, 0x45	; 69
    2efe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f02:	dc 01       	movw	r26, r24
    2f04:	cb 01       	movw	r24, r22
    2f06:	89 ab       	std	Y+49, r24	; 0x31
    2f08:	9a ab       	std	Y+50, r25	; 0x32
    2f0a:	ab ab       	std	Y+51, r26	; 0x33
    2f0c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2f0e:	69 a9       	ldd	r22, Y+49	; 0x31
    2f10:	7a a9       	ldd	r23, Y+50	; 0x32
    2f12:	8b a9       	ldd	r24, Y+51	; 0x33
    2f14:	9c a9       	ldd	r25, Y+52	; 0x34
    2f16:	20 e0       	ldi	r18, 0x00	; 0
    2f18:	30 e0       	ldi	r19, 0x00	; 0
    2f1a:	40 e8       	ldi	r20, 0x80	; 128
    2f1c:	5f e3       	ldi	r21, 0x3F	; 63
    2f1e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f22:	88 23       	and	r24, r24
    2f24:	2c f4       	brge	.+10     	; 0x2f30 <SEG_KIT_voidDisplayBigNumber+0x810>
		__ticks = 1;
    2f26:	81 e0       	ldi	r24, 0x01	; 1
    2f28:	90 e0       	ldi	r25, 0x00	; 0
    2f2a:	98 ab       	std	Y+48, r25	; 0x30
    2f2c:	8f a7       	std	Y+47, r24	; 0x2f
    2f2e:	3f c0       	rjmp	.+126    	; 0x2fae <SEG_KIT_voidDisplayBigNumber+0x88e>
	else if (__tmp > 65535)
    2f30:	69 a9       	ldd	r22, Y+49	; 0x31
    2f32:	7a a9       	ldd	r23, Y+50	; 0x32
    2f34:	8b a9       	ldd	r24, Y+51	; 0x33
    2f36:	9c a9       	ldd	r25, Y+52	; 0x34
    2f38:	20 e0       	ldi	r18, 0x00	; 0
    2f3a:	3f ef       	ldi	r19, 0xFF	; 255
    2f3c:	4f e7       	ldi	r20, 0x7F	; 127
    2f3e:	57 e4       	ldi	r21, 0x47	; 71
    2f40:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f44:	18 16       	cp	r1, r24
    2f46:	4c f5       	brge	.+82     	; 0x2f9a <SEG_KIT_voidDisplayBigNumber+0x87a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f48:	6d a9       	ldd	r22, Y+53	; 0x35
    2f4a:	7e a9       	ldd	r23, Y+54	; 0x36
    2f4c:	8f a9       	ldd	r24, Y+55	; 0x37
    2f4e:	98 ad       	ldd	r25, Y+56	; 0x38
    2f50:	20 e0       	ldi	r18, 0x00	; 0
    2f52:	30 e0       	ldi	r19, 0x00	; 0
    2f54:	40 e2       	ldi	r20, 0x20	; 32
    2f56:	51 e4       	ldi	r21, 0x41	; 65
    2f58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f5c:	dc 01       	movw	r26, r24
    2f5e:	cb 01       	movw	r24, r22
    2f60:	bc 01       	movw	r22, r24
    2f62:	cd 01       	movw	r24, r26
    2f64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f68:	dc 01       	movw	r26, r24
    2f6a:	cb 01       	movw	r24, r22
    2f6c:	98 ab       	std	Y+48, r25	; 0x30
    2f6e:	8f a7       	std	Y+47, r24	; 0x2f
    2f70:	0f c0       	rjmp	.+30     	; 0x2f90 <SEG_KIT_voidDisplayBigNumber+0x870>
    2f72:	80 e9       	ldi	r24, 0x90	; 144
    2f74:	91 e0       	ldi	r25, 0x01	; 1
    2f76:	9e a7       	std	Y+46, r25	; 0x2e
    2f78:	8d a7       	std	Y+45, r24	; 0x2d
    2f7a:	8d a5       	ldd	r24, Y+45	; 0x2d
    2f7c:	9e a5       	ldd	r25, Y+46	; 0x2e
    2f7e:	01 97       	sbiw	r24, 0x01	; 1
    2f80:	f1 f7       	brne	.-4      	; 0x2f7e <SEG_KIT_voidDisplayBigNumber+0x85e>
    2f82:	9e a7       	std	Y+46, r25	; 0x2e
    2f84:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f86:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f88:	98 a9       	ldd	r25, Y+48	; 0x30
    2f8a:	01 97       	sbiw	r24, 0x01	; 1
    2f8c:	98 ab       	std	Y+48, r25	; 0x30
    2f8e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f90:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f92:	98 a9       	ldd	r25, Y+48	; 0x30
    2f94:	00 97       	sbiw	r24, 0x00	; 0
    2f96:	69 f7       	brne	.-38     	; 0x2f72 <SEG_KIT_voidDisplayBigNumber+0x852>
    2f98:	14 c0       	rjmp	.+40     	; 0x2fc2 <SEG_KIT_voidDisplayBigNumber+0x8a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f9a:	69 a9       	ldd	r22, Y+49	; 0x31
    2f9c:	7a a9       	ldd	r23, Y+50	; 0x32
    2f9e:	8b a9       	ldd	r24, Y+51	; 0x33
    2fa0:	9c a9       	ldd	r25, Y+52	; 0x34
    2fa2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fa6:	dc 01       	movw	r26, r24
    2fa8:	cb 01       	movw	r24, r22
    2faa:	98 ab       	std	Y+48, r25	; 0x30
    2fac:	8f a7       	std	Y+47, r24	; 0x2f
    2fae:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fb0:	98 a9       	ldd	r25, Y+48	; 0x30
    2fb2:	9c a7       	std	Y+44, r25	; 0x2c
    2fb4:	8b a7       	std	Y+43, r24	; 0x2b
    2fb6:	8b a5       	ldd	r24, Y+43	; 0x2b
    2fb8:	9c a5       	ldd	r25, Y+44	; 0x2c
    2fba:	01 97       	sbiw	r24, 0x01	; 1
    2fbc:	f1 f7       	brne	.-4      	; 0x2fba <SEG_KIT_voidDisplayBigNumber+0x89a>
    2fbe:	9c a7       	std	Y+44, r25	; 0x2c
    2fc0:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(2);
			SEG_KIT_voidDisplayNumber((Number/10)%10,SEG2);
    2fc2:	fe 01       	movw	r30, r28
    2fc4:	e1 58       	subi	r30, 0x81	; 129
    2fc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc8:	80 81       	ld	r24, Z
    2fca:	91 81       	ldd	r25, Z+1	; 0x01
    2fcc:	2a e0       	ldi	r18, 0x0A	; 10
    2fce:	30 e0       	ldi	r19, 0x00	; 0
    2fd0:	b9 01       	movw	r22, r18
    2fd2:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <__udivmodhi4>
    2fd6:	cb 01       	movw	r24, r22
    2fd8:	2a e0       	ldi	r18, 0x0A	; 10
    2fda:	30 e0       	ldi	r19, 0x00	; 0
    2fdc:	b9 01       	movw	r22, r18
    2fde:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <__udivmodhi4>
    2fe2:	62 e0       	ldi	r22, 0x02	; 2
    2fe4:	0e 94 ac 12 	call	0x2558	; 0x2558 <SEG_KIT_voidDisplayNumber>
    2fe8:	80 e0       	ldi	r24, 0x00	; 0
    2fea:	90 e0       	ldi	r25, 0x00	; 0
    2fec:	a0 e0       	ldi	r26, 0x00	; 0
    2fee:	b0 e4       	ldi	r27, 0x40	; 64
    2ff0:	8f a3       	std	Y+39, r24	; 0x27
    2ff2:	98 a7       	std	Y+40, r25	; 0x28
    2ff4:	a9 a7       	std	Y+41, r26	; 0x29
    2ff6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ff8:	6f a1       	ldd	r22, Y+39	; 0x27
    2ffa:	78 a5       	ldd	r23, Y+40	; 0x28
    2ffc:	89 a5       	ldd	r24, Y+41	; 0x29
    2ffe:	9a a5       	ldd	r25, Y+42	; 0x2a
    3000:	20 e0       	ldi	r18, 0x00	; 0
    3002:	30 e0       	ldi	r19, 0x00	; 0
    3004:	4a e7       	ldi	r20, 0x7A	; 122
    3006:	55 e4       	ldi	r21, 0x45	; 69
    3008:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    300c:	dc 01       	movw	r26, r24
    300e:	cb 01       	movw	r24, r22
    3010:	8b a3       	std	Y+35, r24	; 0x23
    3012:	9c a3       	std	Y+36, r25	; 0x24
    3014:	ad a3       	std	Y+37, r26	; 0x25
    3016:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3018:	6b a1       	ldd	r22, Y+35	; 0x23
    301a:	7c a1       	ldd	r23, Y+36	; 0x24
    301c:	8d a1       	ldd	r24, Y+37	; 0x25
    301e:	9e a1       	ldd	r25, Y+38	; 0x26
    3020:	20 e0       	ldi	r18, 0x00	; 0
    3022:	30 e0       	ldi	r19, 0x00	; 0
    3024:	40 e8       	ldi	r20, 0x80	; 128
    3026:	5f e3       	ldi	r21, 0x3F	; 63
    3028:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    302c:	88 23       	and	r24, r24
    302e:	2c f4       	brge	.+10     	; 0x303a <SEG_KIT_voidDisplayBigNumber+0x91a>
		__ticks = 1;
    3030:	81 e0       	ldi	r24, 0x01	; 1
    3032:	90 e0       	ldi	r25, 0x00	; 0
    3034:	9a a3       	std	Y+34, r25	; 0x22
    3036:	89 a3       	std	Y+33, r24	; 0x21
    3038:	3f c0       	rjmp	.+126    	; 0x30b8 <SEG_KIT_voidDisplayBigNumber+0x998>
	else if (__tmp > 65535)
    303a:	6b a1       	ldd	r22, Y+35	; 0x23
    303c:	7c a1       	ldd	r23, Y+36	; 0x24
    303e:	8d a1       	ldd	r24, Y+37	; 0x25
    3040:	9e a1       	ldd	r25, Y+38	; 0x26
    3042:	20 e0       	ldi	r18, 0x00	; 0
    3044:	3f ef       	ldi	r19, 0xFF	; 255
    3046:	4f e7       	ldi	r20, 0x7F	; 127
    3048:	57 e4       	ldi	r21, 0x47	; 71
    304a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    304e:	18 16       	cp	r1, r24
    3050:	4c f5       	brge	.+82     	; 0x30a4 <SEG_KIT_voidDisplayBigNumber+0x984>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3052:	6f a1       	ldd	r22, Y+39	; 0x27
    3054:	78 a5       	ldd	r23, Y+40	; 0x28
    3056:	89 a5       	ldd	r24, Y+41	; 0x29
    3058:	9a a5       	ldd	r25, Y+42	; 0x2a
    305a:	20 e0       	ldi	r18, 0x00	; 0
    305c:	30 e0       	ldi	r19, 0x00	; 0
    305e:	40 e2       	ldi	r20, 0x20	; 32
    3060:	51 e4       	ldi	r21, 0x41	; 65
    3062:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3066:	dc 01       	movw	r26, r24
    3068:	cb 01       	movw	r24, r22
    306a:	bc 01       	movw	r22, r24
    306c:	cd 01       	movw	r24, r26
    306e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3072:	dc 01       	movw	r26, r24
    3074:	cb 01       	movw	r24, r22
    3076:	9a a3       	std	Y+34, r25	; 0x22
    3078:	89 a3       	std	Y+33, r24	; 0x21
    307a:	0f c0       	rjmp	.+30     	; 0x309a <SEG_KIT_voidDisplayBigNumber+0x97a>
    307c:	80 e9       	ldi	r24, 0x90	; 144
    307e:	91 e0       	ldi	r25, 0x01	; 1
    3080:	98 a3       	std	Y+32, r25	; 0x20
    3082:	8f 8f       	std	Y+31, r24	; 0x1f
    3084:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3086:	98 a1       	ldd	r25, Y+32	; 0x20
    3088:	01 97       	sbiw	r24, 0x01	; 1
    308a:	f1 f7       	brne	.-4      	; 0x3088 <SEG_KIT_voidDisplayBigNumber+0x968>
    308c:	98 a3       	std	Y+32, r25	; 0x20
    308e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3090:	89 a1       	ldd	r24, Y+33	; 0x21
    3092:	9a a1       	ldd	r25, Y+34	; 0x22
    3094:	01 97       	sbiw	r24, 0x01	; 1
    3096:	9a a3       	std	Y+34, r25	; 0x22
    3098:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    309a:	89 a1       	ldd	r24, Y+33	; 0x21
    309c:	9a a1       	ldd	r25, Y+34	; 0x22
    309e:	00 97       	sbiw	r24, 0x00	; 0
    30a0:	69 f7       	brne	.-38     	; 0x307c <SEG_KIT_voidDisplayBigNumber+0x95c>
    30a2:	14 c0       	rjmp	.+40     	; 0x30cc <SEG_KIT_voidDisplayBigNumber+0x9ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30a4:	6b a1       	ldd	r22, Y+35	; 0x23
    30a6:	7c a1       	ldd	r23, Y+36	; 0x24
    30a8:	8d a1       	ldd	r24, Y+37	; 0x25
    30aa:	9e a1       	ldd	r25, Y+38	; 0x26
    30ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30b0:	dc 01       	movw	r26, r24
    30b2:	cb 01       	movw	r24, r22
    30b4:	9a a3       	std	Y+34, r25	; 0x22
    30b6:	89 a3       	std	Y+33, r24	; 0x21
    30b8:	89 a1       	ldd	r24, Y+33	; 0x21
    30ba:	9a a1       	ldd	r25, Y+34	; 0x22
    30bc:	9e 8f       	std	Y+30, r25	; 0x1e
    30be:	8d 8f       	std	Y+29, r24	; 0x1d
    30c0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    30c2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    30c4:	01 97       	sbiw	r24, 0x01	; 1
    30c6:	f1 f7       	brne	.-4      	; 0x30c4 <SEG_KIT_voidDisplayBigNumber+0x9a4>
    30c8:	9e 8f       	std	Y+30, r25	; 0x1e
    30ca:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(2);
			SEG_KIT_voidDisplayNumber((Number/100)%10,SEG3);
    30cc:	fe 01       	movw	r30, r28
    30ce:	e1 58       	subi	r30, 0x81	; 129
    30d0:	ff 4f       	sbci	r31, 0xFF	; 255
    30d2:	80 81       	ld	r24, Z
    30d4:	91 81       	ldd	r25, Z+1	; 0x01
    30d6:	24 e6       	ldi	r18, 0x64	; 100
    30d8:	30 e0       	ldi	r19, 0x00	; 0
    30da:	b9 01       	movw	r22, r18
    30dc:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <__udivmodhi4>
    30e0:	cb 01       	movw	r24, r22
    30e2:	2a e0       	ldi	r18, 0x0A	; 10
    30e4:	30 e0       	ldi	r19, 0x00	; 0
    30e6:	b9 01       	movw	r22, r18
    30e8:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <__udivmodhi4>
    30ec:	63 e0       	ldi	r22, 0x03	; 3
    30ee:	0e 94 ac 12 	call	0x2558	; 0x2558 <SEG_KIT_voidDisplayNumber>
    30f2:	80 e0       	ldi	r24, 0x00	; 0
    30f4:	90 e0       	ldi	r25, 0x00	; 0
    30f6:	a0 e0       	ldi	r26, 0x00	; 0
    30f8:	b0 e4       	ldi	r27, 0x40	; 64
    30fa:	89 8f       	std	Y+25, r24	; 0x19
    30fc:	9a 8f       	std	Y+26, r25	; 0x1a
    30fe:	ab 8f       	std	Y+27, r26	; 0x1b
    3100:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3102:	69 8d       	ldd	r22, Y+25	; 0x19
    3104:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3106:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3108:	9c 8d       	ldd	r25, Y+28	; 0x1c
    310a:	20 e0       	ldi	r18, 0x00	; 0
    310c:	30 e0       	ldi	r19, 0x00	; 0
    310e:	4a e7       	ldi	r20, 0x7A	; 122
    3110:	55 e4       	ldi	r21, 0x45	; 69
    3112:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3116:	dc 01       	movw	r26, r24
    3118:	cb 01       	movw	r24, r22
    311a:	8d 8b       	std	Y+21, r24	; 0x15
    311c:	9e 8b       	std	Y+22, r25	; 0x16
    311e:	af 8b       	std	Y+23, r26	; 0x17
    3120:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3122:	6d 89       	ldd	r22, Y+21	; 0x15
    3124:	7e 89       	ldd	r23, Y+22	; 0x16
    3126:	8f 89       	ldd	r24, Y+23	; 0x17
    3128:	98 8d       	ldd	r25, Y+24	; 0x18
    312a:	20 e0       	ldi	r18, 0x00	; 0
    312c:	30 e0       	ldi	r19, 0x00	; 0
    312e:	40 e8       	ldi	r20, 0x80	; 128
    3130:	5f e3       	ldi	r21, 0x3F	; 63
    3132:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3136:	88 23       	and	r24, r24
    3138:	2c f4       	brge	.+10     	; 0x3144 <SEG_KIT_voidDisplayBigNumber+0xa24>
		__ticks = 1;
    313a:	81 e0       	ldi	r24, 0x01	; 1
    313c:	90 e0       	ldi	r25, 0x00	; 0
    313e:	9c 8b       	std	Y+20, r25	; 0x14
    3140:	8b 8b       	std	Y+19, r24	; 0x13
    3142:	3f c0       	rjmp	.+126    	; 0x31c2 <SEG_KIT_voidDisplayBigNumber+0xaa2>
	else if (__tmp > 65535)
    3144:	6d 89       	ldd	r22, Y+21	; 0x15
    3146:	7e 89       	ldd	r23, Y+22	; 0x16
    3148:	8f 89       	ldd	r24, Y+23	; 0x17
    314a:	98 8d       	ldd	r25, Y+24	; 0x18
    314c:	20 e0       	ldi	r18, 0x00	; 0
    314e:	3f ef       	ldi	r19, 0xFF	; 255
    3150:	4f e7       	ldi	r20, 0x7F	; 127
    3152:	57 e4       	ldi	r21, 0x47	; 71
    3154:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3158:	18 16       	cp	r1, r24
    315a:	4c f5       	brge	.+82     	; 0x31ae <SEG_KIT_voidDisplayBigNumber+0xa8e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    315c:	69 8d       	ldd	r22, Y+25	; 0x19
    315e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3160:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3162:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3164:	20 e0       	ldi	r18, 0x00	; 0
    3166:	30 e0       	ldi	r19, 0x00	; 0
    3168:	40 e2       	ldi	r20, 0x20	; 32
    316a:	51 e4       	ldi	r21, 0x41	; 65
    316c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3170:	dc 01       	movw	r26, r24
    3172:	cb 01       	movw	r24, r22
    3174:	bc 01       	movw	r22, r24
    3176:	cd 01       	movw	r24, r26
    3178:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    317c:	dc 01       	movw	r26, r24
    317e:	cb 01       	movw	r24, r22
    3180:	9c 8b       	std	Y+20, r25	; 0x14
    3182:	8b 8b       	std	Y+19, r24	; 0x13
    3184:	0f c0       	rjmp	.+30     	; 0x31a4 <SEG_KIT_voidDisplayBigNumber+0xa84>
    3186:	80 e9       	ldi	r24, 0x90	; 144
    3188:	91 e0       	ldi	r25, 0x01	; 1
    318a:	9a 8b       	std	Y+18, r25	; 0x12
    318c:	89 8b       	std	Y+17, r24	; 0x11
    318e:	89 89       	ldd	r24, Y+17	; 0x11
    3190:	9a 89       	ldd	r25, Y+18	; 0x12
    3192:	01 97       	sbiw	r24, 0x01	; 1
    3194:	f1 f7       	brne	.-4      	; 0x3192 <SEG_KIT_voidDisplayBigNumber+0xa72>
    3196:	9a 8b       	std	Y+18, r25	; 0x12
    3198:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    319a:	8b 89       	ldd	r24, Y+19	; 0x13
    319c:	9c 89       	ldd	r25, Y+20	; 0x14
    319e:	01 97       	sbiw	r24, 0x01	; 1
    31a0:	9c 8b       	std	Y+20, r25	; 0x14
    31a2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31a4:	8b 89       	ldd	r24, Y+19	; 0x13
    31a6:	9c 89       	ldd	r25, Y+20	; 0x14
    31a8:	00 97       	sbiw	r24, 0x00	; 0
    31aa:	69 f7       	brne	.-38     	; 0x3186 <SEG_KIT_voidDisplayBigNumber+0xa66>
    31ac:	14 c0       	rjmp	.+40     	; 0x31d6 <SEG_KIT_voidDisplayBigNumber+0xab6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31ae:	6d 89       	ldd	r22, Y+21	; 0x15
    31b0:	7e 89       	ldd	r23, Y+22	; 0x16
    31b2:	8f 89       	ldd	r24, Y+23	; 0x17
    31b4:	98 8d       	ldd	r25, Y+24	; 0x18
    31b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31ba:	dc 01       	movw	r26, r24
    31bc:	cb 01       	movw	r24, r22
    31be:	9c 8b       	std	Y+20, r25	; 0x14
    31c0:	8b 8b       	std	Y+19, r24	; 0x13
    31c2:	8b 89       	ldd	r24, Y+19	; 0x13
    31c4:	9c 89       	ldd	r25, Y+20	; 0x14
    31c6:	98 8b       	std	Y+16, r25	; 0x10
    31c8:	8f 87       	std	Y+15, r24	; 0x0f
    31ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    31cc:	98 89       	ldd	r25, Y+16	; 0x10
    31ce:	01 97       	sbiw	r24, 0x01	; 1
    31d0:	f1 f7       	brne	.-4      	; 0x31ce <SEG_KIT_voidDisplayBigNumber+0xaae>
    31d2:	98 8b       	std	Y+16, r25	; 0x10
    31d4:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(2);
			SEG_KIT_voidDisplayNumber(Number/1000,SEG4);
    31d6:	fe 01       	movw	r30, r28
    31d8:	e1 58       	subi	r30, 0x81	; 129
    31da:	ff 4f       	sbci	r31, 0xFF	; 255
    31dc:	80 81       	ld	r24, Z
    31de:	91 81       	ldd	r25, Z+1	; 0x01
    31e0:	28 ee       	ldi	r18, 0xE8	; 232
    31e2:	33 e0       	ldi	r19, 0x03	; 3
    31e4:	b9 01       	movw	r22, r18
    31e6:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <__udivmodhi4>
    31ea:	cb 01       	movw	r24, r22
    31ec:	64 e0       	ldi	r22, 0x04	; 4
    31ee:	0e 94 ac 12 	call	0x2558	; 0x2558 <SEG_KIT_voidDisplayNumber>
    31f2:	80 e0       	ldi	r24, 0x00	; 0
    31f4:	90 e0       	ldi	r25, 0x00	; 0
    31f6:	a0 e0       	ldi	r26, 0x00	; 0
    31f8:	b0 e4       	ldi	r27, 0x40	; 64
    31fa:	8b 87       	std	Y+11, r24	; 0x0b
    31fc:	9c 87       	std	Y+12, r25	; 0x0c
    31fe:	ad 87       	std	Y+13, r26	; 0x0d
    3200:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3202:	6b 85       	ldd	r22, Y+11	; 0x0b
    3204:	7c 85       	ldd	r23, Y+12	; 0x0c
    3206:	8d 85       	ldd	r24, Y+13	; 0x0d
    3208:	9e 85       	ldd	r25, Y+14	; 0x0e
    320a:	20 e0       	ldi	r18, 0x00	; 0
    320c:	30 e0       	ldi	r19, 0x00	; 0
    320e:	4a e7       	ldi	r20, 0x7A	; 122
    3210:	55 e4       	ldi	r21, 0x45	; 69
    3212:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3216:	dc 01       	movw	r26, r24
    3218:	cb 01       	movw	r24, r22
    321a:	8f 83       	std	Y+7, r24	; 0x07
    321c:	98 87       	std	Y+8, r25	; 0x08
    321e:	a9 87       	std	Y+9, r26	; 0x09
    3220:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3222:	6f 81       	ldd	r22, Y+7	; 0x07
    3224:	78 85       	ldd	r23, Y+8	; 0x08
    3226:	89 85       	ldd	r24, Y+9	; 0x09
    3228:	9a 85       	ldd	r25, Y+10	; 0x0a
    322a:	20 e0       	ldi	r18, 0x00	; 0
    322c:	30 e0       	ldi	r19, 0x00	; 0
    322e:	40 e8       	ldi	r20, 0x80	; 128
    3230:	5f e3       	ldi	r21, 0x3F	; 63
    3232:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3236:	88 23       	and	r24, r24
    3238:	2c f4       	brge	.+10     	; 0x3244 <SEG_KIT_voidDisplayBigNumber+0xb24>
		__ticks = 1;
    323a:	81 e0       	ldi	r24, 0x01	; 1
    323c:	90 e0       	ldi	r25, 0x00	; 0
    323e:	9e 83       	std	Y+6, r25	; 0x06
    3240:	8d 83       	std	Y+5, r24	; 0x05
    3242:	3f c0       	rjmp	.+126    	; 0x32c2 <SEG_KIT_voidDisplayBigNumber+0xba2>
	else if (__tmp > 65535)
    3244:	6f 81       	ldd	r22, Y+7	; 0x07
    3246:	78 85       	ldd	r23, Y+8	; 0x08
    3248:	89 85       	ldd	r24, Y+9	; 0x09
    324a:	9a 85       	ldd	r25, Y+10	; 0x0a
    324c:	20 e0       	ldi	r18, 0x00	; 0
    324e:	3f ef       	ldi	r19, 0xFF	; 255
    3250:	4f e7       	ldi	r20, 0x7F	; 127
    3252:	57 e4       	ldi	r21, 0x47	; 71
    3254:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3258:	18 16       	cp	r1, r24
    325a:	4c f5       	brge	.+82     	; 0x32ae <SEG_KIT_voidDisplayBigNumber+0xb8e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    325c:	6b 85       	ldd	r22, Y+11	; 0x0b
    325e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3260:	8d 85       	ldd	r24, Y+13	; 0x0d
    3262:	9e 85       	ldd	r25, Y+14	; 0x0e
    3264:	20 e0       	ldi	r18, 0x00	; 0
    3266:	30 e0       	ldi	r19, 0x00	; 0
    3268:	40 e2       	ldi	r20, 0x20	; 32
    326a:	51 e4       	ldi	r21, 0x41	; 65
    326c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3270:	dc 01       	movw	r26, r24
    3272:	cb 01       	movw	r24, r22
    3274:	bc 01       	movw	r22, r24
    3276:	cd 01       	movw	r24, r26
    3278:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    327c:	dc 01       	movw	r26, r24
    327e:	cb 01       	movw	r24, r22
    3280:	9e 83       	std	Y+6, r25	; 0x06
    3282:	8d 83       	std	Y+5, r24	; 0x05
    3284:	0f c0       	rjmp	.+30     	; 0x32a4 <SEG_KIT_voidDisplayBigNumber+0xb84>
    3286:	80 e9       	ldi	r24, 0x90	; 144
    3288:	91 e0       	ldi	r25, 0x01	; 1
    328a:	9c 83       	std	Y+4, r25	; 0x04
    328c:	8b 83       	std	Y+3, r24	; 0x03
    328e:	8b 81       	ldd	r24, Y+3	; 0x03
    3290:	9c 81       	ldd	r25, Y+4	; 0x04
    3292:	01 97       	sbiw	r24, 0x01	; 1
    3294:	f1 f7       	brne	.-4      	; 0x3292 <SEG_KIT_voidDisplayBigNumber+0xb72>
    3296:	9c 83       	std	Y+4, r25	; 0x04
    3298:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    329a:	8d 81       	ldd	r24, Y+5	; 0x05
    329c:	9e 81       	ldd	r25, Y+6	; 0x06
    329e:	01 97       	sbiw	r24, 0x01	; 1
    32a0:	9e 83       	std	Y+6, r25	; 0x06
    32a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32a4:	8d 81       	ldd	r24, Y+5	; 0x05
    32a6:	9e 81       	ldd	r25, Y+6	; 0x06
    32a8:	00 97       	sbiw	r24, 0x00	; 0
    32aa:	69 f7       	brne	.-38     	; 0x3286 <SEG_KIT_voidDisplayBigNumber+0xb66>
    32ac:	14 c0       	rjmp	.+40     	; 0x32d6 <SEG_KIT_voidDisplayBigNumber+0xbb6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32ae:	6f 81       	ldd	r22, Y+7	; 0x07
    32b0:	78 85       	ldd	r23, Y+8	; 0x08
    32b2:	89 85       	ldd	r24, Y+9	; 0x09
    32b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    32b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32ba:	dc 01       	movw	r26, r24
    32bc:	cb 01       	movw	r24, r22
    32be:	9e 83       	std	Y+6, r25	; 0x06
    32c0:	8d 83       	std	Y+5, r24	; 0x05
    32c2:	8d 81       	ldd	r24, Y+5	; 0x05
    32c4:	9e 81       	ldd	r25, Y+6	; 0x06
    32c6:	9a 83       	std	Y+2, r25	; 0x02
    32c8:	89 83       	std	Y+1, r24	; 0x01
    32ca:	89 81       	ldd	r24, Y+1	; 0x01
    32cc:	9a 81       	ldd	r25, Y+2	; 0x02
    32ce:	01 97       	sbiw	r24, 0x01	; 1
    32d0:	f1 f7       	brne	.-4      	; 0x32ce <SEG_KIT_voidDisplayBigNumber+0xbae>
    32d2:	9a 83       	std	Y+2, r25	; 0x02
    32d4:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(2);
		}
}
    32d6:	c0 58       	subi	r28, 0x80	; 128
    32d8:	df 4f       	sbci	r29, 0xFF	; 255
    32da:	0f b6       	in	r0, 0x3f	; 63
    32dc:	f8 94       	cli
    32de:	de bf       	out	0x3e, r29	; 62
    32e0:	0f be       	out	0x3f, r0	; 63
    32e2:	cd bf       	out	0x3d, r28	; 61
    32e4:	cf 91       	pop	r28
    32e6:	df 91       	pop	r29
    32e8:	1f 91       	pop	r17
    32ea:	0f 91       	pop	r16
    32ec:	08 95       	ret

000032ee <LCD_KIT_voidInitialization>:

#include <util/delay.h>


void LCD_KIT_voidInitialization(void)
{
    32ee:	0f 93       	push	r16
    32f0:	1f 93       	push	r17
    32f2:	df 93       	push	r29
    32f4:	cf 93       	push	r28
    32f6:	cd b7       	in	r28, 0x3d	; 61
    32f8:	de b7       	in	r29, 0x3e	; 62
    32fa:	c4 55       	subi	r28, 0x54	; 84
    32fc:	d0 40       	sbci	r29, 0x00	; 0
    32fe:	0f b6       	in	r0, 0x3f	; 63
    3300:	f8 94       	cli
    3302:	de bf       	out	0x3e, r29	; 62
    3304:	0f be       	out	0x3f, r0	; 63
    3306:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinDirection(PortA,Pin2,Output);
    3308:	80 e0       	ldi	r24, 0x00	; 0
    330a:	62 e0       	ldi	r22, 0x02	; 2
    330c:	41 e0       	ldi	r20, 0x01	; 1
    330e:	0e 94 17 0b 	call	0x162e	; 0x162e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PortA,Pin3,Output);
    3312:	80 e0       	ldi	r24, 0x00	; 0
    3314:	63 e0       	ldi	r22, 0x03	; 3
    3316:	41 e0       	ldi	r20, 0x01	; 1
    3318:	0e 94 17 0b 	call	0x162e	; 0x162e <DIO_voidSetPinDirection>

	//DIO_voidSetPinDirection(PortB,Pin0,Output);
	DIO_voidSetPinDirection(PortB,Pin7,Output);
    331c:	81 e0       	ldi	r24, 0x01	; 1
    331e:	67 e0       	ldi	r22, 0x07	; 7
    3320:	41 e0       	ldi	r20, 0x01	; 1
    3322:	0e 94 17 0b 	call	0x162e	; 0x162e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PortB,Pin1,Output);
    3326:	81 e0       	ldi	r24, 0x01	; 1
    3328:	61 e0       	ldi	r22, 0x01	; 1
    332a:	41 e0       	ldi	r20, 0x01	; 1
    332c:	0e 94 17 0b 	call	0x162e	; 0x162e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PortB,Pin2,Output);
    3330:	81 e0       	ldi	r24, 0x01	; 1
    3332:	62 e0       	ldi	r22, 0x02	; 2
    3334:	41 e0       	ldi	r20, 0x01	; 1
    3336:	0e 94 17 0b 	call	0x162e	; 0x162e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PortB,Pin4,Output);
    333a:	81 e0       	ldi	r24, 0x01	; 1
    333c:	64 e0       	ldi	r22, 0x04	; 4
    333e:	41 e0       	ldi	r20, 0x01	; 1
    3340:	0e 94 17 0b 	call	0x162e	; 0x162e <DIO_voidSetPinDirection>
    3344:	fe 01       	movw	r30, r28
    3346:	ef 5a       	subi	r30, 0xAF	; 175
    3348:	ff 4f       	sbci	r31, 0xFF	; 255
    334a:	80 e0       	ldi	r24, 0x00	; 0
    334c:	90 e0       	ldi	r25, 0x00	; 0
    334e:	a0 e2       	ldi	r26, 0x20	; 32
    3350:	b2 e4       	ldi	r27, 0x42	; 66
    3352:	80 83       	st	Z, r24
    3354:	91 83       	std	Z+1, r25	; 0x01
    3356:	a2 83       	std	Z+2, r26	; 0x02
    3358:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    335a:	8e 01       	movw	r16, r28
    335c:	03 5b       	subi	r16, 0xB3	; 179
    335e:	1f 4f       	sbci	r17, 0xFF	; 255
    3360:	fe 01       	movw	r30, r28
    3362:	ef 5a       	subi	r30, 0xAF	; 175
    3364:	ff 4f       	sbci	r31, 0xFF	; 255
    3366:	60 81       	ld	r22, Z
    3368:	71 81       	ldd	r23, Z+1	; 0x01
    336a:	82 81       	ldd	r24, Z+2	; 0x02
    336c:	93 81       	ldd	r25, Z+3	; 0x03
    336e:	20 e0       	ldi	r18, 0x00	; 0
    3370:	30 e0       	ldi	r19, 0x00	; 0
    3372:	4a e7       	ldi	r20, 0x7A	; 122
    3374:	55 e4       	ldi	r21, 0x45	; 69
    3376:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    337a:	dc 01       	movw	r26, r24
    337c:	cb 01       	movw	r24, r22
    337e:	f8 01       	movw	r30, r16
    3380:	80 83       	st	Z, r24
    3382:	91 83       	std	Z+1, r25	; 0x01
    3384:	a2 83       	std	Z+2, r26	; 0x02
    3386:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3388:	fe 01       	movw	r30, r28
    338a:	e3 5b       	subi	r30, 0xB3	; 179
    338c:	ff 4f       	sbci	r31, 0xFF	; 255
    338e:	60 81       	ld	r22, Z
    3390:	71 81       	ldd	r23, Z+1	; 0x01
    3392:	82 81       	ldd	r24, Z+2	; 0x02
    3394:	93 81       	ldd	r25, Z+3	; 0x03
    3396:	20 e0       	ldi	r18, 0x00	; 0
    3398:	30 e0       	ldi	r19, 0x00	; 0
    339a:	40 e8       	ldi	r20, 0x80	; 128
    339c:	5f e3       	ldi	r21, 0x3F	; 63
    339e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33a2:	88 23       	and	r24, r24
    33a4:	44 f4       	brge	.+16     	; 0x33b6 <LCD_KIT_voidInitialization+0xc8>
		__ticks = 1;
    33a6:	fe 01       	movw	r30, r28
    33a8:	e5 5b       	subi	r30, 0xB5	; 181
    33aa:	ff 4f       	sbci	r31, 0xFF	; 255
    33ac:	81 e0       	ldi	r24, 0x01	; 1
    33ae:	90 e0       	ldi	r25, 0x00	; 0
    33b0:	91 83       	std	Z+1, r25	; 0x01
    33b2:	80 83       	st	Z, r24
    33b4:	64 c0       	rjmp	.+200    	; 0x347e <LCD_KIT_voidInitialization+0x190>
	else if (__tmp > 65535)
    33b6:	fe 01       	movw	r30, r28
    33b8:	e3 5b       	subi	r30, 0xB3	; 179
    33ba:	ff 4f       	sbci	r31, 0xFF	; 255
    33bc:	60 81       	ld	r22, Z
    33be:	71 81       	ldd	r23, Z+1	; 0x01
    33c0:	82 81       	ldd	r24, Z+2	; 0x02
    33c2:	93 81       	ldd	r25, Z+3	; 0x03
    33c4:	20 e0       	ldi	r18, 0x00	; 0
    33c6:	3f ef       	ldi	r19, 0xFF	; 255
    33c8:	4f e7       	ldi	r20, 0x7F	; 127
    33ca:	57 e4       	ldi	r21, 0x47	; 71
    33cc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33d0:	18 16       	cp	r1, r24
    33d2:	0c f0       	brlt	.+2      	; 0x33d6 <LCD_KIT_voidInitialization+0xe8>
    33d4:	43 c0       	rjmp	.+134    	; 0x345c <LCD_KIT_voidInitialization+0x16e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33d6:	fe 01       	movw	r30, r28
    33d8:	ef 5a       	subi	r30, 0xAF	; 175
    33da:	ff 4f       	sbci	r31, 0xFF	; 255
    33dc:	60 81       	ld	r22, Z
    33de:	71 81       	ldd	r23, Z+1	; 0x01
    33e0:	82 81       	ldd	r24, Z+2	; 0x02
    33e2:	93 81       	ldd	r25, Z+3	; 0x03
    33e4:	20 e0       	ldi	r18, 0x00	; 0
    33e6:	30 e0       	ldi	r19, 0x00	; 0
    33e8:	40 e2       	ldi	r20, 0x20	; 32
    33ea:	51 e4       	ldi	r21, 0x41	; 65
    33ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33f0:	dc 01       	movw	r26, r24
    33f2:	cb 01       	movw	r24, r22
    33f4:	8e 01       	movw	r16, r28
    33f6:	05 5b       	subi	r16, 0xB5	; 181
    33f8:	1f 4f       	sbci	r17, 0xFF	; 255
    33fa:	bc 01       	movw	r22, r24
    33fc:	cd 01       	movw	r24, r26
    33fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3402:	dc 01       	movw	r26, r24
    3404:	cb 01       	movw	r24, r22
    3406:	f8 01       	movw	r30, r16
    3408:	91 83       	std	Z+1, r25	; 0x01
    340a:	80 83       	st	Z, r24
    340c:	1f c0       	rjmp	.+62     	; 0x344c <LCD_KIT_voidInitialization+0x15e>
    340e:	fe 01       	movw	r30, r28
    3410:	e7 5b       	subi	r30, 0xB7	; 183
    3412:	ff 4f       	sbci	r31, 0xFF	; 255
    3414:	80 e9       	ldi	r24, 0x90	; 144
    3416:	91 e0       	ldi	r25, 0x01	; 1
    3418:	91 83       	std	Z+1, r25	; 0x01
    341a:	80 83       	st	Z, r24
    341c:	fe 01       	movw	r30, r28
    341e:	e7 5b       	subi	r30, 0xB7	; 183
    3420:	ff 4f       	sbci	r31, 0xFF	; 255
    3422:	80 81       	ld	r24, Z
    3424:	91 81       	ldd	r25, Z+1	; 0x01
    3426:	01 97       	sbiw	r24, 0x01	; 1
    3428:	f1 f7       	brne	.-4      	; 0x3426 <LCD_KIT_voidInitialization+0x138>
    342a:	fe 01       	movw	r30, r28
    342c:	e7 5b       	subi	r30, 0xB7	; 183
    342e:	ff 4f       	sbci	r31, 0xFF	; 255
    3430:	91 83       	std	Z+1, r25	; 0x01
    3432:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3434:	de 01       	movw	r26, r28
    3436:	a5 5b       	subi	r26, 0xB5	; 181
    3438:	bf 4f       	sbci	r27, 0xFF	; 255
    343a:	fe 01       	movw	r30, r28
    343c:	e5 5b       	subi	r30, 0xB5	; 181
    343e:	ff 4f       	sbci	r31, 0xFF	; 255
    3440:	80 81       	ld	r24, Z
    3442:	91 81       	ldd	r25, Z+1	; 0x01
    3444:	01 97       	sbiw	r24, 0x01	; 1
    3446:	11 96       	adiw	r26, 0x01	; 1
    3448:	9c 93       	st	X, r25
    344a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    344c:	fe 01       	movw	r30, r28
    344e:	e5 5b       	subi	r30, 0xB5	; 181
    3450:	ff 4f       	sbci	r31, 0xFF	; 255
    3452:	80 81       	ld	r24, Z
    3454:	91 81       	ldd	r25, Z+1	; 0x01
    3456:	00 97       	sbiw	r24, 0x00	; 0
    3458:	d1 f6       	brne	.-76     	; 0x340e <LCD_KIT_voidInitialization+0x120>
    345a:	27 c0       	rjmp	.+78     	; 0x34aa <LCD_KIT_voidInitialization+0x1bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    345c:	8e 01       	movw	r16, r28
    345e:	05 5b       	subi	r16, 0xB5	; 181
    3460:	1f 4f       	sbci	r17, 0xFF	; 255
    3462:	fe 01       	movw	r30, r28
    3464:	e3 5b       	subi	r30, 0xB3	; 179
    3466:	ff 4f       	sbci	r31, 0xFF	; 255
    3468:	60 81       	ld	r22, Z
    346a:	71 81       	ldd	r23, Z+1	; 0x01
    346c:	82 81       	ldd	r24, Z+2	; 0x02
    346e:	93 81       	ldd	r25, Z+3	; 0x03
    3470:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3474:	dc 01       	movw	r26, r24
    3476:	cb 01       	movw	r24, r22
    3478:	f8 01       	movw	r30, r16
    347a:	91 83       	std	Z+1, r25	; 0x01
    347c:	80 83       	st	Z, r24
    347e:	de 01       	movw	r26, r28
    3480:	a9 5b       	subi	r26, 0xB9	; 185
    3482:	bf 4f       	sbci	r27, 0xFF	; 255
    3484:	fe 01       	movw	r30, r28
    3486:	e5 5b       	subi	r30, 0xB5	; 181
    3488:	ff 4f       	sbci	r31, 0xFF	; 255
    348a:	80 81       	ld	r24, Z
    348c:	91 81       	ldd	r25, Z+1	; 0x01
    348e:	8d 93       	st	X+, r24
    3490:	9c 93       	st	X, r25
    3492:	fe 01       	movw	r30, r28
    3494:	e9 5b       	subi	r30, 0xB9	; 185
    3496:	ff 4f       	sbci	r31, 0xFF	; 255
    3498:	80 81       	ld	r24, Z
    349a:	91 81       	ldd	r25, Z+1	; 0x01
    349c:	01 97       	sbiw	r24, 0x01	; 1
    349e:	f1 f7       	brne	.-4      	; 0x349c <LCD_KIT_voidInitialization+0x1ae>
    34a0:	fe 01       	movw	r30, r28
    34a2:	e9 5b       	subi	r30, 0xB9	; 185
    34a4:	ff 4f       	sbci	r31, 0xFF	; 255
    34a6:	91 83       	std	Z+1, r25	; 0x01
    34a8:	80 83       	st	Z, r24

	_delay_ms(40);
	//DIO_voidSetPinValue(PortB,Pin0,Low);
	DIO_voidSetPinValue(PortB,Pin7,Low);
    34aa:	81 e0       	ldi	r24, 0x01	; 1
    34ac:	67 e0       	ldi	r22, 0x07	; 7
    34ae:	40 e0       	ldi	r20, 0x00	; 0
    34b0:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PortB,Pin1,High);
    34b4:	81 e0       	ldi	r24, 0x01	; 1
    34b6:	61 e0       	ldi	r22, 0x01	; 1
    34b8:	41 e0       	ldi	r20, 0x01	; 1
    34ba:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PortB,Pin2,Low);
    34be:	81 e0       	ldi	r24, 0x01	; 1
    34c0:	62 e0       	ldi	r22, 0x02	; 2
    34c2:	40 e0       	ldi	r20, 0x00	; 0
    34c4:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PortB,Pin4,Low);
    34c8:	81 e0       	ldi	r24, 0x01	; 1
    34ca:	64 e0       	ldi	r22, 0x04	; 4
    34cc:	40 e0       	ldi	r20, 0x00	; 0
    34ce:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_voidSetPinValue>

	DIO_voidSetPinValue(PortA,Pin2,High);
    34d2:	80 e0       	ldi	r24, 0x00	; 0
    34d4:	62 e0       	ldi	r22, 0x02	; 2
    34d6:	41 e0       	ldi	r20, 0x01	; 1
    34d8:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_voidSetPinValue>
    34dc:	fe 01       	movw	r30, r28
    34de:	ed 5b       	subi	r30, 0xBD	; 189
    34e0:	ff 4f       	sbci	r31, 0xFF	; 255
    34e2:	80 e0       	ldi	r24, 0x00	; 0
    34e4:	90 e0       	ldi	r25, 0x00	; 0
    34e6:	a0 e0       	ldi	r26, 0x00	; 0
    34e8:	b0 e4       	ldi	r27, 0x40	; 64
    34ea:	80 83       	st	Z, r24
    34ec:	91 83       	std	Z+1, r25	; 0x01
    34ee:	a2 83       	std	Z+2, r26	; 0x02
    34f0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34f2:	8e 01       	movw	r16, r28
    34f4:	01 5c       	subi	r16, 0xC1	; 193
    34f6:	1f 4f       	sbci	r17, 0xFF	; 255
    34f8:	fe 01       	movw	r30, r28
    34fa:	ed 5b       	subi	r30, 0xBD	; 189
    34fc:	ff 4f       	sbci	r31, 0xFF	; 255
    34fe:	60 81       	ld	r22, Z
    3500:	71 81       	ldd	r23, Z+1	; 0x01
    3502:	82 81       	ldd	r24, Z+2	; 0x02
    3504:	93 81       	ldd	r25, Z+3	; 0x03
    3506:	20 e0       	ldi	r18, 0x00	; 0
    3508:	30 e0       	ldi	r19, 0x00	; 0
    350a:	4a e7       	ldi	r20, 0x7A	; 122
    350c:	55 e4       	ldi	r21, 0x45	; 69
    350e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3512:	dc 01       	movw	r26, r24
    3514:	cb 01       	movw	r24, r22
    3516:	f8 01       	movw	r30, r16
    3518:	80 83       	st	Z, r24
    351a:	91 83       	std	Z+1, r25	; 0x01
    351c:	a2 83       	std	Z+2, r26	; 0x02
    351e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3520:	fe 01       	movw	r30, r28
    3522:	ff 96       	adiw	r30, 0x3f	; 63
    3524:	60 81       	ld	r22, Z
    3526:	71 81       	ldd	r23, Z+1	; 0x01
    3528:	82 81       	ldd	r24, Z+2	; 0x02
    352a:	93 81       	ldd	r25, Z+3	; 0x03
    352c:	20 e0       	ldi	r18, 0x00	; 0
    352e:	30 e0       	ldi	r19, 0x00	; 0
    3530:	40 e8       	ldi	r20, 0x80	; 128
    3532:	5f e3       	ldi	r21, 0x3F	; 63
    3534:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3538:	88 23       	and	r24, r24
    353a:	2c f4       	brge	.+10     	; 0x3546 <LCD_KIT_voidInitialization+0x258>
		__ticks = 1;
    353c:	81 e0       	ldi	r24, 0x01	; 1
    353e:	90 e0       	ldi	r25, 0x00	; 0
    3540:	9e af       	std	Y+62, r25	; 0x3e
    3542:	8d af       	std	Y+61, r24	; 0x3d
    3544:	46 c0       	rjmp	.+140    	; 0x35d2 <LCD_KIT_voidInitialization+0x2e4>
	else if (__tmp > 65535)
    3546:	fe 01       	movw	r30, r28
    3548:	ff 96       	adiw	r30, 0x3f	; 63
    354a:	60 81       	ld	r22, Z
    354c:	71 81       	ldd	r23, Z+1	; 0x01
    354e:	82 81       	ldd	r24, Z+2	; 0x02
    3550:	93 81       	ldd	r25, Z+3	; 0x03
    3552:	20 e0       	ldi	r18, 0x00	; 0
    3554:	3f ef       	ldi	r19, 0xFF	; 255
    3556:	4f e7       	ldi	r20, 0x7F	; 127
    3558:	57 e4       	ldi	r21, 0x47	; 71
    355a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    355e:	18 16       	cp	r1, r24
    3560:	64 f5       	brge	.+88     	; 0x35ba <LCD_KIT_voidInitialization+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3562:	fe 01       	movw	r30, r28
    3564:	ed 5b       	subi	r30, 0xBD	; 189
    3566:	ff 4f       	sbci	r31, 0xFF	; 255
    3568:	60 81       	ld	r22, Z
    356a:	71 81       	ldd	r23, Z+1	; 0x01
    356c:	82 81       	ldd	r24, Z+2	; 0x02
    356e:	93 81       	ldd	r25, Z+3	; 0x03
    3570:	20 e0       	ldi	r18, 0x00	; 0
    3572:	30 e0       	ldi	r19, 0x00	; 0
    3574:	40 e2       	ldi	r20, 0x20	; 32
    3576:	51 e4       	ldi	r21, 0x41	; 65
    3578:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    357c:	dc 01       	movw	r26, r24
    357e:	cb 01       	movw	r24, r22
    3580:	bc 01       	movw	r22, r24
    3582:	cd 01       	movw	r24, r26
    3584:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3588:	dc 01       	movw	r26, r24
    358a:	cb 01       	movw	r24, r22
    358c:	9e af       	std	Y+62, r25	; 0x3e
    358e:	8d af       	std	Y+61, r24	; 0x3d
    3590:	0f c0       	rjmp	.+30     	; 0x35b0 <LCD_KIT_voidInitialization+0x2c2>
    3592:	80 e9       	ldi	r24, 0x90	; 144
    3594:	91 e0       	ldi	r25, 0x01	; 1
    3596:	9c af       	std	Y+60, r25	; 0x3c
    3598:	8b af       	std	Y+59, r24	; 0x3b
    359a:	8b ad       	ldd	r24, Y+59	; 0x3b
    359c:	9c ad       	ldd	r25, Y+60	; 0x3c
    359e:	01 97       	sbiw	r24, 0x01	; 1
    35a0:	f1 f7       	brne	.-4      	; 0x359e <LCD_KIT_voidInitialization+0x2b0>
    35a2:	9c af       	std	Y+60, r25	; 0x3c
    35a4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35a6:	8d ad       	ldd	r24, Y+61	; 0x3d
    35a8:	9e ad       	ldd	r25, Y+62	; 0x3e
    35aa:	01 97       	sbiw	r24, 0x01	; 1
    35ac:	9e af       	std	Y+62, r25	; 0x3e
    35ae:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35b0:	8d ad       	ldd	r24, Y+61	; 0x3d
    35b2:	9e ad       	ldd	r25, Y+62	; 0x3e
    35b4:	00 97       	sbiw	r24, 0x00	; 0
    35b6:	69 f7       	brne	.-38     	; 0x3592 <LCD_KIT_voidInitialization+0x2a4>
    35b8:	16 c0       	rjmp	.+44     	; 0x35e6 <LCD_KIT_voidInitialization+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35ba:	fe 01       	movw	r30, r28
    35bc:	ff 96       	adiw	r30, 0x3f	; 63
    35be:	60 81       	ld	r22, Z
    35c0:	71 81       	ldd	r23, Z+1	; 0x01
    35c2:	82 81       	ldd	r24, Z+2	; 0x02
    35c4:	93 81       	ldd	r25, Z+3	; 0x03
    35c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35ca:	dc 01       	movw	r26, r24
    35cc:	cb 01       	movw	r24, r22
    35ce:	9e af       	std	Y+62, r25	; 0x3e
    35d0:	8d af       	std	Y+61, r24	; 0x3d
    35d2:	8d ad       	ldd	r24, Y+61	; 0x3d
    35d4:	9e ad       	ldd	r25, Y+62	; 0x3e
    35d6:	9a af       	std	Y+58, r25	; 0x3a
    35d8:	89 af       	std	Y+57, r24	; 0x39
    35da:	89 ad       	ldd	r24, Y+57	; 0x39
    35dc:	9a ad       	ldd	r25, Y+58	; 0x3a
    35de:	01 97       	sbiw	r24, 0x01	; 1
    35e0:	f1 f7       	brne	.-4      	; 0x35de <LCD_KIT_voidInitialization+0x2f0>
    35e2:	9a af       	std	Y+58, r25	; 0x3a
    35e4:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(2);
	DIO_voidSetPinValue(PortA,Pin2,Low);
    35e6:	80 e0       	ldi	r24, 0x00	; 0
    35e8:	62 e0       	ldi	r22, 0x02	; 2
    35ea:	40 e0       	ldi	r20, 0x00	; 0
    35ec:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_voidSetPinValue>
    35f0:	80 e0       	ldi	r24, 0x00	; 0
    35f2:	90 e0       	ldi	r25, 0x00	; 0
    35f4:	a0 e0       	ldi	r26, 0x00	; 0
    35f6:	b0 e4       	ldi	r27, 0x40	; 64
    35f8:	8d ab       	std	Y+53, r24	; 0x35
    35fa:	9e ab       	std	Y+54, r25	; 0x36
    35fc:	af ab       	std	Y+55, r26	; 0x37
    35fe:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3600:	6d a9       	ldd	r22, Y+53	; 0x35
    3602:	7e a9       	ldd	r23, Y+54	; 0x36
    3604:	8f a9       	ldd	r24, Y+55	; 0x37
    3606:	98 ad       	ldd	r25, Y+56	; 0x38
    3608:	20 e0       	ldi	r18, 0x00	; 0
    360a:	30 e0       	ldi	r19, 0x00	; 0
    360c:	4a e7       	ldi	r20, 0x7A	; 122
    360e:	55 e4       	ldi	r21, 0x45	; 69
    3610:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3614:	dc 01       	movw	r26, r24
    3616:	cb 01       	movw	r24, r22
    3618:	89 ab       	std	Y+49, r24	; 0x31
    361a:	9a ab       	std	Y+50, r25	; 0x32
    361c:	ab ab       	std	Y+51, r26	; 0x33
    361e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3620:	69 a9       	ldd	r22, Y+49	; 0x31
    3622:	7a a9       	ldd	r23, Y+50	; 0x32
    3624:	8b a9       	ldd	r24, Y+51	; 0x33
    3626:	9c a9       	ldd	r25, Y+52	; 0x34
    3628:	20 e0       	ldi	r18, 0x00	; 0
    362a:	30 e0       	ldi	r19, 0x00	; 0
    362c:	40 e8       	ldi	r20, 0x80	; 128
    362e:	5f e3       	ldi	r21, 0x3F	; 63
    3630:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3634:	88 23       	and	r24, r24
    3636:	2c f4       	brge	.+10     	; 0x3642 <LCD_KIT_voidInitialization+0x354>
		__ticks = 1;
    3638:	81 e0       	ldi	r24, 0x01	; 1
    363a:	90 e0       	ldi	r25, 0x00	; 0
    363c:	98 ab       	std	Y+48, r25	; 0x30
    363e:	8f a7       	std	Y+47, r24	; 0x2f
    3640:	3f c0       	rjmp	.+126    	; 0x36c0 <LCD_KIT_voidInitialization+0x3d2>
	else if (__tmp > 65535)
    3642:	69 a9       	ldd	r22, Y+49	; 0x31
    3644:	7a a9       	ldd	r23, Y+50	; 0x32
    3646:	8b a9       	ldd	r24, Y+51	; 0x33
    3648:	9c a9       	ldd	r25, Y+52	; 0x34
    364a:	20 e0       	ldi	r18, 0x00	; 0
    364c:	3f ef       	ldi	r19, 0xFF	; 255
    364e:	4f e7       	ldi	r20, 0x7F	; 127
    3650:	57 e4       	ldi	r21, 0x47	; 71
    3652:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3656:	18 16       	cp	r1, r24
    3658:	4c f5       	brge	.+82     	; 0x36ac <LCD_KIT_voidInitialization+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    365a:	6d a9       	ldd	r22, Y+53	; 0x35
    365c:	7e a9       	ldd	r23, Y+54	; 0x36
    365e:	8f a9       	ldd	r24, Y+55	; 0x37
    3660:	98 ad       	ldd	r25, Y+56	; 0x38
    3662:	20 e0       	ldi	r18, 0x00	; 0
    3664:	30 e0       	ldi	r19, 0x00	; 0
    3666:	40 e2       	ldi	r20, 0x20	; 32
    3668:	51 e4       	ldi	r21, 0x41	; 65
    366a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    366e:	dc 01       	movw	r26, r24
    3670:	cb 01       	movw	r24, r22
    3672:	bc 01       	movw	r22, r24
    3674:	cd 01       	movw	r24, r26
    3676:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    367a:	dc 01       	movw	r26, r24
    367c:	cb 01       	movw	r24, r22
    367e:	98 ab       	std	Y+48, r25	; 0x30
    3680:	8f a7       	std	Y+47, r24	; 0x2f
    3682:	0f c0       	rjmp	.+30     	; 0x36a2 <LCD_KIT_voidInitialization+0x3b4>
    3684:	80 e9       	ldi	r24, 0x90	; 144
    3686:	91 e0       	ldi	r25, 0x01	; 1
    3688:	9e a7       	std	Y+46, r25	; 0x2e
    368a:	8d a7       	std	Y+45, r24	; 0x2d
    368c:	8d a5       	ldd	r24, Y+45	; 0x2d
    368e:	9e a5       	ldd	r25, Y+46	; 0x2e
    3690:	01 97       	sbiw	r24, 0x01	; 1
    3692:	f1 f7       	brne	.-4      	; 0x3690 <LCD_KIT_voidInitialization+0x3a2>
    3694:	9e a7       	std	Y+46, r25	; 0x2e
    3696:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3698:	8f a5       	ldd	r24, Y+47	; 0x2f
    369a:	98 a9       	ldd	r25, Y+48	; 0x30
    369c:	01 97       	sbiw	r24, 0x01	; 1
    369e:	98 ab       	std	Y+48, r25	; 0x30
    36a0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36a2:	8f a5       	ldd	r24, Y+47	; 0x2f
    36a4:	98 a9       	ldd	r25, Y+48	; 0x30
    36a6:	00 97       	sbiw	r24, 0x00	; 0
    36a8:	69 f7       	brne	.-38     	; 0x3684 <LCD_KIT_voidInitialization+0x396>
    36aa:	14 c0       	rjmp	.+40     	; 0x36d4 <LCD_KIT_voidInitialization+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36ac:	69 a9       	ldd	r22, Y+49	; 0x31
    36ae:	7a a9       	ldd	r23, Y+50	; 0x32
    36b0:	8b a9       	ldd	r24, Y+51	; 0x33
    36b2:	9c a9       	ldd	r25, Y+52	; 0x34
    36b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36b8:	dc 01       	movw	r26, r24
    36ba:	cb 01       	movw	r24, r22
    36bc:	98 ab       	std	Y+48, r25	; 0x30
    36be:	8f a7       	std	Y+47, r24	; 0x2f
    36c0:	8f a5       	ldd	r24, Y+47	; 0x2f
    36c2:	98 a9       	ldd	r25, Y+48	; 0x30
    36c4:	9c a7       	std	Y+44, r25	; 0x2c
    36c6:	8b a7       	std	Y+43, r24	; 0x2b
    36c8:	8b a5       	ldd	r24, Y+43	; 0x2b
    36ca:	9c a5       	ldd	r25, Y+44	; 0x2c
    36cc:	01 97       	sbiw	r24, 0x01	; 1
    36ce:	f1 f7       	brne	.-4      	; 0x36cc <LCD_KIT_voidInitialization+0x3de>
    36d0:	9c a7       	std	Y+44, r25	; 0x2c
    36d2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);

	LCD_KIT_voidRunCommand(0x28);
    36d4:	88 e2       	ldi	r24, 0x28	; 40
    36d6:	0e 94 4a 1f 	call	0x3e94	; 0x3e94 <LCD_KIT_voidRunCommand>
    36da:	80 e0       	ldi	r24, 0x00	; 0
    36dc:	90 e0       	ldi	r25, 0x00	; 0
    36de:	a0 e8       	ldi	r26, 0x80	; 128
    36e0:	bf e3       	ldi	r27, 0x3F	; 63
    36e2:	8f a3       	std	Y+39, r24	; 0x27
    36e4:	98 a7       	std	Y+40, r25	; 0x28
    36e6:	a9 a7       	std	Y+41, r26	; 0x29
    36e8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36ea:	6f a1       	ldd	r22, Y+39	; 0x27
    36ec:	78 a5       	ldd	r23, Y+40	; 0x28
    36ee:	89 a5       	ldd	r24, Y+41	; 0x29
    36f0:	9a a5       	ldd	r25, Y+42	; 0x2a
    36f2:	20 e0       	ldi	r18, 0x00	; 0
    36f4:	30 e0       	ldi	r19, 0x00	; 0
    36f6:	4a e7       	ldi	r20, 0x7A	; 122
    36f8:	55 e4       	ldi	r21, 0x45	; 69
    36fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36fe:	dc 01       	movw	r26, r24
    3700:	cb 01       	movw	r24, r22
    3702:	8b a3       	std	Y+35, r24	; 0x23
    3704:	9c a3       	std	Y+36, r25	; 0x24
    3706:	ad a3       	std	Y+37, r26	; 0x25
    3708:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    370a:	6b a1       	ldd	r22, Y+35	; 0x23
    370c:	7c a1       	ldd	r23, Y+36	; 0x24
    370e:	8d a1       	ldd	r24, Y+37	; 0x25
    3710:	9e a1       	ldd	r25, Y+38	; 0x26
    3712:	20 e0       	ldi	r18, 0x00	; 0
    3714:	30 e0       	ldi	r19, 0x00	; 0
    3716:	40 e8       	ldi	r20, 0x80	; 128
    3718:	5f e3       	ldi	r21, 0x3F	; 63
    371a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    371e:	88 23       	and	r24, r24
    3720:	2c f4       	brge	.+10     	; 0x372c <LCD_KIT_voidInitialization+0x43e>
		__ticks = 1;
    3722:	81 e0       	ldi	r24, 0x01	; 1
    3724:	90 e0       	ldi	r25, 0x00	; 0
    3726:	9a a3       	std	Y+34, r25	; 0x22
    3728:	89 a3       	std	Y+33, r24	; 0x21
    372a:	3f c0       	rjmp	.+126    	; 0x37aa <LCD_KIT_voidInitialization+0x4bc>
	else if (__tmp > 65535)
    372c:	6b a1       	ldd	r22, Y+35	; 0x23
    372e:	7c a1       	ldd	r23, Y+36	; 0x24
    3730:	8d a1       	ldd	r24, Y+37	; 0x25
    3732:	9e a1       	ldd	r25, Y+38	; 0x26
    3734:	20 e0       	ldi	r18, 0x00	; 0
    3736:	3f ef       	ldi	r19, 0xFF	; 255
    3738:	4f e7       	ldi	r20, 0x7F	; 127
    373a:	57 e4       	ldi	r21, 0x47	; 71
    373c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3740:	18 16       	cp	r1, r24
    3742:	4c f5       	brge	.+82     	; 0x3796 <LCD_KIT_voidInitialization+0x4a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3744:	6f a1       	ldd	r22, Y+39	; 0x27
    3746:	78 a5       	ldd	r23, Y+40	; 0x28
    3748:	89 a5       	ldd	r24, Y+41	; 0x29
    374a:	9a a5       	ldd	r25, Y+42	; 0x2a
    374c:	20 e0       	ldi	r18, 0x00	; 0
    374e:	30 e0       	ldi	r19, 0x00	; 0
    3750:	40 e2       	ldi	r20, 0x20	; 32
    3752:	51 e4       	ldi	r21, 0x41	; 65
    3754:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3758:	dc 01       	movw	r26, r24
    375a:	cb 01       	movw	r24, r22
    375c:	bc 01       	movw	r22, r24
    375e:	cd 01       	movw	r24, r26
    3760:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3764:	dc 01       	movw	r26, r24
    3766:	cb 01       	movw	r24, r22
    3768:	9a a3       	std	Y+34, r25	; 0x22
    376a:	89 a3       	std	Y+33, r24	; 0x21
    376c:	0f c0       	rjmp	.+30     	; 0x378c <LCD_KIT_voidInitialization+0x49e>
    376e:	80 e9       	ldi	r24, 0x90	; 144
    3770:	91 e0       	ldi	r25, 0x01	; 1
    3772:	98 a3       	std	Y+32, r25	; 0x20
    3774:	8f 8f       	std	Y+31, r24	; 0x1f
    3776:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3778:	98 a1       	ldd	r25, Y+32	; 0x20
    377a:	01 97       	sbiw	r24, 0x01	; 1
    377c:	f1 f7       	brne	.-4      	; 0x377a <LCD_KIT_voidInitialization+0x48c>
    377e:	98 a3       	std	Y+32, r25	; 0x20
    3780:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3782:	89 a1       	ldd	r24, Y+33	; 0x21
    3784:	9a a1       	ldd	r25, Y+34	; 0x22
    3786:	01 97       	sbiw	r24, 0x01	; 1
    3788:	9a a3       	std	Y+34, r25	; 0x22
    378a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    378c:	89 a1       	ldd	r24, Y+33	; 0x21
    378e:	9a a1       	ldd	r25, Y+34	; 0x22
    3790:	00 97       	sbiw	r24, 0x00	; 0
    3792:	69 f7       	brne	.-38     	; 0x376e <LCD_KIT_voidInitialization+0x480>
    3794:	14 c0       	rjmp	.+40     	; 0x37be <LCD_KIT_voidInitialization+0x4d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3796:	6b a1       	ldd	r22, Y+35	; 0x23
    3798:	7c a1       	ldd	r23, Y+36	; 0x24
    379a:	8d a1       	ldd	r24, Y+37	; 0x25
    379c:	9e a1       	ldd	r25, Y+38	; 0x26
    379e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37a2:	dc 01       	movw	r26, r24
    37a4:	cb 01       	movw	r24, r22
    37a6:	9a a3       	std	Y+34, r25	; 0x22
    37a8:	89 a3       	std	Y+33, r24	; 0x21
    37aa:	89 a1       	ldd	r24, Y+33	; 0x21
    37ac:	9a a1       	ldd	r25, Y+34	; 0x22
    37ae:	9e 8f       	std	Y+30, r25	; 0x1e
    37b0:	8d 8f       	std	Y+29, r24	; 0x1d
    37b2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    37b4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    37b6:	01 97       	sbiw	r24, 0x01	; 1
    37b8:	f1 f7       	brne	.-4      	; 0x37b6 <LCD_KIT_voidInitialization+0x4c8>
    37ba:	9e 8f       	std	Y+30, r25	; 0x1e
    37bc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	LCD_KIT_voidRunCommand(0x0C);
    37be:	8c e0       	ldi	r24, 0x0C	; 12
    37c0:	0e 94 4a 1f 	call	0x3e94	; 0x3e94 <LCD_KIT_voidRunCommand>
    37c4:	80 e0       	ldi	r24, 0x00	; 0
    37c6:	90 e0       	ldi	r25, 0x00	; 0
    37c8:	a0 e8       	ldi	r26, 0x80	; 128
    37ca:	bf e3       	ldi	r27, 0x3F	; 63
    37cc:	89 8f       	std	Y+25, r24	; 0x19
    37ce:	9a 8f       	std	Y+26, r25	; 0x1a
    37d0:	ab 8f       	std	Y+27, r26	; 0x1b
    37d2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37d4:	69 8d       	ldd	r22, Y+25	; 0x19
    37d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    37d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    37da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    37dc:	20 e0       	ldi	r18, 0x00	; 0
    37de:	30 e0       	ldi	r19, 0x00	; 0
    37e0:	4a e7       	ldi	r20, 0x7A	; 122
    37e2:	55 e4       	ldi	r21, 0x45	; 69
    37e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37e8:	dc 01       	movw	r26, r24
    37ea:	cb 01       	movw	r24, r22
    37ec:	8d 8b       	std	Y+21, r24	; 0x15
    37ee:	9e 8b       	std	Y+22, r25	; 0x16
    37f0:	af 8b       	std	Y+23, r26	; 0x17
    37f2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    37f4:	6d 89       	ldd	r22, Y+21	; 0x15
    37f6:	7e 89       	ldd	r23, Y+22	; 0x16
    37f8:	8f 89       	ldd	r24, Y+23	; 0x17
    37fa:	98 8d       	ldd	r25, Y+24	; 0x18
    37fc:	20 e0       	ldi	r18, 0x00	; 0
    37fe:	30 e0       	ldi	r19, 0x00	; 0
    3800:	40 e8       	ldi	r20, 0x80	; 128
    3802:	5f e3       	ldi	r21, 0x3F	; 63
    3804:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3808:	88 23       	and	r24, r24
    380a:	2c f4       	brge	.+10     	; 0x3816 <LCD_KIT_voidInitialization+0x528>
		__ticks = 1;
    380c:	81 e0       	ldi	r24, 0x01	; 1
    380e:	90 e0       	ldi	r25, 0x00	; 0
    3810:	9c 8b       	std	Y+20, r25	; 0x14
    3812:	8b 8b       	std	Y+19, r24	; 0x13
    3814:	3f c0       	rjmp	.+126    	; 0x3894 <LCD_KIT_voidInitialization+0x5a6>
	else if (__tmp > 65535)
    3816:	6d 89       	ldd	r22, Y+21	; 0x15
    3818:	7e 89       	ldd	r23, Y+22	; 0x16
    381a:	8f 89       	ldd	r24, Y+23	; 0x17
    381c:	98 8d       	ldd	r25, Y+24	; 0x18
    381e:	20 e0       	ldi	r18, 0x00	; 0
    3820:	3f ef       	ldi	r19, 0xFF	; 255
    3822:	4f e7       	ldi	r20, 0x7F	; 127
    3824:	57 e4       	ldi	r21, 0x47	; 71
    3826:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    382a:	18 16       	cp	r1, r24
    382c:	4c f5       	brge	.+82     	; 0x3880 <LCD_KIT_voidInitialization+0x592>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    382e:	69 8d       	ldd	r22, Y+25	; 0x19
    3830:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3832:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3834:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3836:	20 e0       	ldi	r18, 0x00	; 0
    3838:	30 e0       	ldi	r19, 0x00	; 0
    383a:	40 e2       	ldi	r20, 0x20	; 32
    383c:	51 e4       	ldi	r21, 0x41	; 65
    383e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3842:	dc 01       	movw	r26, r24
    3844:	cb 01       	movw	r24, r22
    3846:	bc 01       	movw	r22, r24
    3848:	cd 01       	movw	r24, r26
    384a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    384e:	dc 01       	movw	r26, r24
    3850:	cb 01       	movw	r24, r22
    3852:	9c 8b       	std	Y+20, r25	; 0x14
    3854:	8b 8b       	std	Y+19, r24	; 0x13
    3856:	0f c0       	rjmp	.+30     	; 0x3876 <LCD_KIT_voidInitialization+0x588>
    3858:	80 e9       	ldi	r24, 0x90	; 144
    385a:	91 e0       	ldi	r25, 0x01	; 1
    385c:	9a 8b       	std	Y+18, r25	; 0x12
    385e:	89 8b       	std	Y+17, r24	; 0x11
    3860:	89 89       	ldd	r24, Y+17	; 0x11
    3862:	9a 89       	ldd	r25, Y+18	; 0x12
    3864:	01 97       	sbiw	r24, 0x01	; 1
    3866:	f1 f7       	brne	.-4      	; 0x3864 <LCD_KIT_voidInitialization+0x576>
    3868:	9a 8b       	std	Y+18, r25	; 0x12
    386a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    386c:	8b 89       	ldd	r24, Y+19	; 0x13
    386e:	9c 89       	ldd	r25, Y+20	; 0x14
    3870:	01 97       	sbiw	r24, 0x01	; 1
    3872:	9c 8b       	std	Y+20, r25	; 0x14
    3874:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3876:	8b 89       	ldd	r24, Y+19	; 0x13
    3878:	9c 89       	ldd	r25, Y+20	; 0x14
    387a:	00 97       	sbiw	r24, 0x00	; 0
    387c:	69 f7       	brne	.-38     	; 0x3858 <LCD_KIT_voidInitialization+0x56a>
    387e:	14 c0       	rjmp	.+40     	; 0x38a8 <LCD_KIT_voidInitialization+0x5ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3880:	6d 89       	ldd	r22, Y+21	; 0x15
    3882:	7e 89       	ldd	r23, Y+22	; 0x16
    3884:	8f 89       	ldd	r24, Y+23	; 0x17
    3886:	98 8d       	ldd	r25, Y+24	; 0x18
    3888:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    388c:	dc 01       	movw	r26, r24
    388e:	cb 01       	movw	r24, r22
    3890:	9c 8b       	std	Y+20, r25	; 0x14
    3892:	8b 8b       	std	Y+19, r24	; 0x13
    3894:	8b 89       	ldd	r24, Y+19	; 0x13
    3896:	9c 89       	ldd	r25, Y+20	; 0x14
    3898:	98 8b       	std	Y+16, r25	; 0x10
    389a:	8f 87       	std	Y+15, r24	; 0x0f
    389c:	8f 85       	ldd	r24, Y+15	; 0x0f
    389e:	98 89       	ldd	r25, Y+16	; 0x10
    38a0:	01 97       	sbiw	r24, 0x01	; 1
    38a2:	f1 f7       	brne	.-4      	; 0x38a0 <LCD_KIT_voidInitialization+0x5b2>
    38a4:	98 8b       	std	Y+16, r25	; 0x10
    38a6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);

	LCD_KIT_voidRunCommand(0x01);
    38a8:	81 e0       	ldi	r24, 0x01	; 1
    38aa:	0e 94 4a 1f 	call	0x3e94	; 0x3e94 <LCD_KIT_voidRunCommand>
    38ae:	80 e0       	ldi	r24, 0x00	; 0
    38b0:	90 e0       	ldi	r25, 0x00	; 0
    38b2:	a0 e0       	ldi	r26, 0x00	; 0
    38b4:	b0 e4       	ldi	r27, 0x40	; 64
    38b6:	8b 87       	std	Y+11, r24	; 0x0b
    38b8:	9c 87       	std	Y+12, r25	; 0x0c
    38ba:	ad 87       	std	Y+13, r26	; 0x0d
    38bc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38be:	6b 85       	ldd	r22, Y+11	; 0x0b
    38c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    38c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    38c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    38c6:	20 e0       	ldi	r18, 0x00	; 0
    38c8:	30 e0       	ldi	r19, 0x00	; 0
    38ca:	4a e7       	ldi	r20, 0x7A	; 122
    38cc:	55 e4       	ldi	r21, 0x45	; 69
    38ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38d2:	dc 01       	movw	r26, r24
    38d4:	cb 01       	movw	r24, r22
    38d6:	8f 83       	std	Y+7, r24	; 0x07
    38d8:	98 87       	std	Y+8, r25	; 0x08
    38da:	a9 87       	std	Y+9, r26	; 0x09
    38dc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    38de:	6f 81       	ldd	r22, Y+7	; 0x07
    38e0:	78 85       	ldd	r23, Y+8	; 0x08
    38e2:	89 85       	ldd	r24, Y+9	; 0x09
    38e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    38e6:	20 e0       	ldi	r18, 0x00	; 0
    38e8:	30 e0       	ldi	r19, 0x00	; 0
    38ea:	40 e8       	ldi	r20, 0x80	; 128
    38ec:	5f e3       	ldi	r21, 0x3F	; 63
    38ee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    38f2:	88 23       	and	r24, r24
    38f4:	2c f4       	brge	.+10     	; 0x3900 <LCD_KIT_voidInitialization+0x612>
		__ticks = 1;
    38f6:	81 e0       	ldi	r24, 0x01	; 1
    38f8:	90 e0       	ldi	r25, 0x00	; 0
    38fa:	9e 83       	std	Y+6, r25	; 0x06
    38fc:	8d 83       	std	Y+5, r24	; 0x05
    38fe:	3f c0       	rjmp	.+126    	; 0x397e <LCD_KIT_voidInitialization+0x690>
	else if (__tmp > 65535)
    3900:	6f 81       	ldd	r22, Y+7	; 0x07
    3902:	78 85       	ldd	r23, Y+8	; 0x08
    3904:	89 85       	ldd	r24, Y+9	; 0x09
    3906:	9a 85       	ldd	r25, Y+10	; 0x0a
    3908:	20 e0       	ldi	r18, 0x00	; 0
    390a:	3f ef       	ldi	r19, 0xFF	; 255
    390c:	4f e7       	ldi	r20, 0x7F	; 127
    390e:	57 e4       	ldi	r21, 0x47	; 71
    3910:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3914:	18 16       	cp	r1, r24
    3916:	4c f5       	brge	.+82     	; 0x396a <LCD_KIT_voidInitialization+0x67c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3918:	6b 85       	ldd	r22, Y+11	; 0x0b
    391a:	7c 85       	ldd	r23, Y+12	; 0x0c
    391c:	8d 85       	ldd	r24, Y+13	; 0x0d
    391e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3920:	20 e0       	ldi	r18, 0x00	; 0
    3922:	30 e0       	ldi	r19, 0x00	; 0
    3924:	40 e2       	ldi	r20, 0x20	; 32
    3926:	51 e4       	ldi	r21, 0x41	; 65
    3928:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    392c:	dc 01       	movw	r26, r24
    392e:	cb 01       	movw	r24, r22
    3930:	bc 01       	movw	r22, r24
    3932:	cd 01       	movw	r24, r26
    3934:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3938:	dc 01       	movw	r26, r24
    393a:	cb 01       	movw	r24, r22
    393c:	9e 83       	std	Y+6, r25	; 0x06
    393e:	8d 83       	std	Y+5, r24	; 0x05
    3940:	0f c0       	rjmp	.+30     	; 0x3960 <LCD_KIT_voidInitialization+0x672>
    3942:	80 e9       	ldi	r24, 0x90	; 144
    3944:	91 e0       	ldi	r25, 0x01	; 1
    3946:	9c 83       	std	Y+4, r25	; 0x04
    3948:	8b 83       	std	Y+3, r24	; 0x03
    394a:	8b 81       	ldd	r24, Y+3	; 0x03
    394c:	9c 81       	ldd	r25, Y+4	; 0x04
    394e:	01 97       	sbiw	r24, 0x01	; 1
    3950:	f1 f7       	brne	.-4      	; 0x394e <LCD_KIT_voidInitialization+0x660>
    3952:	9c 83       	std	Y+4, r25	; 0x04
    3954:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3956:	8d 81       	ldd	r24, Y+5	; 0x05
    3958:	9e 81       	ldd	r25, Y+6	; 0x06
    395a:	01 97       	sbiw	r24, 0x01	; 1
    395c:	9e 83       	std	Y+6, r25	; 0x06
    395e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3960:	8d 81       	ldd	r24, Y+5	; 0x05
    3962:	9e 81       	ldd	r25, Y+6	; 0x06
    3964:	00 97       	sbiw	r24, 0x00	; 0
    3966:	69 f7       	brne	.-38     	; 0x3942 <LCD_KIT_voidInitialization+0x654>
    3968:	14 c0       	rjmp	.+40     	; 0x3992 <LCD_KIT_voidInitialization+0x6a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    396a:	6f 81       	ldd	r22, Y+7	; 0x07
    396c:	78 85       	ldd	r23, Y+8	; 0x08
    396e:	89 85       	ldd	r24, Y+9	; 0x09
    3970:	9a 85       	ldd	r25, Y+10	; 0x0a
    3972:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3976:	dc 01       	movw	r26, r24
    3978:	cb 01       	movw	r24, r22
    397a:	9e 83       	std	Y+6, r25	; 0x06
    397c:	8d 83       	std	Y+5, r24	; 0x05
    397e:	8d 81       	ldd	r24, Y+5	; 0x05
    3980:	9e 81       	ldd	r25, Y+6	; 0x06
    3982:	9a 83       	std	Y+2, r25	; 0x02
    3984:	89 83       	std	Y+1, r24	; 0x01
    3986:	89 81       	ldd	r24, Y+1	; 0x01
    3988:	9a 81       	ldd	r25, Y+2	; 0x02
    398a:	01 97       	sbiw	r24, 0x01	; 1
    398c:	f1 f7       	brne	.-4      	; 0x398a <LCD_KIT_voidInitialization+0x69c>
    398e:	9a 83       	std	Y+2, r25	; 0x02
    3990:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

	LCD_KIT_voidRunCommand(0x06);
    3992:	86 e0       	ldi	r24, 0x06	; 6
    3994:	0e 94 4a 1f 	call	0x3e94	; 0x3e94 <LCD_KIT_voidRunCommand>

	LCD_KIT_voidRunCommand(0x80);
    3998:	80 e8       	ldi	r24, 0x80	; 128
    399a:	0e 94 4a 1f 	call	0x3e94	; 0x3e94 <LCD_KIT_voidRunCommand>

	return;
}
    399e:	cc 5a       	subi	r28, 0xAC	; 172
    39a0:	df 4f       	sbci	r29, 0xFF	; 255
    39a2:	0f b6       	in	r0, 0x3f	; 63
    39a4:	f8 94       	cli
    39a6:	de bf       	out	0x3e, r29	; 62
    39a8:	0f be       	out	0x3f, r0	; 63
    39aa:	cd bf       	out	0x3d, r28	; 61
    39ac:	cf 91       	pop	r28
    39ae:	df 91       	pop	r29
    39b0:	1f 91       	pop	r17
    39b2:	0f 91       	pop	r16
    39b4:	08 95       	ret

000039b6 <LCD_KIT_voidDisplayCharacter>:

void LCD_KIT_voidDisplayCharacter(u8 character)
{
    39b6:	df 93       	push	r29
    39b8:	cf 93       	push	r28
    39ba:	cd b7       	in	r28, 0x3d	; 61
    39bc:	de b7       	in	r29, 0x3e	; 62
    39be:	e9 97       	sbiw	r28, 0x39	; 57
    39c0:	0f b6       	in	r0, 0x3f	; 63
    39c2:	f8 94       	cli
    39c4:	de bf       	out	0x3e, r29	; 62
    39c6:	0f be       	out	0x3f, r0	; 63
    39c8:	cd bf       	out	0x3d, r28	; 61
    39ca:	89 af       	std	Y+57, r24	; 0x39
	DIO_voidSetPinValue(PortA,Pin3,High);
    39cc:	80 e0       	ldi	r24, 0x00	; 0
    39ce:	63 e0       	ldi	r22, 0x03	; 3
    39d0:	41 e0       	ldi	r20, 0x01	; 1
    39d2:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_voidSetPinValue>

	DIO_voidSetPinValue(PortB,Pin4,GET_BIT(character,Pin7));
    39d6:	89 ad       	ldd	r24, Y+57	; 0x39
    39d8:	98 2f       	mov	r25, r24
    39da:	99 1f       	adc	r25, r25
    39dc:	99 27       	eor	r25, r25
    39de:	99 1f       	adc	r25, r25
    39e0:	81 e0       	ldi	r24, 0x01	; 1
    39e2:	64 e0       	ldi	r22, 0x04	; 4
    39e4:	49 2f       	mov	r20, r25
    39e6:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PortB,Pin2,GET_BIT(character,Pin6));
    39ea:	89 ad       	ldd	r24, Y+57	; 0x39
    39ec:	88 2f       	mov	r24, r24
    39ee:	90 e0       	ldi	r25, 0x00	; 0
    39f0:	80 74       	andi	r24, 0x40	; 64
    39f2:	90 70       	andi	r25, 0x00	; 0
    39f4:	08 2e       	mov	r0, r24
    39f6:	89 2f       	mov	r24, r25
    39f8:	00 0c       	add	r0, r0
    39fa:	88 1f       	adc	r24, r24
    39fc:	99 0b       	sbc	r25, r25
    39fe:	00 0c       	add	r0, r0
    3a00:	88 1f       	adc	r24, r24
    3a02:	99 1f       	adc	r25, r25
    3a04:	98 2f       	mov	r25, r24
    3a06:	81 e0       	ldi	r24, 0x01	; 1
    3a08:	62 e0       	ldi	r22, 0x02	; 2
    3a0a:	49 2f       	mov	r20, r25
    3a0c:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PortB,Pin1,GET_BIT(character,Pin5));
    3a10:	89 ad       	ldd	r24, Y+57	; 0x39
    3a12:	88 2f       	mov	r24, r24
    3a14:	90 e0       	ldi	r25, 0x00	; 0
    3a16:	80 72       	andi	r24, 0x20	; 32
    3a18:	90 70       	andi	r25, 0x00	; 0
    3a1a:	95 95       	asr	r25
    3a1c:	87 95       	ror	r24
    3a1e:	95 95       	asr	r25
    3a20:	87 95       	ror	r24
    3a22:	95 95       	asr	r25
    3a24:	87 95       	ror	r24
    3a26:	95 95       	asr	r25
    3a28:	87 95       	ror	r24
    3a2a:	95 95       	asr	r25
    3a2c:	87 95       	ror	r24
    3a2e:	98 2f       	mov	r25, r24
    3a30:	81 e0       	ldi	r24, 0x01	; 1
    3a32:	61 e0       	ldi	r22, 0x01	; 1
    3a34:	49 2f       	mov	r20, r25
    3a36:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_voidSetPinValue>
	//DIO_voidSetPinValue(PortB,Pin0,GET_BIT(character,Pin4));
	DIO_voidSetPinValue(PortB,Pin7,GET_BIT(character,Pin4));
    3a3a:	89 ad       	ldd	r24, Y+57	; 0x39
    3a3c:	88 2f       	mov	r24, r24
    3a3e:	90 e0       	ldi	r25, 0x00	; 0
    3a40:	80 71       	andi	r24, 0x10	; 16
    3a42:	90 70       	andi	r25, 0x00	; 0
    3a44:	95 95       	asr	r25
    3a46:	87 95       	ror	r24
    3a48:	95 95       	asr	r25
    3a4a:	87 95       	ror	r24
    3a4c:	95 95       	asr	r25
    3a4e:	87 95       	ror	r24
    3a50:	95 95       	asr	r25
    3a52:	87 95       	ror	r24
    3a54:	98 2f       	mov	r25, r24
    3a56:	81 e0       	ldi	r24, 0x01	; 1
    3a58:	67 e0       	ldi	r22, 0x07	; 7
    3a5a:	49 2f       	mov	r20, r25
    3a5c:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_voidSetPinValue>

	DIO_voidSetPinValue(PortA,Pin2,High);
    3a60:	80 e0       	ldi	r24, 0x00	; 0
    3a62:	62 e0       	ldi	r22, 0x02	; 2
    3a64:	41 e0       	ldi	r20, 0x01	; 1
    3a66:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_voidSetPinValue>
    3a6a:	80 e0       	ldi	r24, 0x00	; 0
    3a6c:	90 e0       	ldi	r25, 0x00	; 0
    3a6e:	a0 e0       	ldi	r26, 0x00	; 0
    3a70:	b0 e4       	ldi	r27, 0x40	; 64
    3a72:	8d ab       	std	Y+53, r24	; 0x35
    3a74:	9e ab       	std	Y+54, r25	; 0x36
    3a76:	af ab       	std	Y+55, r26	; 0x37
    3a78:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a7a:	6d a9       	ldd	r22, Y+53	; 0x35
    3a7c:	7e a9       	ldd	r23, Y+54	; 0x36
    3a7e:	8f a9       	ldd	r24, Y+55	; 0x37
    3a80:	98 ad       	ldd	r25, Y+56	; 0x38
    3a82:	20 e0       	ldi	r18, 0x00	; 0
    3a84:	30 e0       	ldi	r19, 0x00	; 0
    3a86:	4a e7       	ldi	r20, 0x7A	; 122
    3a88:	55 e4       	ldi	r21, 0x45	; 69
    3a8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a8e:	dc 01       	movw	r26, r24
    3a90:	cb 01       	movw	r24, r22
    3a92:	89 ab       	std	Y+49, r24	; 0x31
    3a94:	9a ab       	std	Y+50, r25	; 0x32
    3a96:	ab ab       	std	Y+51, r26	; 0x33
    3a98:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3a9a:	69 a9       	ldd	r22, Y+49	; 0x31
    3a9c:	7a a9       	ldd	r23, Y+50	; 0x32
    3a9e:	8b a9       	ldd	r24, Y+51	; 0x33
    3aa0:	9c a9       	ldd	r25, Y+52	; 0x34
    3aa2:	20 e0       	ldi	r18, 0x00	; 0
    3aa4:	30 e0       	ldi	r19, 0x00	; 0
    3aa6:	40 e8       	ldi	r20, 0x80	; 128
    3aa8:	5f e3       	ldi	r21, 0x3F	; 63
    3aaa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3aae:	88 23       	and	r24, r24
    3ab0:	2c f4       	brge	.+10     	; 0x3abc <LCD_KIT_voidDisplayCharacter+0x106>
		__ticks = 1;
    3ab2:	81 e0       	ldi	r24, 0x01	; 1
    3ab4:	90 e0       	ldi	r25, 0x00	; 0
    3ab6:	98 ab       	std	Y+48, r25	; 0x30
    3ab8:	8f a7       	std	Y+47, r24	; 0x2f
    3aba:	3f c0       	rjmp	.+126    	; 0x3b3a <LCD_KIT_voidDisplayCharacter+0x184>
	else if (__tmp > 65535)
    3abc:	69 a9       	ldd	r22, Y+49	; 0x31
    3abe:	7a a9       	ldd	r23, Y+50	; 0x32
    3ac0:	8b a9       	ldd	r24, Y+51	; 0x33
    3ac2:	9c a9       	ldd	r25, Y+52	; 0x34
    3ac4:	20 e0       	ldi	r18, 0x00	; 0
    3ac6:	3f ef       	ldi	r19, 0xFF	; 255
    3ac8:	4f e7       	ldi	r20, 0x7F	; 127
    3aca:	57 e4       	ldi	r21, 0x47	; 71
    3acc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ad0:	18 16       	cp	r1, r24
    3ad2:	4c f5       	brge	.+82     	; 0x3b26 <LCD_KIT_voidDisplayCharacter+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ad4:	6d a9       	ldd	r22, Y+53	; 0x35
    3ad6:	7e a9       	ldd	r23, Y+54	; 0x36
    3ad8:	8f a9       	ldd	r24, Y+55	; 0x37
    3ada:	98 ad       	ldd	r25, Y+56	; 0x38
    3adc:	20 e0       	ldi	r18, 0x00	; 0
    3ade:	30 e0       	ldi	r19, 0x00	; 0
    3ae0:	40 e2       	ldi	r20, 0x20	; 32
    3ae2:	51 e4       	ldi	r21, 0x41	; 65
    3ae4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ae8:	dc 01       	movw	r26, r24
    3aea:	cb 01       	movw	r24, r22
    3aec:	bc 01       	movw	r22, r24
    3aee:	cd 01       	movw	r24, r26
    3af0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3af4:	dc 01       	movw	r26, r24
    3af6:	cb 01       	movw	r24, r22
    3af8:	98 ab       	std	Y+48, r25	; 0x30
    3afa:	8f a7       	std	Y+47, r24	; 0x2f
    3afc:	0f c0       	rjmp	.+30     	; 0x3b1c <LCD_KIT_voidDisplayCharacter+0x166>
    3afe:	80 e9       	ldi	r24, 0x90	; 144
    3b00:	91 e0       	ldi	r25, 0x01	; 1
    3b02:	9e a7       	std	Y+46, r25	; 0x2e
    3b04:	8d a7       	std	Y+45, r24	; 0x2d
    3b06:	8d a5       	ldd	r24, Y+45	; 0x2d
    3b08:	9e a5       	ldd	r25, Y+46	; 0x2e
    3b0a:	01 97       	sbiw	r24, 0x01	; 1
    3b0c:	f1 f7       	brne	.-4      	; 0x3b0a <LCD_KIT_voidDisplayCharacter+0x154>
    3b0e:	9e a7       	std	Y+46, r25	; 0x2e
    3b10:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b12:	8f a5       	ldd	r24, Y+47	; 0x2f
    3b14:	98 a9       	ldd	r25, Y+48	; 0x30
    3b16:	01 97       	sbiw	r24, 0x01	; 1
    3b18:	98 ab       	std	Y+48, r25	; 0x30
    3b1a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b1c:	8f a5       	ldd	r24, Y+47	; 0x2f
    3b1e:	98 a9       	ldd	r25, Y+48	; 0x30
    3b20:	00 97       	sbiw	r24, 0x00	; 0
    3b22:	69 f7       	brne	.-38     	; 0x3afe <LCD_KIT_voidDisplayCharacter+0x148>
    3b24:	14 c0       	rjmp	.+40     	; 0x3b4e <LCD_KIT_voidDisplayCharacter+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b26:	69 a9       	ldd	r22, Y+49	; 0x31
    3b28:	7a a9       	ldd	r23, Y+50	; 0x32
    3b2a:	8b a9       	ldd	r24, Y+51	; 0x33
    3b2c:	9c a9       	ldd	r25, Y+52	; 0x34
    3b2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b32:	dc 01       	movw	r26, r24
    3b34:	cb 01       	movw	r24, r22
    3b36:	98 ab       	std	Y+48, r25	; 0x30
    3b38:	8f a7       	std	Y+47, r24	; 0x2f
    3b3a:	8f a5       	ldd	r24, Y+47	; 0x2f
    3b3c:	98 a9       	ldd	r25, Y+48	; 0x30
    3b3e:	9c a7       	std	Y+44, r25	; 0x2c
    3b40:	8b a7       	std	Y+43, r24	; 0x2b
    3b42:	8b a5       	ldd	r24, Y+43	; 0x2b
    3b44:	9c a5       	ldd	r25, Y+44	; 0x2c
    3b46:	01 97       	sbiw	r24, 0x01	; 1
    3b48:	f1 f7       	brne	.-4      	; 0x3b46 <LCD_KIT_voidDisplayCharacter+0x190>
    3b4a:	9c a7       	std	Y+44, r25	; 0x2c
    3b4c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	DIO_voidSetPinValue(PortA,Pin2,Low);
    3b4e:	80 e0       	ldi	r24, 0x00	; 0
    3b50:	62 e0       	ldi	r22, 0x02	; 2
    3b52:	40 e0       	ldi	r20, 0x00	; 0
    3b54:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_voidSetPinValue>
    3b58:	80 e0       	ldi	r24, 0x00	; 0
    3b5a:	90 e0       	ldi	r25, 0x00	; 0
    3b5c:	a0 e0       	ldi	r26, 0x00	; 0
    3b5e:	b0 e4       	ldi	r27, 0x40	; 64
    3b60:	8f a3       	std	Y+39, r24	; 0x27
    3b62:	98 a7       	std	Y+40, r25	; 0x28
    3b64:	a9 a7       	std	Y+41, r26	; 0x29
    3b66:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b68:	6f a1       	ldd	r22, Y+39	; 0x27
    3b6a:	78 a5       	ldd	r23, Y+40	; 0x28
    3b6c:	89 a5       	ldd	r24, Y+41	; 0x29
    3b6e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3b70:	20 e0       	ldi	r18, 0x00	; 0
    3b72:	30 e0       	ldi	r19, 0x00	; 0
    3b74:	4a e7       	ldi	r20, 0x7A	; 122
    3b76:	55 e4       	ldi	r21, 0x45	; 69
    3b78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b7c:	dc 01       	movw	r26, r24
    3b7e:	cb 01       	movw	r24, r22
    3b80:	8b a3       	std	Y+35, r24	; 0x23
    3b82:	9c a3       	std	Y+36, r25	; 0x24
    3b84:	ad a3       	std	Y+37, r26	; 0x25
    3b86:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3b88:	6b a1       	ldd	r22, Y+35	; 0x23
    3b8a:	7c a1       	ldd	r23, Y+36	; 0x24
    3b8c:	8d a1       	ldd	r24, Y+37	; 0x25
    3b8e:	9e a1       	ldd	r25, Y+38	; 0x26
    3b90:	20 e0       	ldi	r18, 0x00	; 0
    3b92:	30 e0       	ldi	r19, 0x00	; 0
    3b94:	40 e8       	ldi	r20, 0x80	; 128
    3b96:	5f e3       	ldi	r21, 0x3F	; 63
    3b98:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b9c:	88 23       	and	r24, r24
    3b9e:	2c f4       	brge	.+10     	; 0x3baa <LCD_KIT_voidDisplayCharacter+0x1f4>
		__ticks = 1;
    3ba0:	81 e0       	ldi	r24, 0x01	; 1
    3ba2:	90 e0       	ldi	r25, 0x00	; 0
    3ba4:	9a a3       	std	Y+34, r25	; 0x22
    3ba6:	89 a3       	std	Y+33, r24	; 0x21
    3ba8:	3f c0       	rjmp	.+126    	; 0x3c28 <LCD_KIT_voidDisplayCharacter+0x272>
	else if (__tmp > 65535)
    3baa:	6b a1       	ldd	r22, Y+35	; 0x23
    3bac:	7c a1       	ldd	r23, Y+36	; 0x24
    3bae:	8d a1       	ldd	r24, Y+37	; 0x25
    3bb0:	9e a1       	ldd	r25, Y+38	; 0x26
    3bb2:	20 e0       	ldi	r18, 0x00	; 0
    3bb4:	3f ef       	ldi	r19, 0xFF	; 255
    3bb6:	4f e7       	ldi	r20, 0x7F	; 127
    3bb8:	57 e4       	ldi	r21, 0x47	; 71
    3bba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3bbe:	18 16       	cp	r1, r24
    3bc0:	4c f5       	brge	.+82     	; 0x3c14 <LCD_KIT_voidDisplayCharacter+0x25e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bc2:	6f a1       	ldd	r22, Y+39	; 0x27
    3bc4:	78 a5       	ldd	r23, Y+40	; 0x28
    3bc6:	89 a5       	ldd	r24, Y+41	; 0x29
    3bc8:	9a a5       	ldd	r25, Y+42	; 0x2a
    3bca:	20 e0       	ldi	r18, 0x00	; 0
    3bcc:	30 e0       	ldi	r19, 0x00	; 0
    3bce:	40 e2       	ldi	r20, 0x20	; 32
    3bd0:	51 e4       	ldi	r21, 0x41	; 65
    3bd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bd6:	dc 01       	movw	r26, r24
    3bd8:	cb 01       	movw	r24, r22
    3bda:	bc 01       	movw	r22, r24
    3bdc:	cd 01       	movw	r24, r26
    3bde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3be2:	dc 01       	movw	r26, r24
    3be4:	cb 01       	movw	r24, r22
    3be6:	9a a3       	std	Y+34, r25	; 0x22
    3be8:	89 a3       	std	Y+33, r24	; 0x21
    3bea:	0f c0       	rjmp	.+30     	; 0x3c0a <LCD_KIT_voidDisplayCharacter+0x254>
    3bec:	80 e9       	ldi	r24, 0x90	; 144
    3bee:	91 e0       	ldi	r25, 0x01	; 1
    3bf0:	98 a3       	std	Y+32, r25	; 0x20
    3bf2:	8f 8f       	std	Y+31, r24	; 0x1f
    3bf4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3bf6:	98 a1       	ldd	r25, Y+32	; 0x20
    3bf8:	01 97       	sbiw	r24, 0x01	; 1
    3bfa:	f1 f7       	brne	.-4      	; 0x3bf8 <LCD_KIT_voidDisplayCharacter+0x242>
    3bfc:	98 a3       	std	Y+32, r25	; 0x20
    3bfe:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c00:	89 a1       	ldd	r24, Y+33	; 0x21
    3c02:	9a a1       	ldd	r25, Y+34	; 0x22
    3c04:	01 97       	sbiw	r24, 0x01	; 1
    3c06:	9a a3       	std	Y+34, r25	; 0x22
    3c08:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c0a:	89 a1       	ldd	r24, Y+33	; 0x21
    3c0c:	9a a1       	ldd	r25, Y+34	; 0x22
    3c0e:	00 97       	sbiw	r24, 0x00	; 0
    3c10:	69 f7       	brne	.-38     	; 0x3bec <LCD_KIT_voidDisplayCharacter+0x236>
    3c12:	14 c0       	rjmp	.+40     	; 0x3c3c <LCD_KIT_voidDisplayCharacter+0x286>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c14:	6b a1       	ldd	r22, Y+35	; 0x23
    3c16:	7c a1       	ldd	r23, Y+36	; 0x24
    3c18:	8d a1       	ldd	r24, Y+37	; 0x25
    3c1a:	9e a1       	ldd	r25, Y+38	; 0x26
    3c1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c20:	dc 01       	movw	r26, r24
    3c22:	cb 01       	movw	r24, r22
    3c24:	9a a3       	std	Y+34, r25	; 0x22
    3c26:	89 a3       	std	Y+33, r24	; 0x21
    3c28:	89 a1       	ldd	r24, Y+33	; 0x21
    3c2a:	9a a1       	ldd	r25, Y+34	; 0x22
    3c2c:	9e 8f       	std	Y+30, r25	; 0x1e
    3c2e:	8d 8f       	std	Y+29, r24	; 0x1d
    3c30:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3c32:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3c34:	01 97       	sbiw	r24, 0x01	; 1
    3c36:	f1 f7       	brne	.-4      	; 0x3c34 <LCD_KIT_voidDisplayCharacter+0x27e>
    3c38:	9e 8f       	std	Y+30, r25	; 0x1e
    3c3a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);

	DIO_voidSetPinValue(PortB,Pin4,GET_BIT(character,Pin3));
    3c3c:	89 ad       	ldd	r24, Y+57	; 0x39
    3c3e:	88 2f       	mov	r24, r24
    3c40:	90 e0       	ldi	r25, 0x00	; 0
    3c42:	88 70       	andi	r24, 0x08	; 8
    3c44:	90 70       	andi	r25, 0x00	; 0
    3c46:	95 95       	asr	r25
    3c48:	87 95       	ror	r24
    3c4a:	95 95       	asr	r25
    3c4c:	87 95       	ror	r24
    3c4e:	95 95       	asr	r25
    3c50:	87 95       	ror	r24
    3c52:	98 2f       	mov	r25, r24
    3c54:	81 e0       	ldi	r24, 0x01	; 1
    3c56:	64 e0       	ldi	r22, 0x04	; 4
    3c58:	49 2f       	mov	r20, r25
    3c5a:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PortB,Pin2,GET_BIT(character,Pin2));
    3c5e:	89 ad       	ldd	r24, Y+57	; 0x39
    3c60:	88 2f       	mov	r24, r24
    3c62:	90 e0       	ldi	r25, 0x00	; 0
    3c64:	84 70       	andi	r24, 0x04	; 4
    3c66:	90 70       	andi	r25, 0x00	; 0
    3c68:	95 95       	asr	r25
    3c6a:	87 95       	ror	r24
    3c6c:	95 95       	asr	r25
    3c6e:	87 95       	ror	r24
    3c70:	98 2f       	mov	r25, r24
    3c72:	81 e0       	ldi	r24, 0x01	; 1
    3c74:	62 e0       	ldi	r22, 0x02	; 2
    3c76:	49 2f       	mov	r20, r25
    3c78:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PortB,Pin1,GET_BIT(character,Pin1));
    3c7c:	89 ad       	ldd	r24, Y+57	; 0x39
    3c7e:	88 2f       	mov	r24, r24
    3c80:	90 e0       	ldi	r25, 0x00	; 0
    3c82:	82 70       	andi	r24, 0x02	; 2
    3c84:	90 70       	andi	r25, 0x00	; 0
    3c86:	95 95       	asr	r25
    3c88:	87 95       	ror	r24
    3c8a:	98 2f       	mov	r25, r24
    3c8c:	81 e0       	ldi	r24, 0x01	; 1
    3c8e:	61 e0       	ldi	r22, 0x01	; 1
    3c90:	49 2f       	mov	r20, r25
    3c92:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_voidSetPinValue>
	//DIO_voidSetPinValue(PortB,Pin0,GET_BIT(character,Pin0));
	DIO_voidSetPinValue(PortB,Pin7,GET_BIT(character,Pin0));
    3c96:	89 ad       	ldd	r24, Y+57	; 0x39
    3c98:	98 2f       	mov	r25, r24
    3c9a:	91 70       	andi	r25, 0x01	; 1
    3c9c:	81 e0       	ldi	r24, 0x01	; 1
    3c9e:	67 e0       	ldi	r22, 0x07	; 7
    3ca0:	49 2f       	mov	r20, r25
    3ca2:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_voidSetPinValue>

	DIO_voidSetPinValue(PortA,Pin2,High);
    3ca6:	80 e0       	ldi	r24, 0x00	; 0
    3ca8:	62 e0       	ldi	r22, 0x02	; 2
    3caa:	41 e0       	ldi	r20, 0x01	; 1
    3cac:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_voidSetPinValue>
    3cb0:	80 e0       	ldi	r24, 0x00	; 0
    3cb2:	90 e0       	ldi	r25, 0x00	; 0
    3cb4:	a0 e0       	ldi	r26, 0x00	; 0
    3cb6:	b0 e4       	ldi	r27, 0x40	; 64
    3cb8:	89 8f       	std	Y+25, r24	; 0x19
    3cba:	9a 8f       	std	Y+26, r25	; 0x1a
    3cbc:	ab 8f       	std	Y+27, r26	; 0x1b
    3cbe:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cc0:	69 8d       	ldd	r22, Y+25	; 0x19
    3cc2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3cc4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3cc6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3cc8:	20 e0       	ldi	r18, 0x00	; 0
    3cca:	30 e0       	ldi	r19, 0x00	; 0
    3ccc:	4a e7       	ldi	r20, 0x7A	; 122
    3cce:	55 e4       	ldi	r21, 0x45	; 69
    3cd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cd4:	dc 01       	movw	r26, r24
    3cd6:	cb 01       	movw	r24, r22
    3cd8:	8d 8b       	std	Y+21, r24	; 0x15
    3cda:	9e 8b       	std	Y+22, r25	; 0x16
    3cdc:	af 8b       	std	Y+23, r26	; 0x17
    3cde:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3ce0:	6d 89       	ldd	r22, Y+21	; 0x15
    3ce2:	7e 89       	ldd	r23, Y+22	; 0x16
    3ce4:	8f 89       	ldd	r24, Y+23	; 0x17
    3ce6:	98 8d       	ldd	r25, Y+24	; 0x18
    3ce8:	20 e0       	ldi	r18, 0x00	; 0
    3cea:	30 e0       	ldi	r19, 0x00	; 0
    3cec:	40 e8       	ldi	r20, 0x80	; 128
    3cee:	5f e3       	ldi	r21, 0x3F	; 63
    3cf0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3cf4:	88 23       	and	r24, r24
    3cf6:	2c f4       	brge	.+10     	; 0x3d02 <LCD_KIT_voidDisplayCharacter+0x34c>
		__ticks = 1;
    3cf8:	81 e0       	ldi	r24, 0x01	; 1
    3cfa:	90 e0       	ldi	r25, 0x00	; 0
    3cfc:	9c 8b       	std	Y+20, r25	; 0x14
    3cfe:	8b 8b       	std	Y+19, r24	; 0x13
    3d00:	3f c0       	rjmp	.+126    	; 0x3d80 <LCD_KIT_voidDisplayCharacter+0x3ca>
	else if (__tmp > 65535)
    3d02:	6d 89       	ldd	r22, Y+21	; 0x15
    3d04:	7e 89       	ldd	r23, Y+22	; 0x16
    3d06:	8f 89       	ldd	r24, Y+23	; 0x17
    3d08:	98 8d       	ldd	r25, Y+24	; 0x18
    3d0a:	20 e0       	ldi	r18, 0x00	; 0
    3d0c:	3f ef       	ldi	r19, 0xFF	; 255
    3d0e:	4f e7       	ldi	r20, 0x7F	; 127
    3d10:	57 e4       	ldi	r21, 0x47	; 71
    3d12:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d16:	18 16       	cp	r1, r24
    3d18:	4c f5       	brge	.+82     	; 0x3d6c <LCD_KIT_voidDisplayCharacter+0x3b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d1a:	69 8d       	ldd	r22, Y+25	; 0x19
    3d1c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3d1e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d20:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3d22:	20 e0       	ldi	r18, 0x00	; 0
    3d24:	30 e0       	ldi	r19, 0x00	; 0
    3d26:	40 e2       	ldi	r20, 0x20	; 32
    3d28:	51 e4       	ldi	r21, 0x41	; 65
    3d2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d2e:	dc 01       	movw	r26, r24
    3d30:	cb 01       	movw	r24, r22
    3d32:	bc 01       	movw	r22, r24
    3d34:	cd 01       	movw	r24, r26
    3d36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d3a:	dc 01       	movw	r26, r24
    3d3c:	cb 01       	movw	r24, r22
    3d3e:	9c 8b       	std	Y+20, r25	; 0x14
    3d40:	8b 8b       	std	Y+19, r24	; 0x13
    3d42:	0f c0       	rjmp	.+30     	; 0x3d62 <LCD_KIT_voidDisplayCharacter+0x3ac>
    3d44:	80 e9       	ldi	r24, 0x90	; 144
    3d46:	91 e0       	ldi	r25, 0x01	; 1
    3d48:	9a 8b       	std	Y+18, r25	; 0x12
    3d4a:	89 8b       	std	Y+17, r24	; 0x11
    3d4c:	89 89       	ldd	r24, Y+17	; 0x11
    3d4e:	9a 89       	ldd	r25, Y+18	; 0x12
    3d50:	01 97       	sbiw	r24, 0x01	; 1
    3d52:	f1 f7       	brne	.-4      	; 0x3d50 <LCD_KIT_voidDisplayCharacter+0x39a>
    3d54:	9a 8b       	std	Y+18, r25	; 0x12
    3d56:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d58:	8b 89       	ldd	r24, Y+19	; 0x13
    3d5a:	9c 89       	ldd	r25, Y+20	; 0x14
    3d5c:	01 97       	sbiw	r24, 0x01	; 1
    3d5e:	9c 8b       	std	Y+20, r25	; 0x14
    3d60:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d62:	8b 89       	ldd	r24, Y+19	; 0x13
    3d64:	9c 89       	ldd	r25, Y+20	; 0x14
    3d66:	00 97       	sbiw	r24, 0x00	; 0
    3d68:	69 f7       	brne	.-38     	; 0x3d44 <LCD_KIT_voidDisplayCharacter+0x38e>
    3d6a:	14 c0       	rjmp	.+40     	; 0x3d94 <LCD_KIT_voidDisplayCharacter+0x3de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d6c:	6d 89       	ldd	r22, Y+21	; 0x15
    3d6e:	7e 89       	ldd	r23, Y+22	; 0x16
    3d70:	8f 89       	ldd	r24, Y+23	; 0x17
    3d72:	98 8d       	ldd	r25, Y+24	; 0x18
    3d74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d78:	dc 01       	movw	r26, r24
    3d7a:	cb 01       	movw	r24, r22
    3d7c:	9c 8b       	std	Y+20, r25	; 0x14
    3d7e:	8b 8b       	std	Y+19, r24	; 0x13
    3d80:	8b 89       	ldd	r24, Y+19	; 0x13
    3d82:	9c 89       	ldd	r25, Y+20	; 0x14
    3d84:	98 8b       	std	Y+16, r25	; 0x10
    3d86:	8f 87       	std	Y+15, r24	; 0x0f
    3d88:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d8a:	98 89       	ldd	r25, Y+16	; 0x10
    3d8c:	01 97       	sbiw	r24, 0x01	; 1
    3d8e:	f1 f7       	brne	.-4      	; 0x3d8c <LCD_KIT_voidDisplayCharacter+0x3d6>
    3d90:	98 8b       	std	Y+16, r25	; 0x10
    3d92:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_voidSetPinValue(PortA,Pin2,Low);
    3d94:	80 e0       	ldi	r24, 0x00	; 0
    3d96:	62 e0       	ldi	r22, 0x02	; 2
    3d98:	40 e0       	ldi	r20, 0x00	; 0
    3d9a:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_voidSetPinValue>
    3d9e:	80 e0       	ldi	r24, 0x00	; 0
    3da0:	90 e0       	ldi	r25, 0x00	; 0
    3da2:	a0 e0       	ldi	r26, 0x00	; 0
    3da4:	b0 e4       	ldi	r27, 0x40	; 64
    3da6:	8b 87       	std	Y+11, r24	; 0x0b
    3da8:	9c 87       	std	Y+12, r25	; 0x0c
    3daa:	ad 87       	std	Y+13, r26	; 0x0d
    3dac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3dae:	6b 85       	ldd	r22, Y+11	; 0x0b
    3db0:	7c 85       	ldd	r23, Y+12	; 0x0c
    3db2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3db4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3db6:	20 e0       	ldi	r18, 0x00	; 0
    3db8:	30 e0       	ldi	r19, 0x00	; 0
    3dba:	4a e7       	ldi	r20, 0x7A	; 122
    3dbc:	55 e4       	ldi	r21, 0x45	; 69
    3dbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dc2:	dc 01       	movw	r26, r24
    3dc4:	cb 01       	movw	r24, r22
    3dc6:	8f 83       	std	Y+7, r24	; 0x07
    3dc8:	98 87       	std	Y+8, r25	; 0x08
    3dca:	a9 87       	std	Y+9, r26	; 0x09
    3dcc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3dce:	6f 81       	ldd	r22, Y+7	; 0x07
    3dd0:	78 85       	ldd	r23, Y+8	; 0x08
    3dd2:	89 85       	ldd	r24, Y+9	; 0x09
    3dd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dd6:	20 e0       	ldi	r18, 0x00	; 0
    3dd8:	30 e0       	ldi	r19, 0x00	; 0
    3dda:	40 e8       	ldi	r20, 0x80	; 128
    3ddc:	5f e3       	ldi	r21, 0x3F	; 63
    3dde:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3de2:	88 23       	and	r24, r24
    3de4:	2c f4       	brge	.+10     	; 0x3df0 <LCD_KIT_voidDisplayCharacter+0x43a>
		__ticks = 1;
    3de6:	81 e0       	ldi	r24, 0x01	; 1
    3de8:	90 e0       	ldi	r25, 0x00	; 0
    3dea:	9e 83       	std	Y+6, r25	; 0x06
    3dec:	8d 83       	std	Y+5, r24	; 0x05
    3dee:	3f c0       	rjmp	.+126    	; 0x3e6e <LCD_KIT_voidDisplayCharacter+0x4b8>
	else if (__tmp > 65535)
    3df0:	6f 81       	ldd	r22, Y+7	; 0x07
    3df2:	78 85       	ldd	r23, Y+8	; 0x08
    3df4:	89 85       	ldd	r24, Y+9	; 0x09
    3df6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3df8:	20 e0       	ldi	r18, 0x00	; 0
    3dfa:	3f ef       	ldi	r19, 0xFF	; 255
    3dfc:	4f e7       	ldi	r20, 0x7F	; 127
    3dfe:	57 e4       	ldi	r21, 0x47	; 71
    3e00:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e04:	18 16       	cp	r1, r24
    3e06:	4c f5       	brge	.+82     	; 0x3e5a <LCD_KIT_voidDisplayCharacter+0x4a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e08:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e10:	20 e0       	ldi	r18, 0x00	; 0
    3e12:	30 e0       	ldi	r19, 0x00	; 0
    3e14:	40 e2       	ldi	r20, 0x20	; 32
    3e16:	51 e4       	ldi	r21, 0x41	; 65
    3e18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e1c:	dc 01       	movw	r26, r24
    3e1e:	cb 01       	movw	r24, r22
    3e20:	bc 01       	movw	r22, r24
    3e22:	cd 01       	movw	r24, r26
    3e24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e28:	dc 01       	movw	r26, r24
    3e2a:	cb 01       	movw	r24, r22
    3e2c:	9e 83       	std	Y+6, r25	; 0x06
    3e2e:	8d 83       	std	Y+5, r24	; 0x05
    3e30:	0f c0       	rjmp	.+30     	; 0x3e50 <LCD_KIT_voidDisplayCharacter+0x49a>
    3e32:	80 e9       	ldi	r24, 0x90	; 144
    3e34:	91 e0       	ldi	r25, 0x01	; 1
    3e36:	9c 83       	std	Y+4, r25	; 0x04
    3e38:	8b 83       	std	Y+3, r24	; 0x03
    3e3a:	8b 81       	ldd	r24, Y+3	; 0x03
    3e3c:	9c 81       	ldd	r25, Y+4	; 0x04
    3e3e:	01 97       	sbiw	r24, 0x01	; 1
    3e40:	f1 f7       	brne	.-4      	; 0x3e3e <LCD_KIT_voidDisplayCharacter+0x488>
    3e42:	9c 83       	std	Y+4, r25	; 0x04
    3e44:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e46:	8d 81       	ldd	r24, Y+5	; 0x05
    3e48:	9e 81       	ldd	r25, Y+6	; 0x06
    3e4a:	01 97       	sbiw	r24, 0x01	; 1
    3e4c:	9e 83       	std	Y+6, r25	; 0x06
    3e4e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e50:	8d 81       	ldd	r24, Y+5	; 0x05
    3e52:	9e 81       	ldd	r25, Y+6	; 0x06
    3e54:	00 97       	sbiw	r24, 0x00	; 0
    3e56:	69 f7       	brne	.-38     	; 0x3e32 <LCD_KIT_voidDisplayCharacter+0x47c>
    3e58:	14 c0       	rjmp	.+40     	; 0x3e82 <LCD_KIT_voidDisplayCharacter+0x4cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e5a:	6f 81       	ldd	r22, Y+7	; 0x07
    3e5c:	78 85       	ldd	r23, Y+8	; 0x08
    3e5e:	89 85       	ldd	r24, Y+9	; 0x09
    3e60:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e66:	dc 01       	movw	r26, r24
    3e68:	cb 01       	movw	r24, r22
    3e6a:	9e 83       	std	Y+6, r25	; 0x06
    3e6c:	8d 83       	std	Y+5, r24	; 0x05
    3e6e:	8d 81       	ldd	r24, Y+5	; 0x05
    3e70:	9e 81       	ldd	r25, Y+6	; 0x06
    3e72:	9a 83       	std	Y+2, r25	; 0x02
    3e74:	89 83       	std	Y+1, r24	; 0x01
    3e76:	89 81       	ldd	r24, Y+1	; 0x01
    3e78:	9a 81       	ldd	r25, Y+2	; 0x02
    3e7a:	01 97       	sbiw	r24, 0x01	; 1
    3e7c:	f1 f7       	brne	.-4      	; 0x3e7a <LCD_KIT_voidDisplayCharacter+0x4c4>
    3e7e:	9a 83       	std	Y+2, r25	; 0x02
    3e80:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

	return;
}
    3e82:	e9 96       	adiw	r28, 0x39	; 57
    3e84:	0f b6       	in	r0, 0x3f	; 63
    3e86:	f8 94       	cli
    3e88:	de bf       	out	0x3e, r29	; 62
    3e8a:	0f be       	out	0x3f, r0	; 63
    3e8c:	cd bf       	out	0x3d, r28	; 61
    3e8e:	cf 91       	pop	r28
    3e90:	df 91       	pop	r29
    3e92:	08 95       	ret

00003e94 <LCD_KIT_voidRunCommand>:

void LCD_KIT_voidRunCommand(u8 command)
{
    3e94:	df 93       	push	r29
    3e96:	cf 93       	push	r28
    3e98:	cd b7       	in	r28, 0x3d	; 61
    3e9a:	de b7       	in	r29, 0x3e	; 62
    3e9c:	e9 97       	sbiw	r28, 0x39	; 57
    3e9e:	0f b6       	in	r0, 0x3f	; 63
    3ea0:	f8 94       	cli
    3ea2:	de bf       	out	0x3e, r29	; 62
    3ea4:	0f be       	out	0x3f, r0	; 63
    3ea6:	cd bf       	out	0x3d, r28	; 61
    3ea8:	89 af       	std	Y+57, r24	; 0x39
	DIO_voidSetPinValue(PortA,Pin3,Low);
    3eaa:	80 e0       	ldi	r24, 0x00	; 0
    3eac:	63 e0       	ldi	r22, 0x03	; 3
    3eae:	40 e0       	ldi	r20, 0x00	; 0
    3eb0:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_voidSetPinValue>

	DIO_voidSetPinValue(PortB,Pin4,GET_BIT(command,Pin7));
    3eb4:	89 ad       	ldd	r24, Y+57	; 0x39
    3eb6:	98 2f       	mov	r25, r24
    3eb8:	99 1f       	adc	r25, r25
    3eba:	99 27       	eor	r25, r25
    3ebc:	99 1f       	adc	r25, r25
    3ebe:	81 e0       	ldi	r24, 0x01	; 1
    3ec0:	64 e0       	ldi	r22, 0x04	; 4
    3ec2:	49 2f       	mov	r20, r25
    3ec4:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PortB,Pin2,GET_BIT(command,Pin6));
    3ec8:	89 ad       	ldd	r24, Y+57	; 0x39
    3eca:	88 2f       	mov	r24, r24
    3ecc:	90 e0       	ldi	r25, 0x00	; 0
    3ece:	80 74       	andi	r24, 0x40	; 64
    3ed0:	90 70       	andi	r25, 0x00	; 0
    3ed2:	08 2e       	mov	r0, r24
    3ed4:	89 2f       	mov	r24, r25
    3ed6:	00 0c       	add	r0, r0
    3ed8:	88 1f       	adc	r24, r24
    3eda:	99 0b       	sbc	r25, r25
    3edc:	00 0c       	add	r0, r0
    3ede:	88 1f       	adc	r24, r24
    3ee0:	99 1f       	adc	r25, r25
    3ee2:	98 2f       	mov	r25, r24
    3ee4:	81 e0       	ldi	r24, 0x01	; 1
    3ee6:	62 e0       	ldi	r22, 0x02	; 2
    3ee8:	49 2f       	mov	r20, r25
    3eea:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PortB,Pin1,GET_BIT(command,Pin5));
    3eee:	89 ad       	ldd	r24, Y+57	; 0x39
    3ef0:	88 2f       	mov	r24, r24
    3ef2:	90 e0       	ldi	r25, 0x00	; 0
    3ef4:	80 72       	andi	r24, 0x20	; 32
    3ef6:	90 70       	andi	r25, 0x00	; 0
    3ef8:	95 95       	asr	r25
    3efa:	87 95       	ror	r24
    3efc:	95 95       	asr	r25
    3efe:	87 95       	ror	r24
    3f00:	95 95       	asr	r25
    3f02:	87 95       	ror	r24
    3f04:	95 95       	asr	r25
    3f06:	87 95       	ror	r24
    3f08:	95 95       	asr	r25
    3f0a:	87 95       	ror	r24
    3f0c:	98 2f       	mov	r25, r24
    3f0e:	81 e0       	ldi	r24, 0x01	; 1
    3f10:	61 e0       	ldi	r22, 0x01	; 1
    3f12:	49 2f       	mov	r20, r25
    3f14:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_voidSetPinValue>
	//DIO_voidSetPinValue(PortB,Pin0,GET_BIT(command,Pin4));
	DIO_voidSetPinValue(PortB,Pin7,GET_BIT(command,Pin4));
    3f18:	89 ad       	ldd	r24, Y+57	; 0x39
    3f1a:	88 2f       	mov	r24, r24
    3f1c:	90 e0       	ldi	r25, 0x00	; 0
    3f1e:	80 71       	andi	r24, 0x10	; 16
    3f20:	90 70       	andi	r25, 0x00	; 0
    3f22:	95 95       	asr	r25
    3f24:	87 95       	ror	r24
    3f26:	95 95       	asr	r25
    3f28:	87 95       	ror	r24
    3f2a:	95 95       	asr	r25
    3f2c:	87 95       	ror	r24
    3f2e:	95 95       	asr	r25
    3f30:	87 95       	ror	r24
    3f32:	98 2f       	mov	r25, r24
    3f34:	81 e0       	ldi	r24, 0x01	; 1
    3f36:	67 e0       	ldi	r22, 0x07	; 7
    3f38:	49 2f       	mov	r20, r25
    3f3a:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_voidSetPinValue>

	DIO_voidSetPinValue(PortA,Pin2,High);
    3f3e:	80 e0       	ldi	r24, 0x00	; 0
    3f40:	62 e0       	ldi	r22, 0x02	; 2
    3f42:	41 e0       	ldi	r20, 0x01	; 1
    3f44:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_voidSetPinValue>
    3f48:	80 e0       	ldi	r24, 0x00	; 0
    3f4a:	90 e0       	ldi	r25, 0x00	; 0
    3f4c:	a0 e0       	ldi	r26, 0x00	; 0
    3f4e:	b0 e4       	ldi	r27, 0x40	; 64
    3f50:	8d ab       	std	Y+53, r24	; 0x35
    3f52:	9e ab       	std	Y+54, r25	; 0x36
    3f54:	af ab       	std	Y+55, r26	; 0x37
    3f56:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f58:	6d a9       	ldd	r22, Y+53	; 0x35
    3f5a:	7e a9       	ldd	r23, Y+54	; 0x36
    3f5c:	8f a9       	ldd	r24, Y+55	; 0x37
    3f5e:	98 ad       	ldd	r25, Y+56	; 0x38
    3f60:	20 e0       	ldi	r18, 0x00	; 0
    3f62:	30 e0       	ldi	r19, 0x00	; 0
    3f64:	4a e7       	ldi	r20, 0x7A	; 122
    3f66:	55 e4       	ldi	r21, 0x45	; 69
    3f68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f6c:	dc 01       	movw	r26, r24
    3f6e:	cb 01       	movw	r24, r22
    3f70:	89 ab       	std	Y+49, r24	; 0x31
    3f72:	9a ab       	std	Y+50, r25	; 0x32
    3f74:	ab ab       	std	Y+51, r26	; 0x33
    3f76:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3f78:	69 a9       	ldd	r22, Y+49	; 0x31
    3f7a:	7a a9       	ldd	r23, Y+50	; 0x32
    3f7c:	8b a9       	ldd	r24, Y+51	; 0x33
    3f7e:	9c a9       	ldd	r25, Y+52	; 0x34
    3f80:	20 e0       	ldi	r18, 0x00	; 0
    3f82:	30 e0       	ldi	r19, 0x00	; 0
    3f84:	40 e8       	ldi	r20, 0x80	; 128
    3f86:	5f e3       	ldi	r21, 0x3F	; 63
    3f88:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f8c:	88 23       	and	r24, r24
    3f8e:	2c f4       	brge	.+10     	; 0x3f9a <LCD_KIT_voidRunCommand+0x106>
		__ticks = 1;
    3f90:	81 e0       	ldi	r24, 0x01	; 1
    3f92:	90 e0       	ldi	r25, 0x00	; 0
    3f94:	98 ab       	std	Y+48, r25	; 0x30
    3f96:	8f a7       	std	Y+47, r24	; 0x2f
    3f98:	3f c0       	rjmp	.+126    	; 0x4018 <LCD_KIT_voidRunCommand+0x184>
	else if (__tmp > 65535)
    3f9a:	69 a9       	ldd	r22, Y+49	; 0x31
    3f9c:	7a a9       	ldd	r23, Y+50	; 0x32
    3f9e:	8b a9       	ldd	r24, Y+51	; 0x33
    3fa0:	9c a9       	ldd	r25, Y+52	; 0x34
    3fa2:	20 e0       	ldi	r18, 0x00	; 0
    3fa4:	3f ef       	ldi	r19, 0xFF	; 255
    3fa6:	4f e7       	ldi	r20, 0x7F	; 127
    3fa8:	57 e4       	ldi	r21, 0x47	; 71
    3faa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3fae:	18 16       	cp	r1, r24
    3fb0:	4c f5       	brge	.+82     	; 0x4004 <LCD_KIT_voidRunCommand+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fb2:	6d a9       	ldd	r22, Y+53	; 0x35
    3fb4:	7e a9       	ldd	r23, Y+54	; 0x36
    3fb6:	8f a9       	ldd	r24, Y+55	; 0x37
    3fb8:	98 ad       	ldd	r25, Y+56	; 0x38
    3fba:	20 e0       	ldi	r18, 0x00	; 0
    3fbc:	30 e0       	ldi	r19, 0x00	; 0
    3fbe:	40 e2       	ldi	r20, 0x20	; 32
    3fc0:	51 e4       	ldi	r21, 0x41	; 65
    3fc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fc6:	dc 01       	movw	r26, r24
    3fc8:	cb 01       	movw	r24, r22
    3fca:	bc 01       	movw	r22, r24
    3fcc:	cd 01       	movw	r24, r26
    3fce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fd2:	dc 01       	movw	r26, r24
    3fd4:	cb 01       	movw	r24, r22
    3fd6:	98 ab       	std	Y+48, r25	; 0x30
    3fd8:	8f a7       	std	Y+47, r24	; 0x2f
    3fda:	0f c0       	rjmp	.+30     	; 0x3ffa <LCD_KIT_voidRunCommand+0x166>
    3fdc:	80 e9       	ldi	r24, 0x90	; 144
    3fde:	91 e0       	ldi	r25, 0x01	; 1
    3fe0:	9e a7       	std	Y+46, r25	; 0x2e
    3fe2:	8d a7       	std	Y+45, r24	; 0x2d
    3fe4:	8d a5       	ldd	r24, Y+45	; 0x2d
    3fe6:	9e a5       	ldd	r25, Y+46	; 0x2e
    3fe8:	01 97       	sbiw	r24, 0x01	; 1
    3fea:	f1 f7       	brne	.-4      	; 0x3fe8 <LCD_KIT_voidRunCommand+0x154>
    3fec:	9e a7       	std	Y+46, r25	; 0x2e
    3fee:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ff0:	8f a5       	ldd	r24, Y+47	; 0x2f
    3ff2:	98 a9       	ldd	r25, Y+48	; 0x30
    3ff4:	01 97       	sbiw	r24, 0x01	; 1
    3ff6:	98 ab       	std	Y+48, r25	; 0x30
    3ff8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ffa:	8f a5       	ldd	r24, Y+47	; 0x2f
    3ffc:	98 a9       	ldd	r25, Y+48	; 0x30
    3ffe:	00 97       	sbiw	r24, 0x00	; 0
    4000:	69 f7       	brne	.-38     	; 0x3fdc <LCD_KIT_voidRunCommand+0x148>
    4002:	14 c0       	rjmp	.+40     	; 0x402c <LCD_KIT_voidRunCommand+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4004:	69 a9       	ldd	r22, Y+49	; 0x31
    4006:	7a a9       	ldd	r23, Y+50	; 0x32
    4008:	8b a9       	ldd	r24, Y+51	; 0x33
    400a:	9c a9       	ldd	r25, Y+52	; 0x34
    400c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4010:	dc 01       	movw	r26, r24
    4012:	cb 01       	movw	r24, r22
    4014:	98 ab       	std	Y+48, r25	; 0x30
    4016:	8f a7       	std	Y+47, r24	; 0x2f
    4018:	8f a5       	ldd	r24, Y+47	; 0x2f
    401a:	98 a9       	ldd	r25, Y+48	; 0x30
    401c:	9c a7       	std	Y+44, r25	; 0x2c
    401e:	8b a7       	std	Y+43, r24	; 0x2b
    4020:	8b a5       	ldd	r24, Y+43	; 0x2b
    4022:	9c a5       	ldd	r25, Y+44	; 0x2c
    4024:	01 97       	sbiw	r24, 0x01	; 1
    4026:	f1 f7       	brne	.-4      	; 0x4024 <LCD_KIT_voidRunCommand+0x190>
    4028:	9c a7       	std	Y+44, r25	; 0x2c
    402a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	DIO_voidSetPinValue(PortA,Pin2,Low);
    402c:	80 e0       	ldi	r24, 0x00	; 0
    402e:	62 e0       	ldi	r22, 0x02	; 2
    4030:	40 e0       	ldi	r20, 0x00	; 0
    4032:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_voidSetPinValue>
    4036:	80 e0       	ldi	r24, 0x00	; 0
    4038:	90 e0       	ldi	r25, 0x00	; 0
    403a:	a0 e0       	ldi	r26, 0x00	; 0
    403c:	b0 e4       	ldi	r27, 0x40	; 64
    403e:	8f a3       	std	Y+39, r24	; 0x27
    4040:	98 a7       	std	Y+40, r25	; 0x28
    4042:	a9 a7       	std	Y+41, r26	; 0x29
    4044:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4046:	6f a1       	ldd	r22, Y+39	; 0x27
    4048:	78 a5       	ldd	r23, Y+40	; 0x28
    404a:	89 a5       	ldd	r24, Y+41	; 0x29
    404c:	9a a5       	ldd	r25, Y+42	; 0x2a
    404e:	20 e0       	ldi	r18, 0x00	; 0
    4050:	30 e0       	ldi	r19, 0x00	; 0
    4052:	4a e7       	ldi	r20, 0x7A	; 122
    4054:	55 e4       	ldi	r21, 0x45	; 69
    4056:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    405a:	dc 01       	movw	r26, r24
    405c:	cb 01       	movw	r24, r22
    405e:	8b a3       	std	Y+35, r24	; 0x23
    4060:	9c a3       	std	Y+36, r25	; 0x24
    4062:	ad a3       	std	Y+37, r26	; 0x25
    4064:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4066:	6b a1       	ldd	r22, Y+35	; 0x23
    4068:	7c a1       	ldd	r23, Y+36	; 0x24
    406a:	8d a1       	ldd	r24, Y+37	; 0x25
    406c:	9e a1       	ldd	r25, Y+38	; 0x26
    406e:	20 e0       	ldi	r18, 0x00	; 0
    4070:	30 e0       	ldi	r19, 0x00	; 0
    4072:	40 e8       	ldi	r20, 0x80	; 128
    4074:	5f e3       	ldi	r21, 0x3F	; 63
    4076:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    407a:	88 23       	and	r24, r24
    407c:	2c f4       	brge	.+10     	; 0x4088 <LCD_KIT_voidRunCommand+0x1f4>
		__ticks = 1;
    407e:	81 e0       	ldi	r24, 0x01	; 1
    4080:	90 e0       	ldi	r25, 0x00	; 0
    4082:	9a a3       	std	Y+34, r25	; 0x22
    4084:	89 a3       	std	Y+33, r24	; 0x21
    4086:	3f c0       	rjmp	.+126    	; 0x4106 <LCD_KIT_voidRunCommand+0x272>
	else if (__tmp > 65535)
    4088:	6b a1       	ldd	r22, Y+35	; 0x23
    408a:	7c a1       	ldd	r23, Y+36	; 0x24
    408c:	8d a1       	ldd	r24, Y+37	; 0x25
    408e:	9e a1       	ldd	r25, Y+38	; 0x26
    4090:	20 e0       	ldi	r18, 0x00	; 0
    4092:	3f ef       	ldi	r19, 0xFF	; 255
    4094:	4f e7       	ldi	r20, 0x7F	; 127
    4096:	57 e4       	ldi	r21, 0x47	; 71
    4098:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    409c:	18 16       	cp	r1, r24
    409e:	4c f5       	brge	.+82     	; 0x40f2 <LCD_KIT_voidRunCommand+0x25e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40a0:	6f a1       	ldd	r22, Y+39	; 0x27
    40a2:	78 a5       	ldd	r23, Y+40	; 0x28
    40a4:	89 a5       	ldd	r24, Y+41	; 0x29
    40a6:	9a a5       	ldd	r25, Y+42	; 0x2a
    40a8:	20 e0       	ldi	r18, 0x00	; 0
    40aa:	30 e0       	ldi	r19, 0x00	; 0
    40ac:	40 e2       	ldi	r20, 0x20	; 32
    40ae:	51 e4       	ldi	r21, 0x41	; 65
    40b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40b4:	dc 01       	movw	r26, r24
    40b6:	cb 01       	movw	r24, r22
    40b8:	bc 01       	movw	r22, r24
    40ba:	cd 01       	movw	r24, r26
    40bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40c0:	dc 01       	movw	r26, r24
    40c2:	cb 01       	movw	r24, r22
    40c4:	9a a3       	std	Y+34, r25	; 0x22
    40c6:	89 a3       	std	Y+33, r24	; 0x21
    40c8:	0f c0       	rjmp	.+30     	; 0x40e8 <LCD_KIT_voidRunCommand+0x254>
    40ca:	80 e9       	ldi	r24, 0x90	; 144
    40cc:	91 e0       	ldi	r25, 0x01	; 1
    40ce:	98 a3       	std	Y+32, r25	; 0x20
    40d0:	8f 8f       	std	Y+31, r24	; 0x1f
    40d2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    40d4:	98 a1       	ldd	r25, Y+32	; 0x20
    40d6:	01 97       	sbiw	r24, 0x01	; 1
    40d8:	f1 f7       	brne	.-4      	; 0x40d6 <LCD_KIT_voidRunCommand+0x242>
    40da:	98 a3       	std	Y+32, r25	; 0x20
    40dc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40de:	89 a1       	ldd	r24, Y+33	; 0x21
    40e0:	9a a1       	ldd	r25, Y+34	; 0x22
    40e2:	01 97       	sbiw	r24, 0x01	; 1
    40e4:	9a a3       	std	Y+34, r25	; 0x22
    40e6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40e8:	89 a1       	ldd	r24, Y+33	; 0x21
    40ea:	9a a1       	ldd	r25, Y+34	; 0x22
    40ec:	00 97       	sbiw	r24, 0x00	; 0
    40ee:	69 f7       	brne	.-38     	; 0x40ca <LCD_KIT_voidRunCommand+0x236>
    40f0:	14 c0       	rjmp	.+40     	; 0x411a <LCD_KIT_voidRunCommand+0x286>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40f2:	6b a1       	ldd	r22, Y+35	; 0x23
    40f4:	7c a1       	ldd	r23, Y+36	; 0x24
    40f6:	8d a1       	ldd	r24, Y+37	; 0x25
    40f8:	9e a1       	ldd	r25, Y+38	; 0x26
    40fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40fe:	dc 01       	movw	r26, r24
    4100:	cb 01       	movw	r24, r22
    4102:	9a a3       	std	Y+34, r25	; 0x22
    4104:	89 a3       	std	Y+33, r24	; 0x21
    4106:	89 a1       	ldd	r24, Y+33	; 0x21
    4108:	9a a1       	ldd	r25, Y+34	; 0x22
    410a:	9e 8f       	std	Y+30, r25	; 0x1e
    410c:	8d 8f       	std	Y+29, r24	; 0x1d
    410e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4110:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4112:	01 97       	sbiw	r24, 0x01	; 1
    4114:	f1 f7       	brne	.-4      	; 0x4112 <LCD_KIT_voidRunCommand+0x27e>
    4116:	9e 8f       	std	Y+30, r25	; 0x1e
    4118:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);

	DIO_voidSetPinValue(PortB,Pin4,GET_BIT(command,Pin3));
    411a:	89 ad       	ldd	r24, Y+57	; 0x39
    411c:	88 2f       	mov	r24, r24
    411e:	90 e0       	ldi	r25, 0x00	; 0
    4120:	88 70       	andi	r24, 0x08	; 8
    4122:	90 70       	andi	r25, 0x00	; 0
    4124:	95 95       	asr	r25
    4126:	87 95       	ror	r24
    4128:	95 95       	asr	r25
    412a:	87 95       	ror	r24
    412c:	95 95       	asr	r25
    412e:	87 95       	ror	r24
    4130:	98 2f       	mov	r25, r24
    4132:	81 e0       	ldi	r24, 0x01	; 1
    4134:	64 e0       	ldi	r22, 0x04	; 4
    4136:	49 2f       	mov	r20, r25
    4138:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PortB,Pin2,GET_BIT(command,Pin2));
    413c:	89 ad       	ldd	r24, Y+57	; 0x39
    413e:	88 2f       	mov	r24, r24
    4140:	90 e0       	ldi	r25, 0x00	; 0
    4142:	84 70       	andi	r24, 0x04	; 4
    4144:	90 70       	andi	r25, 0x00	; 0
    4146:	95 95       	asr	r25
    4148:	87 95       	ror	r24
    414a:	95 95       	asr	r25
    414c:	87 95       	ror	r24
    414e:	98 2f       	mov	r25, r24
    4150:	81 e0       	ldi	r24, 0x01	; 1
    4152:	62 e0       	ldi	r22, 0x02	; 2
    4154:	49 2f       	mov	r20, r25
    4156:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PortB,Pin1,GET_BIT(command,Pin1));
    415a:	89 ad       	ldd	r24, Y+57	; 0x39
    415c:	88 2f       	mov	r24, r24
    415e:	90 e0       	ldi	r25, 0x00	; 0
    4160:	82 70       	andi	r24, 0x02	; 2
    4162:	90 70       	andi	r25, 0x00	; 0
    4164:	95 95       	asr	r25
    4166:	87 95       	ror	r24
    4168:	98 2f       	mov	r25, r24
    416a:	81 e0       	ldi	r24, 0x01	; 1
    416c:	61 e0       	ldi	r22, 0x01	; 1
    416e:	49 2f       	mov	r20, r25
    4170:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_voidSetPinValue>
	//DIO_voidSetPinValue(PortB,Pin0,GET_BIT(command,Pin0));
	DIO_voidSetPinValue(PortB,Pin7,GET_BIT(command,Pin0));
    4174:	89 ad       	ldd	r24, Y+57	; 0x39
    4176:	98 2f       	mov	r25, r24
    4178:	91 70       	andi	r25, 0x01	; 1
    417a:	81 e0       	ldi	r24, 0x01	; 1
    417c:	67 e0       	ldi	r22, 0x07	; 7
    417e:	49 2f       	mov	r20, r25
    4180:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_voidSetPinValue>

	DIO_voidSetPinValue(PortA,Pin2,High);
    4184:	80 e0       	ldi	r24, 0x00	; 0
    4186:	62 e0       	ldi	r22, 0x02	; 2
    4188:	41 e0       	ldi	r20, 0x01	; 1
    418a:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_voidSetPinValue>
    418e:	80 e0       	ldi	r24, 0x00	; 0
    4190:	90 e0       	ldi	r25, 0x00	; 0
    4192:	a0 e0       	ldi	r26, 0x00	; 0
    4194:	b0 e4       	ldi	r27, 0x40	; 64
    4196:	89 8f       	std	Y+25, r24	; 0x19
    4198:	9a 8f       	std	Y+26, r25	; 0x1a
    419a:	ab 8f       	std	Y+27, r26	; 0x1b
    419c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    419e:	69 8d       	ldd	r22, Y+25	; 0x19
    41a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    41a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    41a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    41a6:	20 e0       	ldi	r18, 0x00	; 0
    41a8:	30 e0       	ldi	r19, 0x00	; 0
    41aa:	4a e7       	ldi	r20, 0x7A	; 122
    41ac:	55 e4       	ldi	r21, 0x45	; 69
    41ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41b2:	dc 01       	movw	r26, r24
    41b4:	cb 01       	movw	r24, r22
    41b6:	8d 8b       	std	Y+21, r24	; 0x15
    41b8:	9e 8b       	std	Y+22, r25	; 0x16
    41ba:	af 8b       	std	Y+23, r26	; 0x17
    41bc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    41be:	6d 89       	ldd	r22, Y+21	; 0x15
    41c0:	7e 89       	ldd	r23, Y+22	; 0x16
    41c2:	8f 89       	ldd	r24, Y+23	; 0x17
    41c4:	98 8d       	ldd	r25, Y+24	; 0x18
    41c6:	20 e0       	ldi	r18, 0x00	; 0
    41c8:	30 e0       	ldi	r19, 0x00	; 0
    41ca:	40 e8       	ldi	r20, 0x80	; 128
    41cc:	5f e3       	ldi	r21, 0x3F	; 63
    41ce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    41d2:	88 23       	and	r24, r24
    41d4:	2c f4       	brge	.+10     	; 0x41e0 <LCD_KIT_voidRunCommand+0x34c>
		__ticks = 1;
    41d6:	81 e0       	ldi	r24, 0x01	; 1
    41d8:	90 e0       	ldi	r25, 0x00	; 0
    41da:	9c 8b       	std	Y+20, r25	; 0x14
    41dc:	8b 8b       	std	Y+19, r24	; 0x13
    41de:	3f c0       	rjmp	.+126    	; 0x425e <LCD_KIT_voidRunCommand+0x3ca>
	else if (__tmp > 65535)
    41e0:	6d 89       	ldd	r22, Y+21	; 0x15
    41e2:	7e 89       	ldd	r23, Y+22	; 0x16
    41e4:	8f 89       	ldd	r24, Y+23	; 0x17
    41e6:	98 8d       	ldd	r25, Y+24	; 0x18
    41e8:	20 e0       	ldi	r18, 0x00	; 0
    41ea:	3f ef       	ldi	r19, 0xFF	; 255
    41ec:	4f e7       	ldi	r20, 0x7F	; 127
    41ee:	57 e4       	ldi	r21, 0x47	; 71
    41f0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    41f4:	18 16       	cp	r1, r24
    41f6:	4c f5       	brge	.+82     	; 0x424a <LCD_KIT_voidRunCommand+0x3b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41f8:	69 8d       	ldd	r22, Y+25	; 0x19
    41fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    41fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    41fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4200:	20 e0       	ldi	r18, 0x00	; 0
    4202:	30 e0       	ldi	r19, 0x00	; 0
    4204:	40 e2       	ldi	r20, 0x20	; 32
    4206:	51 e4       	ldi	r21, 0x41	; 65
    4208:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    420c:	dc 01       	movw	r26, r24
    420e:	cb 01       	movw	r24, r22
    4210:	bc 01       	movw	r22, r24
    4212:	cd 01       	movw	r24, r26
    4214:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4218:	dc 01       	movw	r26, r24
    421a:	cb 01       	movw	r24, r22
    421c:	9c 8b       	std	Y+20, r25	; 0x14
    421e:	8b 8b       	std	Y+19, r24	; 0x13
    4220:	0f c0       	rjmp	.+30     	; 0x4240 <LCD_KIT_voidRunCommand+0x3ac>
    4222:	80 e9       	ldi	r24, 0x90	; 144
    4224:	91 e0       	ldi	r25, 0x01	; 1
    4226:	9a 8b       	std	Y+18, r25	; 0x12
    4228:	89 8b       	std	Y+17, r24	; 0x11
    422a:	89 89       	ldd	r24, Y+17	; 0x11
    422c:	9a 89       	ldd	r25, Y+18	; 0x12
    422e:	01 97       	sbiw	r24, 0x01	; 1
    4230:	f1 f7       	brne	.-4      	; 0x422e <LCD_KIT_voidRunCommand+0x39a>
    4232:	9a 8b       	std	Y+18, r25	; 0x12
    4234:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4236:	8b 89       	ldd	r24, Y+19	; 0x13
    4238:	9c 89       	ldd	r25, Y+20	; 0x14
    423a:	01 97       	sbiw	r24, 0x01	; 1
    423c:	9c 8b       	std	Y+20, r25	; 0x14
    423e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4240:	8b 89       	ldd	r24, Y+19	; 0x13
    4242:	9c 89       	ldd	r25, Y+20	; 0x14
    4244:	00 97       	sbiw	r24, 0x00	; 0
    4246:	69 f7       	brne	.-38     	; 0x4222 <LCD_KIT_voidRunCommand+0x38e>
    4248:	14 c0       	rjmp	.+40     	; 0x4272 <LCD_KIT_voidRunCommand+0x3de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    424a:	6d 89       	ldd	r22, Y+21	; 0x15
    424c:	7e 89       	ldd	r23, Y+22	; 0x16
    424e:	8f 89       	ldd	r24, Y+23	; 0x17
    4250:	98 8d       	ldd	r25, Y+24	; 0x18
    4252:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4256:	dc 01       	movw	r26, r24
    4258:	cb 01       	movw	r24, r22
    425a:	9c 8b       	std	Y+20, r25	; 0x14
    425c:	8b 8b       	std	Y+19, r24	; 0x13
    425e:	8b 89       	ldd	r24, Y+19	; 0x13
    4260:	9c 89       	ldd	r25, Y+20	; 0x14
    4262:	98 8b       	std	Y+16, r25	; 0x10
    4264:	8f 87       	std	Y+15, r24	; 0x0f
    4266:	8f 85       	ldd	r24, Y+15	; 0x0f
    4268:	98 89       	ldd	r25, Y+16	; 0x10
    426a:	01 97       	sbiw	r24, 0x01	; 1
    426c:	f1 f7       	brne	.-4      	; 0x426a <LCD_KIT_voidRunCommand+0x3d6>
    426e:	98 8b       	std	Y+16, r25	; 0x10
    4270:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_voidSetPinValue(PortA,Pin2,Low);
    4272:	80 e0       	ldi	r24, 0x00	; 0
    4274:	62 e0       	ldi	r22, 0x02	; 2
    4276:	40 e0       	ldi	r20, 0x00	; 0
    4278:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_voidSetPinValue>
    427c:	80 e0       	ldi	r24, 0x00	; 0
    427e:	90 e0       	ldi	r25, 0x00	; 0
    4280:	a0 e0       	ldi	r26, 0x00	; 0
    4282:	b0 e4       	ldi	r27, 0x40	; 64
    4284:	8b 87       	std	Y+11, r24	; 0x0b
    4286:	9c 87       	std	Y+12, r25	; 0x0c
    4288:	ad 87       	std	Y+13, r26	; 0x0d
    428a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    428c:	6b 85       	ldd	r22, Y+11	; 0x0b
    428e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4290:	8d 85       	ldd	r24, Y+13	; 0x0d
    4292:	9e 85       	ldd	r25, Y+14	; 0x0e
    4294:	20 e0       	ldi	r18, 0x00	; 0
    4296:	30 e0       	ldi	r19, 0x00	; 0
    4298:	4a e7       	ldi	r20, 0x7A	; 122
    429a:	55 e4       	ldi	r21, 0x45	; 69
    429c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42a0:	dc 01       	movw	r26, r24
    42a2:	cb 01       	movw	r24, r22
    42a4:	8f 83       	std	Y+7, r24	; 0x07
    42a6:	98 87       	std	Y+8, r25	; 0x08
    42a8:	a9 87       	std	Y+9, r26	; 0x09
    42aa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    42ac:	6f 81       	ldd	r22, Y+7	; 0x07
    42ae:	78 85       	ldd	r23, Y+8	; 0x08
    42b0:	89 85       	ldd	r24, Y+9	; 0x09
    42b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    42b4:	20 e0       	ldi	r18, 0x00	; 0
    42b6:	30 e0       	ldi	r19, 0x00	; 0
    42b8:	40 e8       	ldi	r20, 0x80	; 128
    42ba:	5f e3       	ldi	r21, 0x3F	; 63
    42bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    42c0:	88 23       	and	r24, r24
    42c2:	2c f4       	brge	.+10     	; 0x42ce <LCD_KIT_voidRunCommand+0x43a>
		__ticks = 1;
    42c4:	81 e0       	ldi	r24, 0x01	; 1
    42c6:	90 e0       	ldi	r25, 0x00	; 0
    42c8:	9e 83       	std	Y+6, r25	; 0x06
    42ca:	8d 83       	std	Y+5, r24	; 0x05
    42cc:	3f c0       	rjmp	.+126    	; 0x434c <LCD_KIT_voidRunCommand+0x4b8>
	else if (__tmp > 65535)
    42ce:	6f 81       	ldd	r22, Y+7	; 0x07
    42d0:	78 85       	ldd	r23, Y+8	; 0x08
    42d2:	89 85       	ldd	r24, Y+9	; 0x09
    42d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    42d6:	20 e0       	ldi	r18, 0x00	; 0
    42d8:	3f ef       	ldi	r19, 0xFF	; 255
    42da:	4f e7       	ldi	r20, 0x7F	; 127
    42dc:	57 e4       	ldi	r21, 0x47	; 71
    42de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    42e2:	18 16       	cp	r1, r24
    42e4:	4c f5       	brge	.+82     	; 0x4338 <LCD_KIT_voidRunCommand+0x4a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    42e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    42ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    42ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    42ee:	20 e0       	ldi	r18, 0x00	; 0
    42f0:	30 e0       	ldi	r19, 0x00	; 0
    42f2:	40 e2       	ldi	r20, 0x20	; 32
    42f4:	51 e4       	ldi	r21, 0x41	; 65
    42f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42fa:	dc 01       	movw	r26, r24
    42fc:	cb 01       	movw	r24, r22
    42fe:	bc 01       	movw	r22, r24
    4300:	cd 01       	movw	r24, r26
    4302:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4306:	dc 01       	movw	r26, r24
    4308:	cb 01       	movw	r24, r22
    430a:	9e 83       	std	Y+6, r25	; 0x06
    430c:	8d 83       	std	Y+5, r24	; 0x05
    430e:	0f c0       	rjmp	.+30     	; 0x432e <LCD_KIT_voidRunCommand+0x49a>
    4310:	80 e9       	ldi	r24, 0x90	; 144
    4312:	91 e0       	ldi	r25, 0x01	; 1
    4314:	9c 83       	std	Y+4, r25	; 0x04
    4316:	8b 83       	std	Y+3, r24	; 0x03
    4318:	8b 81       	ldd	r24, Y+3	; 0x03
    431a:	9c 81       	ldd	r25, Y+4	; 0x04
    431c:	01 97       	sbiw	r24, 0x01	; 1
    431e:	f1 f7       	brne	.-4      	; 0x431c <LCD_KIT_voidRunCommand+0x488>
    4320:	9c 83       	std	Y+4, r25	; 0x04
    4322:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4324:	8d 81       	ldd	r24, Y+5	; 0x05
    4326:	9e 81       	ldd	r25, Y+6	; 0x06
    4328:	01 97       	sbiw	r24, 0x01	; 1
    432a:	9e 83       	std	Y+6, r25	; 0x06
    432c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    432e:	8d 81       	ldd	r24, Y+5	; 0x05
    4330:	9e 81       	ldd	r25, Y+6	; 0x06
    4332:	00 97       	sbiw	r24, 0x00	; 0
    4334:	69 f7       	brne	.-38     	; 0x4310 <LCD_KIT_voidRunCommand+0x47c>
    4336:	14 c0       	rjmp	.+40     	; 0x4360 <LCD_KIT_voidRunCommand+0x4cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4338:	6f 81       	ldd	r22, Y+7	; 0x07
    433a:	78 85       	ldd	r23, Y+8	; 0x08
    433c:	89 85       	ldd	r24, Y+9	; 0x09
    433e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4340:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4344:	dc 01       	movw	r26, r24
    4346:	cb 01       	movw	r24, r22
    4348:	9e 83       	std	Y+6, r25	; 0x06
    434a:	8d 83       	std	Y+5, r24	; 0x05
    434c:	8d 81       	ldd	r24, Y+5	; 0x05
    434e:	9e 81       	ldd	r25, Y+6	; 0x06
    4350:	9a 83       	std	Y+2, r25	; 0x02
    4352:	89 83       	std	Y+1, r24	; 0x01
    4354:	89 81       	ldd	r24, Y+1	; 0x01
    4356:	9a 81       	ldd	r25, Y+2	; 0x02
    4358:	01 97       	sbiw	r24, 0x01	; 1
    435a:	f1 f7       	brne	.-4      	; 0x4358 <LCD_KIT_voidRunCommand+0x4c4>
    435c:	9a 83       	std	Y+2, r25	; 0x02
    435e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

	return;
}
    4360:	e9 96       	adiw	r28, 0x39	; 57
    4362:	0f b6       	in	r0, 0x3f	; 63
    4364:	f8 94       	cli
    4366:	de bf       	out	0x3e, r29	; 62
    4368:	0f be       	out	0x3f, r0	; 63
    436a:	cd bf       	out	0x3d, r28	; 61
    436c:	cf 91       	pop	r28
    436e:	df 91       	pop	r29
    4370:	08 95       	ret

00004372 <LCD_KIT_voidSetCurser>:

void LCD_KIT_voidSetCurser(u8 Line , u8 Col)
{
    4372:	df 93       	push	r29
    4374:	cf 93       	push	r28
    4376:	00 d0       	rcall	.+0      	; 0x4378 <LCD_KIT_voidSetCurser+0x6>
    4378:	cd b7       	in	r28, 0x3d	; 61
    437a:	de b7       	in	r29, 0x3e	; 62
    437c:	89 83       	std	Y+1, r24	; 0x01
    437e:	6a 83       	std	Y+2, r22	; 0x02
	LCD_KIT_voidRunCommand(Line+Col);
    4380:	89 81       	ldd	r24, Y+1	; 0x01
    4382:	9a 81       	ldd	r25, Y+2	; 0x02
    4384:	89 0f       	add	r24, r25
    4386:	0e 94 4a 1f 	call	0x3e94	; 0x3e94 <LCD_KIT_voidRunCommand>

	return;
}
    438a:	0f 90       	pop	r0
    438c:	0f 90       	pop	r0
    438e:	cf 91       	pop	r28
    4390:	df 91       	pop	r29
    4392:	08 95       	ret

00004394 <LCD_KIT_voidDisplayString>:

void LCD_KIT_voidDisplayString(u8 *Str)
{
    4394:	df 93       	push	r29
    4396:	cf 93       	push	r28
    4398:	00 d0       	rcall	.+0      	; 0x439a <LCD_KIT_voidDisplayString+0x6>
    439a:	0f 92       	push	r0
    439c:	cd b7       	in	r28, 0x3d	; 61
    439e:	de b7       	in	r29, 0x3e	; 62
    43a0:	9b 83       	std	Y+3, r25	; 0x03
    43a2:	8a 83       	std	Y+2, r24	; 0x02
	for(u8 j=0;Str[j]!='\0';j++)
    43a4:	19 82       	std	Y+1, r1	; 0x01
    43a6:	0e c0       	rjmp	.+28     	; 0x43c4 <LCD_KIT_voidDisplayString+0x30>
	{
		LCD_KIT_voidDisplayCharacter(Str[j]);
    43a8:	89 81       	ldd	r24, Y+1	; 0x01
    43aa:	28 2f       	mov	r18, r24
    43ac:	30 e0       	ldi	r19, 0x00	; 0
    43ae:	8a 81       	ldd	r24, Y+2	; 0x02
    43b0:	9b 81       	ldd	r25, Y+3	; 0x03
    43b2:	fc 01       	movw	r30, r24
    43b4:	e2 0f       	add	r30, r18
    43b6:	f3 1f       	adc	r31, r19
    43b8:	80 81       	ld	r24, Z
    43ba:	0e 94 db 1c 	call	0x39b6	; 0x39b6 <LCD_KIT_voidDisplayCharacter>
	return;
}

void LCD_KIT_voidDisplayString(u8 *Str)
{
	for(u8 j=0;Str[j]!='\0';j++)
    43be:	89 81       	ldd	r24, Y+1	; 0x01
    43c0:	8f 5f       	subi	r24, 0xFF	; 255
    43c2:	89 83       	std	Y+1, r24	; 0x01
    43c4:	89 81       	ldd	r24, Y+1	; 0x01
    43c6:	28 2f       	mov	r18, r24
    43c8:	30 e0       	ldi	r19, 0x00	; 0
    43ca:	8a 81       	ldd	r24, Y+2	; 0x02
    43cc:	9b 81       	ldd	r25, Y+3	; 0x03
    43ce:	fc 01       	movw	r30, r24
    43d0:	e2 0f       	add	r30, r18
    43d2:	f3 1f       	adc	r31, r19
    43d4:	80 81       	ld	r24, Z
    43d6:	88 23       	and	r24, r24
    43d8:	39 f7       	brne	.-50     	; 0x43a8 <LCD_KIT_voidDisplayString+0x14>
	{
		LCD_KIT_voidDisplayCharacter(Str[j]);
	}
}
    43da:	0f 90       	pop	r0
    43dc:	0f 90       	pop	r0
    43de:	0f 90       	pop	r0
    43e0:	cf 91       	pop	r28
    43e2:	df 91       	pop	r29
    43e4:	08 95       	ret

000043e6 <LCD_KIT_voidDisplayBigNumber>:
	}
}
*/

void LCD_KIT_voidDisplayBigNumber(u32 Number)
{
    43e6:	df 93       	push	r29
    43e8:	cf 93       	push	r28
    43ea:	00 d0       	rcall	.+0      	; 0x43ec <LCD_KIT_voidDisplayBigNumber+0x6>
    43ec:	00 d0       	rcall	.+0      	; 0x43ee <LCD_KIT_voidDisplayBigNumber+0x8>
    43ee:	cd b7       	in	r28, 0x3d	; 61
    43f0:	de b7       	in	r29, 0x3e	; 62
    43f2:	69 83       	std	Y+1, r22	; 0x01
    43f4:	7a 83       	std	Y+2, r23	; 0x02
    43f6:	8b 83       	std	Y+3, r24	; 0x03
    43f8:	9c 83       	std	Y+4, r25	; 0x04
	if(Number<=9)
    43fa:	89 81       	ldd	r24, Y+1	; 0x01
    43fc:	9a 81       	ldd	r25, Y+2	; 0x02
    43fe:	ab 81       	ldd	r26, Y+3	; 0x03
    4400:	bc 81       	ldd	r27, Y+4	; 0x04
    4402:	8a 30       	cpi	r24, 0x0A	; 10
    4404:	91 05       	cpc	r25, r1
    4406:	a1 05       	cpc	r26, r1
    4408:	b1 05       	cpc	r27, r1
    440a:	28 f4       	brcc	.+10     	; 0x4416 <LCD_KIT_voidDisplayBigNumber+0x30>
	{
		LCD_KIT_voidDisplayCharacter(Number+48);
    440c:	89 81       	ldd	r24, Y+1	; 0x01
    440e:	80 5d       	subi	r24, 0xD0	; 208
    4410:	0e 94 db 1c 	call	0x39b6	; 0x39b6 <LCD_KIT_voidDisplayCharacter>
    4414:	af c2       	rjmp	.+1374   	; 0x4974 <LCD_KIT_voidDisplayBigNumber+0x58e>
	}
	else if(Number<=99)
    4416:	89 81       	ldd	r24, Y+1	; 0x01
    4418:	9a 81       	ldd	r25, Y+2	; 0x02
    441a:	ab 81       	ldd	r26, Y+3	; 0x03
    441c:	bc 81       	ldd	r27, Y+4	; 0x04
    441e:	84 36       	cpi	r24, 0x64	; 100
    4420:	91 05       	cpc	r25, r1
    4422:	a1 05       	cpc	r26, r1
    4424:	b1 05       	cpc	r27, r1
    4426:	18 f5       	brcc	.+70     	; 0x446e <LCD_KIT_voidDisplayBigNumber+0x88>
	{
		LCD_KIT_voidDisplayCharacter(Number/10+48);
    4428:	89 81       	ldd	r24, Y+1	; 0x01
    442a:	9a 81       	ldd	r25, Y+2	; 0x02
    442c:	ab 81       	ldd	r26, Y+3	; 0x03
    442e:	bc 81       	ldd	r27, Y+4	; 0x04
    4430:	2a e0       	ldi	r18, 0x0A	; 10
    4432:	30 e0       	ldi	r19, 0x00	; 0
    4434:	40 e0       	ldi	r20, 0x00	; 0
    4436:	50 e0       	ldi	r21, 0x00	; 0
    4438:	bc 01       	movw	r22, r24
    443a:	cd 01       	movw	r24, r26
    443c:	0e 94 99 27 	call	0x4f32	; 0x4f32 <__udivmodsi4>
    4440:	da 01       	movw	r26, r20
    4442:	c9 01       	movw	r24, r18
    4444:	80 5d       	subi	r24, 0xD0	; 208
    4446:	0e 94 db 1c 	call	0x39b6	; 0x39b6 <LCD_KIT_voidDisplayCharacter>
		LCD_KIT_voidDisplayCharacter(Number%10+48);
    444a:	89 81       	ldd	r24, Y+1	; 0x01
    444c:	9a 81       	ldd	r25, Y+2	; 0x02
    444e:	ab 81       	ldd	r26, Y+3	; 0x03
    4450:	bc 81       	ldd	r27, Y+4	; 0x04
    4452:	2a e0       	ldi	r18, 0x0A	; 10
    4454:	30 e0       	ldi	r19, 0x00	; 0
    4456:	40 e0       	ldi	r20, 0x00	; 0
    4458:	50 e0       	ldi	r21, 0x00	; 0
    445a:	bc 01       	movw	r22, r24
    445c:	cd 01       	movw	r24, r26
    445e:	0e 94 99 27 	call	0x4f32	; 0x4f32 <__udivmodsi4>
    4462:	dc 01       	movw	r26, r24
    4464:	cb 01       	movw	r24, r22
    4466:	80 5d       	subi	r24, 0xD0	; 208
    4468:	0e 94 db 1c 	call	0x39b6	; 0x39b6 <LCD_KIT_voidDisplayCharacter>
    446c:	83 c2       	rjmp	.+1286   	; 0x4974 <LCD_KIT_voidDisplayBigNumber+0x58e>
	}
	else if(Number<=999)
    446e:	89 81       	ldd	r24, Y+1	; 0x01
    4470:	9a 81       	ldd	r25, Y+2	; 0x02
    4472:	ab 81       	ldd	r26, Y+3	; 0x03
    4474:	bc 81       	ldd	r27, Y+4	; 0x04
    4476:	88 3e       	cpi	r24, 0xE8	; 232
    4478:	23 e0       	ldi	r18, 0x03	; 3
    447a:	92 07       	cpc	r25, r18
    447c:	20 e0       	ldi	r18, 0x00	; 0
    447e:	a2 07       	cpc	r26, r18
    4480:	20 e0       	ldi	r18, 0x00	; 0
    4482:	b2 07       	cpc	r27, r18
    4484:	f0 f5       	brcc	.+124    	; 0x4502 <LCD_KIT_voidDisplayBigNumber+0x11c>
	{
		LCD_KIT_voidDisplayCharacter(Number/100+48);
    4486:	89 81       	ldd	r24, Y+1	; 0x01
    4488:	9a 81       	ldd	r25, Y+2	; 0x02
    448a:	ab 81       	ldd	r26, Y+3	; 0x03
    448c:	bc 81       	ldd	r27, Y+4	; 0x04
    448e:	24 e6       	ldi	r18, 0x64	; 100
    4490:	30 e0       	ldi	r19, 0x00	; 0
    4492:	40 e0       	ldi	r20, 0x00	; 0
    4494:	50 e0       	ldi	r21, 0x00	; 0
    4496:	bc 01       	movw	r22, r24
    4498:	cd 01       	movw	r24, r26
    449a:	0e 94 99 27 	call	0x4f32	; 0x4f32 <__udivmodsi4>
    449e:	da 01       	movw	r26, r20
    44a0:	c9 01       	movw	r24, r18
    44a2:	80 5d       	subi	r24, 0xD0	; 208
    44a4:	0e 94 db 1c 	call	0x39b6	; 0x39b6 <LCD_KIT_voidDisplayCharacter>
		LCD_KIT_voidDisplayCharacter((Number/10)%10+48);
    44a8:	89 81       	ldd	r24, Y+1	; 0x01
    44aa:	9a 81       	ldd	r25, Y+2	; 0x02
    44ac:	ab 81       	ldd	r26, Y+3	; 0x03
    44ae:	bc 81       	ldd	r27, Y+4	; 0x04
    44b0:	2a e0       	ldi	r18, 0x0A	; 10
    44b2:	30 e0       	ldi	r19, 0x00	; 0
    44b4:	40 e0       	ldi	r20, 0x00	; 0
    44b6:	50 e0       	ldi	r21, 0x00	; 0
    44b8:	bc 01       	movw	r22, r24
    44ba:	cd 01       	movw	r24, r26
    44bc:	0e 94 99 27 	call	0x4f32	; 0x4f32 <__udivmodsi4>
    44c0:	da 01       	movw	r26, r20
    44c2:	c9 01       	movw	r24, r18
    44c4:	2a e0       	ldi	r18, 0x0A	; 10
    44c6:	30 e0       	ldi	r19, 0x00	; 0
    44c8:	40 e0       	ldi	r20, 0x00	; 0
    44ca:	50 e0       	ldi	r21, 0x00	; 0
    44cc:	bc 01       	movw	r22, r24
    44ce:	cd 01       	movw	r24, r26
    44d0:	0e 94 99 27 	call	0x4f32	; 0x4f32 <__udivmodsi4>
    44d4:	dc 01       	movw	r26, r24
    44d6:	cb 01       	movw	r24, r22
    44d8:	80 5d       	subi	r24, 0xD0	; 208
    44da:	0e 94 db 1c 	call	0x39b6	; 0x39b6 <LCD_KIT_voidDisplayCharacter>
		LCD_KIT_voidDisplayCharacter(Number%10+48);
    44de:	89 81       	ldd	r24, Y+1	; 0x01
    44e0:	9a 81       	ldd	r25, Y+2	; 0x02
    44e2:	ab 81       	ldd	r26, Y+3	; 0x03
    44e4:	bc 81       	ldd	r27, Y+4	; 0x04
    44e6:	2a e0       	ldi	r18, 0x0A	; 10
    44e8:	30 e0       	ldi	r19, 0x00	; 0
    44ea:	40 e0       	ldi	r20, 0x00	; 0
    44ec:	50 e0       	ldi	r21, 0x00	; 0
    44ee:	bc 01       	movw	r22, r24
    44f0:	cd 01       	movw	r24, r26
    44f2:	0e 94 99 27 	call	0x4f32	; 0x4f32 <__udivmodsi4>
    44f6:	dc 01       	movw	r26, r24
    44f8:	cb 01       	movw	r24, r22
    44fa:	80 5d       	subi	r24, 0xD0	; 208
    44fc:	0e 94 db 1c 	call	0x39b6	; 0x39b6 <LCD_KIT_voidDisplayCharacter>
    4500:	39 c2       	rjmp	.+1138   	; 0x4974 <LCD_KIT_voidDisplayBigNumber+0x58e>
	}
	else if(Number<=9999)
    4502:	89 81       	ldd	r24, Y+1	; 0x01
    4504:	9a 81       	ldd	r25, Y+2	; 0x02
    4506:	ab 81       	ldd	r26, Y+3	; 0x03
    4508:	bc 81       	ldd	r27, Y+4	; 0x04
    450a:	80 31       	cpi	r24, 0x10	; 16
    450c:	27 e2       	ldi	r18, 0x27	; 39
    450e:	92 07       	cpc	r25, r18
    4510:	20 e0       	ldi	r18, 0x00	; 0
    4512:	a2 07       	cpc	r26, r18
    4514:	20 e0       	ldi	r18, 0x00	; 0
    4516:	b2 07       	cpc	r27, r18
    4518:	08 f0       	brcs	.+2      	; 0x451c <LCD_KIT_voidDisplayBigNumber+0x136>
    451a:	59 c0       	rjmp	.+178    	; 0x45ce <LCD_KIT_voidDisplayBigNumber+0x1e8>
	{
		LCD_KIT_voidDisplayCharacter(Number/1000+48);
    451c:	89 81       	ldd	r24, Y+1	; 0x01
    451e:	9a 81       	ldd	r25, Y+2	; 0x02
    4520:	ab 81       	ldd	r26, Y+3	; 0x03
    4522:	bc 81       	ldd	r27, Y+4	; 0x04
    4524:	28 ee       	ldi	r18, 0xE8	; 232
    4526:	33 e0       	ldi	r19, 0x03	; 3
    4528:	40 e0       	ldi	r20, 0x00	; 0
    452a:	50 e0       	ldi	r21, 0x00	; 0
    452c:	bc 01       	movw	r22, r24
    452e:	cd 01       	movw	r24, r26
    4530:	0e 94 99 27 	call	0x4f32	; 0x4f32 <__udivmodsi4>
    4534:	da 01       	movw	r26, r20
    4536:	c9 01       	movw	r24, r18
    4538:	80 5d       	subi	r24, 0xD0	; 208
    453a:	0e 94 db 1c 	call	0x39b6	; 0x39b6 <LCD_KIT_voidDisplayCharacter>
		LCD_KIT_voidDisplayCharacter((Number/100)%10+48);
    453e:	89 81       	ldd	r24, Y+1	; 0x01
    4540:	9a 81       	ldd	r25, Y+2	; 0x02
    4542:	ab 81       	ldd	r26, Y+3	; 0x03
    4544:	bc 81       	ldd	r27, Y+4	; 0x04
    4546:	24 e6       	ldi	r18, 0x64	; 100
    4548:	30 e0       	ldi	r19, 0x00	; 0
    454a:	40 e0       	ldi	r20, 0x00	; 0
    454c:	50 e0       	ldi	r21, 0x00	; 0
    454e:	bc 01       	movw	r22, r24
    4550:	cd 01       	movw	r24, r26
    4552:	0e 94 99 27 	call	0x4f32	; 0x4f32 <__udivmodsi4>
    4556:	da 01       	movw	r26, r20
    4558:	c9 01       	movw	r24, r18
    455a:	2a e0       	ldi	r18, 0x0A	; 10
    455c:	30 e0       	ldi	r19, 0x00	; 0
    455e:	40 e0       	ldi	r20, 0x00	; 0
    4560:	50 e0       	ldi	r21, 0x00	; 0
    4562:	bc 01       	movw	r22, r24
    4564:	cd 01       	movw	r24, r26
    4566:	0e 94 99 27 	call	0x4f32	; 0x4f32 <__udivmodsi4>
    456a:	dc 01       	movw	r26, r24
    456c:	cb 01       	movw	r24, r22
    456e:	80 5d       	subi	r24, 0xD0	; 208
    4570:	0e 94 db 1c 	call	0x39b6	; 0x39b6 <LCD_KIT_voidDisplayCharacter>
		LCD_KIT_voidDisplayCharacter((Number/10)%10+48);
    4574:	89 81       	ldd	r24, Y+1	; 0x01
    4576:	9a 81       	ldd	r25, Y+2	; 0x02
    4578:	ab 81       	ldd	r26, Y+3	; 0x03
    457a:	bc 81       	ldd	r27, Y+4	; 0x04
    457c:	2a e0       	ldi	r18, 0x0A	; 10
    457e:	30 e0       	ldi	r19, 0x00	; 0
    4580:	40 e0       	ldi	r20, 0x00	; 0
    4582:	50 e0       	ldi	r21, 0x00	; 0
    4584:	bc 01       	movw	r22, r24
    4586:	cd 01       	movw	r24, r26
    4588:	0e 94 99 27 	call	0x4f32	; 0x4f32 <__udivmodsi4>
    458c:	da 01       	movw	r26, r20
    458e:	c9 01       	movw	r24, r18
    4590:	2a e0       	ldi	r18, 0x0A	; 10
    4592:	30 e0       	ldi	r19, 0x00	; 0
    4594:	40 e0       	ldi	r20, 0x00	; 0
    4596:	50 e0       	ldi	r21, 0x00	; 0
    4598:	bc 01       	movw	r22, r24
    459a:	cd 01       	movw	r24, r26
    459c:	0e 94 99 27 	call	0x4f32	; 0x4f32 <__udivmodsi4>
    45a0:	dc 01       	movw	r26, r24
    45a2:	cb 01       	movw	r24, r22
    45a4:	80 5d       	subi	r24, 0xD0	; 208
    45a6:	0e 94 db 1c 	call	0x39b6	; 0x39b6 <LCD_KIT_voidDisplayCharacter>
		LCD_KIT_voidDisplayCharacter(Number%10+48);
    45aa:	89 81       	ldd	r24, Y+1	; 0x01
    45ac:	9a 81       	ldd	r25, Y+2	; 0x02
    45ae:	ab 81       	ldd	r26, Y+3	; 0x03
    45b0:	bc 81       	ldd	r27, Y+4	; 0x04
    45b2:	2a e0       	ldi	r18, 0x0A	; 10
    45b4:	30 e0       	ldi	r19, 0x00	; 0
    45b6:	40 e0       	ldi	r20, 0x00	; 0
    45b8:	50 e0       	ldi	r21, 0x00	; 0
    45ba:	bc 01       	movw	r22, r24
    45bc:	cd 01       	movw	r24, r26
    45be:	0e 94 99 27 	call	0x4f32	; 0x4f32 <__udivmodsi4>
    45c2:	dc 01       	movw	r26, r24
    45c4:	cb 01       	movw	r24, r22
    45c6:	80 5d       	subi	r24, 0xD0	; 208
    45c8:	0e 94 db 1c 	call	0x39b6	; 0x39b6 <LCD_KIT_voidDisplayCharacter>
    45cc:	d3 c1       	rjmp	.+934    	; 0x4974 <LCD_KIT_voidDisplayBigNumber+0x58e>
	}
	else if(Number<=99999)
    45ce:	89 81       	ldd	r24, Y+1	; 0x01
    45d0:	9a 81       	ldd	r25, Y+2	; 0x02
    45d2:	ab 81       	ldd	r26, Y+3	; 0x03
    45d4:	bc 81       	ldd	r27, Y+4	; 0x04
    45d6:	80 3a       	cpi	r24, 0xA0	; 160
    45d8:	26 e8       	ldi	r18, 0x86	; 134
    45da:	92 07       	cpc	r25, r18
    45dc:	21 e0       	ldi	r18, 0x01	; 1
    45de:	a2 07       	cpc	r26, r18
    45e0:	20 e0       	ldi	r18, 0x00	; 0
    45e2:	b2 07       	cpc	r27, r18
    45e4:	08 f0       	brcs	.+2      	; 0x45e8 <LCD_KIT_voidDisplayBigNumber+0x202>
    45e6:	74 c0       	rjmp	.+232    	; 0x46d0 <LCD_KIT_voidDisplayBigNumber+0x2ea>
	{
		LCD_KIT_voidDisplayCharacter(Number/10000+48);
    45e8:	89 81       	ldd	r24, Y+1	; 0x01
    45ea:	9a 81       	ldd	r25, Y+2	; 0x02
    45ec:	ab 81       	ldd	r26, Y+3	; 0x03
    45ee:	bc 81       	ldd	r27, Y+4	; 0x04
    45f0:	20 e1       	ldi	r18, 0x10	; 16
    45f2:	37 e2       	ldi	r19, 0x27	; 39
    45f4:	40 e0       	ldi	r20, 0x00	; 0
    45f6:	50 e0       	ldi	r21, 0x00	; 0
    45f8:	bc 01       	movw	r22, r24
    45fa:	cd 01       	movw	r24, r26
    45fc:	0e 94 99 27 	call	0x4f32	; 0x4f32 <__udivmodsi4>
    4600:	da 01       	movw	r26, r20
    4602:	c9 01       	movw	r24, r18
    4604:	80 5d       	subi	r24, 0xD0	; 208
    4606:	0e 94 db 1c 	call	0x39b6	; 0x39b6 <LCD_KIT_voidDisplayCharacter>
		LCD_KIT_voidDisplayCharacter((Number/1000)%10+48);
    460a:	89 81       	ldd	r24, Y+1	; 0x01
    460c:	9a 81       	ldd	r25, Y+2	; 0x02
    460e:	ab 81       	ldd	r26, Y+3	; 0x03
    4610:	bc 81       	ldd	r27, Y+4	; 0x04
    4612:	28 ee       	ldi	r18, 0xE8	; 232
    4614:	33 e0       	ldi	r19, 0x03	; 3
    4616:	40 e0       	ldi	r20, 0x00	; 0
    4618:	50 e0       	ldi	r21, 0x00	; 0
    461a:	bc 01       	movw	r22, r24
    461c:	cd 01       	movw	r24, r26
    461e:	0e 94 99 27 	call	0x4f32	; 0x4f32 <__udivmodsi4>
    4622:	da 01       	movw	r26, r20
    4624:	c9 01       	movw	r24, r18
    4626:	2a e0       	ldi	r18, 0x0A	; 10
    4628:	30 e0       	ldi	r19, 0x00	; 0
    462a:	40 e0       	ldi	r20, 0x00	; 0
    462c:	50 e0       	ldi	r21, 0x00	; 0
    462e:	bc 01       	movw	r22, r24
    4630:	cd 01       	movw	r24, r26
    4632:	0e 94 99 27 	call	0x4f32	; 0x4f32 <__udivmodsi4>
    4636:	dc 01       	movw	r26, r24
    4638:	cb 01       	movw	r24, r22
    463a:	80 5d       	subi	r24, 0xD0	; 208
    463c:	0e 94 db 1c 	call	0x39b6	; 0x39b6 <LCD_KIT_voidDisplayCharacter>
		LCD_KIT_voidDisplayCharacter((Number/100)%10+48);
    4640:	89 81       	ldd	r24, Y+1	; 0x01
    4642:	9a 81       	ldd	r25, Y+2	; 0x02
    4644:	ab 81       	ldd	r26, Y+3	; 0x03
    4646:	bc 81       	ldd	r27, Y+4	; 0x04
    4648:	24 e6       	ldi	r18, 0x64	; 100
    464a:	30 e0       	ldi	r19, 0x00	; 0
    464c:	40 e0       	ldi	r20, 0x00	; 0
    464e:	50 e0       	ldi	r21, 0x00	; 0
    4650:	bc 01       	movw	r22, r24
    4652:	cd 01       	movw	r24, r26
    4654:	0e 94 99 27 	call	0x4f32	; 0x4f32 <__udivmodsi4>
    4658:	da 01       	movw	r26, r20
    465a:	c9 01       	movw	r24, r18
    465c:	2a e0       	ldi	r18, 0x0A	; 10
    465e:	30 e0       	ldi	r19, 0x00	; 0
    4660:	40 e0       	ldi	r20, 0x00	; 0
    4662:	50 e0       	ldi	r21, 0x00	; 0
    4664:	bc 01       	movw	r22, r24
    4666:	cd 01       	movw	r24, r26
    4668:	0e 94 99 27 	call	0x4f32	; 0x4f32 <__udivmodsi4>
    466c:	dc 01       	movw	r26, r24
    466e:	cb 01       	movw	r24, r22
    4670:	80 5d       	subi	r24, 0xD0	; 208
    4672:	0e 94 db 1c 	call	0x39b6	; 0x39b6 <LCD_KIT_voidDisplayCharacter>
		LCD_KIT_voidDisplayCharacter((Number/10)%10+48);
    4676:	89 81       	ldd	r24, Y+1	; 0x01
    4678:	9a 81       	ldd	r25, Y+2	; 0x02
    467a:	ab 81       	ldd	r26, Y+3	; 0x03
    467c:	bc 81       	ldd	r27, Y+4	; 0x04
    467e:	2a e0       	ldi	r18, 0x0A	; 10
    4680:	30 e0       	ldi	r19, 0x00	; 0
    4682:	40 e0       	ldi	r20, 0x00	; 0
    4684:	50 e0       	ldi	r21, 0x00	; 0
    4686:	bc 01       	movw	r22, r24
    4688:	cd 01       	movw	r24, r26
    468a:	0e 94 99 27 	call	0x4f32	; 0x4f32 <__udivmodsi4>
    468e:	da 01       	movw	r26, r20
    4690:	c9 01       	movw	r24, r18
    4692:	2a e0       	ldi	r18, 0x0A	; 10
    4694:	30 e0       	ldi	r19, 0x00	; 0
    4696:	40 e0       	ldi	r20, 0x00	; 0
    4698:	50 e0       	ldi	r21, 0x00	; 0
    469a:	bc 01       	movw	r22, r24
    469c:	cd 01       	movw	r24, r26
    469e:	0e 94 99 27 	call	0x4f32	; 0x4f32 <__udivmodsi4>
    46a2:	dc 01       	movw	r26, r24
    46a4:	cb 01       	movw	r24, r22
    46a6:	80 5d       	subi	r24, 0xD0	; 208
    46a8:	0e 94 db 1c 	call	0x39b6	; 0x39b6 <LCD_KIT_voidDisplayCharacter>
		LCD_KIT_voidDisplayCharacter(Number%10+48);
    46ac:	89 81       	ldd	r24, Y+1	; 0x01
    46ae:	9a 81       	ldd	r25, Y+2	; 0x02
    46b0:	ab 81       	ldd	r26, Y+3	; 0x03
    46b2:	bc 81       	ldd	r27, Y+4	; 0x04
    46b4:	2a e0       	ldi	r18, 0x0A	; 10
    46b6:	30 e0       	ldi	r19, 0x00	; 0
    46b8:	40 e0       	ldi	r20, 0x00	; 0
    46ba:	50 e0       	ldi	r21, 0x00	; 0
    46bc:	bc 01       	movw	r22, r24
    46be:	cd 01       	movw	r24, r26
    46c0:	0e 94 99 27 	call	0x4f32	; 0x4f32 <__udivmodsi4>
    46c4:	dc 01       	movw	r26, r24
    46c6:	cb 01       	movw	r24, r22
    46c8:	80 5d       	subi	r24, 0xD0	; 208
    46ca:	0e 94 db 1c 	call	0x39b6	; 0x39b6 <LCD_KIT_voidDisplayCharacter>
    46ce:	52 c1       	rjmp	.+676    	; 0x4974 <LCD_KIT_voidDisplayBigNumber+0x58e>
	}
	else if(Number<=999999)
    46d0:	89 81       	ldd	r24, Y+1	; 0x01
    46d2:	9a 81       	ldd	r25, Y+2	; 0x02
    46d4:	ab 81       	ldd	r26, Y+3	; 0x03
    46d6:	bc 81       	ldd	r27, Y+4	; 0x04
    46d8:	80 34       	cpi	r24, 0x40	; 64
    46da:	22 e4       	ldi	r18, 0x42	; 66
    46dc:	92 07       	cpc	r25, r18
    46de:	2f e0       	ldi	r18, 0x0F	; 15
    46e0:	a2 07       	cpc	r26, r18
    46e2:	20 e0       	ldi	r18, 0x00	; 0
    46e4:	b2 07       	cpc	r27, r18
    46e6:	08 f0       	brcs	.+2      	; 0x46ea <LCD_KIT_voidDisplayBigNumber+0x304>
    46e8:	8f c0       	rjmp	.+286    	; 0x4808 <LCD_KIT_voidDisplayBigNumber+0x422>
		{
			LCD_KIT_voidDisplayCharacter(Number/100000+48);
    46ea:	89 81       	ldd	r24, Y+1	; 0x01
    46ec:	9a 81       	ldd	r25, Y+2	; 0x02
    46ee:	ab 81       	ldd	r26, Y+3	; 0x03
    46f0:	bc 81       	ldd	r27, Y+4	; 0x04
    46f2:	20 ea       	ldi	r18, 0xA0	; 160
    46f4:	36 e8       	ldi	r19, 0x86	; 134
    46f6:	41 e0       	ldi	r20, 0x01	; 1
    46f8:	50 e0       	ldi	r21, 0x00	; 0
    46fa:	bc 01       	movw	r22, r24
    46fc:	cd 01       	movw	r24, r26
    46fe:	0e 94 99 27 	call	0x4f32	; 0x4f32 <__udivmodsi4>
    4702:	da 01       	movw	r26, r20
    4704:	c9 01       	movw	r24, r18
    4706:	80 5d       	subi	r24, 0xD0	; 208
    4708:	0e 94 db 1c 	call	0x39b6	; 0x39b6 <LCD_KIT_voidDisplayCharacter>
			LCD_KIT_voidDisplayCharacter((Number/10000)%10+48);
    470c:	89 81       	ldd	r24, Y+1	; 0x01
    470e:	9a 81       	ldd	r25, Y+2	; 0x02
    4710:	ab 81       	ldd	r26, Y+3	; 0x03
    4712:	bc 81       	ldd	r27, Y+4	; 0x04
    4714:	20 e1       	ldi	r18, 0x10	; 16
    4716:	37 e2       	ldi	r19, 0x27	; 39
    4718:	40 e0       	ldi	r20, 0x00	; 0
    471a:	50 e0       	ldi	r21, 0x00	; 0
    471c:	bc 01       	movw	r22, r24
    471e:	cd 01       	movw	r24, r26
    4720:	0e 94 99 27 	call	0x4f32	; 0x4f32 <__udivmodsi4>
    4724:	da 01       	movw	r26, r20
    4726:	c9 01       	movw	r24, r18
    4728:	2a e0       	ldi	r18, 0x0A	; 10
    472a:	30 e0       	ldi	r19, 0x00	; 0
    472c:	40 e0       	ldi	r20, 0x00	; 0
    472e:	50 e0       	ldi	r21, 0x00	; 0
    4730:	bc 01       	movw	r22, r24
    4732:	cd 01       	movw	r24, r26
    4734:	0e 94 99 27 	call	0x4f32	; 0x4f32 <__udivmodsi4>
    4738:	dc 01       	movw	r26, r24
    473a:	cb 01       	movw	r24, r22
    473c:	80 5d       	subi	r24, 0xD0	; 208
    473e:	0e 94 db 1c 	call	0x39b6	; 0x39b6 <LCD_KIT_voidDisplayCharacter>
			LCD_KIT_voidDisplayCharacter((Number/1000)%10+48);
    4742:	89 81       	ldd	r24, Y+1	; 0x01
    4744:	9a 81       	ldd	r25, Y+2	; 0x02
    4746:	ab 81       	ldd	r26, Y+3	; 0x03
    4748:	bc 81       	ldd	r27, Y+4	; 0x04
    474a:	28 ee       	ldi	r18, 0xE8	; 232
    474c:	33 e0       	ldi	r19, 0x03	; 3
    474e:	40 e0       	ldi	r20, 0x00	; 0
    4750:	50 e0       	ldi	r21, 0x00	; 0
    4752:	bc 01       	movw	r22, r24
    4754:	cd 01       	movw	r24, r26
    4756:	0e 94 99 27 	call	0x4f32	; 0x4f32 <__udivmodsi4>
    475a:	da 01       	movw	r26, r20
    475c:	c9 01       	movw	r24, r18
    475e:	2a e0       	ldi	r18, 0x0A	; 10
    4760:	30 e0       	ldi	r19, 0x00	; 0
    4762:	40 e0       	ldi	r20, 0x00	; 0
    4764:	50 e0       	ldi	r21, 0x00	; 0
    4766:	bc 01       	movw	r22, r24
    4768:	cd 01       	movw	r24, r26
    476a:	0e 94 99 27 	call	0x4f32	; 0x4f32 <__udivmodsi4>
    476e:	dc 01       	movw	r26, r24
    4770:	cb 01       	movw	r24, r22
    4772:	80 5d       	subi	r24, 0xD0	; 208
    4774:	0e 94 db 1c 	call	0x39b6	; 0x39b6 <LCD_KIT_voidDisplayCharacter>
			LCD_KIT_voidDisplayCharacter((Number/100)%10+48);
    4778:	89 81       	ldd	r24, Y+1	; 0x01
    477a:	9a 81       	ldd	r25, Y+2	; 0x02
    477c:	ab 81       	ldd	r26, Y+3	; 0x03
    477e:	bc 81       	ldd	r27, Y+4	; 0x04
    4780:	24 e6       	ldi	r18, 0x64	; 100
    4782:	30 e0       	ldi	r19, 0x00	; 0
    4784:	40 e0       	ldi	r20, 0x00	; 0
    4786:	50 e0       	ldi	r21, 0x00	; 0
    4788:	bc 01       	movw	r22, r24
    478a:	cd 01       	movw	r24, r26
    478c:	0e 94 99 27 	call	0x4f32	; 0x4f32 <__udivmodsi4>
    4790:	da 01       	movw	r26, r20
    4792:	c9 01       	movw	r24, r18
    4794:	2a e0       	ldi	r18, 0x0A	; 10
    4796:	30 e0       	ldi	r19, 0x00	; 0
    4798:	40 e0       	ldi	r20, 0x00	; 0
    479a:	50 e0       	ldi	r21, 0x00	; 0
    479c:	bc 01       	movw	r22, r24
    479e:	cd 01       	movw	r24, r26
    47a0:	0e 94 99 27 	call	0x4f32	; 0x4f32 <__udivmodsi4>
    47a4:	dc 01       	movw	r26, r24
    47a6:	cb 01       	movw	r24, r22
    47a8:	80 5d       	subi	r24, 0xD0	; 208
    47aa:	0e 94 db 1c 	call	0x39b6	; 0x39b6 <LCD_KIT_voidDisplayCharacter>
			LCD_KIT_voidDisplayCharacter((Number/10)%10+48);
    47ae:	89 81       	ldd	r24, Y+1	; 0x01
    47b0:	9a 81       	ldd	r25, Y+2	; 0x02
    47b2:	ab 81       	ldd	r26, Y+3	; 0x03
    47b4:	bc 81       	ldd	r27, Y+4	; 0x04
    47b6:	2a e0       	ldi	r18, 0x0A	; 10
    47b8:	30 e0       	ldi	r19, 0x00	; 0
    47ba:	40 e0       	ldi	r20, 0x00	; 0
    47bc:	50 e0       	ldi	r21, 0x00	; 0
    47be:	bc 01       	movw	r22, r24
    47c0:	cd 01       	movw	r24, r26
    47c2:	0e 94 99 27 	call	0x4f32	; 0x4f32 <__udivmodsi4>
    47c6:	da 01       	movw	r26, r20
    47c8:	c9 01       	movw	r24, r18
    47ca:	2a e0       	ldi	r18, 0x0A	; 10
    47cc:	30 e0       	ldi	r19, 0x00	; 0
    47ce:	40 e0       	ldi	r20, 0x00	; 0
    47d0:	50 e0       	ldi	r21, 0x00	; 0
    47d2:	bc 01       	movw	r22, r24
    47d4:	cd 01       	movw	r24, r26
    47d6:	0e 94 99 27 	call	0x4f32	; 0x4f32 <__udivmodsi4>
    47da:	dc 01       	movw	r26, r24
    47dc:	cb 01       	movw	r24, r22
    47de:	80 5d       	subi	r24, 0xD0	; 208
    47e0:	0e 94 db 1c 	call	0x39b6	; 0x39b6 <LCD_KIT_voidDisplayCharacter>
			LCD_KIT_voidDisplayCharacter(Number%10+48);
    47e4:	89 81       	ldd	r24, Y+1	; 0x01
    47e6:	9a 81       	ldd	r25, Y+2	; 0x02
    47e8:	ab 81       	ldd	r26, Y+3	; 0x03
    47ea:	bc 81       	ldd	r27, Y+4	; 0x04
    47ec:	2a e0       	ldi	r18, 0x0A	; 10
    47ee:	30 e0       	ldi	r19, 0x00	; 0
    47f0:	40 e0       	ldi	r20, 0x00	; 0
    47f2:	50 e0       	ldi	r21, 0x00	; 0
    47f4:	bc 01       	movw	r22, r24
    47f6:	cd 01       	movw	r24, r26
    47f8:	0e 94 99 27 	call	0x4f32	; 0x4f32 <__udivmodsi4>
    47fc:	dc 01       	movw	r26, r24
    47fe:	cb 01       	movw	r24, r22
    4800:	80 5d       	subi	r24, 0xD0	; 208
    4802:	0e 94 db 1c 	call	0x39b6	; 0x39b6 <LCD_KIT_voidDisplayCharacter>
    4806:	b6 c0       	rjmp	.+364    	; 0x4974 <LCD_KIT_voidDisplayBigNumber+0x58e>
		}
	else if(Number<=9999999)
    4808:	89 81       	ldd	r24, Y+1	; 0x01
    480a:	9a 81       	ldd	r25, Y+2	; 0x02
    480c:	ab 81       	ldd	r26, Y+3	; 0x03
    480e:	bc 81       	ldd	r27, Y+4	; 0x04
    4810:	80 38       	cpi	r24, 0x80	; 128
    4812:	26 e9       	ldi	r18, 0x96	; 150
    4814:	92 07       	cpc	r25, r18
    4816:	28 e9       	ldi	r18, 0x98	; 152
    4818:	a2 07       	cpc	r26, r18
    481a:	20 e0       	ldi	r18, 0x00	; 0
    481c:	b2 07       	cpc	r27, r18
    481e:	08 f0       	brcs	.+2      	; 0x4822 <LCD_KIT_voidDisplayBigNumber+0x43c>
    4820:	a9 c0       	rjmp	.+338    	; 0x4974 <LCD_KIT_voidDisplayBigNumber+0x58e>
			{
				LCD_KIT_voidDisplayCharacter(Number/1000000+48);
    4822:	89 81       	ldd	r24, Y+1	; 0x01
    4824:	9a 81       	ldd	r25, Y+2	; 0x02
    4826:	ab 81       	ldd	r26, Y+3	; 0x03
    4828:	bc 81       	ldd	r27, Y+4	; 0x04
    482a:	20 e4       	ldi	r18, 0x40	; 64
    482c:	32 e4       	ldi	r19, 0x42	; 66
    482e:	4f e0       	ldi	r20, 0x0F	; 15
    4830:	50 e0       	ldi	r21, 0x00	; 0
    4832:	bc 01       	movw	r22, r24
    4834:	cd 01       	movw	r24, r26
    4836:	0e 94 99 27 	call	0x4f32	; 0x4f32 <__udivmodsi4>
    483a:	da 01       	movw	r26, r20
    483c:	c9 01       	movw	r24, r18
    483e:	80 5d       	subi	r24, 0xD0	; 208
    4840:	0e 94 db 1c 	call	0x39b6	; 0x39b6 <LCD_KIT_voidDisplayCharacter>
				LCD_KIT_voidDisplayCharacter((Number/100000)%10+48);
    4844:	89 81       	ldd	r24, Y+1	; 0x01
    4846:	9a 81       	ldd	r25, Y+2	; 0x02
    4848:	ab 81       	ldd	r26, Y+3	; 0x03
    484a:	bc 81       	ldd	r27, Y+4	; 0x04
    484c:	20 ea       	ldi	r18, 0xA0	; 160
    484e:	36 e8       	ldi	r19, 0x86	; 134
    4850:	41 e0       	ldi	r20, 0x01	; 1
    4852:	50 e0       	ldi	r21, 0x00	; 0
    4854:	bc 01       	movw	r22, r24
    4856:	cd 01       	movw	r24, r26
    4858:	0e 94 99 27 	call	0x4f32	; 0x4f32 <__udivmodsi4>
    485c:	da 01       	movw	r26, r20
    485e:	c9 01       	movw	r24, r18
    4860:	2a e0       	ldi	r18, 0x0A	; 10
    4862:	30 e0       	ldi	r19, 0x00	; 0
    4864:	40 e0       	ldi	r20, 0x00	; 0
    4866:	50 e0       	ldi	r21, 0x00	; 0
    4868:	bc 01       	movw	r22, r24
    486a:	cd 01       	movw	r24, r26
    486c:	0e 94 99 27 	call	0x4f32	; 0x4f32 <__udivmodsi4>
    4870:	dc 01       	movw	r26, r24
    4872:	cb 01       	movw	r24, r22
    4874:	80 5d       	subi	r24, 0xD0	; 208
    4876:	0e 94 db 1c 	call	0x39b6	; 0x39b6 <LCD_KIT_voidDisplayCharacter>
				LCD_KIT_voidDisplayCharacter((Number/10000)%10+48);
    487a:	89 81       	ldd	r24, Y+1	; 0x01
    487c:	9a 81       	ldd	r25, Y+2	; 0x02
    487e:	ab 81       	ldd	r26, Y+3	; 0x03
    4880:	bc 81       	ldd	r27, Y+4	; 0x04
    4882:	20 e1       	ldi	r18, 0x10	; 16
    4884:	37 e2       	ldi	r19, 0x27	; 39
    4886:	40 e0       	ldi	r20, 0x00	; 0
    4888:	50 e0       	ldi	r21, 0x00	; 0
    488a:	bc 01       	movw	r22, r24
    488c:	cd 01       	movw	r24, r26
    488e:	0e 94 99 27 	call	0x4f32	; 0x4f32 <__udivmodsi4>
    4892:	da 01       	movw	r26, r20
    4894:	c9 01       	movw	r24, r18
    4896:	2a e0       	ldi	r18, 0x0A	; 10
    4898:	30 e0       	ldi	r19, 0x00	; 0
    489a:	40 e0       	ldi	r20, 0x00	; 0
    489c:	50 e0       	ldi	r21, 0x00	; 0
    489e:	bc 01       	movw	r22, r24
    48a0:	cd 01       	movw	r24, r26
    48a2:	0e 94 99 27 	call	0x4f32	; 0x4f32 <__udivmodsi4>
    48a6:	dc 01       	movw	r26, r24
    48a8:	cb 01       	movw	r24, r22
    48aa:	80 5d       	subi	r24, 0xD0	; 208
    48ac:	0e 94 db 1c 	call	0x39b6	; 0x39b6 <LCD_KIT_voidDisplayCharacter>
				LCD_KIT_voidDisplayCharacter((Number/1000)%10+48);
    48b0:	89 81       	ldd	r24, Y+1	; 0x01
    48b2:	9a 81       	ldd	r25, Y+2	; 0x02
    48b4:	ab 81       	ldd	r26, Y+3	; 0x03
    48b6:	bc 81       	ldd	r27, Y+4	; 0x04
    48b8:	28 ee       	ldi	r18, 0xE8	; 232
    48ba:	33 e0       	ldi	r19, 0x03	; 3
    48bc:	40 e0       	ldi	r20, 0x00	; 0
    48be:	50 e0       	ldi	r21, 0x00	; 0
    48c0:	bc 01       	movw	r22, r24
    48c2:	cd 01       	movw	r24, r26
    48c4:	0e 94 99 27 	call	0x4f32	; 0x4f32 <__udivmodsi4>
    48c8:	da 01       	movw	r26, r20
    48ca:	c9 01       	movw	r24, r18
    48cc:	2a e0       	ldi	r18, 0x0A	; 10
    48ce:	30 e0       	ldi	r19, 0x00	; 0
    48d0:	40 e0       	ldi	r20, 0x00	; 0
    48d2:	50 e0       	ldi	r21, 0x00	; 0
    48d4:	bc 01       	movw	r22, r24
    48d6:	cd 01       	movw	r24, r26
    48d8:	0e 94 99 27 	call	0x4f32	; 0x4f32 <__udivmodsi4>
    48dc:	dc 01       	movw	r26, r24
    48de:	cb 01       	movw	r24, r22
    48e0:	80 5d       	subi	r24, 0xD0	; 208
    48e2:	0e 94 db 1c 	call	0x39b6	; 0x39b6 <LCD_KIT_voidDisplayCharacter>
				LCD_KIT_voidDisplayCharacter((Number/100)%10+48);
    48e6:	89 81       	ldd	r24, Y+1	; 0x01
    48e8:	9a 81       	ldd	r25, Y+2	; 0x02
    48ea:	ab 81       	ldd	r26, Y+3	; 0x03
    48ec:	bc 81       	ldd	r27, Y+4	; 0x04
    48ee:	24 e6       	ldi	r18, 0x64	; 100
    48f0:	30 e0       	ldi	r19, 0x00	; 0
    48f2:	40 e0       	ldi	r20, 0x00	; 0
    48f4:	50 e0       	ldi	r21, 0x00	; 0
    48f6:	bc 01       	movw	r22, r24
    48f8:	cd 01       	movw	r24, r26
    48fa:	0e 94 99 27 	call	0x4f32	; 0x4f32 <__udivmodsi4>
    48fe:	da 01       	movw	r26, r20
    4900:	c9 01       	movw	r24, r18
    4902:	2a e0       	ldi	r18, 0x0A	; 10
    4904:	30 e0       	ldi	r19, 0x00	; 0
    4906:	40 e0       	ldi	r20, 0x00	; 0
    4908:	50 e0       	ldi	r21, 0x00	; 0
    490a:	bc 01       	movw	r22, r24
    490c:	cd 01       	movw	r24, r26
    490e:	0e 94 99 27 	call	0x4f32	; 0x4f32 <__udivmodsi4>
    4912:	dc 01       	movw	r26, r24
    4914:	cb 01       	movw	r24, r22
    4916:	80 5d       	subi	r24, 0xD0	; 208
    4918:	0e 94 db 1c 	call	0x39b6	; 0x39b6 <LCD_KIT_voidDisplayCharacter>
				LCD_KIT_voidDisplayCharacter((Number/10)%10+48);
    491c:	89 81       	ldd	r24, Y+1	; 0x01
    491e:	9a 81       	ldd	r25, Y+2	; 0x02
    4920:	ab 81       	ldd	r26, Y+3	; 0x03
    4922:	bc 81       	ldd	r27, Y+4	; 0x04
    4924:	2a e0       	ldi	r18, 0x0A	; 10
    4926:	30 e0       	ldi	r19, 0x00	; 0
    4928:	40 e0       	ldi	r20, 0x00	; 0
    492a:	50 e0       	ldi	r21, 0x00	; 0
    492c:	bc 01       	movw	r22, r24
    492e:	cd 01       	movw	r24, r26
    4930:	0e 94 99 27 	call	0x4f32	; 0x4f32 <__udivmodsi4>
    4934:	da 01       	movw	r26, r20
    4936:	c9 01       	movw	r24, r18
    4938:	2a e0       	ldi	r18, 0x0A	; 10
    493a:	30 e0       	ldi	r19, 0x00	; 0
    493c:	40 e0       	ldi	r20, 0x00	; 0
    493e:	50 e0       	ldi	r21, 0x00	; 0
    4940:	bc 01       	movw	r22, r24
    4942:	cd 01       	movw	r24, r26
    4944:	0e 94 99 27 	call	0x4f32	; 0x4f32 <__udivmodsi4>
    4948:	dc 01       	movw	r26, r24
    494a:	cb 01       	movw	r24, r22
    494c:	80 5d       	subi	r24, 0xD0	; 208
    494e:	0e 94 db 1c 	call	0x39b6	; 0x39b6 <LCD_KIT_voidDisplayCharacter>
				LCD_KIT_voidDisplayCharacter(Number%10+48);
    4952:	89 81       	ldd	r24, Y+1	; 0x01
    4954:	9a 81       	ldd	r25, Y+2	; 0x02
    4956:	ab 81       	ldd	r26, Y+3	; 0x03
    4958:	bc 81       	ldd	r27, Y+4	; 0x04
    495a:	2a e0       	ldi	r18, 0x0A	; 10
    495c:	30 e0       	ldi	r19, 0x00	; 0
    495e:	40 e0       	ldi	r20, 0x00	; 0
    4960:	50 e0       	ldi	r21, 0x00	; 0
    4962:	bc 01       	movw	r22, r24
    4964:	cd 01       	movw	r24, r26
    4966:	0e 94 99 27 	call	0x4f32	; 0x4f32 <__udivmodsi4>
    496a:	dc 01       	movw	r26, r24
    496c:	cb 01       	movw	r24, r22
    496e:	80 5d       	subi	r24, 0xD0	; 208
    4970:	0e 94 db 1c 	call	0x39b6	; 0x39b6 <LCD_KIT_voidDisplayCharacter>
			}

	return;
}
    4974:	0f 90       	pop	r0
    4976:	0f 90       	pop	r0
    4978:	0f 90       	pop	r0
    497a:	0f 90       	pop	r0
    497c:	cf 91       	pop	r28
    497e:	df 91       	pop	r29
    4980:	08 95       	ret

00004982 <LCD_KIT_voidStoreCustomCharacter>:

void LCD_KIT_voidStoreCustomCharacter(u8 *Character, u8 Address)
{
    4982:	df 93       	push	r29
    4984:	cf 93       	push	r28
    4986:	00 d0       	rcall	.+0      	; 0x4988 <LCD_KIT_voidStoreCustomCharacter+0x6>
    4988:	00 d0       	rcall	.+0      	; 0x498a <LCD_KIT_voidStoreCustomCharacter+0x8>
    498a:	cd b7       	in	r28, 0x3d	; 61
    498c:	de b7       	in	r29, 0x3e	; 62
    498e:	9b 83       	std	Y+3, r25	; 0x03
    4990:	8a 83       	std	Y+2, r24	; 0x02
    4992:	6c 83       	std	Y+4, r22	; 0x04
	LCD_KIT_voidRunCommand(Address);
    4994:	8c 81       	ldd	r24, Y+4	; 0x04
    4996:	0e 94 4a 1f 	call	0x3e94	; 0x3e94 <LCD_KIT_voidRunCommand>

	for(u8 j=0;j<8;j++)
    499a:	19 82       	std	Y+1, r1	; 0x01
    499c:	0e c0       	rjmp	.+28     	; 0x49ba <LCD_KIT_voidStoreCustomCharacter+0x38>
	{
		LCD_KIT_voidDisplayCharacter(Character[j]);
    499e:	89 81       	ldd	r24, Y+1	; 0x01
    49a0:	28 2f       	mov	r18, r24
    49a2:	30 e0       	ldi	r19, 0x00	; 0
    49a4:	8a 81       	ldd	r24, Y+2	; 0x02
    49a6:	9b 81       	ldd	r25, Y+3	; 0x03
    49a8:	fc 01       	movw	r30, r24
    49aa:	e2 0f       	add	r30, r18
    49ac:	f3 1f       	adc	r31, r19
    49ae:	80 81       	ld	r24, Z
    49b0:	0e 94 db 1c 	call	0x39b6	; 0x39b6 <LCD_KIT_voidDisplayCharacter>

void LCD_KIT_voidStoreCustomCharacter(u8 *Character, u8 Address)
{
	LCD_KIT_voidRunCommand(Address);

	for(u8 j=0;j<8;j++)
    49b4:	89 81       	ldd	r24, Y+1	; 0x01
    49b6:	8f 5f       	subi	r24, 0xFF	; 255
    49b8:	89 83       	std	Y+1, r24	; 0x01
    49ba:	89 81       	ldd	r24, Y+1	; 0x01
    49bc:	88 30       	cpi	r24, 0x08	; 8
    49be:	78 f3       	brcs	.-34     	; 0x499e <LCD_KIT_voidStoreCustomCharacter+0x1c>
	{
		LCD_KIT_voidDisplayCharacter(Character[j]);
	}

	return;
}
    49c0:	0f 90       	pop	r0
    49c2:	0f 90       	pop	r0
    49c4:	0f 90       	pop	r0
    49c6:	0f 90       	pop	r0
    49c8:	cf 91       	pop	r28
    49ca:	df 91       	pop	r29
    49cc:	08 95       	ret

000049ce <KEYBAD_voidInitialization>:

#include "KEYBAD_int.h"


void KEYBAD_voidInitialization(void)
{
    49ce:	df 93       	push	r29
    49d0:	cf 93       	push	r28
    49d2:	cd b7       	in	r28, 0x3d	; 61
    49d4:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(PortC,Pin5,Input);
    49d6:	82 e0       	ldi	r24, 0x02	; 2
    49d8:	65 e0       	ldi	r22, 0x05	; 5
    49da:	40 e0       	ldi	r20, 0x00	; 0
    49dc:	0e 94 17 0b 	call	0x162e	; 0x162e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PortC,Pin4,Input);
    49e0:	82 e0       	ldi	r24, 0x02	; 2
    49e2:	64 e0       	ldi	r22, 0x04	; 4
    49e4:	40 e0       	ldi	r20, 0x00	; 0
    49e6:	0e 94 17 0b 	call	0x162e	; 0x162e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PortC,Pin3,Input);
    49ea:	82 e0       	ldi	r24, 0x02	; 2
    49ec:	63 e0       	ldi	r22, 0x03	; 3
    49ee:	40 e0       	ldi	r20, 0x00	; 0
    49f0:	0e 94 17 0b 	call	0x162e	; 0x162e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PortC,Pin2,Input);
    49f4:	82 e0       	ldi	r24, 0x02	; 2
    49f6:	62 e0       	ldi	r22, 0x02	; 2
    49f8:	40 e0       	ldi	r20, 0x00	; 0
    49fa:	0e 94 17 0b 	call	0x162e	; 0x162e <DIO_voidSetPinDirection>

	DIO_voidSetPinValue(PortC,Pin5,High);
    49fe:	82 e0       	ldi	r24, 0x02	; 2
    4a00:	65 e0       	ldi	r22, 0x05	; 5
    4a02:	41 e0       	ldi	r20, 0x01	; 1
    4a04:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PortC,Pin4,High);
    4a08:	82 e0       	ldi	r24, 0x02	; 2
    4a0a:	64 e0       	ldi	r22, 0x04	; 4
    4a0c:	41 e0       	ldi	r20, 0x01	; 1
    4a0e:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PortC,Pin3,High);
    4a12:	82 e0       	ldi	r24, 0x02	; 2
    4a14:	63 e0       	ldi	r22, 0x03	; 3
    4a16:	41 e0       	ldi	r20, 0x01	; 1
    4a18:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PortC,Pin2,High);
    4a1c:	82 e0       	ldi	r24, 0x02	; 2
    4a1e:	62 e0       	ldi	r22, 0x02	; 2
    4a20:	41 e0       	ldi	r20, 0x01	; 1
    4a22:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_voidSetPinValue>




	DIO_voidSetPinDirection(PortD,Pin7,Output);
    4a26:	83 e0       	ldi	r24, 0x03	; 3
    4a28:	67 e0       	ldi	r22, 0x07	; 7
    4a2a:	41 e0       	ldi	r20, 0x01	; 1
    4a2c:	0e 94 17 0b 	call	0x162e	; 0x162e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PortD,Pin6,Output);
    4a30:	83 e0       	ldi	r24, 0x03	; 3
    4a32:	66 e0       	ldi	r22, 0x06	; 6
    4a34:	41 e0       	ldi	r20, 0x01	; 1
    4a36:	0e 94 17 0b 	call	0x162e	; 0x162e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PortD,Pin5,Output);
    4a3a:	83 e0       	ldi	r24, 0x03	; 3
    4a3c:	65 e0       	ldi	r22, 0x05	; 5
    4a3e:	41 e0       	ldi	r20, 0x01	; 1
    4a40:	0e 94 17 0b 	call	0x162e	; 0x162e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PortD,Pin3,Output);
    4a44:	83 e0       	ldi	r24, 0x03	; 3
    4a46:	63 e0       	ldi	r22, 0x03	; 3
    4a48:	41 e0       	ldi	r20, 0x01	; 1
    4a4a:	0e 94 17 0b 	call	0x162e	; 0x162e <DIO_voidSetPinDirection>

	DIO_voidSetPinValue(PortD,Pin7,High);
    4a4e:	83 e0       	ldi	r24, 0x03	; 3
    4a50:	67 e0       	ldi	r22, 0x07	; 7
    4a52:	41 e0       	ldi	r20, 0x01	; 1
    4a54:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PortD,Pin6,High);
    4a58:	83 e0       	ldi	r24, 0x03	; 3
    4a5a:	66 e0       	ldi	r22, 0x06	; 6
    4a5c:	41 e0       	ldi	r20, 0x01	; 1
    4a5e:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PortD,Pin5,High);
    4a62:	83 e0       	ldi	r24, 0x03	; 3
    4a64:	65 e0       	ldi	r22, 0x05	; 5
    4a66:	41 e0       	ldi	r20, 0x01	; 1
    4a68:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PortD,Pin3,High);
    4a6c:	83 e0       	ldi	r24, 0x03	; 3
    4a6e:	63 e0       	ldi	r22, 0x03	; 3
    4a70:	41 e0       	ldi	r20, 0x01	; 1
    4a72:	0e 94 13 0c 	call	0x1826	; 0x1826 <DIO_voidSetPinValue>

	//return;
}
    4a76:	cf 91       	pop	r28
    4a78:	df 91       	pop	r29
    4a7a:	08 95       	ret

00004a7c <KEYBAD_voidGetPressedKey>:

void KEYBAD_voidGetPressedKey(u8 *Row, u8 *Col,u8 *Flag)
{
    4a7c:	df 93       	push	r29
    4a7e:	cf 93       	push	r28
    4a80:	cd b7       	in	r28, 0x3d	; 61
    4a82:	de b7       	in	r29, 0x3e	; 62
    4a84:	28 97       	sbiw	r28, 0x08	; 8
    4a86:	0f b6       	in	r0, 0x3f	; 63
    4a88:	f8 94       	cli
    4a8a:	de bf       	out	0x3e, r29	; 62
    4a8c:	0f be       	out	0x3f, r0	; 63
    4a8e:	cd bf       	out	0x3d, r28	; 61
    4a90:	9c 83       	std	Y+4, r25	; 0x04
    4a92:	8b 83       	std	Y+3, r24	; 0x03
    4a94:	7e 83       	std	Y+6, r23	; 0x06
    4a96:	6d 83       	std	Y+5, r22	; 0x05
    4a98:	58 87       	std	Y+8, r21	; 0x08
    4a9a:	4f 83       	std	Y+7, r20	; 0x07
	for(u8 i=0;i<5;i++)
    4a9c:	1a 82       	std	Y+2, r1	; 0x02
    4a9e:	3f c0       	rjmp	.+126    	; 0x4b1e <KEYBAD_voidGetPressedKey+0xa2>
	{
		if(i==1)
    4aa0:	8a 81       	ldd	r24, Y+2	; 0x02
    4aa2:	81 30       	cpi	r24, 0x01	; 1
    4aa4:	c9 f1       	breq	.+114    	; 0x4b18 <KEYBAD_voidGetPressedKey+0x9c>
		{	continue;	}

		DIO_voidSetPortValueMask(PortD,~(1<<(i+3)),0x17);
    4aa6:	8a 81       	ldd	r24, Y+2	; 0x02
    4aa8:	88 2f       	mov	r24, r24
    4aaa:	90 e0       	ldi	r25, 0x00	; 0
    4aac:	9c 01       	movw	r18, r24
    4aae:	2d 5f       	subi	r18, 0xFD	; 253
    4ab0:	3f 4f       	sbci	r19, 0xFF	; 255
    4ab2:	81 e0       	ldi	r24, 0x01	; 1
    4ab4:	90 e0       	ldi	r25, 0x00	; 0
    4ab6:	02 c0       	rjmp	.+4      	; 0x4abc <KEYBAD_voidGetPressedKey+0x40>
    4ab8:	88 0f       	add	r24, r24
    4aba:	99 1f       	adc	r25, r25
    4abc:	2a 95       	dec	r18
    4abe:	e2 f7       	brpl	.-8      	; 0x4ab8 <KEYBAD_voidGetPressedKey+0x3c>
    4ac0:	98 2f       	mov	r25, r24
    4ac2:	90 95       	com	r25
    4ac4:	83 e0       	ldi	r24, 0x03	; 3
    4ac6:	69 2f       	mov	r22, r25
    4ac8:	47 e1       	ldi	r20, 0x17	; 23
    4aca:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <DIO_voidSetPortValueMask>

		for(u8 j=0;j<4;j++)
    4ace:	19 82       	std	Y+1, r1	; 0x01
    4ad0:	20 c0       	rjmp	.+64     	; 0x4b12 <KEYBAD_voidGetPressedKey+0x96>
		{
			if(!DIO_u8GetPinValue(PortC,j+2))
    4ad2:	89 81       	ldd	r24, Y+1	; 0x01
    4ad4:	98 2f       	mov	r25, r24
    4ad6:	9e 5f       	subi	r25, 0xFE	; 254
    4ad8:	82 e0       	ldi	r24, 0x02	; 2
    4ada:	69 2f       	mov	r22, r25
    4adc:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <DIO_u8GetPinValue>
    4ae0:	88 23       	and	r24, r24
    4ae2:	a1 f4       	brne	.+40     	; 0x4b0c <KEYBAD_voidGetPressedKey+0x90>
			{
				*Row=3-j;
    4ae4:	93 e0       	ldi	r25, 0x03	; 3
    4ae6:	89 81       	ldd	r24, Y+1	; 0x01
    4ae8:	29 2f       	mov	r18, r25
    4aea:	28 1b       	sub	r18, r24
    4aec:	82 2f       	mov	r24, r18
    4aee:	eb 81       	ldd	r30, Y+3	; 0x03
    4af0:	fc 81       	ldd	r31, Y+4	; 0x04
    4af2:	80 83       	st	Z, r24
				*Col=4-i;
    4af4:	94 e0       	ldi	r25, 0x04	; 4
    4af6:	8a 81       	ldd	r24, Y+2	; 0x02
    4af8:	29 2f       	mov	r18, r25
    4afa:	28 1b       	sub	r18, r24
    4afc:	82 2f       	mov	r24, r18
    4afe:	ed 81       	ldd	r30, Y+5	; 0x05
    4b00:	fe 81       	ldd	r31, Y+6	; 0x06
    4b02:	80 83       	st	Z, r24

				*Flag=1;
    4b04:	ef 81       	ldd	r30, Y+7	; 0x07
    4b06:	f8 85       	ldd	r31, Y+8	; 0x08
    4b08:	81 e0       	ldi	r24, 0x01	; 1
    4b0a:	80 83       	st	Z, r24
		if(i==1)
		{	continue;	}

		DIO_voidSetPortValueMask(PortD,~(1<<(i+3)),0x17);

		for(u8 j=0;j<4;j++)
    4b0c:	89 81       	ldd	r24, Y+1	; 0x01
    4b0e:	8f 5f       	subi	r24, 0xFF	; 255
    4b10:	89 83       	std	Y+1, r24	; 0x01
    4b12:	89 81       	ldd	r24, Y+1	; 0x01
    4b14:	84 30       	cpi	r24, 0x04	; 4
    4b16:	e8 f2       	brcs	.-70     	; 0x4ad2 <KEYBAD_voidGetPressedKey+0x56>
	//return;
}

void KEYBAD_voidGetPressedKey(u8 *Row, u8 *Col,u8 *Flag)
{
	for(u8 i=0;i<5;i++)
    4b18:	8a 81       	ldd	r24, Y+2	; 0x02
    4b1a:	8f 5f       	subi	r24, 0xFF	; 255
    4b1c:	8a 83       	std	Y+2, r24	; 0x02
    4b1e:	8a 81       	ldd	r24, Y+2	; 0x02
    4b20:	85 30       	cpi	r24, 0x05	; 5
    4b22:	08 f4       	brcc	.+2      	; 0x4b26 <KEYBAD_voidGetPressedKey+0xaa>
    4b24:	bd cf       	rjmp	.-134    	; 0x4aa0 <KEYBAD_voidGetPressedKey+0x24>
				*Flag=1;
			}
		}
	}

	DIO_voidSetPortValueMask(PortD,0xFF,0x17);
    4b26:	83 e0       	ldi	r24, 0x03	; 3
    4b28:	6f ef       	ldi	r22, 0xFF	; 255
    4b2a:	47 e1       	ldi	r20, 0x17	; 23
    4b2c:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <DIO_voidSetPortValueMask>

	return;
}
    4b30:	28 96       	adiw	r28, 0x08	; 8
    4b32:	0f b6       	in	r0, 0x3f	; 63
    4b34:	f8 94       	cli
    4b36:	de bf       	out	0x3e, r29	; 62
    4b38:	0f be       	out	0x3f, r0	; 63
    4b3a:	cd bf       	out	0x3d, r28	; 61
    4b3c:	cf 91       	pop	r28
    4b3e:	df 91       	pop	r29
    4b40:	08 95       	ret

00004b42 <SEG_voidInitialization>:

#include "7SEG_int.h"
#include "7SEG_priv.h"

void SEG_voidInitialization(void)
{
    4b42:	df 93       	push	r29
    4b44:	cf 93       	push	r28
    4b46:	cd b7       	in	r28, 0x3d	; 61
    4b48:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPortDirection(SEG_PORT,Output);
    4b4a:	80 e0       	ldi	r24, 0x00	; 0
    4b4c:	61 e0       	ldi	r22, 0x01	; 1
    4b4e:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_voidSetPortDirection>
}
    4b52:	cf 91       	pop	r28
    4b54:	df 91       	pop	r29
    4b56:	08 95       	ret

00004b58 <SEG_voidDisplayNumber>:

void SEG_voidDisplayNumber(u8 Number)
{
    4b58:	df 93       	push	r29
    4b5a:	cf 93       	push	r28
    4b5c:	00 d0       	rcall	.+0      	; 0x4b5e <SEG_voidDisplayNumber+0x6>
    4b5e:	0f 92       	push	r0
    4b60:	cd b7       	in	r28, 0x3d	; 61
    4b62:	de b7       	in	r29, 0x3e	; 62
    4b64:	89 83       	std	Y+1, r24	; 0x01
	switch(Number)
    4b66:	89 81       	ldd	r24, Y+1	; 0x01
    4b68:	28 2f       	mov	r18, r24
    4b6a:	30 e0       	ldi	r19, 0x00	; 0
    4b6c:	3b 83       	std	Y+3, r19	; 0x03
    4b6e:	2a 83       	std	Y+2, r18	; 0x02
    4b70:	8a 81       	ldd	r24, Y+2	; 0x02
    4b72:	9b 81       	ldd	r25, Y+3	; 0x03
    4b74:	84 30       	cpi	r24, 0x04	; 4
    4b76:	91 05       	cpc	r25, r1
    4b78:	09 f4       	brne	.+2      	; 0x4b7c <SEG_voidDisplayNumber+0x24>
    4b7a:	55 c0       	rjmp	.+170    	; 0x4c26 <SEG_voidDisplayNumber+0xce>
    4b7c:	2a 81       	ldd	r18, Y+2	; 0x02
    4b7e:	3b 81       	ldd	r19, Y+3	; 0x03
    4b80:	25 30       	cpi	r18, 0x05	; 5
    4b82:	31 05       	cpc	r19, r1
    4b84:	dc f4       	brge	.+54     	; 0x4bbc <SEG_voidDisplayNumber+0x64>
    4b86:	8a 81       	ldd	r24, Y+2	; 0x02
    4b88:	9b 81       	ldd	r25, Y+3	; 0x03
    4b8a:	81 30       	cpi	r24, 0x01	; 1
    4b8c:	91 05       	cpc	r25, r1
    4b8e:	09 f4       	brne	.+2      	; 0x4b92 <SEG_voidDisplayNumber+0x3a>
    4b90:	3b c0       	rjmp	.+118    	; 0x4c08 <SEG_voidDisplayNumber+0xb0>
    4b92:	2a 81       	ldd	r18, Y+2	; 0x02
    4b94:	3b 81       	ldd	r19, Y+3	; 0x03
    4b96:	22 30       	cpi	r18, 0x02	; 2
    4b98:	31 05       	cpc	r19, r1
    4b9a:	2c f4       	brge	.+10     	; 0x4ba6 <SEG_voidDisplayNumber+0x4e>
    4b9c:	8a 81       	ldd	r24, Y+2	; 0x02
    4b9e:	9b 81       	ldd	r25, Y+3	; 0x03
    4ba0:	00 97       	sbiw	r24, 0x00	; 0
    4ba2:	69 f1       	breq	.+90     	; 0x4bfe <SEG_voidDisplayNumber+0xa6>
    4ba4:	5d c0       	rjmp	.+186    	; 0x4c60 <SEG_voidDisplayNumber+0x108>
    4ba6:	2a 81       	ldd	r18, Y+2	; 0x02
    4ba8:	3b 81       	ldd	r19, Y+3	; 0x03
    4baa:	22 30       	cpi	r18, 0x02	; 2
    4bac:	31 05       	cpc	r19, r1
    4bae:	89 f1       	breq	.+98     	; 0x4c12 <SEG_voidDisplayNumber+0xba>
    4bb0:	8a 81       	ldd	r24, Y+2	; 0x02
    4bb2:	9b 81       	ldd	r25, Y+3	; 0x03
    4bb4:	83 30       	cpi	r24, 0x03	; 3
    4bb6:	91 05       	cpc	r25, r1
    4bb8:	89 f1       	breq	.+98     	; 0x4c1c <SEG_voidDisplayNumber+0xc4>
    4bba:	52 c0       	rjmp	.+164    	; 0x4c60 <SEG_voidDisplayNumber+0x108>
    4bbc:	2a 81       	ldd	r18, Y+2	; 0x02
    4bbe:	3b 81       	ldd	r19, Y+3	; 0x03
    4bc0:	27 30       	cpi	r18, 0x07	; 7
    4bc2:	31 05       	cpc	r19, r1
    4bc4:	09 f4       	brne	.+2      	; 0x4bc8 <SEG_voidDisplayNumber+0x70>
    4bc6:	3e c0       	rjmp	.+124    	; 0x4c44 <SEG_voidDisplayNumber+0xec>
    4bc8:	8a 81       	ldd	r24, Y+2	; 0x02
    4bca:	9b 81       	ldd	r25, Y+3	; 0x03
    4bcc:	88 30       	cpi	r24, 0x08	; 8
    4bce:	91 05       	cpc	r25, r1
    4bd0:	5c f4       	brge	.+22     	; 0x4be8 <SEG_voidDisplayNumber+0x90>
    4bd2:	2a 81       	ldd	r18, Y+2	; 0x02
    4bd4:	3b 81       	ldd	r19, Y+3	; 0x03
    4bd6:	25 30       	cpi	r18, 0x05	; 5
    4bd8:	31 05       	cpc	r19, r1
    4bda:	51 f1       	breq	.+84     	; 0x4c30 <SEG_voidDisplayNumber+0xd8>
    4bdc:	8a 81       	ldd	r24, Y+2	; 0x02
    4bde:	9b 81       	ldd	r25, Y+3	; 0x03
    4be0:	86 30       	cpi	r24, 0x06	; 6
    4be2:	91 05       	cpc	r25, r1
    4be4:	51 f1       	breq	.+84     	; 0x4c3a <SEG_voidDisplayNumber+0xe2>
    4be6:	3c c0       	rjmp	.+120    	; 0x4c60 <SEG_voidDisplayNumber+0x108>
    4be8:	2a 81       	ldd	r18, Y+2	; 0x02
    4bea:	3b 81       	ldd	r19, Y+3	; 0x03
    4bec:	28 30       	cpi	r18, 0x08	; 8
    4bee:	31 05       	cpc	r19, r1
    4bf0:	71 f1       	breq	.+92     	; 0x4c4e <SEG_voidDisplayNumber+0xf6>
    4bf2:	8a 81       	ldd	r24, Y+2	; 0x02
    4bf4:	9b 81       	ldd	r25, Y+3	; 0x03
    4bf6:	89 30       	cpi	r24, 0x09	; 9
    4bf8:	91 05       	cpc	r25, r1
    4bfa:	71 f1       	breq	.+92     	; 0x4c58 <SEG_voidDisplayNumber+0x100>
    4bfc:	31 c0       	rjmp	.+98     	; 0x4c60 <SEG_voidDisplayNumber+0x108>
	{
	case 0 : DIO_voidSetPortValue(SEG_PORT,SEG_Display0_Value); break;
    4bfe:	80 e0       	ldi	r24, 0x00	; 0
    4c00:	6f e3       	ldi	r22, 0x3F	; 63
    4c02:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <DIO_voidSetPortValue>
    4c06:	2c c0       	rjmp	.+88     	; 0x4c60 <SEG_voidDisplayNumber+0x108>
	case 1 : DIO_voidSetPortValue(SEG_PORT,SEG_Display1_Value); break;
    4c08:	80 e0       	ldi	r24, 0x00	; 0
    4c0a:	66 e0       	ldi	r22, 0x06	; 6
    4c0c:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <DIO_voidSetPortValue>
    4c10:	27 c0       	rjmp	.+78     	; 0x4c60 <SEG_voidDisplayNumber+0x108>
	case 2 : DIO_voidSetPortValue(SEG_PORT,SEG_Display2_Value); break;
    4c12:	80 e0       	ldi	r24, 0x00	; 0
    4c14:	6b e5       	ldi	r22, 0x5B	; 91
    4c16:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <DIO_voidSetPortValue>
    4c1a:	22 c0       	rjmp	.+68     	; 0x4c60 <SEG_voidDisplayNumber+0x108>
	case 3 : DIO_voidSetPortValue(SEG_PORT,SEG_Display3_Value); break;
    4c1c:	80 e0       	ldi	r24, 0x00	; 0
    4c1e:	6f e4       	ldi	r22, 0x4F	; 79
    4c20:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <DIO_voidSetPortValue>
    4c24:	1d c0       	rjmp	.+58     	; 0x4c60 <SEG_voidDisplayNumber+0x108>
	case 4 : DIO_voidSetPortValue(SEG_PORT,SEG_Display4_Value); break;
    4c26:	80 e0       	ldi	r24, 0x00	; 0
    4c28:	66 e6       	ldi	r22, 0x66	; 102
    4c2a:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <DIO_voidSetPortValue>
    4c2e:	18 c0       	rjmp	.+48     	; 0x4c60 <SEG_voidDisplayNumber+0x108>
	case 5 : DIO_voidSetPortValue(SEG_PORT,SEG_Display5_Value); break;
    4c30:	80 e0       	ldi	r24, 0x00	; 0
    4c32:	6d e6       	ldi	r22, 0x6D	; 109
    4c34:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <DIO_voidSetPortValue>
    4c38:	13 c0       	rjmp	.+38     	; 0x4c60 <SEG_voidDisplayNumber+0x108>
	case 6 : DIO_voidSetPortValue(SEG_PORT,SEG_Display6_Value); break;
    4c3a:	80 e0       	ldi	r24, 0x00	; 0
    4c3c:	6d e7       	ldi	r22, 0x7D	; 125
    4c3e:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <DIO_voidSetPortValue>
    4c42:	0e c0       	rjmp	.+28     	; 0x4c60 <SEG_voidDisplayNumber+0x108>
	case 7 : DIO_voidSetPortValue(SEG_PORT,SEG_Display7_Value); break;
    4c44:	80 e0       	ldi	r24, 0x00	; 0
    4c46:	67 e4       	ldi	r22, 0x47	; 71
    4c48:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <DIO_voidSetPortValue>
    4c4c:	09 c0       	rjmp	.+18     	; 0x4c60 <SEG_voidDisplayNumber+0x108>
	case 8 : DIO_voidSetPortValue(SEG_PORT,SEG_Display8_Value); break;
    4c4e:	80 e0       	ldi	r24, 0x00	; 0
    4c50:	6f e7       	ldi	r22, 0x7F	; 127
    4c52:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <DIO_voidSetPortValue>
    4c56:	04 c0       	rjmp	.+8      	; 0x4c60 <SEG_voidDisplayNumber+0x108>
	case 9 : DIO_voidSetPortValue(SEG_PORT,SEG_Display9_Value); break;
    4c58:	80 e0       	ldi	r24, 0x00	; 0
    4c5a:	6f e6       	ldi	r22, 0x6F	; 111
    4c5c:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <DIO_voidSetPortValue>
	}
	return;
}
    4c60:	0f 90       	pop	r0
    4c62:	0f 90       	pop	r0
    4c64:	0f 90       	pop	r0
    4c66:	cf 91       	pop	r28
    4c68:	df 91       	pop	r29
    4c6a:	08 95       	ret

00004c6c <Power>:
//}

/*************************KEYPAD Application***********************************/

u16 Power(u8 x , u8 y)
{
    4c6c:	df 93       	push	r29
    4c6e:	cf 93       	push	r28
    4c70:	00 d0       	rcall	.+0      	; 0x4c72 <Power+0x6>
    4c72:	00 d0       	rcall	.+0      	; 0x4c74 <Power+0x8>
    4c74:	0f 92       	push	r0
    4c76:	cd b7       	in	r28, 0x3d	; 61
    4c78:	de b7       	in	r29, 0x3e	; 62
    4c7a:	8a 83       	std	Y+2, r24	; 0x02
    4c7c:	6b 83       	std	Y+3, r22	; 0x03
	u8 res=1;
    4c7e:	81 e0       	ldi	r24, 0x01	; 1
    4c80:	89 83       	std	Y+1, r24	; 0x01

	if(y==0)
    4c82:	8b 81       	ldd	r24, Y+3	; 0x03
    4c84:	88 23       	and	r24, r24
    4c86:	79 f4       	brne	.+30     	; 0x4ca6 <Power+0x3a>
	{
		return res;
    4c88:	89 81       	ldd	r24, Y+1	; 0x01
    4c8a:	28 2f       	mov	r18, r24
    4c8c:	30 e0       	ldi	r19, 0x00	; 0
    4c8e:	3d 83       	std	Y+5, r19	; 0x05
    4c90:	2c 83       	std	Y+4, r18	; 0x04
    4c92:	11 c0       	rjmp	.+34     	; 0x4cb6 <Power+0x4a>
	}

	while(y!=0)
	{
		res*=x;
    4c94:	99 81       	ldd	r25, Y+1	; 0x01
    4c96:	8a 81       	ldd	r24, Y+2	; 0x02
    4c98:	98 9f       	mul	r25, r24
    4c9a:	80 2d       	mov	r24, r0
    4c9c:	11 24       	eor	r1, r1
    4c9e:	89 83       	std	Y+1, r24	; 0x01
		y--;
    4ca0:	8b 81       	ldd	r24, Y+3	; 0x03
    4ca2:	81 50       	subi	r24, 0x01	; 1
    4ca4:	8b 83       	std	Y+3, r24	; 0x03
	if(y==0)
	{
		return res;
	}

	while(y!=0)
    4ca6:	8b 81       	ldd	r24, Y+3	; 0x03
    4ca8:	88 23       	and	r24, r24
    4caa:	a1 f7       	brne	.-24     	; 0x4c94 <Power+0x28>
	{
		res*=x;
		y--;
	}

	return res;
    4cac:	89 81       	ldd	r24, Y+1	; 0x01
    4cae:	28 2f       	mov	r18, r24
    4cb0:	30 e0       	ldi	r19, 0x00	; 0
    4cb2:	3d 83       	std	Y+5, r19	; 0x05
    4cb4:	2c 83       	std	Y+4, r18	; 0x04
    4cb6:	8c 81       	ldd	r24, Y+4	; 0x04
    4cb8:	9d 81       	ldd	r25, Y+5	; 0x05
}
    4cba:	0f 90       	pop	r0
    4cbc:	0f 90       	pop	r0
    4cbe:	0f 90       	pop	r0
    4cc0:	0f 90       	pop	r0
    4cc2:	0f 90       	pop	r0
    4cc4:	cf 91       	pop	r28
    4cc6:	df 91       	pop	r29
    4cc8:	08 95       	ret

00004cca <Timer0_OVF_Interrupt>:

/*************************** Timers *******************************************/

volatile u16 Counter=0;
void Timer0_OVF_Interrupt(void)
{
    4cca:	df 93       	push	r29
    4ccc:	cf 93       	push	r28
    4cce:	cd b7       	in	r28, 0x3d	; 61
    4cd0:	de b7       	in	r29, 0x3e	; 62
	Counter++;
    4cd2:	80 91 8c 01 	lds	r24, 0x018C
    4cd6:	90 91 8d 01 	lds	r25, 0x018D
    4cda:	01 96       	adiw	r24, 0x01	; 1
    4cdc:	90 93 8d 01 	sts	0x018D, r25
    4ce0:	80 93 8c 01 	sts	0x018C, r24
	//TCNT0=6;

	if(Counter==4000)
    4ce4:	80 91 8c 01 	lds	r24, 0x018C
    4ce8:	90 91 8d 01 	lds	r25, 0x018D
    4cec:	2f e0       	ldi	r18, 0x0F	; 15
    4cee:	80 3a       	cpi	r24, 0xA0	; 160
    4cf0:	92 07       	cpc	r25, r18
    4cf2:	41 f4       	brne	.+16     	; 0x4d04 <Timer0_OVF_Interrupt+0x3a>
	{
		DIO_voidTogglePin(PortB,Pin5);
    4cf4:	81 e0       	ldi	r24, 0x01	; 1
    4cf6:	65 e0       	ldi	r22, 0x05	; 5
    4cf8:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <DIO_voidTogglePin>
		Counter=0;
    4cfc:	10 92 8d 01 	sts	0x018D, r1
    4d00:	10 92 8c 01 	sts	0x018C, r1
	}
}
    4d04:	cf 91       	pop	r28
    4d06:	df 91       	pop	r29
    4d08:	08 95       	ret

00004d0a <Timer0_CTC_Interrupt>:

volatile u8 Counter_Seconds=0;
volatile u8 Counter_Minuts=0;
volatile u8 Counter_Hours=0;
void Timer0_CTC_Interrupt(void)
{
    4d0a:	df 93       	push	r29
    4d0c:	cf 93       	push	r28
    4d0e:	cd b7       	in	r28, 0x3d	; 61
    4d10:	de b7       	in	r29, 0x3e	; 62
	Counter++;
    4d12:	80 91 8c 01 	lds	r24, 0x018C
    4d16:	90 91 8d 01 	lds	r25, 0x018D
    4d1a:	01 96       	adiw	r24, 0x01	; 1
    4d1c:	90 93 8d 01 	sts	0x018D, r25
    4d20:	80 93 8c 01 	sts	0x018C, r24

	if(Counter==4000)
    4d24:	80 91 8c 01 	lds	r24, 0x018C
    4d28:	90 91 8d 01 	lds	r25, 0x018D
    4d2c:	2f e0       	ldi	r18, 0x0F	; 15
    4d2e:	80 3a       	cpi	r24, 0xA0	; 160
    4d30:	92 07       	cpc	r25, r18
    4d32:	69 f4       	brne	.+26     	; 0x4d4e <Timer0_CTC_Interrupt+0x44>
	{
		DIO_voidTogglePin(PortB,Pin5);
    4d34:	81 e0       	ldi	r24, 0x01	; 1
    4d36:	65 e0       	ldi	r22, 0x05	; 5
    4d38:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <DIO_voidTogglePin>
		Counter_Seconds++;
    4d3c:	80 91 8e 01 	lds	r24, 0x018E
    4d40:	8f 5f       	subi	r24, 0xFF	; 255
    4d42:	80 93 8e 01 	sts	0x018E, r24
		Counter=0;
    4d46:	10 92 8d 01 	sts	0x018D, r1
    4d4a:	10 92 8c 01 	sts	0x018C, r1
	}
}
    4d4e:	cf 91       	pop	r28
    4d50:	df 91       	pop	r29
    4d52:	08 95       	ret

00004d54 <Timer1_OVF_interrupt>:

u16 OVF_Counter=0;
void Timer1_OVF_interrupt(void)
{
    4d54:	df 93       	push	r29
    4d56:	cf 93       	push	r28
    4d58:	cd b7       	in	r28, 0x3d	; 61
    4d5a:	de b7       	in	r29, 0x3e	; 62
	OVF_Counter++;
    4d5c:	80 91 91 01 	lds	r24, 0x0191
    4d60:	90 91 92 01 	lds	r25, 0x0192
    4d64:	01 96       	adiw	r24, 0x01	; 1
    4d66:	90 93 92 01 	sts	0x0192, r25
    4d6a:	80 93 91 01 	sts	0x0191, r24
//	LCD_KIT_voidDisplayCharacter('*');
//	LCD_KIT_voidDisplayCharacter(OVF_Counter+48);

	SET_BIT(TIFR,TOV1);
    4d6e:	a8 e5       	ldi	r26, 0x58	; 88
    4d70:	b0 e0       	ldi	r27, 0x00	; 0
    4d72:	e8 e5       	ldi	r30, 0x58	; 88
    4d74:	f0 e0       	ldi	r31, 0x00	; 0
    4d76:	80 81       	ld	r24, Z
    4d78:	84 60       	ori	r24, 0x04	; 4
    4d7a:	8c 93       	st	X, r24
}
    4d7c:	cf 91       	pop	r28
    4d7e:	df 91       	pop	r29
    4d80:	08 95       	ret

00004d82 <Timer1_ICR_interrupt>:
volatile u32 T_0=0;
volatile u32 T_1;
volatile u32 T_2;
volatile u32 T_3;
void Timer1_ICR_interrupt(void)
{
    4d82:	df 93       	push	r29
    4d84:	cf 93       	push	r28
    4d86:	cd b7       	in	r28, 0x3d	; 61
    4d88:	de b7       	in	r29, 0x3e	; 62
	if(flag==0)
    4d8a:	80 91 93 01 	lds	r24, 0x0193
    4d8e:	88 23       	and	r24, r24
    4d90:	51 f5       	brne	.+84     	; 0x4de6 <Timer1_ICR_interrupt+0x64>
	{
		T_0=ICR1+OVF_Counter*65536;
    4d92:	e6 e4       	ldi	r30, 0x46	; 70
    4d94:	f0 e0       	ldi	r31, 0x00	; 0
    4d96:	80 81       	ld	r24, Z
    4d98:	91 81       	ldd	r25, Z+1	; 0x01
    4d9a:	9c 01       	movw	r18, r24
    4d9c:	40 e0       	ldi	r20, 0x00	; 0
    4d9e:	50 e0       	ldi	r21, 0x00	; 0
    4da0:	80 91 91 01 	lds	r24, 0x0191
    4da4:	90 91 92 01 	lds	r25, 0x0192
    4da8:	cc 01       	movw	r24, r24
    4daa:	a0 e0       	ldi	r26, 0x00	; 0
    4dac:	b0 e0       	ldi	r27, 0x00	; 0
    4dae:	dc 01       	movw	r26, r24
    4db0:	99 27       	eor	r25, r25
    4db2:	88 27       	eor	r24, r24
    4db4:	82 0f       	add	r24, r18
    4db6:	93 1f       	adc	r25, r19
    4db8:	a4 1f       	adc	r26, r20
    4dba:	b5 1f       	adc	r27, r21
    4dbc:	80 93 94 01 	sts	0x0194, r24
    4dc0:	90 93 95 01 	sts	0x0195, r25
    4dc4:	a0 93 96 01 	sts	0x0196, r26
    4dc8:	b0 93 97 01 	sts	0x0197, r27
//		TCNT1=0;
//		OVF_Counter=0;
		//Timer1_voidCaptureEdgeSelect(Falling_Edge);
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    4dcc:	ae e4       	ldi	r26, 0x4E	; 78
    4dce:	b0 e0       	ldi	r27, 0x00	; 0
    4dd0:	ee e4       	ldi	r30, 0x4E	; 78
    4dd2:	f0 e0       	ldi	r31, 0x00	; 0
    4dd4:	80 81       	ld	r24, Z
    4dd6:	80 64       	ori	r24, 0x40	; 64
    4dd8:	8c 93       	st	X, r24
		flag++;
    4dda:	80 91 93 01 	lds	r24, 0x0193
    4dde:	8f 5f       	subi	r24, 0xFF	; 255
    4de0:	80 93 93 01 	sts	0x0193, r24
    4de4:	86 c0       	rjmp	.+268    	; 0x4ef2 <Timer1_ICR_interrupt+0x170>
	}
	else if(flag==1)
    4de6:	80 91 93 01 	lds	r24, 0x0193
    4dea:	81 30       	cpi	r24, 0x01	; 1
    4dec:	51 f5       	brne	.+84     	; 0x4e42 <Timer1_ICR_interrupt+0xc0>
	{
		T_1=ICR1+OVF_Counter*65536;
    4dee:	e6 e4       	ldi	r30, 0x46	; 70
    4df0:	f0 e0       	ldi	r31, 0x00	; 0
    4df2:	80 81       	ld	r24, Z
    4df4:	91 81       	ldd	r25, Z+1	; 0x01
    4df6:	9c 01       	movw	r18, r24
    4df8:	40 e0       	ldi	r20, 0x00	; 0
    4dfa:	50 e0       	ldi	r21, 0x00	; 0
    4dfc:	80 91 91 01 	lds	r24, 0x0191
    4e00:	90 91 92 01 	lds	r25, 0x0192
    4e04:	cc 01       	movw	r24, r24
    4e06:	a0 e0       	ldi	r26, 0x00	; 0
    4e08:	b0 e0       	ldi	r27, 0x00	; 0
    4e0a:	dc 01       	movw	r26, r24
    4e0c:	99 27       	eor	r25, r25
    4e0e:	88 27       	eor	r24, r24
    4e10:	82 0f       	add	r24, r18
    4e12:	93 1f       	adc	r25, r19
    4e14:	a4 1f       	adc	r26, r20
    4e16:	b5 1f       	adc	r27, r21
    4e18:	80 93 99 01 	sts	0x0199, r24
    4e1c:	90 93 9a 01 	sts	0x019A, r25
    4e20:	a0 93 9b 01 	sts	0x019B, r26
    4e24:	b0 93 9c 01 	sts	0x019C, r27
//		TCNT1=0;
//		OVF_Counter=0;
		//Timer1_voidCaptureEdgeSelect(Rising_Edge);
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
    4e28:	ae e4       	ldi	r26, 0x4E	; 78
    4e2a:	b0 e0       	ldi	r27, 0x00	; 0
    4e2c:	ee e4       	ldi	r30, 0x4E	; 78
    4e2e:	f0 e0       	ldi	r31, 0x00	; 0
    4e30:	80 81       	ld	r24, Z
    4e32:	8f 7b       	andi	r24, 0xBF	; 191
    4e34:	8c 93       	st	X, r24
		flag++;
    4e36:	80 91 93 01 	lds	r24, 0x0193
    4e3a:	8f 5f       	subi	r24, 0xFF	; 255
    4e3c:	80 93 93 01 	sts	0x0193, r24
    4e40:	58 c0       	rjmp	.+176    	; 0x4ef2 <Timer1_ICR_interrupt+0x170>
	}
	else if(flag==2)
    4e42:	80 91 93 01 	lds	r24, 0x0193
    4e46:	82 30       	cpi	r24, 0x02	; 2
    4e48:	51 f5       	brne	.+84     	; 0x4e9e <Timer1_ICR_interrupt+0x11c>
	{
		T_2=ICR1+OVF_Counter*65536;
    4e4a:	e6 e4       	ldi	r30, 0x46	; 70
    4e4c:	f0 e0       	ldi	r31, 0x00	; 0
    4e4e:	80 81       	ld	r24, Z
    4e50:	91 81       	ldd	r25, Z+1	; 0x01
    4e52:	9c 01       	movw	r18, r24
    4e54:	40 e0       	ldi	r20, 0x00	; 0
    4e56:	50 e0       	ldi	r21, 0x00	; 0
    4e58:	80 91 91 01 	lds	r24, 0x0191
    4e5c:	90 91 92 01 	lds	r25, 0x0192
    4e60:	cc 01       	movw	r24, r24
    4e62:	a0 e0       	ldi	r26, 0x00	; 0
    4e64:	b0 e0       	ldi	r27, 0x00	; 0
    4e66:	dc 01       	movw	r26, r24
    4e68:	99 27       	eor	r25, r25
    4e6a:	88 27       	eor	r24, r24
    4e6c:	82 0f       	add	r24, r18
    4e6e:	93 1f       	adc	r25, r19
    4e70:	a4 1f       	adc	r26, r20
    4e72:	b5 1f       	adc	r27, r21
    4e74:	80 93 9d 01 	sts	0x019D, r24
    4e78:	90 93 9e 01 	sts	0x019E, r25
    4e7c:	a0 93 9f 01 	sts	0x019F, r26
    4e80:	b0 93 a0 01 	sts	0x01A0, r27
//		TCNT1=0;
//		OVF_Counter=0;
		//Timer1_voidCaptureEdgeSelect(Falling_Edge);
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    4e84:	ae e4       	ldi	r26, 0x4E	; 78
    4e86:	b0 e0       	ldi	r27, 0x00	; 0
    4e88:	ee e4       	ldi	r30, 0x4E	; 78
    4e8a:	f0 e0       	ldi	r31, 0x00	; 0
    4e8c:	80 81       	ld	r24, Z
    4e8e:	80 64       	ori	r24, 0x40	; 64
    4e90:	8c 93       	st	X, r24
		flag++;
    4e92:	80 91 93 01 	lds	r24, 0x0193
    4e96:	8f 5f       	subi	r24, 0xFF	; 255
    4e98:	80 93 93 01 	sts	0x0193, r24
    4e9c:	2a c0       	rjmp	.+84     	; 0x4ef2 <Timer1_ICR_interrupt+0x170>
	}
	else if(flag==3)
    4e9e:	80 91 93 01 	lds	r24, 0x0193
    4ea2:	83 30       	cpi	r24, 0x03	; 3
    4ea4:	31 f5       	brne	.+76     	; 0x4ef2 <Timer1_ICR_interrupt+0x170>
		{
			T_3=ICR1+OVF_Counter*65536;
    4ea6:	e6 e4       	ldi	r30, 0x46	; 70
    4ea8:	f0 e0       	ldi	r31, 0x00	; 0
    4eaa:	80 81       	ld	r24, Z
    4eac:	91 81       	ldd	r25, Z+1	; 0x01
    4eae:	9c 01       	movw	r18, r24
    4eb0:	40 e0       	ldi	r20, 0x00	; 0
    4eb2:	50 e0       	ldi	r21, 0x00	; 0
    4eb4:	80 91 91 01 	lds	r24, 0x0191
    4eb8:	90 91 92 01 	lds	r25, 0x0192
    4ebc:	cc 01       	movw	r24, r24
    4ebe:	a0 e0       	ldi	r26, 0x00	; 0
    4ec0:	b0 e0       	ldi	r27, 0x00	; 0
    4ec2:	dc 01       	movw	r26, r24
    4ec4:	99 27       	eor	r25, r25
    4ec6:	88 27       	eor	r24, r24
    4ec8:	82 0f       	add	r24, r18
    4eca:	93 1f       	adc	r25, r19
    4ecc:	a4 1f       	adc	r26, r20
    4ece:	b5 1f       	adc	r27, r21
    4ed0:	80 93 a1 01 	sts	0x01A1, r24
    4ed4:	90 93 a2 01 	sts	0x01A2, r25
    4ed8:	a0 93 a3 01 	sts	0x01A3, r26
    4edc:	b0 93 a4 01 	sts	0x01A4, r27
			flag++;
    4ee0:	80 91 93 01 	lds	r24, 0x0193
    4ee4:	8f 5f       	subi	r24, 0xFF	; 255
    4ee6:	80 93 93 01 	sts	0x0193, r24

			Timer1_voidICRInterruptDisable();
    4eea:	0e 94 05 09 	call	0x120a	; 0x120a <Timer1_voidICRInterruptDisable>
			Timer1_voidOVFInterruptDisable();
    4eee:	0e 94 21 09 	call	0x1242	; 0x1242 <Timer1_voidOVFInterruptDisable>
		}
}
    4ef2:	cf 91       	pop	r28
    4ef4:	df 91       	pop	r29
    4ef6:	08 95       	ret

00004ef8 <main>:
//

/****************************** I2C *******************************************/

int main(void)
{
    4ef8:	df 93       	push	r29
    4efa:	cf 93       	push	r28
    4efc:	cd b7       	in	r28, 0x3d	; 61
    4efe:	de b7       	in	r29, 0x3e	; 62
    4f00:	80 e0       	ldi	r24, 0x00	; 0
    4f02:	90 e0       	ldi	r25, 0x00	; 0

}
    4f04:	cf 91       	pop	r28
    4f06:	df 91       	pop	r29
    4f08:	08 95       	ret

00004f0a <__udivmodhi4>:
    4f0a:	aa 1b       	sub	r26, r26
    4f0c:	bb 1b       	sub	r27, r27
    4f0e:	51 e1       	ldi	r21, 0x11	; 17
    4f10:	07 c0       	rjmp	.+14     	; 0x4f20 <__udivmodhi4_ep>

00004f12 <__udivmodhi4_loop>:
    4f12:	aa 1f       	adc	r26, r26
    4f14:	bb 1f       	adc	r27, r27
    4f16:	a6 17       	cp	r26, r22
    4f18:	b7 07       	cpc	r27, r23
    4f1a:	10 f0       	brcs	.+4      	; 0x4f20 <__udivmodhi4_ep>
    4f1c:	a6 1b       	sub	r26, r22
    4f1e:	b7 0b       	sbc	r27, r23

00004f20 <__udivmodhi4_ep>:
    4f20:	88 1f       	adc	r24, r24
    4f22:	99 1f       	adc	r25, r25
    4f24:	5a 95       	dec	r21
    4f26:	a9 f7       	brne	.-22     	; 0x4f12 <__udivmodhi4_loop>
    4f28:	80 95       	com	r24
    4f2a:	90 95       	com	r25
    4f2c:	bc 01       	movw	r22, r24
    4f2e:	cd 01       	movw	r24, r26
    4f30:	08 95       	ret

00004f32 <__udivmodsi4>:
    4f32:	a1 e2       	ldi	r26, 0x21	; 33
    4f34:	1a 2e       	mov	r1, r26
    4f36:	aa 1b       	sub	r26, r26
    4f38:	bb 1b       	sub	r27, r27
    4f3a:	fd 01       	movw	r30, r26
    4f3c:	0d c0       	rjmp	.+26     	; 0x4f58 <__udivmodsi4_ep>

00004f3e <__udivmodsi4_loop>:
    4f3e:	aa 1f       	adc	r26, r26
    4f40:	bb 1f       	adc	r27, r27
    4f42:	ee 1f       	adc	r30, r30
    4f44:	ff 1f       	adc	r31, r31
    4f46:	a2 17       	cp	r26, r18
    4f48:	b3 07       	cpc	r27, r19
    4f4a:	e4 07       	cpc	r30, r20
    4f4c:	f5 07       	cpc	r31, r21
    4f4e:	20 f0       	brcs	.+8      	; 0x4f58 <__udivmodsi4_ep>
    4f50:	a2 1b       	sub	r26, r18
    4f52:	b3 0b       	sbc	r27, r19
    4f54:	e4 0b       	sbc	r30, r20
    4f56:	f5 0b       	sbc	r31, r21

00004f58 <__udivmodsi4_ep>:
    4f58:	66 1f       	adc	r22, r22
    4f5a:	77 1f       	adc	r23, r23
    4f5c:	88 1f       	adc	r24, r24
    4f5e:	99 1f       	adc	r25, r25
    4f60:	1a 94       	dec	r1
    4f62:	69 f7       	brne	.-38     	; 0x4f3e <__udivmodsi4_loop>
    4f64:	60 95       	com	r22
    4f66:	70 95       	com	r23
    4f68:	80 95       	com	r24
    4f6a:	90 95       	com	r25
    4f6c:	9b 01       	movw	r18, r22
    4f6e:	ac 01       	movw	r20, r24
    4f70:	bd 01       	movw	r22, r26
    4f72:	cf 01       	movw	r24, r30
    4f74:	08 95       	ret

00004f76 <__divmodsi4>:
    4f76:	97 fb       	bst	r25, 7
    4f78:	09 2e       	mov	r0, r25
    4f7a:	05 26       	eor	r0, r21
    4f7c:	0e d0       	rcall	.+28     	; 0x4f9a <__divmodsi4_neg1>
    4f7e:	57 fd       	sbrc	r21, 7
    4f80:	04 d0       	rcall	.+8      	; 0x4f8a <__divmodsi4_neg2>
    4f82:	d7 df       	rcall	.-82     	; 0x4f32 <__udivmodsi4>
    4f84:	0a d0       	rcall	.+20     	; 0x4f9a <__divmodsi4_neg1>
    4f86:	00 1c       	adc	r0, r0
    4f88:	38 f4       	brcc	.+14     	; 0x4f98 <__divmodsi4_exit>

00004f8a <__divmodsi4_neg2>:
    4f8a:	50 95       	com	r21
    4f8c:	40 95       	com	r20
    4f8e:	30 95       	com	r19
    4f90:	21 95       	neg	r18
    4f92:	3f 4f       	sbci	r19, 0xFF	; 255
    4f94:	4f 4f       	sbci	r20, 0xFF	; 255
    4f96:	5f 4f       	sbci	r21, 0xFF	; 255

00004f98 <__divmodsi4_exit>:
    4f98:	08 95       	ret

00004f9a <__divmodsi4_neg1>:
    4f9a:	f6 f7       	brtc	.-4      	; 0x4f98 <__divmodsi4_exit>
    4f9c:	90 95       	com	r25
    4f9e:	80 95       	com	r24
    4fa0:	70 95       	com	r23
    4fa2:	61 95       	neg	r22
    4fa4:	7f 4f       	sbci	r23, 0xFF	; 255
    4fa6:	8f 4f       	sbci	r24, 0xFF	; 255
    4fa8:	9f 4f       	sbci	r25, 0xFF	; 255
    4faa:	08 95       	ret

00004fac <__prologue_saves__>:
    4fac:	2f 92       	push	r2
    4fae:	3f 92       	push	r3
    4fb0:	4f 92       	push	r4
    4fb2:	5f 92       	push	r5
    4fb4:	6f 92       	push	r6
    4fb6:	7f 92       	push	r7
    4fb8:	8f 92       	push	r8
    4fba:	9f 92       	push	r9
    4fbc:	af 92       	push	r10
    4fbe:	bf 92       	push	r11
    4fc0:	cf 92       	push	r12
    4fc2:	df 92       	push	r13
    4fc4:	ef 92       	push	r14
    4fc6:	ff 92       	push	r15
    4fc8:	0f 93       	push	r16
    4fca:	1f 93       	push	r17
    4fcc:	cf 93       	push	r28
    4fce:	df 93       	push	r29
    4fd0:	cd b7       	in	r28, 0x3d	; 61
    4fd2:	de b7       	in	r29, 0x3e	; 62
    4fd4:	ca 1b       	sub	r28, r26
    4fd6:	db 0b       	sbc	r29, r27
    4fd8:	0f b6       	in	r0, 0x3f	; 63
    4fda:	f8 94       	cli
    4fdc:	de bf       	out	0x3e, r29	; 62
    4fde:	0f be       	out	0x3f, r0	; 63
    4fe0:	cd bf       	out	0x3d, r28	; 61
    4fe2:	09 94       	ijmp

00004fe4 <__epilogue_restores__>:
    4fe4:	2a 88       	ldd	r2, Y+18	; 0x12
    4fe6:	39 88       	ldd	r3, Y+17	; 0x11
    4fe8:	48 88       	ldd	r4, Y+16	; 0x10
    4fea:	5f 84       	ldd	r5, Y+15	; 0x0f
    4fec:	6e 84       	ldd	r6, Y+14	; 0x0e
    4fee:	7d 84       	ldd	r7, Y+13	; 0x0d
    4ff0:	8c 84       	ldd	r8, Y+12	; 0x0c
    4ff2:	9b 84       	ldd	r9, Y+11	; 0x0b
    4ff4:	aa 84       	ldd	r10, Y+10	; 0x0a
    4ff6:	b9 84       	ldd	r11, Y+9	; 0x09
    4ff8:	c8 84       	ldd	r12, Y+8	; 0x08
    4ffa:	df 80       	ldd	r13, Y+7	; 0x07
    4ffc:	ee 80       	ldd	r14, Y+6	; 0x06
    4ffe:	fd 80       	ldd	r15, Y+5	; 0x05
    5000:	0c 81       	ldd	r16, Y+4	; 0x04
    5002:	1b 81       	ldd	r17, Y+3	; 0x03
    5004:	aa 81       	ldd	r26, Y+2	; 0x02
    5006:	b9 81       	ldd	r27, Y+1	; 0x01
    5008:	ce 0f       	add	r28, r30
    500a:	d1 1d       	adc	r29, r1
    500c:	0f b6       	in	r0, 0x3f	; 63
    500e:	f8 94       	cli
    5010:	de bf       	out	0x3e, r29	; 62
    5012:	0f be       	out	0x3f, r0	; 63
    5014:	cd bf       	out	0x3d, r28	; 61
    5016:	ed 01       	movw	r28, r26
    5018:	08 95       	ret

0000501a <_exit>:
    501a:	f8 94       	cli

0000501c <__stop_program>:
    501c:	ff cf       	rjmp	.-2      	; 0x501c <__stop_program>
